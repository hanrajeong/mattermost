{"version":3,"file":"5930.d47cc82b08bd4deef812.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/actions/channel_bookmarks.ts","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/actions/channel_bookmarks.ts","webpack://mattermost-webapp/./src/actions/views/channel_sidebar.ts","webpack://mattermost-webapp/./src/components/searchable_channel_list.tsx","webpack://mattermost-webapp/./src/components/browse_channels/browse_channels.tsx","webpack://mattermost-webapp/./src/components/browse_channels/index.ts","webpack://mattermost-webapp/./src/components/channel_bookmarks/utils.ts","webpack://mattermost-webapp/./src/components/channel_move_to_sub_menu/index.tsx","webpack://mattermost-webapp/./src/components/edit_category_modal/edit_category_modal.tsx","webpack://mattermost-webapp/./src/components/edit_category_modal/index.ts","webpack://mattermost-webapp/./src/components/leave_team_modal/leave_team_modal.tsx","webpack://mattermost-webapp/./src/components/leave_team_modal/index.ts","webpack://mattermost-webapp/./src/components/list_modal.tsx","webpack://mattermost-webapp/./src/components/search_shortcut/search_shortcut.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/create_new_category_menu_item.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/mark_as_read_confirm_modal.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/mark_as_read_menu_item.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/sidebar_category_generic_menu.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category_header.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/channel_mention_badge.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/channel_pencil_icon/channel_pencil_icon.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/channel_pencil_icon/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_icon/sidebar_channel_icon.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_menu/sidebar_channel_menu.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_menu/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_link/sidebar_channel_link.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_link/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_base_channel/sidebar_base_channel_icon.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_base_channel/sidebar_base_channel.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_base_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_direct_channel/sidebar_direct_channel.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_direct_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_group_channel/sidebar_group_channel.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_group_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel.tsx","webpack://mattermost-webapp/./src/components/team_controller/actions/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/channel_identifier_router/actions.ts","webpack://mattermost-webapp/./src/components/dynamic_virtualized_list/item_measurer.jsx","webpack://mattermost-webapp/./src/components/dynamic_virtualized_list/index.jsx","webpack://mattermost-webapp/./src/components/center_message_lock/index.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/channel_intro_private_svg.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/channel_intro_public_svg.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/channel_intro_town_square_svg.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/add_members_button.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/pluggable_intro_buttons/pluggable_intro_buttons.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/pluggable_intro_buttons/index.ts","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/channel_intro_message.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/index.ts","webpack://mattermost-webapp/./src/components/post_view/post_list_row/post_list_row.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list_row/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/scroll_to_bottom_icon.tsx","webpack://mattermost-webapp/./src/components/post_view/scroll_to_bottom_arrows.tsx","webpack://mattermost-webapp/./src/components/hint-toast/hint_toast.tsx","webpack://mattermost-webapp/./src/components/scroll_to_bottom_toast/scroll_to_bottom_toast.tsx","webpack://mattermost-webapp/./src/components/scroll_to_bottom_toast/index.tsx","webpack://mattermost-webapp/./src/components/toast_wrapper/toast_wrapper.tsx","webpack://mattermost-webapp/./src/components/toast_wrapper/index.ts","webpack://mattermost-webapp/./src/components/post_view/post_list_virtualized/latest_post_reader.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list_virtualized/post_list_virtualized.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list/post_list.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list/index.tsx","webpack://mattermost-webapp/./src/components/post_view/post_view.tsx","webpack://mattermost-webapp/./src/components/post_view/index.ts","webpack://mattermost-webapp/./src/components/channel_view/input_loading.tsx","webpack://mattermost-webapp/./src/components/channel_view/channel_view.tsx","webpack://mattermost-webapp/./src/components/channel_view/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/channel_identifier_router/channel_identifier_router.tsx","webpack://mattermost-webapp/./src/components/channel_layout/channel_identifier_router/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/center_channel/center_channel.tsx","webpack://mattermost-webapp/./src/components/channel_layout/center_channel/index.ts","webpack://mattermost-webapp/./src/components/query_param_actions/query_param_action_controller.tsx","webpack://mattermost-webapp/./src/components/data_prefetch/actions.ts","webpack://mattermost-webapp/./src/components/data_prefetch/data_prefetch.tsx","webpack://mattermost-webapp/./src/components/data_prefetch/index.ts","webpack://mattermost-webapp/./src/components/resizable_sidebar/resizable_lhs/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_header/sidebar_team_menu.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_header/sidebar_header.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_header/index.ts","webpack://mattermost-webapp/./src/components/quick_switch_modal/quick_switch_modal.tsx","webpack://mattermost-webapp/./src/components/quick_switch_modal/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/channel_filter/channel_filter.tsx","webpack://mattermost-webapp/./src/components/sidebar/channel_filter/index.ts","webpack://mattermost-webapp/./src/components/sidebar/channel_navigator/channel_navigator.tsx","webpack://mattermost-webapp/./src/components/sidebar/channel_navigator/index.ts","webpack://mattermost-webapp/./src/components/delete_category_modal/delete_category_modal.tsx","webpack://mattermost-webapp/./src/components/delete_category_modal/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_sorting_menu.tsx","webpack://mattermost-webapp/./src/selectors/views/add_channel_dropdown.ts","webpack://mattermost-webapp/./src/components/sidebar/add_channels_cta_button.tsx","webpack://mattermost-webapp/./src/actions/views/add_channel_dropdown.ts","webpack://mattermost-webapp/./src/components/sidebar/invite_members_button.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_list/sidebar_list.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_list/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar.tsx","webpack://mattermost-webapp/./src/components/sidebar/index.ts","webpack://mattermost-webapp/./src/components/threading/channel_threads/posts_channel_reset_watcher/posts_channel_reset_watcher.tsx","webpack://mattermost-webapp/./src/components/unreads_status_handler/unreads_status_handler.tsx","webpack://mattermost-webapp/./src/components/unreads_status_handler/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/channel_controller.tsx","webpack://mattermost-webapp/./src/components/team_controller/team_controller.tsx","webpack://mattermost-webapp/./src/components/common/hooks/useTelemetryIdentifySync.tsx","webpack://mattermost-webapp/./src/components/team_controller/index.ts","webpack://mattermost-webapp/./src/components/team_groups_manage_modal/team_groups_manage_modal.tsx","webpack://mattermost-webapp/./src/components/team_groups_manage_modal/index.ts","webpack://mattermost-webapp/./src/components/team_members_dropdown/team_members_dropdown.tsx","webpack://mattermost-webapp/./src/components/team_members_dropdown/index.ts","webpack://mattermost-webapp/./src/components/member_list_team/member_list_team.tsx","webpack://mattermost-webapp/./src/components/member_list_team/index.ts","webpack://mattermost-webapp/./src/components/team_members_modal/team_members_modal.tsx","webpack://mattermost-webapp/./src/components/team_members_modal/index.ts","webpack://mattermost-webapp/./src/components/common/select_text_input/select_text_input.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_access_tab/allowed_domains_select.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_access_tab/invite_section_input.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_access_tab/open_invite.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_access_tab/team_access_tab.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_access_tab/index.ts","webpack://mattermost-webapp/./src/components/team_settings/team_info_tab/team_description_section.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_info_tab/team_name_section.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_info_tab/team_picture_section.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_info_tab/team_info_tab.tsx","webpack://mattermost-webapp/./src/components/team_settings/team_info_tab/index.ts","webpack://mattermost-webapp/./src/components/team_settings/team_settings.tsx","webpack://mattermost-webapp/./src/components/team_settings/index.ts","webpack://mattermost-webapp/./src/components/team_settings_modal/team_settings_modal.tsx","webpack://mattermost-webapp/./src/components/team_settings_modal/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/fa_edit_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/modals/components/save_changes_panel.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/selectors/entities/channel_bookmarks.ts","webpack://mattermost-webapp/./src/selectors/lhs.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChannelBookmark, ChannelBookmarkCreate, ChannelBookmarkPatch} from '@mattermost/types/channel_bookmarks';\n\nimport * as Actions from 'mattermost-redux/actions/channel_bookmarks';\n\nimport {getConnectionId} from 'selectors/general';\n\nimport type {ActionFuncAsync} from 'types/store';\n\nexport function deleteBookmark(channelId: string, id: string): ActionFuncAsync<boolean> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const connectionId = getConnectionId(state);\n        return dispatch(Actions.deleteBookmark(channelId, id, connectionId));\n    };\n}\n\nexport function createBookmark(channelId: string, bookmark: ChannelBookmarkCreate): ActionFuncAsync<boolean> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const connectionId = getConnectionId(state);\n        return dispatch(Actions.createBookmark(channelId, bookmark, connectionId));\n    };\n}\n\nexport function editBookmark(channelId: string, id: string, patch: ChannelBookmarkPatch): ActionFuncAsync<boolean> {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const connectionId = getConnectionId(state);\n        return dispatch(Actions.editBookmark(channelId, id, patch, connectionId));\n    };\n}\n\nexport function reorderBookmark(channelId: string, id: string, newOrder: number): ActionFuncAsync<boolean> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const connectionId = getConnectionId(state);\n        return dispatch(Actions.reorderBookmark(channelId, id, newOrder, connectionId));\n    };\n}\n\nexport function fetchChannelBookmarks(channelId: string): ActionFuncAsync<ChannelBookmark[]> {\n    return Actions.fetchChannelBookmarks(channelId);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChannelBookmark, ChannelBookmarkCreate, ChannelBookmarkPatch} from '@mattermost/types/channel_bookmarks';\n\nimport {ChannelBookmarkTypes} from 'mattermost-redux/action_types';\nimport {Client4} from 'mattermost-redux/client';\nimport {getChannelBookmark} from 'mattermost-redux/selectors/entities/channel_bookmarks';\nimport type {ActionFuncAsync, DispatchFunc} from 'mattermost-redux/types/actions';\n\nimport {logError} from './errors';\nimport {forceLogoutIfNecessary} from './helpers';\n\nexport function deleteBookmark(channelId: string, id: string, connectionId: string): ActionFuncAsync<boolean> {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const bookmark = getChannelBookmark(state, channelId, id);\n\n        try {\n            await Client4.deleteChannelBookmark(channelId, id, connectionId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.BOOKMARK_DELETED,\n                data: bookmark,\n            });\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function createBookmark(channelId: string, bookmark: ChannelBookmarkCreate, connectionId: string): ActionFuncAsync<boolean> {\n    return async (dispatch: DispatchFunc) => {\n        try {\n            const createdBookmark = await Client4.createChannelBookmark(channelId, bookmark, connectionId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.RECEIVED_BOOKMARK,\n                data: createdBookmark,\n            });\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function editBookmark(channelId: string, id: string, patch: ChannelBookmarkPatch, connectionId: string): ActionFuncAsync<boolean> {\n    return async (dispatch: DispatchFunc) => {\n        try {\n            const {updated, deleted} = await Client4.updateChannelBookmark(channelId, id, patch, connectionId);\n\n            if (updated) {\n                dispatch({\n                    type: ChannelBookmarkTypes.RECEIVED_BOOKMARK,\n                    data: updated,\n                });\n            }\n\n            if (deleted) {\n                dispatch({\n                    type: ChannelBookmarkTypes.BOOKMARK_DELETED,\n                    data: deleted,\n                });\n            }\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function reorderBookmark(channelId: string, id: string, newOrder: number, connectionId: string): ActionFuncAsync<boolean> {\n    return async (dispatch: DispatchFunc) => {\n        try {\n            const bookmarks = await Client4.updateChannelBookmarkSortOrder(channelId, id, newOrder, connectionId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.RECEIVED_BOOKMARKS,\n                data: {channelId, bookmarks},\n            });\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function fetchChannelBookmarks(channelId: string): ActionFuncAsync<ChannelBookmark[]> {\n    return async (dispatch, getState) => {\n        let bookmarks;\n        try {\n            bookmarks = await Client4.getChannelBookmarks(channelId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.RECEIVED_BOOKMARKS,\n                data: {channelId, bookmarks},\n            });\n        } catch (error) {\n            forceLogoutIfNecessary(error, dispatch, getState);\n            dispatch(logError(error));\n            return {error};\n        }\n\n        return {data: bookmarks};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createCategory as createCategoryRedux, moveChannelsToCategory} from 'mattermost-redux/actions/channel_categories';\nimport {General} from 'mattermost-redux/constants';\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {getCategory, makeGetChannelIdsForCategory} from 'mattermost-redux/selectors/entities/channel_categories';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {insertMultipleWithoutDuplicates} from 'mattermost-redux/utils/array_utils';\n\nimport {getCategoriesForCurrentTeam, getChannelsInCategoryOrder, getDisplayedChannels} from 'selectors/views/channel_sidebar';\n\nimport {ActionTypes} from 'utils/constants';\n\nimport type {ActionFunc, ActionFuncAsync, DraggingState, GlobalState} from 'types/store';\n\nexport function setUnreadFilterEnabled(enabled: boolean) {\n    return {\n        type: ActionTypes.SET_UNREAD_FILTER_ENABLED,\n        enabled,\n    };\n}\n\nexport function setDraggingState(data: DraggingState) {\n    return {\n        type: ActionTypes.SIDEBAR_DRAGGING_SET_STATE,\n        data,\n    };\n}\n\nexport function stopDragging() {\n    return {type: ActionTypes.SIDEBAR_DRAGGING_STOP};\n}\n\nexport function createCategory(teamId: string, displayName: string, channelIds?: string[]): ActionFuncAsync<unknown> {\n    return async (dispatch, getState) => {\n        if (channelIds) {\n            const state = getState();\n            const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n            channelIds.forEach((channelId) => {\n                if (multiSelectedChannelIds.indexOf(channelId) >= 0) {\n                    dispatch(multiSelectChannelAdd(channelId));\n                }\n            });\n        }\n\n        const result = await dispatch(createCategoryRedux(teamId, displayName, channelIds));\n        return dispatch({\n            type: ActionTypes.ADD_NEW_CATEGORY_ID,\n            data: result.data!.id,\n        });\n    };\n}\n\n// addChannelsInSidebar moves channels to a given category without specifying the order in the sidebar, so the channels\n// will always go to the first position in the category\nexport function addChannelsInSidebar(categoryId: string, channelId: string) {\n    return moveChannelsInSidebar(categoryId, 0, channelId, false);\n}\n\n// moveChannelsInSidebar moves channels to a given category in the sidebar, but it accounts for when the target index\n// may have changed due to archived channels not being shown in the sidebar.\nexport function moveChannelsInSidebar(categoryId: string, targetIndex: number, draggableChannelId: string, setManualSorting = true): ActionFuncAsync<unknown> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n        let channelIds = [];\n\n        // Multi channel case\n        if (multiSelectedChannelIds.length && multiSelectedChannelIds.indexOf(draggableChannelId) !== -1) {\n            const categories = getCategoriesForCurrentTeam(state);\n            const displayedChannels = getDisplayedChannels(state);\n\n            let channelsToMove = [draggableChannelId];\n\n            // Filter out channels that can't go in the category specified\n            const targetCategory = categories.find((category) => category.id === categoryId);\n            channelsToMove = multiSelectedChannelIds.filter((channelId) => {\n                const selectedChannel = displayedChannels.find((channel) => channelId === channel.id);\n                const isDMGM = selectedChannel?.type === General.DM_CHANNEL || selectedChannel?.type === General.GM_CHANNEL;\n                return targetCategory?.type === CategoryTypes.CUSTOM || targetCategory?.type === CategoryTypes.FAVORITES || (isDMGM && targetCategory?.type === CategoryTypes.DIRECT_MESSAGES) || (!isDMGM && targetCategory?.type !== CategoryTypes.DIRECT_MESSAGES);\n            });\n\n            // Reorder such that the channels move in the order that they appear in the sidebar\n            const displayedChannelIds = displayedChannels.map((channel) => channel.id);\n            channelsToMove.sort((a, b) => displayedChannelIds.indexOf(a) - displayedChannelIds.indexOf(b));\n\n            // Remove selection from channels that were moved\n            channelsToMove.forEach((channelId) => dispatch(multiSelectChannelAdd(channelId)));\n            channelIds = channelsToMove;\n        } else {\n            channelIds = [draggableChannelId];\n        }\n\n        const newIndex = adjustTargetIndexForMove(state, categoryId, channelIds, targetIndex, draggableChannelId);\n        return dispatch(moveChannelsToCategory(categoryId, channelIds, newIndex, setManualSorting));\n    };\n}\n\nexport function adjustTargetIndexForMove(state: GlobalState, categoryId: string, channelIds: string[], targetIndex: number, draggableChannelId: string) {\n    if (targetIndex === 0) {\n        // The channel is being placed first, so there's nothing above that could affect the index\n        return 0;\n    }\n\n    const category = getCategory(state, categoryId);\n    const filteredChannelIds = makeGetChannelIdsForCategory()(state, category);\n\n    // When dragging multiple channels, we don't actually remove all of them from the list as react-beautiful-dnd doesn't support that\n    // Account for channels removed above the insert point, except the one currently being dragged which is already accounted for by react-beautiful-dnd\n    const removedChannelsAboveInsert = filteredChannelIds.filter((channel, index) => channel !== draggableChannelId && channelIds.indexOf(channel) !== -1 && index <= targetIndex);\n    const shiftedIndex = targetIndex - removedChannelsAboveInsert.length;\n\n    if (category.channel_ids.length === filteredChannelIds.length) {\n        // There are no archived channels in the category, so the shiftedIndex will be correct\n        return shiftedIndex;\n    }\n\n    const updatedChannelIds = insertMultipleWithoutDuplicates(filteredChannelIds, channelIds, shiftedIndex);\n\n    // After \"moving\" the channel in the sidebar, find what channel comes above it\n    const previousChannelId = updatedChannelIds[updatedChannelIds.indexOf(channelIds[0]) - 1];\n\n    // We want the channel to still be below that channel, so place the new index below it\n    let newIndex = category.channel_ids.indexOf(previousChannelId) + 1;\n\n    // If the channel is moving downwards, then the target index will need to be reduced by one to account for\n    // the channel being removed. For example, if we're moving channelA from [channelA, channelB, channelC] to\n    // [channelB, channelA, channelC], newIndex would currently be 2 (which comes after channelB), but we need\n    // it to be 1 (which comes after channelB once channelA is removed).\n    const sourceIndex = category.channel_ids.indexOf(channelIds[0]);\n    if (sourceIndex !== -1 && sourceIndex < newIndex) {\n        newIndex -= 1;\n    }\n\n    return Math.max(newIndex - removedChannelsAboveInsert.length, 0);\n}\n\nexport function clearChannelSelection(): ActionFunc<unknown> {\n    return (dispatch, getState) => {\n        const state = getState();\n\n        if (state.views.channelSidebar.multiSelectedChannelIds.length === 0) {\n            // No selection to clear\n            return {data: false};\n        }\n\n        dispatch({\n            type: ActionTypes.MULTISELECT_CHANNEL_CLEAR,\n        });\n\n        return {data: true};\n    };\n}\n\nexport function multiSelectChannelAdd(channelId: string): ActionFunc<unknown> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n\n        // Nothing already selected, so we include the active channel\n        if (!multiSelectedChannelIds.length) {\n            const currentChannel = getCurrentChannelId(state);\n            dispatch({\n                type: ActionTypes.MULTISELECT_CHANNEL,\n                data: currentChannel,\n            });\n        }\n\n        return dispatch({\n            type: ActionTypes.MULTISELECT_CHANNEL_ADD,\n            data: channelId,\n        });\n    };\n}\n\n// Much of this logic was pulled from the react-beautiful-dnd sample multiselect implementation\n// Found here: https://github.com/atlassian/react-beautiful-dnd/tree/master/stories/src/multi-drag\nexport function multiSelectChannelTo(channelId: string): ActionFunc<unknown> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n        let lastSelected = state.views.channelSidebar.lastSelectedChannel;\n\n        // Nothing already selected, so start with the active channel\n        if (!multiSelectedChannelIds.length) {\n            const currentChannel = getCurrentChannelId(state);\n            dispatch({\n                type: ActionTypes.MULTISELECT_CHANNEL,\n                data: currentChannel,\n            });\n            lastSelected = currentChannel;\n        }\n\n        const allChannelsIdsInOrder = getChannelsInCategoryOrder(state).map((channel) => channel.id);\n        const indexOfNew: number = allChannelsIdsInOrder.indexOf(channelId);\n        const indexOfLast: number = allChannelsIdsInOrder.indexOf(lastSelected);\n\n        // multi selecting in the same column\n        // need to select everything between the last index and the current index inclusive\n\n        // nothing to do here\n        if (indexOfNew === indexOfLast) {\n            return {data: false};\n        }\n\n        const start: number = Math.min(indexOfLast, indexOfNew);\n        const end: number = Math.max(indexOfLast, indexOfNew);\n\n        const inBetween = allChannelsIdsInOrder.slice(start, end + 1);\n\n        // everything inbetween needs to have it's selection toggled.\n        // with the exception of the start and end values which will always be selected\n\n        return dispatch({\n            type: ActionTypes.MULTISELECT_CHANNEL_TO,\n            data: inBetween,\n        });\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage, defineMessages, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport {ArchiveOutlineIcon, CheckIcon, ChevronDownIcon, GlobeIcon, LockOutlineIcon, AccountOutlineIcon, GlobeCheckedIcon} from '@mattermost/compass-icons/components';\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {isPrivateChannel} from 'mattermost-redux/utils/channel_utils';\n\nimport MagnifyingGlassSVG from 'components/common/svg_images_components/magnifying_glass_svg';\nimport LoadingScreen from 'components/loading_screen';\nimport * as Menu from 'components/menu';\nimport QuickInput from 'components/quick_input';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport * as UserAgent from 'utils/user_agent';\n\nimport type {FilterType} from './browse_channels/browse_channels';\nimport {Filter} from './browse_channels/browse_channels';\n\nconst NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500;\n\ninterface Props extends WrappedComponentProps {\n    channels: Channel[];\n    channelsPerPage: number;\n    nextPage: (page: number) => void;\n    isSearch: boolean;\n    search: (term: string) => void;\n    handleJoin: (channel: Channel, done: () => void) => void;\n    noResultsText: JSX.Element;\n    changeFilter: (filter: FilterType) => void;\n    filter: FilterType;\n    myChannelMemberships: RelationOneToOne<Channel, ChannelMembership>;\n    closeModal: (modalId: string) => void;\n    hideJoinedChannelsPreference: (shouldHideJoinedChannels: boolean) => void;\n    rememberHideJoinedChannelsChecked: boolean;\n    canShowArchivedChannels?: boolean;\n    loading?: boolean;\n    channelsMemberCount?: Record<string, number>;\n}\n\ntype State = {\n    joiningChannel: string;\n    page: number;\n    nextDisabled: boolean;\n    channelSearchValue: string;\n    isSearch?: boolean;\n}\n\nexport class SearchableChannelList extends React.PureComponent<Props, State> {\n    private nextTimeoutId: number | NodeJS.Timeout;\n    private filter: React.RefObject<HTMLInputElement>;\n    private channelListScroll: React.RefObject<HTMLDivElement>;\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        return {isSearch: props.isSearch, page: props.isSearch && !state.isSearch ? 0 : state.page};\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false,\n            channelSearchValue: '',\n        };\n\n        this.filter = React.createRef();\n        this.channelListScroll = React.createRef();\n    }\n\n    componentDidMount() {\n        // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n        if (!UserAgent.isMobile() && this.filter.current) {\n            this.filter.current.focus();\n        }\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e: KeyboardEvent) => {\n        const target = e.target as HTMLElement;\n        const isEnterKeyPressed = isKeyPressed(e, Constants.KeyCodes.ENTER);\n        if (isEnterKeyPressed && (e.shiftKey || e.ctrlKey || e.altKey)) {\n            return;\n        }\n        if (isEnterKeyPressed && target?.classList.contains('more-modal__row')) {\n            target.click();\n        }\n    };\n\n    handleJoin = (channel: Channel, e: React.MouseEvent) => {\n        e.stopPropagation();\n        this.setState({joiningChannel: channel.id});\n        this.props.handleJoin(\n            channel,\n            () => {\n                this.setState({joiningChannel: ''});\n            },\n        );\n        if (this.isMemberOfChannel(channel.id)) {\n            this.props.closeModal(ModalIdentifiers.MORE_CHANNELS);\n        }\n    };\n\n    isMemberOfChannel(channelId: string) {\n        return this.props.myChannelMemberships[channelId];\n    }\n\n    createChannelRow = (channel: Channel) => {\n        const ariaLabel = `${channel.display_name}, ${channel.purpose}`.toLowerCase();\n        let channelTypeIcon;\n\n        if (isArchivedChannel(channel)) {\n            channelTypeIcon = <ArchiveOutlineIcon size={18}/>;\n        } else if (isPrivateChannel(channel)) {\n            channelTypeIcon = <LockOutlineIcon size={18}/>;\n        } else {\n            channelTypeIcon = <GlobeIcon size={18}/>;\n        }\n        let memberCount = 0;\n        if (this.props.channelsMemberCount?.[channel.id]) {\n            memberCount = this.props.channelsMemberCount[channel.id];\n        }\n\n        const membershipIndicator = this.isMemberOfChannel(channel.id) ? (\n            <div\n                id='membershipIndicatorContainer'\n                aria-label={this.props.intl.formatMessage({id: 'more_channels.membership_indicator', defaultMessage: 'Membership Indicator: Joined'})}\n            >\n                <CheckIcon size={14}/>\n                <FormattedMessage\n                    id={'more_channels.joined'}\n                    defaultMessage={'Joined'}\n                />\n            </div>\n        ) : null;\n\n        const channelPurposeContainerAriaLabel = this.props.intl.formatMessage(\n            messages.channelPurpose,\n            {memberCount, channelPurpose: channel.purpose || ''},\n        );\n\n        const channelPurposeContainer = (\n            <div\n                id='channelPurposeContainer'\n                aria-label={channelPurposeContainerAriaLabel}\n            >\n                {membershipIndicator}\n                {membershipIndicator ? <span className='dot'/> : null}\n                <AccountOutlineIcon size={14}/>\n                <span data-testid={`channelMemberCount-${channel.name}`} >{memberCount}</span>\n                {channel.purpose.length > 0 ? <span className='dot'/> : null}\n                <span className='more-modal__description'>{channel.purpose}</span>\n            </div>\n        );\n\n        const joinViewChannelButtonClass = classNames('btn btn-sm', {\n            'btn-secondary outlineButton': this.isMemberOfChannel(channel.id),\n            'btn-primary primaryButton': !this.isMemberOfChannel(channel.id),\n        });\n\n        const joinViewChannelButton = (\n            <button\n                id='joinViewChannelButton'\n                onClick={(e) => this.handleJoin(channel, e)}\n                className={joinViewChannelButtonClass}\n                disabled={Boolean(this.state.joiningChannel)}\n                tabIndex={-1}\n                aria-label={this.isMemberOfChannel(channel.id) ? this.props.intl.formatMessage({id: 'more_channels.view', defaultMessage: 'View'}) : this.props.intl.formatMessage({id: 'joinChannel.JoinButton', defaultMessage: 'Join'})}\n            >\n                <LoadingWrapper\n                    loading={this.state.joiningChannel === channel.id}\n                    text={messages.joiningButton}\n                >\n                    <FormattedMessage\n                        id={this.isMemberOfChannel(channel.id) ? 'more_channels.view' : 'joinChannel.JoinButton'}\n                        defaultMessage={this.isMemberOfChannel(channel.id) ? 'View' : 'Join'}\n                    />\n                </LoadingWrapper>\n            </button>\n        );\n\n        const sharedChannelIcon = channel.shared ? (\n            <SharedChannelIndicator\n                className='shared-channel-icon'\n                withTooltip={true}\n            />\n        ) : null;\n\n        return (\n            <div\n                className='more-modal__row'\n                key={channel.id}\n                id={`ChannelRow-${channel.name}`}\n                data-testid={`ChannelRow-${channel.name}`}\n                aria-label={ariaLabel}\n                onClick={(e) => this.handleJoin(channel, e)}\n                tabIndex={0}\n            >\n                <div className='more-modal__details'>\n                    <div className='style--none more-modal__name'>\n                        {channelTypeIcon}\n                        <span id='channelName'>{channel.display_name}</span>\n                        {sharedChannelIcon}\n                    </div>\n                    {channelPurposeContainer}\n                </div>\n                <div className='more-modal__actions'>\n                    {joinViewChannelButton}\n                    {this.state.joiningChannel === channel.id && !this.isMemberOfChannel(channel.id) && (\n                        <span\n                            className='sr-only'\n                            role='alert'\n                        >\n                            <FormattedMessage\n                                id='more_channels.joinedChannel'\n                                defaultMessage='Joined channel {channelName}'\n                                values={{\n                                    channelName: channel.display_name,\n                                }}\n                            />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    };\n\n    nextPage = (e: React.MouseEvent) => {\n        e.preventDefault();\n        this.setState({page: this.state.page + 1, nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n        this.props.nextPage(this.state.page + 1);\n        this.channelListScroll.current?.scrollTo({top: 0});\n    };\n\n    previousPage = (e: React.MouseEvent) => {\n        e.preventDefault();\n        this.setState({page: this.state.page - 1});\n        this.channelListScroll.current?.scrollTo({top: 0});\n    };\n\n    doSearch = () => {\n        this.props.search(this.state.channelSearchValue);\n        if (this.state.channelSearchValue === '') {\n            this.setState({page: 0});\n        }\n    };\n    filterChange = (filterType: FilterType) => {\n        this.props.changeFilter(filterType);\n        if (this.props.filter !== filterType) {\n            this.setState({page: 0});\n        }\n    };\n    handleChange = (e?: React.FormEvent<HTMLInputElement>) => {\n        if (e?.currentTarget) {\n            this.setState({channelSearchValue: e?.currentTarget.value}, () => this.doSearch());\n        }\n    };\n    handleClear = () => {\n        this.setState({channelSearchValue: ''}, () => this.doSearch());\n    };\n    handleChecked = () => {\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (this.props.rememberHideJoinedChannelsChecked) {\n            this.props.hideJoinedChannelsPreference(false);\n        } else {\n            this.props.hideJoinedChannelsPreference(true);\n        }\n    };\n    getEmptyStateMessage = () => {\n        if (this.state.channelSearchValue.length > 0) {\n            return (\n                <FormattedMessage\n                    id='more_channels.noMore'\n                    tagName='strong'\n                    defaultMessage='No results for {text}'\n                    values={{text: this.state.channelSearchValue}}\n                />\n            );\n        }\n        switch (this.props.filter) {\n        case Filter.Archived:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noArchived'}\n                    tagName='strong'\n                    defaultMessage={'No archived channels'}\n                />\n            );\n        case Filter.Private:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noPrivate'}\n                    tagName='strong'\n                    defaultMessage={'No private channels'}\n                />\n            );\n        case Filter.Public:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noPublic'}\n                    tagName='strong'\n                    defaultMessage={'No public channels'}\n                />\n            );\n        default:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noChannels'}\n                    tagName='strong'\n                    defaultMessage={'No channels'}\n                />\n            );\n        }\n    };\n    getFilterLabel = () => {\n        switch (this.props.filter) {\n        case Filter.Archived:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_archived_channels'\n                    defaultMessage='Channel Type: Archived'\n                />\n            );\n        case Filter.Public:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_public_channels'\n                    defaultMessage='Channel Type: Public'\n                />\n            );\n        case Filter.Private:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_private_channels'\n                    defaultMessage='Channel Type: Private'\n                />\n            );\n        default:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_all_channels'\n                    defaultMessage='Channel Type: All'\n                />\n            );\n        }\n    };\n\n    render() {\n        const channels = this.props.channels;\n        let listContent;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.loading && channels.length === 0) {\n            listContent = <LoadingScreen/>;\n        } else if (channels.length === 0) {\n            listContent = (\n                <div\n                    className='no-channel-message'\n                    aria-label={this.state.channelSearchValue.length > 0 ? this.props.intl.formatMessage(messages.noMore, {text: this.state.channelSearchValue}) : this.props.intl.formatMessage({id: 'widgets.channels_input.empty', defaultMessage: 'No channels found'})\n                    }\n                >\n                    <MagnifyingGlassSVG/>\n                    <h3 className='primary-message'>\n                        {this.getEmptyStateMessage()}\n                    </h3>\n                    {this.props.noResultsText}\n                </div>\n            );\n        } else {\n            const pageStart = this.state.page * this.props.channelsPerPage;\n            const pageEnd = pageStart + this.props.channelsPerPage;\n            const channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n            listContent = channelsToDisplay.map(this.createChannelRow);\n\n            if (channelsToDisplay.length >= this.props.channelsPerPage && pageEnd < this.props.channels.length) {\n                nextButton = (\n                    <button\n                        className='btn btn-sm btn-tertiary filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                        aria-label={this.props.intl.formatMessage({id: 'more_channels.next', defaultMessage: 'Next'})}\n                    >\n                        <FormattedMessage\n                            id='more_channels.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-sm btn-tertiary filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                        aria-label={this.props.intl.formatMessage({id: 'more_channels.prev', defaultMessage: 'Previous'})}\n                    >\n                        <FormattedMessage\n                            id='more_channels.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        const input = (\n            <div className='filter-row filter-row--full'>\n                <span\n                    id='searchIcon'\n                    aria-hidden='true'\n                >\n                    <i className='icon icon-magnify'/>\n                </span>\n                <QuickInput\n                    id='searchChannelsTextbox'\n                    ref={this.filter}\n                    className='form-control filter-textbox'\n                    placeholder={this.props.intl.formatMessage({id: 'filtered_channels_list.search', defaultMessage: 'Search channels'})}\n                    onInput={this.handleChange}\n                    clearable={true}\n                    onClear={this.handleClear}\n                    value={this.state.channelSearchValue}\n                    aria-label={this.props.intl.formatMessage({id: 'filtered_channels_list.search', defaultMessage: 'Search Channels'})}\n                />\n            </div>\n        );\n\n        const checkIcon = (\n            <CheckIcon\n                size={18}\n                color={'var(--button-bg)'}\n            />\n        );\n        const channelDropdownItems = [\n            <Menu.Item\n                key='channelsMoreDropdownAll'\n                id='channelsMoreDropdownAll'\n                onClick={() => this.filterChange(Filter.All)}\n                leadingElement={<GlobeCheckedIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.all'\n                        defaultMessage='All channel types'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.All ? checkIcon : null}\n                aria-label={this.props.intl.formatMessage({id: 'suggestion.all', defaultMessage: 'All channel types'})}\n            />,\n            <Menu.Item\n                key='channelsMoreDropdownPublic'\n                id='channelsMoreDropdownPublic'\n                onClick={() => this.filterChange(Filter.Public)}\n                leadingElement={<GlobeIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.public'\n                        defaultMessage='Public channels'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.Public ? checkIcon : null}\n                aria-label={this.props.intl.formatMessage({id: 'suggestion.public', defaultMessage: 'Public channels'})}\n            />,\n            <Menu.Item\n                key='channelsMoreDropdownPrivate'\n                id='channelsMoreDropdownPrivate'\n                onClick={() => this.filterChange(Filter.Private)}\n                leadingElement={<LockOutlineIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.private'\n                        defaultMessage='Private channels'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.Private ? checkIcon : null}\n                aria-label={this.props.intl.formatMessage({id: 'suggestion.private', defaultMessage: 'Private channels'})}\n            />,\n        ];\n\n        if (this.props.canShowArchivedChannels) {\n            channelDropdownItems.push(\n                <Menu.Separator key='channelsMoreDropdownSeparator'/>,\n                <Menu.Item\n                    key='channelsMoreDropdownArchived'\n                    id='channelsMoreDropdownArchived'\n                    onClick={() => this.filterChange(Filter.Archived)}\n                    leadingElement={<ArchiveOutlineIcon size={16}/>}\n                    labels={\n                        <FormattedMessage\n                            id='suggestion.archive'\n                            defaultMessage='Archived channels'\n                        />\n                    }\n                    trailingElements={this.props.filter === Filter.Archived ? checkIcon : null}\n                    aria-label={this.props.intl.formatMessage({id: 'suggestion.archive', defaultMessage: 'Archived channels'})}\n                />,\n            );\n        }\n        const menuButton = (\n            <>\n                {this.getFilterLabel()}\n                <ChevronDownIcon\n                    color={'rgba(var(--center-channel-color-rgb), 0.64)'}\n                    size={16}\n                />\n            </>\n        );\n        const channelDropdown = (\n            <Menu.Container\n                menuButton={{\n                    id: 'menuWrapper',\n                    children: menuButton,\n                }}\n                menu={{\n                    id: 'browseChannelsDropdown',\n                    'aria-label': this.props.intl.formatMessage({id: 'more_channels.title', defaultMessage: 'Browse channels'}),\n                }}\n            >\n                {channelDropdownItems.map((item) => item)}\n            </Menu.Container >\n        );\n\n        const hideJoinedButtonClass = classNames('get-app__checkbox', {checked: this.props.rememberHideJoinedChannelsChecked});\n        const hideJoinedPreferenceCheckbox = (\n            <div\n                id={'hideJoinedPreferenceCheckbox'}\n                onClick={this.handleChecked}\n                onKeyDown={(e) => {\n                    e.stopPropagation();\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        this.handleChecked();\n                    }\n                }}\n                role='checkbox'\n                aria-checked={this.props.rememberHideJoinedChannelsChecked}\n                aria-label={this.props.intl.formatMessage({id: 'more_channels.hide_joined_channels', defaultMessage: 'Hide joined channels'})}\n                tabIndex={0}\n            >\n                <div className={hideJoinedButtonClass}>\n                    {this.props.rememberHideJoinedChannelsChecked ? <CheckboxCheckedIcon/> : null}\n                </div>\n                <FormattedMessage\n                    id='more_channels.hide_joined'\n                    defaultMessage='Hide Joined'\n                />\n            </div>\n        );\n\n        let channelCountLabel;\n        if (channels.length === 0) {\n            channelCountLabel = this.props.intl.formatMessage({id: 'more_channels.count_zero', defaultMessage: '0 Results'});\n        } else if (channels.length === 1) {\n            channelCountLabel = this.props.intl.formatMessage({id: 'more_channels.count_one', defaultMessage: '1 Result'});\n        } else if (channels.length > 1) {\n            channelCountLabel = this.props.intl.formatMessage(messages.channelCount, {count: channels.length});\n        } else {\n            channelCountLabel = this.props.intl.formatMessage({id: 'more_channels.count_zero', defaultMessage: '0 Results'});\n        }\n\n        const dropDownContainer = (\n            <div className='more-modal__dropdown'>\n                <span id='channelCountLabel'>{channelCountLabel}</span>\n                {this.props.isSearch &&\n                    <span\n                        className='sr-only'\n                        role='status'\n                        aria-live='polite'\n                    >\n                        {channelCountLabel}\n                    </span>\n                }\n                <div id='modalPreferenceContainer'>\n                    {channelDropdown}\n                    {hideJoinedPreferenceCheckbox}\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='filtered-user-list'>\n                {input}\n                {dropDownContainer}\n                <div\n                    role='search'\n                    className='more-modal__list'\n                    tabIndex={-1}\n                >\n                    <div\n                        id='moreChannelsList'\n                        tabIndex={-1}\n                        ref={this.channelListScroll}\n                    >\n                        {listContent}\n                    </div>\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    channelCount: {\n        id: 'more_channels.count',\n        defaultMessage: '{count} Results',\n    },\n    channelPurpose: {\n        id: 'more_channels.channel_purpose',\n        defaultMessage: 'Channel Information: Membership Indicator: Joined, Member count {memberCount} , Purpose: {channelPurpose}',\n    },\n    joiningButton: {\n        id: 'joinChannel.joiningButton',\n        defaultMessage: 'Joining...',\n    },\n    noMore: {\n        id: 'more_channels.noMore',\n        defaultMessage: 'No results for {text}',\n    },\n});\n\nexport default injectIntl(SearchableChannelList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel, ChannelMembership, ChannelSearchOpts, ChannelsWithTotalCount} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport LoadingScreen from 'components/loading_screen';\nimport NewChannelModal from 'components/new_channel_modal/new_channel_modal';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport SearchableChannelList from 'components/searchable_channel_list';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants, {ModalIdentifiers, RHSStates, StoragePrefixes} from 'utils/constants';\nimport {getRelativeChannelURL} from 'utils/url';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\nimport type {RhsState} from 'types/store/rhs';\n\nimport './browse_channels.scss';\n\nconst CHANNELS_CHUNK_SIZE = 50;\nconst CHANNELS_PER_PAGE = 50;\nconst SEARCH_TIMEOUT_MILLISECONDS = 100;\nexport enum Filter {\n    All = 'All',\n    Public = 'Public',\n    Private = 'Private',\n    Archived = 'Archived',\n}\n\nexport type FilterType = keyof typeof Filter;\n\ntype Actions = {\n    getChannels: (teamId: string, page: number, perPage: number) => Promise<ActionResult<Channel[]>>;\n    getArchivedChannels: (teamId: string, page: number, channelsPerPage: number) => Promise<ActionResult<Channel[]>>;\n    joinChannel: (currentUserId: string, teamId: string, channelId: string) => Promise<ActionResult>;\n    searchAllChannels: (term: string, opts?: ChannelSearchOpts) => Promise<ActionResult<Channel[] | ChannelsWithTotalCount>>;\n    openModal: <P>(modalData: ModalData<P>) => void;\n    closeModal: (modalId: string) => void;\n\n    /*\n     * Function to set a key-value pair in the local storage\n     */\n    setGlobalItem: (name: string, value: string) => void;\n    closeRightHandSide: () => void;\n    getChannelsMemberCount: (channelIds: string[]) => Promise<ActionResult>;\n}\n\nexport type Props = {\n    channels: Channel[];\n    archivedChannels: Channel[];\n    privateChannels: Channel[];\n    currentUserId: string;\n    teamId: string;\n    teamName?: string;\n    channelsRequestStarted?: boolean;\n    canShowArchivedChannels?: boolean;\n    myChannelMemberships: RelationOneToOne<Channel, ChannelMembership>;\n    shouldHideJoinedChannels: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n    channelsMemberCount?: Record<string, number>;\n    actions: Actions;\n}\n\ntype State = {\n    loading: boolean;\n    filter: FilterType;\n    search: boolean;\n    searchedChannels: Channel[];\n    serverError: React.ReactNode | string;\n    searching: boolean;\n    searchTerm: string;\n}\n\nexport default class BrowseChannels extends React.PureComponent<Props, State> {\n    public searchTimeoutId: number;\n    activeChannels: Channel[] = [];\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n            filter: Filter.All,\n            search: false,\n            searchedChannels: [],\n            serverError: null,\n            searching: false,\n            searchTerm: '',\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.teamId) {\n            this.loadComplete();\n            return;\n        }\n\n        const promises = [\n            this.props.actions.getChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2),\n        ];\n\n        if (this.props.canShowArchivedChannels) {\n            promises.push(this.props.actions.getArchivedChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2));\n        }\n\n        Promise.all(promises).then((results) => {\n            const channelIDsForMemberCount = results.flatMap((result) => {\n                return result.data ? result.data.map((channel) => channel.id) : [];\n            },\n            );\n            this.props.privateChannels.forEach((channel) => channelIDsForMemberCount.push(channel.id));\n            if (channelIDsForMemberCount.length > 0) {\n                this.props.actions.getChannelsMemberCount(channelIDsForMemberCount);\n            }\n        });\n        this.loadComplete();\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    };\n\n    handleNewChannel = () => {\n        this.handleExit();\n        this.closeEditRHS();\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n            dialogType: NewChannelModal,\n        });\n    };\n\n    handleExit = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MORE_CHANNELS);\n    };\n\n    closeEditRHS = () => {\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n    };\n\n    onChange = (force: boolean) => {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        this.setState({\n            searchedChannels: [],\n            serverError: null,\n        });\n    };\n\n    nextPage = (page: number) => {\n        this.props.actions.getChannels(this.props.teamId, page + 1, CHANNELS_PER_PAGE).then((result) => {\n            if (result.data && result.data.length > 0) {\n                this.props.actions.getChannelsMemberCount(result.data.map((channel) => channel.id));\n            }\n        });\n    };\n\n    handleJoin = async (channel: Channel, done: () => void) => {\n        const {actions, currentUserId, teamId, teamName} = this.props;\n        let result;\n\n        if (!this.isMemberOfChannel(channel.id)) {\n            result = await actions.joinChannel(currentUserId, teamId, channel.id);\n        }\n\n        if (result?.error) {\n            this.setState({serverError: result.error.message});\n        } else {\n            this.props.actions.getChannelsMemberCount([channel.id]);\n            getHistory().push(getRelativeChannelURL(teamName!, channel.name));\n            this.closeEditRHS();\n        }\n\n        if (done) {\n            done();\n        }\n    };\n\n    search = (term: string) => {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false, searchedChannels: [], searching: false, searchTerm: term});\n            this.searchTimeoutId = 0;\n            return;\n        }\n        this.setState({search: true, searching: true, searchTerm: term});\n\n        const searchTimeoutId = window.setTimeout(\n            async () => {\n                try {\n                    const {data} = await this.props.actions.searchAllChannels(term, {team_ids: [this.props.teamId], nonAdminSearch: true, include_deleted: true}) as ActionResult<Channel[]>;\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    if (data) {\n                        const channelIDsForMemberCount = data.map((channel: Channel) => channel.id);\n                        if (channelIDsForMemberCount.length > 0) {\n                            this.props.actions.getChannelsMemberCount(channelIDsForMemberCount);\n                        }\n                        this.setSearchResults(data.filter((channel) => channel.team_id === this.props.teamId));\n                    } else {\n                        this.setState({searchedChannels: [], searching: false});\n                    }\n                } catch (ignoredErr) {\n                    this.setState({searchedChannels: [], searching: false});\n                }\n            },\n            SEARCH_TIMEOUT_MILLISECONDS,\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    };\n\n    setSearchResults = (channels: Channel[]) => {\n        // filter out private channels that the user is not a member of\n        let searchedChannels = channels.filter((c) => c.type !== Constants.PRIVATE_CHANNEL || this.isMemberOfChannel(c.id));\n        if (this.state.filter === Filter.Private) {\n            searchedChannels = channels.filter((c) => c.type === Constants.PRIVATE_CHANNEL && this.isMemberOfChannel(c.id));\n        }\n        if (this.state.filter === Filter.Public) {\n            searchedChannels = channels.filter((c) => c.type === Constants.OPEN_CHANNEL && c.delete_at === 0);\n        }\n        if (this.state.filter === Filter.Archived) {\n            searchedChannels = channels.filter((c) => c.delete_at !== 0);\n        }\n        if (this.props.shouldHideJoinedChannels) {\n            searchedChannels = this.getChannelsWithoutJoined(searchedChannels);\n        }\n        this.setState({searchedChannels, searching: false});\n    };\n\n    changeFilter = (filter: FilterType) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.setState({filter});\n    };\n\n    isMemberOfChannel(channelId: string) {\n        return this.props.myChannelMemberships[channelId];\n    }\n\n    handleShowJoinedChannelsPreference = (shouldHideJoinedChannels: boolean) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.props.actions.setGlobalItem(StoragePrefixes.HIDE_JOINED_CHANNELS, shouldHideJoinedChannels.toString());\n    };\n\n    getChannelsWithoutJoined = (channelList: Channel[]) => channelList.filter((channel) => !this.isMemberOfChannel(channel.id));\n\n    getActiveChannels = () => {\n        const {channels, archivedChannels, shouldHideJoinedChannels, privateChannels} = this.props;\n        const {search, searchedChannels, filter} = this.state;\n\n        const allChannels = channels.concat(privateChannels).sort((a, b) => a.display_name.localeCompare(b.display_name));\n        const allChannelsWithoutJoined = this.getChannelsWithoutJoined(allChannels);\n        const publicChannelsWithoutJoined = this.getChannelsWithoutJoined(channels);\n        const archivedChannelsWithoutJoined = this.getChannelsWithoutJoined(archivedChannels);\n        const privateChannelsWithoutJoined = this.getChannelsWithoutJoined(privateChannels);\n\n        const filterOptions = {\n            [Filter.All]: shouldHideJoinedChannels ? allChannelsWithoutJoined : allChannels,\n            [Filter.Archived]: shouldHideJoinedChannels ? archivedChannelsWithoutJoined : archivedChannels,\n            [Filter.Private]: shouldHideJoinedChannels ? privateChannelsWithoutJoined : privateChannels,\n            [Filter.Public]: shouldHideJoinedChannels ? publicChannelsWithoutJoined : channels,\n        };\n\n        if (search) {\n            return searchedChannels;\n        }\n\n        return filterOptions[filter] || filterOptions[Filter.All];\n    };\n\n    render() {\n        const {teamId, channelsRequestStarted, shouldHideJoinedChannels} = this.props;\n        const {search, serverError: serverErrorState, searching} = this.state;\n\n        this.activeChannels = this.getActiveChannels();\n\n        let serverError;\n        if (serverErrorState) {\n            serverError =\n                <div className='form-group has-error'><label className='control-label'>{serverErrorState}</label></div>;\n        }\n\n        const createNewChannelButton = (className: string, icon?: JSX.Element) => {\n            const buttonClassName = classNames('btn', className);\n            return (\n                <TeamPermissionGate\n                    teamId={teamId}\n                    permissions={[Permissions.CREATE_PUBLIC_CHANNEL]}\n                >\n                    <button\n                        type='button'\n                        id='createNewChannelButton'\n                        className={buttonClassName}\n                        onClick={this.handleNewChannel}\n                        aria-label={localizeMessage({id: 'more_channels.create', defaultMessage: 'Create New Channel'})}\n                    >\n                        {icon}\n                        <FormattedMessage\n                            id='more_channels.create'\n                            defaultMessage='Create New Channel'\n                        />\n                    </button>\n                </TeamPermissionGate>\n            );\n        };\n\n        const noResultsText = (\n            <>\n                <p className='secondary-message'>\n                    <FormattedMessage\n                        id='more_channels.searchError'\n                        defaultMessage='Try searching different keywords, checking for typos or adjusting the filters.'\n                    />\n                </p>\n                {createNewChannelButton('btn-primary', <i className='icon-plus'/>)}\n            </>\n        );\n\n        const body = this.state.loading ? <LoadingScreen/> : (\n            <>\n                <SearchableChannelList\n                    channels={this.activeChannels}\n                    channelsPerPage={CHANNELS_PER_PAGE}\n                    nextPage={this.nextPage}\n                    isSearch={search}\n                    search={this.search}\n                    handleJoin={this.handleJoin}\n                    noResultsText={noResultsText}\n                    loading={search ? searching : channelsRequestStarted}\n                    changeFilter={this.changeFilter}\n                    filter={this.state.filter}\n                    canShowArchivedChannels={this.props.canShowArchivedChannels}\n                    myChannelMemberships={this.props.myChannelMemberships}\n                    closeModal={this.props.actions.closeModal}\n                    hideJoinedChannelsPreference={this.handleShowJoinedChannelsPreference}\n                    rememberHideJoinedChannelsChecked={shouldHideJoinedChannels}\n                    channelsMemberCount={this.props.channelsMemberCount}\n                />\n                {serverError}\n            </>\n        );\n\n        const title = (\n            <FormattedMessage\n                id='more_channels.title'\n                defaultMessage='Browse Channels'\n            />\n        );\n\n        return (\n            <GenericModal\n                id='browseChannelsModal'\n                onExited={this.handleExit}\n                compassDesign={true}\n                modalHeaderText={title}\n                headerButton={createNewChannelButton('btn-secondary btn-sm')}\n                autoCloseOnConfirmButton={false}\n                aria-modal={true}\n                enforceFocus={false}\n                bodyPadding={false}\n            >\n                {body}\n            </GenericModal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getChannels, getArchivedChannels, joinChannel, getChannelsMemberCount, searchAllChannels} from 'mattermost-redux/actions/channels';\nimport {RequestStatus} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getChannelsInCurrentTeam, getMyChannelMemberships, getChannelsMemberCount as getChannelsMemberCountSelector} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {makeGetGlobalItem} from 'selectors/storage';\n\nimport Constants, {StoragePrefixes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport BrowseChannels from './browse_channels';\n\nconst getChannelsWithoutArchived = createSelector(\n    'getChannelsWithoutArchived',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.delete_at === 0 && c.type !== Constants.PRIVATE_CHANNEL),\n);\n\nconst getArchivedOtherChannels = createSelector(\n    'getArchivedOtherChannels',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.delete_at !== 0),\n);\n\nconst getPrivateChannelsSelector = createSelector(\n    'getPrivateChannelsSelector',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.type === Constants.PRIVATE_CHANNEL),\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const team = getCurrentTeam(state);\n    const getGlobalItem = makeGetGlobalItem(StoragePrefixes.HIDE_JOINED_CHANNELS, 'false');\n\n    return {\n        channels: getChannelsWithoutArchived(state) || [],\n        archivedChannels: getArchivedOtherChannels(state) || [],\n        privateChannels: getPrivateChannelsSelector(state) || [],\n        currentUserId: getCurrentUserId(state),\n        teamId: getCurrentTeamId(state),\n        teamName: team?.name,\n        channelsRequestStarted: state.requests.channels.getChannels.status === RequestStatus.STARTED,\n        canShowArchivedChannels: (getConfig(state).ExperimentalViewArchivedChannels === 'true'),\n        myChannelMemberships: getMyChannelMemberships(state) || {},\n        shouldHideJoinedChannels: getGlobalItem(state) === 'true',\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n        channelsMemberCount: getChannelsMemberCountSelector(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannels,\n            getArchivedChannels,\n            joinChannel,\n            searchAllChannels,\n            openModal,\n            closeModal,\n            setGlobalItem,\n            closeRightHandSide,\n            getChannelsMemberCount,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowseChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect, useMemo, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getChannelBookmarks} from 'mattermost-redux/selectors/entities/channel_bookmarks';\nimport {getChannel, getMyChannelMember} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig, getFeatureFlagValue, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {insertWithoutDuplicates} from 'mattermost-redux/utils/array_utils';\n\nimport {fetchChannelBookmarks, reorderBookmark} from 'actions/channel_bookmarks';\nimport {loadCustomEmojisIfNeeded} from 'actions/emoji_actions';\n\nimport Constants from 'utils/constants';\nimport {trimmedEmojiName} from 'utils/emoji_utils';\nimport {canUploadFiles, isPublicLinksEnabled} from 'utils/file_utils';\n\nexport const MAX_BOOKMARKS_PER_CHANNEL = 50;\n\nconst {OPEN_CHANNEL, PRIVATE_CHANNEL, GM_CHANNEL, DM_CHANNEL} = Constants as {OPEN_CHANNEL: 'O'; PRIVATE_CHANNEL: 'P'; GM_CHANNEL: 'G'; DM_CHANNEL: 'D'};\n\ntype TAction = 'add' | 'edit' | 'delete' | 'order';\ntype TActionKey = `${TAction}${typeof OPEN_CHANNEL | typeof PRIVATE_CHANNEL}`;\n\nconst key = (a: TAction, c: typeof OPEN_CHANNEL | typeof PRIVATE_CHANNEL): TActionKey => {\n    return `${a}${c}`;\n};\n\nconst BOOKMARK_PERMISSION = {\n\n    // open channel\n    [key('add', OPEN_CHANNEL)]: Permissions.ADD_BOOKMARK_PUBLIC_CHANNEL,\n    [key('edit', OPEN_CHANNEL)]: Permissions.EDIT_BOOKMARK_PUBLIC_CHANNEL,\n    [key('delete', OPEN_CHANNEL)]: Permissions.DELETE_BOOKMARK_PUBLIC_CHANNEL,\n    [key('order', OPEN_CHANNEL)]: Permissions.ORDER_BOOKMARK_PUBLIC_CHANNEL,\n\n    // private channel\n    [key('add', PRIVATE_CHANNEL)]: Permissions.ADD_BOOKMARK_PRIVATE_CHANNEL,\n    [key('edit', PRIVATE_CHANNEL)]: Permissions.EDIT_BOOKMARK_PRIVATE_CHANNEL,\n    [key('delete', PRIVATE_CHANNEL)]: Permissions.DELETE_BOOKMARK_PRIVATE_CHANNEL,\n    [key('order', PRIVATE_CHANNEL)]: Permissions.ORDER_BOOKMARK_PRIVATE_CHANNEL,\n} as const;\n\nexport const useChannelBookmarkPermission = (channelId: string, action: TAction) => {\n    return useSelector((state: GlobalState) => getHaveIChannelBookmarkPermission(state, channelId, action));\n};\n\nexport const getHaveIChannelBookmarkPermission = (state: GlobalState, channelId: string, action: TAction) => {\n    const channel: Channel | undefined = getChannel(state, channelId);\n\n    if (!channel) {\n        return false;\n    }\n\n    if (channel.delete_at !== 0) {\n        return false;\n    }\n\n    const {type} = channel;\n\n    if (type === 'threads') {\n        return false;\n    }\n\n    if (type === GM_CHANNEL || type === DM_CHANNEL) {\n        const myMembership = getMyChannelMember(state, channelId);\n        return myMembership?.channel_id === channelId;\n    }\n\n    const permission = BOOKMARK_PERMISSION[key(action, type)];\n\n    return channel && permission && haveIChannelPermission(state, channel.team_id, channelId, permission);\n};\n\nexport const useCanUploadFiles = () => {\n    return useSelector((state: GlobalState) => canUploadFiles(getConfig(state)));\n};\n\nexport const useCanGetPublicLink = () => {\n    return useSelector((state: GlobalState) => isPublicLinksEnabled(getConfig(state)));\n};\n\nexport const useCanGetLinkPreviews = () => {\n    return useSelector((state: GlobalState) => getConfig(state).EnableLinkPreviews === 'true');\n};\n\nexport const getIsChannelBookmarksEnabled = (state: GlobalState) => {\n    const isEnabled = getFeatureFlagValue(state, 'ChannelBookmarks') === 'true';\n\n    if (!isEnabled) {\n        return false;\n    }\n\n    const license = getLicense(state);\n\n    return license?.IsLicensed === 'true';\n};\n\nexport const useChannelBookmarks = (channelId: string) => {\n    const dispatch = useDispatch();\n    const bookmarks = useSelector((state: GlobalState) => getChannelBookmarks(state, channelId));\n\n    const order = useMemo(() => {\n        return Object.keys(bookmarks).sort((a, b) => bookmarks[a].sort_order - bookmarks[b].sort_order);\n    }, [bookmarks]);\n    const [tempOrder, setTempOrder] = useState<typeof order>();\n\n    useEffect(() => {\n        if (tempOrder) {\n            setTempOrder(undefined);\n        }\n    }, [order]);\n\n    useEffect(() => {\n        if (channelId) {\n            dispatch(fetchChannelBookmarks(channelId));\n        }\n    }, [channelId]);\n\n    useEffect(() => {\n        const emojis = Object.values(bookmarks).reduce<string[]>((result, {emoji}) => {\n            if (emoji) {\n                result.push(trimmedEmojiName(emoji));\n            }\n\n            return result;\n        }, []);\n\n        if (emojis.length) {\n            dispatch(loadCustomEmojisIfNeeded(emojis));\n        }\n    }, [bookmarks]);\n\n    const reorder = async (id: string, prevOrder: number, nextOrder: number) => {\n        setTempOrder(insertWithoutDuplicates(order, id, nextOrder));\n        const {error} = await dispatch(reorderBookmark(channelId, id, nextOrder));\n\n        if (error) {\n            setTempOrder(undefined);\n        }\n    };\n\n    return {\n        bookmarks,\n        order: tempOrder ?? order,\n        reorder,\n    } as const;\n};\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    FolderOutlineIcon,\n    StarOutlineIcon,\n    FolderMoveOutlineIcon,\n    ChevronRightIcon,\n    CheckIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {getCategoryInTeamWithChannel} from 'mattermost-redux/selectors/entities/channel_categories';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {addChannelsInSidebar} from 'actions/views/channel_sidebar';\nimport {openModal} from 'actions/views/modals';\nimport {getCategoriesForCurrentTeam} from 'selectors/views/channel_sidebar';\n\nimport EditCategoryModal from 'components/edit_category_modal';\nimport * as Menu from 'components/menu';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\ntype Props = {\n    channel: Channel;\n    inHeaderDropdown?: boolean;\n};\n\nconst ChannelMoveToSubMenu = (props: Props) => {\n    const {formatMessage} = useIntl();\n\n    const dispatch = useDispatch();\n\n    const allChannels = useSelector(getAllChannels);\n    const multiSelectedChannelIds = useSelector((state: GlobalState) => state.views.channelSidebar.multiSelectedChannelIds);\n\n    const currentTeam = useSelector(getCurrentTeam);\n    const categories = useSelector((state: GlobalState) => {\n        return currentTeam ? getCategoriesForCurrentTeam(state) : undefined;\n    });\n    const currentCategory = useSelector((state: GlobalState) => {\n        return currentTeam ? getCategoryInTeamWithChannel(state, currentTeam?.id || '', props.channel.id) : undefined;\n    });\n\n    function handleMoveToCategory(event: MouseEvent<HTMLLIElement> | KeyboardEvent<HTMLLIElement>, categoryId: string) {\n        event.preventDefault();\n\n        if (currentCategory?.id !== categoryId) {\n            dispatch(addChannelsInSidebar(categoryId, props.channel.id));\n            trackEvent('ui', 'ui_sidebar_channel_menu_moveToExistingCategory');\n        }\n    }\n\n    function handleMoveToNewCategory() {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n            dialogProps: {\n                channelIdsToAdd: multiSelectedChannelIds.indexOf(props.channel.id) === -1 ? [props.channel.id] : multiSelectedChannelIds,\n            },\n        }));\n        trackEvent('ui', 'ui_sidebar_channel_menu_createCategory');\n    }\n\n    function createSubmenuItemsForCategoryArray(categories: ChannelCategory[], currentCategory?: ChannelCategory) {\n        const allCategories = categories.map((category: ChannelCategory) => {\n            let text = <span>{category.display_name}</span>;\n\n            if (category.type === CategoryTypes.FAVORITES) {\n                text = (\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.favorites'\n                        defaultMessage='Favorites'\n                    />\n                );\n            }\n            if (category.type === CategoryTypes.CHANNELS) {\n                text = (\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.channels'\n                        defaultMessage='Channels'\n                    />\n                );\n            }\n\n            let selectedCategory = null;\n            if (currentCategory && currentCategory.display_name === category.display_name) {\n                selectedCategory = (\n                    <CheckIcon\n                        color='var(--button-bg)'\n                        size={18}\n                    />\n                );\n            }\n\n            return (\n                <Menu.Item\n                    id={`moveToCategory-${props.channel.id}-${category.id}`}\n                    key={`moveToCategory-${props.channel.id}-${category.id}`}\n                    leadingElement={category.type === CategoryTypes.FAVORITES ? (<StarOutlineIcon size={18}/>) : (<FolderOutlineIcon size={18}/>)}\n                    labels={text}\n                    trailingElements={selectedCategory}\n                    onClick={(event) => handleMoveToCategory(event, category.id)}\n                />\n            );\n        });\n\n        const dividerAndNewCategory = [\n            <Menu.Separator key='ChannelMenu-moveToDivider'/>,\n            <Menu.Item\n                id={`moveToNewCategory-${props.channel.id}`}\n                key={`moveToNewCategory-${props.channel.id}`}\n                aria-haspopup={true}\n                leadingElement={<FolderMoveOutlineIcon size={18}/>}\n                labels={\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.moveToNewCategory'\n                        defaultMessage='New Category'\n                    />\n                }\n                onClick={handleMoveToNewCategory}\n            />,\n        ];\n\n        return [...allCategories, ...dividerAndNewCategory];\n    }\n\n    function filterCategoriesBasedOnChannelType(categories: ChannelCategory[], isDmOrGm = false) {\n        if (isDmOrGm) {\n            return categories.filter((category) => category.type !== CategoryTypes.CHANNELS);\n        }\n\n        return categories.filter((category) => category.type !== CategoryTypes.DIRECT_MESSAGES);\n    }\n\n    function getMoveToCategorySubmenuItems(categories: ChannelCategory[], currentCategory?: ChannelCategory) {\n        const isSubmenuOneOfSelectedChannels = multiSelectedChannelIds.includes(props.channel.id);\n\n        // If sub menu is in channel header dropdown OR If multiple channels are selected but the menu is open outside of those selected channels\n        if (props.inHeaderDropdown || !isSubmenuOneOfSelectedChannels) {\n            const isDmOrGm = props.channel.type === Constants.DM_CHANNEL || props.channel.type === Constants.GM_CHANNEL;\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, isDmOrGm);\n            return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n        }\n\n        const areAllSelectedChannelsDMorGM = multiSelectedChannelIds.every((channelId) => allChannels[channelId].type === Constants.DM_CHANNEL || allChannels[channelId].type === Constants.GM_CHANNEL);\n        if (areAllSelectedChannelsDMorGM) {\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, true);\n            return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n        }\n\n        const areAllSelectedChannelsAreNotDMorGM = multiSelectedChannelIds.every((channelId) => allChannels[channelId].type !== Constants.DM_CHANNEL && allChannels[channelId].type !== Constants.GM_CHANNEL);\n        if (areAllSelectedChannelsAreNotDMorGM) {\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, false);\n            return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n        }\n\n        // If we have a mix of channel types, we need to filter out both the DM and Channel categories\n        const filteredCategories = categories.filter((category) => category.type !== CategoryTypes.CHANNELS && category.type !== CategoryTypes.DIRECT_MESSAGES);\n        return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n    }\n\n    if (!categories) {\n        return null;\n    }\n\n    return (\n        <Menu.SubMenu\n            id={`moveTo-${props.channel.id}`}\n            labels={\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.moveTo'\n                    defaultMessage='Move to...'\n                />\n            }\n            leadingElement={props.inHeaderDropdown ? null : <FolderMoveOutlineIcon size={18}/>}\n            trailingElements={<ChevronRightIcon size={16}/>}\n            menuId={`moveTo-${props.channel.id}-menu`}\n            menuAriaLabel={formatMessage({id: 'sidebar_left.sidebar_channel_menu.moveTo.dropdownAriaLabel', defaultMessage: 'Move to submenu'})}\n        >\n            {getMoveToCategorySubmenuItems(categories, currentCategory)}\n        </Menu.SubMenu>\n    );\n};\n\nexport default memo(ChannelMoveToSubMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport QuickInput, {MaxLengthInput} from 'components/quick_input';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport '../category_modal.scss';\n\nconst MAX_LENGTH = 22;\nconst ACTION_WAIT_MS = 1000;\n\ntype Props = {\n    onExited: () => void;\n    currentTeamId: string;\n    categoryId?: string;\n    initialCategoryName?: string;\n    channelIdsToAdd?: string[];\n    actions: {\n        createCategory: (teamId: string, displayName: string, channelIds?: string[] | undefined) => void;\n        renameCategory: (categoryId: string, newName: string) => void;\n    };\n};\n\ntype State = {\n    categoryName: string;\n}\n\nexport default class EditCategoryModal extends React.PureComponent<Props, State> {\n    timeoutId: NodeJS.Timeout | null = null;\n    isProcessing = false;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            categoryName: props.initialCategoryName || '',\n        };\n    }\n\n    handleClear = () => {\n        this.setState({categoryName: ''});\n    };\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({categoryName: e.target.value});\n    };\n\n    handleCancel = () => {\n        this.handleClear();\n    };\n\n    componentWillUnmount() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    }\n\n    handleConfirm = () => {\n        if (this.isProcessing) {\n            return;\n        }\n        this.isProcessing = true;\n        this.timeoutId = setTimeout(() => {\n            this.isProcessing = false;\n        }, ACTION_WAIT_MS);\n\n        if (this.props.categoryId) {\n            this.props.actions.renameCategory(this.props.categoryId, this.state.categoryName);\n        } else {\n            this.props.actions.createCategory(this.props.currentTeamId, this.state.categoryName, this.props.channelIdsToAdd);\n            trackEvent('ui', 'ui_sidebar_created_category');\n        }\n    };\n\n    isConfirmDisabled = () => {\n        return !this.state.categoryName ||\n            (Boolean(this.props.initialCategoryName) && this.props.initialCategoryName === this.state.categoryName) || this.state.categoryName.length > MAX_LENGTH;\n    };\n\n    getText = () => {\n        let modalHeaderText;\n        let editButtonText;\n        let helpText;\n\n        if (this.props.categoryId) {\n            modalHeaderText = (\n                <FormattedMessage\n                    id='rename_category_modal.renameCategory'\n                    defaultMessage='Rename Category'\n                />\n            );\n            editButtonText = (\n                <FormattedMessage\n                    id='rename_category_modal.rename'\n                    defaultMessage='Rename'\n                />\n            );\n        } else {\n            modalHeaderText = (\n                <FormattedMessage\n                    id='create_category_modal.createCategory'\n                    defaultMessage='Create New Category'\n                />\n            );\n            editButtonText = (\n                <FormattedMessage\n                    id='create_category_modal.create'\n                    defaultMessage='Create'\n                />\n            );\n            helpText = (\n                <FormattedMessage\n                    id='edit_category_modal.helpText'\n                    defaultMessage='Drag channels into this category to organize your sidebar.'\n                />\n            );\n        }\n\n        return {\n            modalHeaderText,\n            editButtonText,\n            helpText,\n        };\n    };\n\n    render() {\n        const {\n            modalHeaderText,\n            editButtonText,\n            helpText,\n        } = this.getText();\n\n        return (\n            <GenericModal\n                id='editCategoryModal'\n                modalHeaderText={modalHeaderText}\n                confirmButtonText={editButtonText}\n                compassDesign={true}\n                onExited={this.props.onExited}\n                handleEnterKeyPress={this.handleConfirm}\n                handleConfirm={this.handleConfirm}\n                handleCancel={this.handleCancel}\n                isConfirmDisabled={this.isConfirmDisabled()}\n            >\n                <QuickInput\n                    inputComponent={MaxLengthInput}\n                    autoFocus={true}\n                    className='form-control filter-textbox'\n                    type='text'\n                    value={this.state.categoryName}\n                    placeholder={localizeMessage({id: 'edit_category_modal.placeholder', defaultMessage: 'Name your category'})}\n                    clearable={true}\n                    onClear={this.handleClear}\n                    onChange={this.handleChange}\n                    maxLength={MAX_LENGTH}\n                />\n                {Boolean(helpText) && <span className='edit-category__helpText'>\n                    {helpText}\n                </span>}\n            </GenericModal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {renameCategory} from 'mattermost-redux/actions/channel_categories';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {createCategory} from 'actions/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport EditCategoryModal from './edit_category_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            createCategory,\n            renameCategory,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditCategoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\ntype Props = {\n    currentUser: UserProfile;\n    currentUserId: string;\n    currentTeamId: string;\n    numOfPublicChannels: number;\n    numOfPrivateChannels: number;\n    onExited: () => void;\n    actions: {\n        leaveTeam: (teamId: string, userId: string) => void;\n        toggleSideBarRightMenu: () => void;\n    };\n};\n\ntype State = {\n    show: boolean;\n};\n\nexport default class LeaveTeamModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keypress', this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keypress', this.handleKeyPress);\n    }\n\n    handleHide = () => {\n        this.setState({\n            show: false,\n        });\n    };\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.handleSubmit();\n        }\n    };\n\n    handleSubmit = () => {\n        this.handleHide();\n\n        this.props.actions.leaveTeam(\n            this.props.currentTeamId,\n            this.props.currentUserId,\n        );\n        this.props.actions.toggleSideBarRightMenu();\n    };\n\n    render() {\n        const {\n            currentUser,\n            numOfPrivateChannels,\n            numOfPublicChannels,\n        } = this.props;\n\n        const isGuest = UserUtils.isGuest(currentUser.roles);\n\n        let modalMessage;\n        if (isGuest) {\n            if (numOfPublicChannels !== 0 && numOfPrivateChannels !== 0) {\n                modalMessage = (\n                    <FormattedMessage\n                        id='leave_team_modal_guest.description'\n                        defaultMessage='<strong>You will be removed from {num_of_public_channels} public {num_of_public_channels,plural,one {channel} other {channels}} and {num_of_private_channels} private {num_of_private_channels,plural,one {channel} other {channels}} on this team.</strong> You won&apos;t be able to rejoin it without an invitation from another team member. Are you sure?'\n                        values={{\n                            num_of_public_channels: numOfPublicChannels,\n                            num_of_private_channels: numOfPrivateChannels,\n                            strong: (chunks: React.ReactNode) => <strong>{chunks}</strong>,\n                        }}\n                    />\n                );\n            } else if (numOfPublicChannels === 0) {\n                modalMessage = (\n                    <FormattedMessage\n                        id='leave_team_modal_guest_only_private.description'\n                        defaultMessage='<strong>You will be removed from {num_of_private_channels} private {num_of_private_channels,plural,one {channel} other {channels}} on this team.</strong> You won&apos;t be able to rejoin it without an invitation from another team member. Are you sure?'\n                        values={{\n                            num_of_private_channels: numOfPrivateChannels,\n                            strong: (chunks: React.ReactNode) => <strong>{chunks}</strong>,\n                        }}\n                    />\n                );\n            } else {\n                modalMessage = (\n                    <FormattedMessage\n                        id='leave_team_modal_guest_only_public.description'\n                        defaultMessage='<strong>You will be removed from {num_of_public_channels} public {num_of_public_channels,plural,one {channel} other {channels}} on this team.</strong> You won&apos;t be able to rejoin it without an invitation from another team member. Are you sure?'\n                        values={{\n                            num_of_public_channels: numOfPublicChannels,\n                            strong: (chunks: React.ReactNode) => <strong>{chunks}</strong>,\n                        }}\n                    />\n                );\n            }\n        } else if (numOfPublicChannels !== 0 && numOfPrivateChannels !== 0) {\n            modalMessage = (\n                <FormattedMessage\n                    id='leave_team_modal.description'\n                    defaultMessage='<strong>You will be removed from {num_of_public_channels} public {num_of_public_channels,plural,one {channel} other {channels}} and {num_of_private_channels} private {num_of_private_channels,plural,one {channel} other {channels}} on this team.</strong> If the team is private you won&apos;t be able to rejoin it without an invitation from another team member. Are you sure?'\n                    values={{\n                        num_of_public_channels: numOfPublicChannels,\n                        num_of_private_channels: numOfPrivateChannels,\n                        strong: (chunks: React.ReactNode) => <strong>{chunks}</strong>,\n                    }}\n                />\n            );\n        } else if (numOfPublicChannels === 0) {\n            modalMessage = (\n                <FormattedMessage\n                    id='leave_team_modal_private.description'\n                    defaultMessage='<strong>You will be removed from {num_of_private_channels} private {num_of_private_channels,plural,one {channel} other {channels}} on this team.</strong> If the team is private you won&apos;t be able to rejoin it without an invitation from another team member. Are you sure?'\n                    values={{\n                        num_of_private_channels: numOfPrivateChannels,\n                        strong: (chunks: React.ReactNode) => <strong>{chunks}</strong>,\n                    }}\n                />\n            );\n        } else {\n            modalMessage = (\n                <FormattedMessage\n                    id='leave_team_modal_public.description'\n                    defaultMessage='<strong>You will be removed from {num_of_public_channels} public {num_of_public_channels,plural,one {channel} other {channels}} on this team.</strong> Are you sure?'\n                    values={{\n                        num_of_public_channels: numOfPublicChannels,\n                        strong: (chunks: React.ReactNode) => <strong>{chunks}</strong>,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                className='modal-confirm'\n                show={this.state.show}\n                onExited={this.props.onExited}\n                onHide={this.handleHide}\n                id='leaveTeamModal'\n                role='none'\n                aria-labelledby='leaveTeamModalLabel'\n            >\n                <Modal.Header closeButton={false}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='leaveTeamModalLabel'\n                    >\n                        <FormattedMessage\n                            id='leave_team_modal.title'\n                            defaultMessage='Leave the team?'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {modalMessage}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-tertiary'\n                        onClick={this.handleHide}\n                        id='leaveTeamNo'\n                    >\n                        <FormattedMessage\n                            id='leave_team_modal.no'\n                            defaultMessage='No'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        onClick={this.handleSubmit}\n                        id='leaveTeamYes'\n                    >\n                        <FormattedMessage\n                            id='leave_team_modal.yes'\n                            defaultMessage='Yes'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {removeUserFromTeam as leaveTeam} from 'mattermost-redux/actions/teams';\nimport {getMyChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {toggleSideBarRightMenuAction} from 'actions/global_actions';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport LeaveTeamModal from './leave_team_modal';\n\nfunction getNumOfPrivateChannels(state: GlobalState) {\n    const channels = getMyChannels(state);\n\n    return channels.filter((channel) => channel.type === Constants.PRIVATE_CHANNEL).length;\n}\n\nfunction getNumOfPublicChannels(state: GlobalState) {\n    const channels = getMyChannels(state);\n\n    return channels.filter((channel) => channel.type === Constants.OPEN_CHANNEL).length;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const currentUserId = getCurrentUserId(state);\n    const currentTeamId = getCurrentTeamId(state);\n    const currentUser = getCurrentUser(state);\n\n    return {\n        currentUserId,\n        currentTeamId,\n        currentUser,\n        numOfPrivateChannels: getNumOfPrivateChannels(state),\n        numOfPublicChannels: getNumOfPublicChannels(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            leaveTeam,\n            toggleSideBarRightMenu: toggleSideBarRightMenuAction,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeaveTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Group} from '@mattermost/types/groups';\n\nimport LoadingScreen from 'components/loading_screen';\n\nexport const DEFAULT_NUM_PER_PAGE = 50;\n\ntype Props = {\n\n    /**\n     * titleText (optional) a string to show at the top bar of the modal.\n     */\n    titleText?: string;\n\n    /**\n     * searchPlaceholderText (optional) a string to show as a placeholder in the search input.\n     */\n    searchPlaceholderText?: string;\n\n    /**\n     * titleBarButtonText (optional) a string representing a title bar button text.\n     */\n    titleBarButtonText?: string;\n\n    /**\n     * numPerPage (optional) a number setting how many items per page should be displayed. Defaults to\n     * DEFAULT_NUM_PER_PAGE.\n     */\n    numPerPage?: number;\n\n    /**\n     * show (optional) a boolean setting to hide the modal via props rather then unmounting it.\n     */\n    show?: boolean;\n\n    /**\n     * titleBarButtonOnClick (optional) a func to handle title button bar clicks.\n     */\n    titleBarButtonOnClick?: () => void;\n\n    /**\n     * loadItems is a function that receives the params (pageNumber, searchTerm) and should return an object\n     * with the shape {items: [], totalCount: 0}.\n     * items: an array of objects that are passed to each renderRow function.\n     * totalCount: an integer representing the total number of items as displayed in the pagination text.\n     *\n     * Example:\n     *     const loadItems = async (pageNumber, searchTerm) => {\n     *         const {data} = await loadFromServer(searchTerm, pageNumber, PER_PAGE);\n     *         return {\n     *             items: data.users,\n     *             totalCount: data.total,\n     *         };\n     *     };\n     */\n    loadItems: (page: number, searchTerm: string) => Promise<{\n        items: Group[];\n        totalCount: number;\n    }>;\n\n    /**\n     * onHide (optional) a function to be invoked when the modal is closed.\n     */\n    onHide?: () => void;\n\n    /**\n     * renderRow is a function that receives the params (item, listModal) and should return JSX.\n     * item: an object as returned by each entry in the loadItems function's 'items' array.\n     * listModal: the instance of the ListModal component class.\n     *\n     * Example:\n     *     const renderRow = (item, listModal) => <div>{item.id}</div>;\n     */\n    renderRow: (item: Group, listModal: ListModal) => JSX.Element;\n}\n\ntype State = {\n    show: boolean;\n    page: number;\n    items: Group[];\n    totalCount: number;\n    loading: boolean;\n    searchTerm: string;\n}\n\nexport default class ListModal extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        show: true,\n    };\n    numPerPage: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.numPerPage = props.numPerPage || DEFAULT_NUM_PER_PAGE;\n\n        this.state = {\n            show: true,\n            page: 0,\n            items: [],\n            totalCount: 0,\n            loading: true,\n            searchTerm: '',\n        };\n    }\n\n    async componentDidMount() {\n        const {totalCount, items} = await this.props.loadItems(0, '');\n        this.setState({totalCount, items, loading: false});\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    };\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    };\n\n    renderRows() {\n        if (this.state.loading) {\n            return (\n                <div>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n        return this.state.items.map((item) => (\n            this.props.renderRow(item, this)\n        ));\n    }\n\n    onNext = () => {\n        const nextPage = this.state.page + 1;\n        this.onPageChange(nextPage);\n    };\n\n    onPrev = () => {\n        const prevPage = this.state.page - 1;\n        this.onPageChange(prevPage);\n    };\n\n    onPageChange = async (page: number) => {\n        this.setState({loading: true});\n        const result = await this.props.loadItems(page, this.state.searchTerm);\n        this.setState({page, items: result.items, loading: false});\n    };\n\n    onSearchInput = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {target} = event;\n        const searchTerm = target.value;\n        this.setState({loading: true, searchTerm});\n        const result = await this.props.loadItems(0, searchTerm);\n        const {items, totalCount} = result;\n        this.setState({loading: false, items, totalCount});\n    };\n\n    paginationRange() {\n        let startCount = (this.state.page * this.numPerPage) + 1;\n        const endCount = (startCount + this.state.items.length) - 1;\n        if (endCount === 0) {\n            startCount = 0;\n        }\n        return {startCount, endCount};\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        const {endCount, startCount} = this.paginationRange();\n        return (\n            <div>\n                <Modal\n                    dialogClassName='a11y__modal more-modal more-modal--action'\n                    show={this.state.show}\n                    onHide={this.handleHide}\n                    onExited={this.handleExit}\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title componentClass='h1'>\n                            <span className='name'>{this.props.titleText}</span>\n                        </Modal.Title>\n                        {this.props.titleBarButtonText && this.props.titleBarButtonOnClick &&\n                            <a\n                                className='btn btn-md btn-primary'\n                                href='#'\n                                onClick={this.props.titleBarButtonOnClick}\n                            >\n                                {this.props.titleBarButtonText}\n                            </a>}\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='filtered-user-list'>\n                            <div className='filter-row'>\n                                <div className='col-xs-12'>\n                                    <label\n                                        className='hidden-label'\n                                        htmlFor='searchUsersInput'\n                                    >\n                                        {this.props.searchPlaceholderText}\n                                    </label>\n                                    <input\n                                        id='searchUsersInput'\n                                        className='form-control filter-textbox'\n                                        placeholder={this.props.searchPlaceholderText}\n                                        onChange={this.onSearchInput}\n                                    />\n                                </div>\n                                <div className='col-sm-12'>\n                                    <span className='member-count pull-left'>\n                                        <FormattedMessage\n                                            id='list_modal.paginatorCount'\n                                            defaultMessage='{startCount, number} - {endCount, number} of {total, number} total'\n                                            values={{\n                                                startCount,\n                                                endCount,\n                                                total: this.state.totalCount,\n                                            }}\n                                        />\n                                    </span>\n                                </div>\n                            </div>\n                            <div className='more-modal__list'>\n                                <div>\n                                    {this.renderRows()}\n                                </div>\n                            </div>\n                            <div className='filter-controls'>\n                                {this.state.page > 0 &&\n                                <button\n                                    onClick={this.onPrev}\n                                    className='btn btn-sm btn-tertiary filter-control filter-control__prev'\n                                >\n                                    <FormattedMessage\n                                        id='filtered_user_list.prev'\n                                        defaultMessage='Previous'\n                                    />\n                                </button>}\n                                {this.props.numPerPage && (this.state.items.length >= this.props.numPerPage) && endCount !== this.state.totalCount &&\n                                <button\n                                    onClick={this.onNext}\n                                    className='btn btn-sm btn-tertiary filter-control filter-control__next'\n                                >\n                                    <FormattedMessage\n                                        id='filtered_user_list.next'\n                                        defaultMessage='Next'\n                                    />\n                                </button>}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div >\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport {ShortcutKey, ShortcutKeyVariant} from 'components/shortcut_key';\n\nimport {isDesktopApp, isMac} from 'utils/user_agent';\n\nimport './search_shortcut.scss';\n\nexport type SearchShortcutProps = {\n    className?: string;\n    variant?: ShortcutKeyVariant;\n}\n\nexport const SearchShortcut = ({className, variant}: SearchShortcutProps) => {\n    const controlKey = isMac() ? '⌘' : 'Ctrl';\n    const shortcutKeyVariant = variant || ShortcutKeyVariant.Contrast;\n\n    return (\n        <span className={classNames('search-shortcut', className)}>\n            <ShortcutKey variant={shortcutKeyVariant}>{controlKey}</ShortcutKey>\n            {!isDesktopApp() && <ShortcutKey variant={shortcutKeyVariant}>{'Shift'}</ShortcutKey>}\n            <ShortcutKey variant={shortcutKeyVariant}>{'F'}</ShortcutKey>\n        </span>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {FolderPlusOutlineIcon} from '@mattermost/compass-icons/components';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {openModal} from 'actions/views/modals';\n\nimport EditCategoryModal from 'components/edit_category_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    id: string;\n}\n\nconst CreateNewCategoryMenuItem = ({\n    id,\n    ...otherProps\n}: Props) => {\n    const dispatch = useDispatch();\n    const handleCreateCategory = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n        }));\n        trackEvent('ui', 'ui_sidebar_category_menu_createCategory');\n    }, [dispatch]);\n\n    return (\n        <Menu.Item\n            id={`create-${id}`}\n            onClick={handleCreateCategory}\n            aria-haspopup={true}\n            leadingElement={<FolderPlusOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar_left.sidebar_category_menu.createCategory'\n                    defaultMessage='Create New Category'\n                />\n            )}\n            {...otherProps}\n        />\n    );\n};\n\nexport default CreateNewCategoryMenuItem;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\nimport 'components/category_modal.scss';\n\ntype Props = {\n    handleConfirm: () => void;\n    numChannels: number;\n    onExited: () => void;\n};\n\nconst handleCancel = () => null;\n\nconst MarkAsReadConfirmModal = ({\n    handleConfirm,\n    numChannels,\n    onExited,\n}: Props) => {\n    const intl = useIntl();\n\n    const header = intl.formatMessage({id: 'mark_as_read_confirm_modal.header', defaultMessage: 'Mark as read'});\n    const body = intl.formatMessage({id: 'mark_as_read_confirm_modal.body', defaultMessage: 'Are you sure you want to mark {numChannels} channels as read?'}, {numChannels});\n    const confirm = intl.formatMessage({id: 'mark_as_read_confirm_modal.confirm', defaultMessage: 'Mark as read'});\n\n    return (\n        <GenericModal\n            ariaLabel={header}\n            compassDesign={true}\n            modalHeaderText={header}\n            handleConfirm={handleConfirm}\n            handleCancel={handleCancel}\n            onExited={onExited}\n            confirmButtonText={confirm}\n        >\n            <span className='mark-as-read__helpText'>\n                {body}\n            </span>\n        </GenericModal>\n    );\n};\n\nexport default MarkAsReadConfirmModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {MarkAsUnreadIcon} from '@mattermost/compass-icons/components';\n\nimport {openModal} from 'actions/views/modals';\n\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport MarkAsReadConfirmModal from './mark_as_read_confirm_modal';\n\ntype Props = {\n    id: string;\n    handleViewCategory: () => void;\n    numChannels: number;\n}\n\nconst MarkAsUnreadItem = ({\n    id,\n    handleViewCategory,\n    numChannels,\n    ...otherProps\n}: Props) => {\n    const dispatch = useDispatch();\n\n    const onClick = useCallback(() => {\n        if (numChannels <= 0) {\n            return;\n        }\n\n        if (numChannels === 1) {\n            handleViewCategory();\n            return;\n        }\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.DELETE_CATEGORY,\n            dialogType: MarkAsReadConfirmModal,\n            dialogProps: {\n                handleConfirm: handleViewCategory,\n                numChannels,\n            },\n        }));\n    }, [dispatch, handleViewCategory, numChannels]);\n\n    return (\n        <Menu.Item\n            id={`view-${id}`}\n            onClick={onClick}\n            aria-haspopup={numChannels > 1}\n            leadingElement={<MarkAsUnreadIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar_left.sidebar_category_menu.viewCategory'\n                    defaultMessage='Mark category as read'\n                />\n            )}\n            {...otherProps}\n        />\n    );\n};\n\nexport default MarkAsUnreadItem;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {\n    DotsVerticalIcon,\n} from '@mattermost/compass-icons/components';\n\nimport * as Menu from 'components/menu';\n\ntype Props = {\n    id: string;\n    children: React.ReactNode[];\n    name: string;\n};\n\nconst SidebarCategoryGenericMenu = ({\n    id,\n    children,\n    name,\n}: Props) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    const {formatMessage} = useIntl();\n\n    function handleMenuToggle(isOpen: boolean) {\n        setIsMenuOpen(isOpen);\n    }\n\n    return (\n        <div\n            className={classNames(\n                'SidebarMenu',\n                'MenuWrapper',\n                {\n                    'MenuWrapper--open': isMenuOpen,\n                    menuOpen: isMenuOpen,\n                },\n            )}\n        >\n            <Menu.Container\n                menuButton={{\n                    id: `SidebarCategoryMenu-Button-${id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}, {name}),\n                    class: 'SidebarMenu_menuButton',\n                    children: <DotsVerticalIcon size={16}/>,\n                }}\n                menuButtonTooltip={{\n                    text: formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}, {name}),\n                    class: 'hidden-xs',\n                }}\n                menu={{\n                    id: `SidebarChannelMenu-MenuList-${id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.dropdownAriaLabel', defaultMessage: 'Edit category menu'}),\n                    onToggle: handleMenuToggle,\n                }}\n            >\n                {children}\n            </Menu.Container>\n        </div>\n    );\n};\n\nexport default memo(SidebarCategoryGenericMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {DraggableProvidedDragHandleProps} from 'react-beautiful-dnd';\n\nimport {wrapEmojis} from 'utils/emoji_utils';\n\ntype StaticProps = {\n    children?: React.ReactNode;\n    displayName: string;\n}\n\nexport const SidebarCategoryHeaderStatic = React.forwardRef((props: StaticProps, ref?: React.Ref<HTMLDivElement>) => {\n    return (\n        <div className='SidebarChannelGroupHeader SidebarChannelGroupHeader--static'>\n            <div\n                ref={ref}\n                className='SidebarChannelGroupHeader_groupButton'\n            >\n                <div className='SidebarChannelGroupHeader_text'>\n                    {wrapEmojis(props.displayName)}\n                </div>\n                {props.children}\n            </div>\n        </div>\n    );\n});\nSidebarCategoryHeaderStatic.displayName = 'SidebarCategoryHeaderStatic';\n\ntype Props = StaticProps & {\n    dragHandleProps?: DraggableProvidedDragHandleProps;\n    isCollapsed: boolean;\n    isCollapsible: boolean;\n    isDragging?: boolean;\n    isDraggingOver?: boolean;\n    muted: boolean;\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport const SidebarCategoryHeader = React.forwardRef((props: Props, ref?: React.Ref<HTMLButtonElement>) => {\n    const {dragHandleProps} = props;\n\n    // (Accessibility) Ensures interactive controls are not nested as they are not always announced\n    // by screen readers or can cause focus problems for assistive technologies.\n    if (dragHandleProps && dragHandleProps.role) {\n        Reflect.deleteProperty(dragHandleProps, 'role');\n    }\n\n    return (\n        <div\n            className={classNames('SidebarChannelGroupHeader', {\n                muted: props.muted,\n                dragging: props.isDragging,\n            })}\n        >\n            <button\n                ref={ref}\n                className={classNames('SidebarChannelGroupHeader_groupButton')}\n                aria-label={props.displayName}\n                onClick={props.onClick}\n                aria-expanded={!props.isCollapsed}\n            >\n                <i\n                    className={classNames('icon icon-chevron-down', {\n                        'icon-rotate-minus-90': props.isCollapsed,\n                        'hide-arrow': !props.isCollapsible,\n                    })}\n                />\n                <div\n                    className='SidebarChannelGroupHeader_text'\n                    {...dragHandleProps}\n                    tabIndex={-1}\n                >\n                    {wrapEmojis(props.displayName)}\n                </div>\n            </button>\n            {props.children}\n        </div>\n    );\n});\nSidebarCategoryHeader.defaultProps = {\n    isCollapsible: true,\n    isDragging: false,\n    isDraggingOver: false,\n};\nSidebarCategoryHeader.displayName = 'SidebarCategoryHeader';\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n    unreadMentions: number;\n    hasUrgent?: boolean;\n    icon?: React.ReactNode;\n    className?: string;\n};\n\nexport default function ChannelMentionBadge({unreadMentions, hasUrgent, icon, className}: Props) {\n    if (unreadMentions > 0) {\n        return (\n            <span\n                id='unreadMentions'\n                className={classNames({badge: true, urgent: hasUrgent}, className)}\n            >\n                {icon}\n                <span className='unreadMentions'>\n                    {unreadMentions}\n                </span>\n            </span>\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport './channel_pencil_icon.scss';\n\ntype Props = {\n    hasDraft: boolean;\n};\n\nfunction ChannelPencilIcon({hasDraft}: Props) {\n    if (hasDraft) {\n        return (\n            <i\n                data-testid='draftIcon'\n                className='icon icon-pencil-outline channel-pencil-icon'\n            />\n        );\n    }\n    return null;\n}\n\nexport default memo(ChannelPencilIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getPostDraft} from 'selectors/rhs';\n\nimport {StoragePrefixes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\nimport type {PostDraft} from 'types/store/draft';\n\nimport ChannelPencilIcon from './channel_pencil_icon';\n\ntype OwnProps = {\n    id: Channel['id'];\n}\n\nfunction hasDraft(draft: PostDraft|null, id: Channel['id'], currentChannelId?: string): boolean {\n    if (draft === null) {\n        return false;\n    }\n\n    return Boolean(draft.message.trim() || draft.fileInfos.length || draft.uploadsInProgress.length) && currentChannelId !== id;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const currentChannelId = getCurrentChannelId(state);\n    const draft = getPostDraft(state, StoragePrefixes.DRAFT, ownProps.id);\n\n    return {\n        hasDraft: hasDraft(draft, ownProps.id, currentChannelId),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelPencilIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    icon: JSX.Element | null;\n    isDeleted: boolean;\n};\n\nfunction SidebarChannelIcon({isDeleted, icon}: Props) {\n    if (isDeleted) {\n        return (\n            <i className='icon icon-archive-outline'/>\n        );\n    }\n    return icon;\n}\n\nexport default SidebarChannelIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useRef, memo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {\n    MarkAsUnreadIcon,\n    StarIcon,\n    StarOutlineIcon,\n    BellOutlineIcon,\n    BellOffOutlineIcon,\n    LinkVariantIcon,\n    AccountPlusOutlineIcon,\n    DotsVerticalIcon,\n    ExitToAppIcon,\n} from '@mattermost/compass-icons/components';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMoveToSubmenu from 'components/channel_move_to_sub_menu';\nimport * as Menu from 'components/menu';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {copyToClipboard} from 'utils/utils';\n\nimport type {PropsFromRedux, OwnProps} from './index';\n\ntype Props = PropsFromRedux & OwnProps;\n\nconst SidebarChannelMenu = ({\n    channel,\n    channelLink,\n    currentUserId,\n    favoriteChannel,\n    isFavorite,\n    isMuted,\n    isUnread,\n    managePrivateChannelMembers,\n    managePublicChannelMembers,\n    readMultipleChannels,\n    markMostRecentPostInChannelAsUnread,\n    muteChannel,\n    onMenuToggle,\n    openModal,\n    unfavoriteChannel,\n    unmuteChannel,\n    channelLeaveHandler,\n}: Props) => {\n    const isLeaving = useRef(false);\n\n    const {formatMessage} = useIntl();\n\n    let markAsReadUnreadMenuItem: JSX.Element | null = null;\n    if (isUnread) {\n        function handleMarkAsRead() {\n            // We use mark multiple to not update the active channel in the server\n            readMultipleChannels([channel.id]);\n            trackEvent('ui', 'ui_sidebar_channel_menu_markAsRead');\n        }\n\n        markAsReadUnreadMenuItem = (\n            <Menu.Item\n                id={`markAsRead-${channel.id}`}\n                onClick={handleMarkAsRead}\n                leadingElement={<MarkAsUnreadIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.markAsRead'\n                        defaultMessage='Mark as Read'\n                    />\n                )}\n            />\n\n        );\n    } else {\n        function handleMarkAsUnread() {\n            markMostRecentPostInChannelAsUnread(channel.id);\n            trackEvent('ui', 'ui_sidebar_channel_menu_markAsUnread');\n        }\n\n        markAsReadUnreadMenuItem = (\n            <Menu.Item\n                id={`markAsUnread-${channel.id}`}\n                onClick={handleMarkAsUnread}\n                leadingElement={<MarkAsUnreadIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.markAsUnread'\n                        defaultMessage='Mark as Unread'\n                    />\n                )}\n            />\n        );\n    }\n\n    let favoriteUnfavoriteMenuItem: JSX.Element | null = null;\n    if (isFavorite) {\n        function handleUnfavoriteChannel() {\n            unfavoriteChannel(channel.id);\n            trackEvent('ui', 'ui_sidebar_channel_menu_unfavorite');\n        }\n\n        favoriteUnfavoriteMenuItem = (\n            <Menu.Item\n                id={`unfavorite-${channel.id}`}\n                onClick={handleUnfavoriteChannel}\n                leadingElement={<StarIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.unfavoriteChannel'\n                        defaultMessage='Unfavorite'\n                    />\n                )}\n            />\n        );\n    } else {\n        function handleFavoriteChannel() {\n            favoriteChannel(channel.id);\n            trackEvent('ui', 'ui_sidebar_channel_menu_favorite');\n        }\n\n        favoriteUnfavoriteMenuItem = (\n\n            <Menu.Item\n                id={`favorite-${channel.id}`}\n                onClick={handleFavoriteChannel}\n                leadingElement={<StarOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.favoriteChannel'\n                        defaultMessage='Favorite'\n                    />\n                )}\n            />\n        );\n    }\n\n    let muteUnmuteChannelMenuItem: JSX.Element | null = null;\n    if (isMuted) {\n        let muteChannelText = (\n            <FormattedMessage\n                id='sidebar_left.sidebar_channel_menu.unmuteChannel'\n                defaultMessage='Unmute Channel'\n            />\n        );\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            muteChannelText = (\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.unmute'\n                    defaultMessage='Unmute'\n                />\n            );\n        }\n\n        function handleUnmuteChannel() {\n            unmuteChannel(currentUserId, channel.id);\n        }\n\n        muteUnmuteChannelMenuItem = (\n            <Menu.Item\n                id={`unmute-${channel.id}`}\n                onClick={handleUnmuteChannel}\n                leadingElement={<BellOffOutlineIcon size={18}/>}\n                labels={muteChannelText}\n            />\n        );\n    } else {\n        let muteChannelText = (\n            <FormattedMessage\n                id='sidebar_left.sidebar_channel_menu.muteChannel'\n                defaultMessage='Mute Channel'\n            />\n        );\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            muteChannelText = (\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.mute'\n                    defaultMessage='Mute'\n                />\n            );\n        }\n\n        function handleMuteChannel() {\n            muteChannel(currentUserId, channel.id);\n        }\n\n        muteUnmuteChannelMenuItem = (\n            <Menu.Item\n                id={`mute-${channel.id}`}\n                onClick={handleMuteChannel}\n                leadingElement={<BellOutlineIcon size={18}/>}\n                labels={muteChannelText}\n            />\n        );\n    }\n\n    let copyLinkMenuItem: JSX.Element | null = null;\n    if (channel.type === Constants.OPEN_CHANNEL || channel.type === Constants.PRIVATE_CHANNEL) {\n        function handleCopyLink() {\n            copyToClipboard(channelLink);\n        }\n\n        copyLinkMenuItem = (\n            <Menu.Item\n                id={`copyLink-${channel.id}`}\n                onClick={handleCopyLink}\n                leadingElement={<LinkVariantIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.copyLink'\n                        defaultMessage='Copy Link'\n                    />\n                )}\n            />\n        );\n    }\n\n    let addMembersMenuItem: JSX.Element | null = null;\n    if ((channel.type === Constants.PRIVATE_CHANNEL && managePrivateChannelMembers) || (channel.type === Constants.OPEN_CHANNEL && managePublicChannelMembers)) {\n        function handleAddMembers() {\n            openModal({\n                modalId: ModalIdentifiers.CHANNEL_INVITE,\n                dialogType: ChannelInviteModal,\n                dialogProps: {channel},\n            });\n            trackEvent('ui', 'ui_sidebar_channel_menu_addMembers');\n        }\n\n        addMembersMenuItem = (\n            <Menu.Item\n                id={`addMembers-${channel.id}`}\n                onClick={handleAddMembers}\n                aria-haspopup='true'\n                leadingElement={<AccountPlusOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.addMembers'\n                        defaultMessage='Add Members'\n                    />\n                )}\n            />\n        );\n    }\n\n    let leaveChannelMenuItem: JSX.Element | null = null;\n    if (channel.name !== Constants.DEFAULT_CHANNEL) {\n        let leaveChannelText = (\n            <FormattedMessage\n                id='sidebar_left.sidebar_channel_menu.leaveChannel'\n                defaultMessage='Leave Channel'\n            />\n        );\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            leaveChannelText = (\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.leaveConversation'\n                    defaultMessage='Close Conversation'\n                />\n            );\n        }\n\n        function handleLeaveChannel() {\n            if (isLeaving.current || !channelLeaveHandler) {\n                return;\n            }\n\n            isLeaving.current = true;\n\n            channelLeaveHandler(() => {\n                isLeaving.current = false;\n            });\n            trackEvent('ui', 'ui_sidebar_channel_menu_leave');\n        }\n\n        leaveChannelMenuItem = (\n            <Menu.Item\n                id={`leave-${channel.id}`}\n                onClick={handleLeaveChannel}\n                leadingElement={<ExitToAppIcon size={18}/>}\n                labels={leaveChannelText}\n                isDestructive={true}\n            />\n        );\n    }\n\n    return (\n        <Menu.Container\n            menuButton={{\n                id: `SidebarChannelMenu-Button-${channel.id}`,\n                class: 'SidebarMenu_menuButton',\n                'aria-label': formatMessage({\n                    id: 'sidebar_left.sidebar_channel_menu.editChannel.ariaLabel',\n                    defaultMessage: 'Channel options for {channelName}',\n                }, {channelName: channel.name}),\n                children: <DotsVerticalIcon size={16}/>,\n            }}\n            menuButtonTooltip={{\n                class: 'hidden-xs',\n                text: formatMessage({id: 'sidebar_left.sidebar_channel_menu.editChannel', defaultMessage: 'Channel options'}),\n            }}\n            menu={{\n                id: `SidebarChannelMenu-MenuList-${channel.id}`,\n                'aria-label': formatMessage({id: 'sidebar_left.sidebar_channel_menu.dropdownAriaLabel', defaultMessage: 'Edit channel menu'}),\n                onToggle: onMenuToggle,\n            }}\n        >\n            {markAsReadUnreadMenuItem}\n            {favoriteUnfavoriteMenuItem}\n            {muteUnmuteChannelMenuItem}\n            <Menu.Separator/>\n            <ChannelMoveToSubmenu channel={channel}/>\n            {(copyLinkMenuItem || addMembersMenuItem) && <Menu.Separator/>}\n            {copyLinkMenuItem}\n            {addMembersMenuItem}\n            {leaveChannelMenuItem && <Menu.Separator/>}\n            {leaveChannelMenuItem}\n        </Menu.Container>\n    );\n};\n\nexport default memo(SidebarChannelMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {favoriteChannel, unfavoriteChannel, readMultipleChannels} from 'mattermost-redux/actions/channels';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {isFavoriteChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships, getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {unmuteChannel, muteChannel} from 'actions/channel_actions';\nimport {markMostRecentPostInChannelAsUnread} from 'actions/post_actions';\nimport {openModal} from 'actions/views/modals';\n\nimport {getSiteURL} from 'utils/url';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarChannelMenu from './sidebar_channel_menu';\n\nexport type OwnProps = {\n    channel: Channel;\n    channelLink: string;\n    isUnread: boolean;\n    channelLeaveHandler?: (callback: () => void) => void;\n    onMenuToggle: (open: boolean) => void;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const member = getMyChannelMemberships(state)[ownProps.channel.id];\n    const currentTeam = getCurrentTeam(state);\n\n    let managePublicChannelMembers = false;\n    let managePrivateChannelMembers = false;\n\n    if (currentTeam) {\n        managePublicChannelMembers = haveIChannelPermission(state, currentTeam.id, ownProps.channel.id, Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS);\n        managePrivateChannelMembers = haveIChannelPermission(state, currentTeam.id, ownProps.channel.id, Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS);\n    }\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        isFavorite: isFavoriteChannel(state, ownProps.channel.id),\n        isMuted: isChannelMuted(member),\n        channelLink: `${getSiteURL()}${ownProps.channelLink}`,\n        managePublicChannelMembers,\n        managePrivateChannelMembers,\n    };\n}\n\nconst mapDispatchToProps = {\n    readMultipleChannels,\n    markMostRecentPostInChannelAsUnread,\n    favoriteChannel,\n    unfavoriteChannel,\n    muteChannel,\n    unmuteChannel,\n    openModal,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(SidebarChannelMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {type WrappedComponentProps, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {mark, trackEvent} from 'actions/telemetry_actions';\n\nimport CustomStatusEmoji from 'components/custom_status/custom_status_emoji';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\nimport {ChannelsAndDirectMessagesTour} from 'components/tours/onboarding_tour';\nimport WithTooltip from 'components/with_tooltip';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {RHSStates} from 'utils/constants';\nimport {wrapEmojis} from 'utils/emoji_utils';\nimport {cmdOrCtrlPressed} from 'utils/keyboard';\nimport {Mark} from 'utils/performance_telemetry';\n\nimport type {RhsState} from 'types/store/rhs';\n\nimport ChannelMentionBadge from '../channel_mention_badge';\nimport ChannelPencilIcon from '../channel_pencil_icon';\nimport SidebarChannelIcon from '../sidebar_channel_icon';\nimport SidebarChannelMenu from '../sidebar_channel_menu';\n\ntype Props = WrappedComponentProps & {\n    channel: Channel;\n    link: string;\n    label: string;\n    ariaLabelPrefix?: string;\n    channelLeaveHandler?: (callback: () => void) => void;\n    icon: JSX.Element | null;\n\n    /**\n     * Number of unread mentions in this channel\n     */\n    unreadMentions: number;\n\n    /**\n     * Whether or not the channel is shown as unread\n     */\n    isUnread: boolean;\n\n    /**\n     * Checks if the current channel is muted\n     */\n    isMuted: boolean;\n\n    isChannelSelected: boolean;\n\n    teammateId?: string;\n\n    firstChannelName?: string;\n\n    showChannelsTutorialStep: boolean;\n\n    hasUrgent: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n    isSharedChannel?: boolean;\n\n    actions: {\n        markMostRecentPostInChannelAsUnread: (channelId: string) => void;\n        clearChannelSelection: () => void;\n        multiSelectChannelTo: (channelId: string) => void;\n        multiSelectChannelAdd: (channelId: string) => void;\n        unsetEditingPost: () => void;\n        closeRightHandSide: () => void;\n    };\n};\n\ntype State = {\n    isMenuOpen: boolean;\n    showTooltip: boolean;\n};\n\nexport class SidebarChannelLink extends React.PureComponent<Props, State> {\n    labelRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.labelRef = React.createRef();\n\n        this.state = {\n            isMenuOpen: false,\n            showTooltip: false,\n        };\n    }\n\n    componentDidMount(): void {\n        this.enableToolTipIfNeeded();\n    }\n\n    componentDidUpdate(prevProps: Props): void {\n        if (prevProps.label !== this.props.label) {\n            this.enableToolTipIfNeeded();\n        }\n    }\n\n    enableToolTipIfNeeded = (): void => {\n        const element = this.labelRef.current;\n        const showTooltip = element && element.offsetWidth < element.scrollWidth;\n        this.setState({showTooltip: Boolean(showTooltip)});\n    };\n\n    getAriaLabel = (): string => {\n        const {label, ariaLabelPrefix, unreadMentions, intl} = this.props;\n\n        let ariaLabel = label;\n\n        if (ariaLabelPrefix) {\n            ariaLabel += ` ${ariaLabelPrefix}`;\n        }\n\n        if (unreadMentions === 1) {\n            ariaLabel += ` ${unreadMentions} ${intl.formatMessage({id: 'accessibility.sidebar.types.mention', defaultMessage: 'mention'})}`;\n        } else if (unreadMentions > 1) {\n            ariaLabel += ` ${unreadMentions} ${intl.formatMessage({id: 'accessibility.sidebar.types.mentions', defaultMessage: 'mentions'})}`;\n        }\n\n        if (this.props.isUnread && unreadMentions === 0) {\n            ariaLabel += ` ${intl.formatMessage({id: 'accessibility.sidebar.types.unread', defaultMessage: 'unread'})}`;\n        }\n\n        return ariaLabel.toLowerCase();\n    };\n\n    handleChannelClick = (event: React.MouseEvent<HTMLAnchorElement>): void => {\n        mark(Mark.ChannelLinkClicked);\n        this.handleSelectChannel(event);\n\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        setTimeout(() => {\n            trackEvent('ui', 'ui_channel_selected_v2');\n        }, 0);\n    };\n\n    handleSelectChannel = (event: React.MouseEvent<HTMLAnchorElement>): void => {\n        if (event.defaultPrevented || event.button !== 0) {\n            return;\n        }\n\n        if (cmdOrCtrlPressed(event as unknown as React.KeyboardEvent)) {\n            event.preventDefault();\n            this.props.actions.multiSelectChannelAdd(this.props.channel.id);\n        } else if (event.shiftKey) {\n            event.preventDefault();\n            this.props.actions.multiSelectChannelTo(this.props.channel.id);\n        } else if (event.altKey && !this.props.isUnread) {\n            event.preventDefault();\n            this.props.actions.markMostRecentPostInChannelAsUnread(this.props.channel.id);\n        } else {\n            this.props.actions.clearChannelSelection();\n        }\n    };\n\n    handleMenuToggle = (isMenuOpen: boolean) => {\n        this.setState({isMenuOpen});\n    };\n\n    render(): JSX.Element {\n        const {\n            channel,\n            icon,\n            isChannelSelected,\n            isMuted,\n            isUnread,\n            label,\n            link,\n            unreadMentions,\n            firstChannelName,\n            showChannelsTutorialStep,\n            hasUrgent,\n        } = this.props;\n\n        let channelsTutorialTip: JSX.Element | null = null;\n\n        // firstChannelName is based on channel.name,\n        // but we want to display `display_name` to the user, so we check against `.name` for channel equality but pass in the .display_name value\n        if (firstChannelName === channel.name || (!firstChannelName && showChannelsTutorialStep && channel.name === Constants.DEFAULT_CHANNEL)) {\n            channelsTutorialTip = firstChannelName ? (<ChannelsAndDirectMessagesTour firstChannelName={channel.display_name}/>) : <ChannelsAndDirectMessagesTour/>;\n        }\n\n        let labelElement: JSX.Element = (\n            <span\n                ref={this.labelRef}\n                className='SidebarChannelLinkLabel'\n            >\n                {wrapEmojis(label)}\n            </span>\n        );\n        if (this.state.showTooltip) {\n            labelElement = (\n                <WithTooltip\n                    title={label}\n                >\n                    {labelElement}\n                </WithTooltip>\n            );\n        }\n\n        const customStatus = this.props.teammateId ? (\n            <CustomStatusEmoji\n                userID={this.props.teammateId}\n                showTooltip={true}\n                spanStyle={{\n                    height: 18,\n                }}\n                emojiStyle={{\n                    marginTop: -4,\n                    marginBottom: 0,\n                    opacity: 0.8,\n                }}\n            />\n        ) : null;\n\n        const sharedChannelIcon = this.props.isSharedChannel ? (\n            <SharedChannelIndicator\n                className='icon'\n                withTooltip={true}\n            />\n        ) : null;\n\n        const content = (\n            <>\n                <SidebarChannelIcon\n                    isDeleted={channel.delete_at !== 0}\n                    icon={icon}\n                />\n                <div\n                    className='SidebarChannelLinkLabel_wrapper'\n                >\n                    {labelElement}\n                    {customStatus}\n                    <Pluggable\n                        pluggableName='SidebarChannelLinkLabel'\n                        channel={this.props.channel}\n                    />\n                    {sharedChannelIcon}\n                </div>\n                <ChannelPencilIcon id={channel.id}/>\n                <ChannelMentionBadge\n                    unreadMentions={unreadMentions}\n                    hasUrgent={hasUrgent}\n                />\n                <div\n                    className={classNames(\n                        'SidebarMenu',\n                        'MenuWrapper',\n                        {menuOpen: this.state.isMenuOpen},\n                        {'MenuWrapper--open': this.state.isMenuOpen},\n                    )}\n                >\n                    <SidebarChannelMenu\n                        channel={channel}\n                        channelLink={link}\n                        isUnread={isUnread}\n                        channelLeaveHandler={this.props.channelLeaveHandler}\n                        onMenuToggle={this.handleMenuToggle}\n                    />\n                </div>\n            </>\n        );\n\n        // NOTE: class added to temporarily support the desktop app's at-mention DOM scraping of the old sidebar\n        const className = classNames([\n            'SidebarLink',\n            {\n                menuOpen: this.state.isMenuOpen,\n                muted: isMuted,\n                'unread-title': this.props.isUnread,\n                selected: isChannelSelected,\n            },\n        ]);\n        return (\n            <Link\n                className={className}\n                id={`sidebarItem_${channel.name}`}\n                aria-label={this.getAriaLabel()}\n                to={link}\n                onClick={this.handleChannelClick}\n                tabIndex={0}\n            >\n                {content}\n                {channelsTutorialTip}\n            </Link>\n        );\n    }\n}\n\nexport default injectIntl(SidebarChannelLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {makeGetChannelUnreadCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId, getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {markMostRecentPostInChannelAsUnread, unsetEditingPost} from 'actions/post_actions';\nimport {clearChannelSelection, multiSelectChannelAdd, multiSelectChannelTo} from 'actions/views/channel_sidebar';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getFirstChannelName} from 'selectors/onboarding';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {isChannelSelected} from 'selectors/views/channel_sidebar';\n\nimport {\n    GenericTaskSteps,\n    OnboardingTaskCategory,\n    OnboardingTasksName,\n} from 'components/onboarding_tasks';\nimport {FINISHED, OnboardingTourSteps, TutorialTourName} from 'components/tours';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarChannelLink from './sidebar_channel_link';\n\ntype OwnProps = {\n    channel: Channel;\n}\n\nfunction makeMapStateToProps() {\n    const getUnreadCount = makeGetChannelUnreadCount();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const member = getMyChannelMemberships(state)[ownProps.channel.id];\n        const unreadCount = getUnreadCount(state, ownProps.channel.id);\n        const config = getConfig(state);\n        const enableTutorial = config.EnableTutorial === 'true';\n        const currentUserId = getCurrentUserId(state);\n        const tutorialStep = getInt(state, TutorialTourName.ONBOARDING_TUTORIAL_STEP, currentUserId, 0);\n        const triggerStep = getInt(state, OnboardingTaskCategory, OnboardingTasksName.CHANNELS_TOUR, FINISHED);\n        const channelTourTriggered = triggerStep === GenericTaskSteps.STARTED;\n        const isOnboardingFlowEnabled = config.EnableOnboardingFlow;\n        const showChannelsTour = enableTutorial && tutorialStep === OnboardingTourSteps.CHANNELS_AND_DIRECT_MESSAGES;\n        const showChannelsTutorialStep = showChannelsTour && channelTourTriggered && isOnboardingFlowEnabled === 'true';\n        return {\n            unreadMentions: unreadCount.mentions,\n            unreadMsgs: unreadCount.messages,\n            isUnread: unreadCount.showUnread,\n            isMuted: isChannelMuted(member),\n            hasUrgent: unreadCount.hasUrgent,\n            isChannelSelected: isChannelSelected(state, ownProps.channel.id),\n            firstChannelName: showChannelsTutorialStep ? getFirstChannelName(state) : '',\n            showChannelsTutorialStep,\n            rhsState: getRhsState(state),\n            rhsOpen: getIsRhsOpen(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            markMostRecentPostInChannelAsUnread,\n            unsetEditingPost,\n            clearChannelSelection,\n            multiSelectChannelTo,\n            multiSelectChannelAdd,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SidebarChannelLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {ChannelType} from '@mattermost/types/channels';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    channelType: ChannelType;\n}\n\nconst SidebarBaseChannelIcon = ({\n    channelType,\n}: Props) => {\n    if (channelType === Constants.OPEN_CHANNEL) {\n        return (\n            <i className='icon icon-globe'/>\n        );\n    }\n    if (channelType === Constants.PRIVATE_CHANNEL) {\n        return (\n            <i className='icon icon-lock-outline'/>\n        );\n    }\n    return null;\n};\n\nexport default SidebarBaseChannelIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport LeaveChannelModal from 'components/leave_channel_modal';\nimport SidebarChannelLink from 'components/sidebar/sidebar_channel/sidebar_channel_link';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport SidebarBaseChannelIcon from './sidebar_base_channel_icon';\n\nimport type {PropsFromRedux} from './index';\n\nexport interface Props extends PropsFromRedux {\n    channel: Channel;\n    currentTeamName: string;\n}\n\nconst SidebarBaseChannel = ({\n    channel,\n    currentTeamName,\n    actions,\n}: Props) => {\n    const intl = useIntl();\n\n    const handleLeavePublicChannel = useCallback((callback: () => void) => {\n        actions.leaveChannel(channel.id);\n        trackEvent('ui', 'ui_public_channel_x_button_clicked');\n        callback();\n    }, [channel.id, actions.leaveChannel]);\n\n    const handleLeavePrivateChannel = useCallback((callback: () => void) => {\n        actions.openModal({modalId: ModalIdentifiers.LEAVE_PRIVATE_CHANNEL_MODAL, dialogType: LeaveChannelModal, dialogProps: {channel}});\n        trackEvent('ui', 'ui_private_channel_x_button_clicked');\n        callback();\n    }, [channel, actions.openModal]);\n\n    let channelLeaveHandler = null;\n    if (channel.type === Constants.OPEN_CHANNEL && channel.name !== Constants.DEFAULT_CHANNEL) {\n        channelLeaveHandler = handleLeavePublicChannel;\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        channelLeaveHandler = handleLeavePrivateChannel;\n    }\n\n    const channelIcon = (\n        <SidebarBaseChannelIcon\n            channelType={channel.type}\n        />\n    );\n\n    let ariaLabelPrefix;\n    if (channel.type === Constants.OPEN_CHANNEL) {\n        ariaLabelPrefix = intl.formatMessage({id: 'accessibility.sidebar.types.public', defaultMessage: 'public channel'});\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        ariaLabelPrefix = intl.formatMessage({id: 'accessibility.sidebar.types.private', defaultMessage: 'private channel'});\n    }\n\n    return (\n        <SidebarChannelLink\n            channel={channel}\n            link={`/${currentTeamName}/channels/${channel.name}`}\n            label={channel.display_name}\n            ariaLabelPrefix={ariaLabelPrefix}\n            channelLeaveHandler={channelLeaveHandler!}\n            icon={channelIcon}\n            isSharedChannel={channel.shared}\n        />\n    );\n};\n\nexport default SidebarBaseChannel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {leaveChannel} from 'actions/views/channel';\nimport {openModal} from 'actions/views/modals';\n\nimport SidebarBaseChannel from './sidebar_base_channel';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            leaveChannel,\n            openModal,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(SidebarBaseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport ProfilePicture from 'components/profile_picture';\n\nimport {getHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\n\nimport SidebarChannelLink from '../sidebar_channel_link';\n\ntype Props = {\n    intl: IntlShape;\n    channel: Channel;\n    teammate?: UserProfile;\n    currentTeamName: string;\n    currentUserId: string;\n    redirectChannel: string;\n    active: boolean;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n        leaveDirectChannel: (channelId: string) => Promise<ActionResult>;\n    };\n};\n\nclass SidebarDirectChannel extends React.PureComponent<Props> {\n    handleLeaveChannel = (callback: () => void) => {\n        const id = this.props.channel.teammate_id;\n        const category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n\n        const currentUserId = this.props.currentUserId;\n        this.props.actions.savePreferences(currentUserId, [{user_id: currentUserId, category, name: id!, value: 'false'}]).then(callback);\n        this.props.actions.leaveDirectChannel(this.props.channel.name);\n\n        trackEvent('ui', 'ui_direct_channel_x_button_clicked');\n\n        if (this.props.active) {\n            getHistory().push(`/${this.props.currentTeamName}/channels/${this.props.redirectChannel}`);\n        }\n    };\n\n    getIcon = () => {\n        const {channel, teammate} = this.props;\n\n        if (!teammate) {\n            return null;\n        }\n\n        if (teammate.id && teammate.delete_at) {\n            return (\n                <i className='icon icon-archive-outline'/>\n            );\n        }\n\n        let className = '';\n        if (channel.status === 'online') {\n            className = 'status-online';\n        } else if (channel.status === 'away') {\n            className = 'status-away';\n        } else if (channel.status === 'dnd') {\n            className = 'status-dnd';\n        }\n\n        return (\n            <ProfilePicture\n                src={Client4.getProfilePictureUrl(teammate.id, teammate.last_picture_update)}\n                size={'xs'}\n                status={teammate.is_bot ? '' : channel.status}\n                wrapperClass='DirectChannel__profile-picture'\n                newStatusIcon={true}\n                statusClass={`DirectChannel__status-icon ${className}`}\n            />\n        );\n    };\n\n    render() {\n        const {channel, teammate, currentTeamName} = this.props;\n\n        if (!teammate) {\n            return null;\n        }\n\n        let displayName = channel.display_name;\n        if (this.props.currentUserId === teammate.id) {\n            displayName = this.props.intl.formatMessage({\n                id: 'sidebar.directchannel.you',\n                defaultMessage: '{displayname} (you)',\n            }, {\n                displayname: channel.display_name,\n            });\n        }\n\n        return (\n            <SidebarChannelLink\n                teammateId={teammate.id}\n                channel={channel}\n                link={`/${currentTeamName}/messages/@${teammate.username}`}\n                label={displayName}\n                channelLeaveHandler={this.handleLeaveChannel}\n                icon={this.getIcon()}\n                isSharedChannel={Boolean(teammate.remote_id)}\n            />\n        );\n    }\n}\n\nexport default injectIntl(SidebarDirectChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentChannelId, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser, getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {leaveDirectChannel} from 'actions/views/channel';\n\nimport SidebarDirectChannel from './sidebar_direct_channel';\n\ntype OwnProps = {\n    channel: Channel;\n    currentTeamName: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const teammate = getUser(state, ownProps.channel.teammate_id!);\n    const currentUser = getCurrentUser(state);\n    const currentTeam = getCurrentTeam(state);\n    const redirectChannel = currentTeam ? getRedirectChannelNameForTeam(state, currentTeam.id) : '';\n    const currentChannelId = getCurrentChannelId(state);\n    const active = ownProps.channel.id === currentChannelId;\n\n    return {\n        teammate,\n        currentUserId: currentUser.id,\n        redirectChannel,\n        active,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            leaveDirectChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarDirectChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport SidebarChannelLink from 'components/sidebar/sidebar_channel/sidebar_channel_link';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n    currentTeamName: string;\n    currentUserId: string;\n    redirectChannel: string;\n    active: boolean;\n    membersCount: number;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    };\n};\n\nconst SidebarGroupChannel = ({\n    channel,\n    currentUserId,\n    actions,\n    active,\n    currentTeamName,\n    redirectChannel,\n    membersCount,\n}: Props) => {\n    const handleLeaveChannel = useCallback((callback: () => void) => {\n        const id = channel.id;\n        const category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n\n        actions.savePreferences(currentUserId, [{user_id: currentUserId, category, name: id, value: 'false'}]).then(callback);\n\n        trackEvent('ui', 'ui_direct_channel_x_button_clicked');\n\n        if (active) {\n            getHistory().push(`/${currentTeamName}/channels/${redirectChannel}`);\n        }\n    }, [channel.id, actions, active, currentTeamName, redirectChannel, currentUserId]);\n\n    const getIcon = () => {\n        return (\n            <div className='status status--group'>{membersCount}</div>\n        );\n    };\n\n    return (\n        <SidebarChannelLink\n            channel={channel}\n            link={`/${currentTeamName}/messages/${channel.name}`}\n            label={channel.display_name}\n            channelLeaveHandler={handleLeaveChannel}\n            icon={getIcon()}\n        />\n    );\n};\n\nexport default memo(SidebarGroupChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentChannelId, getRedirectChannelNameForTeam, makeGetGmChannelMemberCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport SidebarGroupChannel from './sidebar_group_channel';\n\ntype OwnProps = {\n    channel: Channel;\n}\n\nfunction makeMapStateToProps() {\n    const getMemberCount = makeGetGmChannelMemberCount();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const currentUserId = getCurrentUserId(state);\n        const currentTeam = getCurrentTeam(state);\n        const redirectChannel = currentTeam ? getRedirectChannelNameForTeam(state, currentTeam.id) : '';\n        const currentChannelId = getCurrentChannelId(state);\n        const membersCount = getMemberCount(state, ownProps.channel);\n        const active = ownProps.channel.id === currentChannelId;\n\n        return {\n            currentUserId,\n            redirectChannel,\n            active,\n            membersCount,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SidebarGroupChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {getCurrentChannelId, makeGetChannel, makeGetChannelUnreadCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getAutoSortedCategoryIds, getDraggingState, isChannelSelected} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarChannel from './sidebar_channel';\n\ntype OwnProps = {\n    channelId: string;\n    channelIndex: number;\n    isCategoryCollapsed: boolean;\n    isCategoryDragged: boolean;\n    isDraggable: boolean;\n    isAutoSortedCategory: boolean;\n\n    /**\n     * Sets the ref for the sidebar channel div element, so that it can be used by parent components\n     */\n    setChannelRef: (channelId: string, ref: HTMLLIElement) => void;\n}\n\nfunction makeMapStateToProps() {\n    const getChannel = makeGetChannel();\n    const getUnreadCount = makeGetChannelUnreadCount();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const channel = getChannel(state, ownProps.channelId);\n        const currentTeam = getCurrentTeam(state);\n\n        const currentChannelId = getCurrentChannelId(state);\n\n        const unreadCount = getUnreadCount(state, channel?.id || '');\n\n        return {\n            channel,\n            isCurrentChannel: channel?.id === currentChannelId,\n            currentTeamName: currentTeam?.name,\n            unreadMentions: unreadCount.mentions,\n            isUnread: unreadCount.showUnread,\n            draggingState: getDraggingState(state),\n            isChannelSelected: isChannelSelected(state, ownProps.channelId),\n            multiSelectedChannelIds: state.views.channelSidebar.multiSelectedChannelIds,\n            autoSortedCategoryIds: getAutoSortedCategoryIds(state),\n        };\n    };\n}\n\nconst connector = connect(makeMapStateToProps);\n\ntype PropsFromRedux = Omit<ConnectedProps<typeof connector>, 'dispatch'>;\n\nexport type Props = OwnProps & PropsFromRedux;\n\nexport default connector(SidebarChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useState} from 'react';\nimport type {AnimationEvent, ReactNode} from 'react';\nimport {Draggable} from 'react-beautiful-dnd';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\n\nimport SidebarBaseChannel from './sidebar_base_channel';\nimport SidebarDirectChannel from './sidebar_direct_channel';\nimport SidebarGroupChannel from './sidebar_group_channel';\n\nimport type {Props} from './index';\n\nfunction SidebarChannel({\n    isCategoryCollapsed,\n    isCategoryDragged,\n    isUnread,\n    isCurrentChannel,\n    setChannelRef,\n    channel,\n    currentTeamName,\n    isDraggable,\n    isChannelSelected,\n    draggingState,\n    multiSelectedChannelIds,\n    channelIndex,\n    isAutoSortedCategory,\n    autoSortedCategoryIds,\n}: Props) {\n    const [show, setShow] = useState(true);\n    if (!channel) {\n        return null;\n    }\n\n    if (!currentTeamName) {\n        return null;\n    }\n\n    function isCollapsed() {\n        return isCategoryDragged || (isCategoryCollapsed && !isUnread && !isCurrentChannel);\n    }\n\n    function setRef(refMethod?: (element: HTMLLIElement) => void) {\n        return (ref: HTMLLIElement) => {\n            setChannelRef(channel?.id || '', ref);\n            refMethod?.(ref);\n        };\n    }\n\n    function handleAnimationStart(event: AnimationEvent) {\n        if (event && event.animationName === 'toOpaqueAnimation' && !isCollapsed()) {\n            setShow(true);\n        }\n    }\n\n    function handleAnimationEnd(event: AnimationEvent) {\n        if (event && event.animationName === 'toTransparentAnimation' && isCollapsed()) {\n            setShow(false);\n        }\n    }\n\n    let component: ReactNode;\n    if (!show) {\n        component = null;\n    } else if (channel.type === Constants.DM_CHANNEL) {\n        component = (\n            <SidebarDirectChannel\n                channel={channel}\n                currentTeamName={currentTeamName}\n            />\n        );\n    } else if (channel.type === Constants.GM_CHANNEL) {\n        component = (\n            <SidebarGroupChannel\n                channel={channel}\n                currentTeamName={currentTeamName}\n            />\n        );\n    } else {\n        component = (\n            <SidebarBaseChannel\n                channel={channel}\n                currentTeamName={currentTeamName}\n            />\n        );\n    }\n\n    if (isDraggable) {\n        let selectedCount: React.ReactNode;\n        if (isChannelSelected && draggingState.state && draggingState.id === channel.id && multiSelectedChannelIds.length > 1) {\n            selectedCount = show ? (\n                <div className='SidebarChannel__selectedCount'>\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel.selectedCount'\n                        defaultMessage='{count} selected'\n                        values={{count: multiSelectedChannelIds.length}}\n                    />\n                </div>\n            ) : null;\n        }\n\n        return (\n            <Draggable\n                draggableId={channel.id}\n                index={channelIndex}\n            >\n                {(provided, snapshot) => {\n                    return (\n                        <li\n                            draggable='false'\n                            ref={setRef(provided.innerRef)}\n                            className={classNames('SidebarChannel', {\n                                collapsed: isCollapsed(),\n                                expanded: !isCollapsed(),\n                                unread: isUnread,\n                                active: isCurrentChannel,\n                                dragging: snapshot.isDragging,\n                                selectedDragging: isChannelSelected && draggingState.state && draggingState.id !== channel.id,\n                                fadeOnDrop: snapshot.isDropAnimating && snapshot.draggingOver && autoSortedCategoryIds.has(snapshot.draggingOver),\n                                noFloat: isAutoSortedCategory && !snapshot.isDragging,\n                            })}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            onAnimationStart={handleAnimationStart}\n                            onAnimationEnd={handleAnimationEnd}\n                            role='listitem'\n                            tabIndex={-1}\n                        >\n                            {component}\n                            {selectedCount}\n                        </li>\n                    );\n                }}\n            </Draggable>\n        );\n    }\n\n    return (\n        <li\n            ref={setRef()}\n            className={classNames('SidebarChannel', {\n                collapsed: isCollapsed(),\n                expanded: !isCollapsed(),\n                unread: isUnread,\n                active: isCurrentChannel,\n            })}\n            onAnimationStart={handleAnimationStart}\n            onAnimationEnd={handleAnimationEnd}\n            role='listitem'\n        >\n            {component}\n        </li>\n    );\n}\n\nexport default SidebarChannel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {GetGroupsForUserParams, GetGroupsParams} from '@mattermost/types/groups';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {fetchChannelsAndMembers} from 'mattermost-redux/actions/channels';\nimport {logError} from 'mattermost-redux/actions/errors';\nimport {getGroups, getAllGroupsAssociatedToChannelsInTeam, getAllGroupsAssociatedToTeam, getGroupsByUserIdPaginated} from 'mattermost-redux/actions/groups';\nimport {forceLogoutIfNecessary} from 'mattermost-redux/actions/helpers';\nimport {getTeamByName, selectTeam} from 'mattermost-redux/actions/teams';\nimport {getIsUserStatusesConfigEnabled} from 'mattermost-redux/selectors/entities/common';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {isCustomGroupsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {addVisibleUsersInCurrentChannelAndSelfToStatusPoll} from 'actions/status_actions';\nimport {addUserToTeam} from 'actions/team_actions';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {isSuccess} from 'types/actions';\nimport type {ActionFuncAsync} from 'types/store';\n\nexport function initializeTeam(team: Team): ActionFuncAsync<Team> {\n    return async (dispatch, getState) => {\n        dispatch(selectTeam(team.id));\n\n        const state = getState();\n        const currentUser = getCurrentUser(state);\n        LocalStorageStore.setPreviousTeamId(currentUser.id, team.id);\n\n        const enabledUserStatuses = getIsUserStatusesConfigEnabled(state);\n        if (enabledUserStatuses) {\n            dispatch(addVisibleUsersInCurrentChannelAndSelfToStatusPoll());\n        }\n\n        const license = getLicense(state);\n        const customGroupEnabled = isCustomGroupsEnabled(state);\n        if (license &&\n            license.IsLicensed === 'true' &&\n            (license.LDAPGroups === 'true' || customGroupEnabled)) {\n            const groupsParams: GetGroupsParams = {\n                filter_allow_reference: false,\n                page: 0,\n                per_page: 60,\n                include_member_count: true,\n                include_member_ids: true,\n                include_archived: false,\n            };\n            const myGroupsParams: GetGroupsForUserParams = {\n                ...groupsParams,\n                filter_has_member: currentUser.id,\n            };\n\n            if (currentUser) {\n                dispatch(getGroupsByUserIdPaginated(myGroupsParams));\n            }\n\n            if (license.LDAPGroups === 'true') {\n                dispatch(getAllGroupsAssociatedToChannelsInTeam(team.id, true));\n            }\n\n            if (team.group_constrained && license.LDAPGroups === 'true') {\n                dispatch(getAllGroupsAssociatedToTeam(team.id, true));\n            } else {\n                dispatch(getGroups(groupsParams));\n            }\n        }\n\n        return {data: team};\n    };\n}\n\nexport function joinTeam(teamname: string, joinedOnFirstLoad: boolean): ActionFuncAsync<Team> {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentUser = getCurrentUser(state);\n\n        try {\n            const teamByNameResult = await dispatch(getTeamByName(teamname));\n            if (isSuccess(teamByNameResult)) {\n                const team = teamByNameResult.data;\n\n                if (currentUser && team && team.delete_at === 0) {\n                    const addUserToTeamResult = await dispatch(addUserToTeam(team.id, currentUser.id));\n                    if (isSuccess(addUserToTeamResult)) {\n                        if (joinedOnFirstLoad) {\n                            LocalStorageStore.setTeamIdJoinedOnLoad(team.id);\n                        }\n\n                        await dispatch(initializeTeam(team));\n\n                        try {\n                            await dispatch(fetchChannelsAndMembers(team.id));\n                        } catch (error) {\n                            forceLogoutIfNecessary(error as ServerError, dispatch, getState);\n                            dispatch(logError(error as ServerError));\n                            return {error: error as ServerError};\n                        }\n\n                        return {data: team};\n                    }\n                    throw addUserToTeamResult.error;\n                }\n                throw new Error('Team not found or deleted');\n            } else {\n                throw teamByNameResult.error;\n            }\n        } catch (error) {\n            forceLogoutIfNecessary(error as ServerError, dispatch, getState);\n            dispatch(logError(error as ServerError));\n            return {error: error as ServerError};\n        }\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {History} from 'history';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {joinChannel, getChannelByNameAndTeamName, getChannelMember, markGroupChannelOpen, fetchChannelsAndMembers} from 'mattermost-redux/actions/channels';\nimport {getUser, getUserByUsername, getUserByEmail} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getChannelByName, getOtherChannels, getChannel, getChannelsNameMapInTeam, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser, getCurrentUserId, getUserByUsername as selectUserByUsername, getUser as selectUser, getUserByEmail as selectUserByEmail} from 'mattermost-redux/selectors/entities/users';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions';\nimport * as GlobalActions from 'actions/global_actions';\n\nimport {joinPrivateChannelPrompt} from 'utils/channel_utils';\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {ActionFuncAsync} from 'types/store';\n\nimport type {Match, MatchAndHistory} from './channel_identifier_router';\n\nconst LENGTH_OF_ID = 26;\nconst LENGTH_OF_GROUP_ID = 40;\nconst LENGTH_OF_USER_ID_PAIR = 54;\nconst USER_ID_PAIR_REGEXP = new RegExp(`^[a-zA-Z0-9]{${LENGTH_OF_ID}}__[a-zA-Z0-9]{${LENGTH_OF_ID}}$`);\n\nexport function onChannelByIdentifierEnter({match, history}: MatchAndHistory): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {path, identifier, team} = match.params;\n\n        if (!identifier) {\n            return {data: undefined};\n        }\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return {data: undefined};\n        }\n\n        const channelPath = await getPathFromIdentifier(state, path, identifier);\n\n        switch (channelPath) {\n        case 'channel_name':\n            dispatch(goToChannelByChannelName(match, history));\n            break;\n        case 'channel_id':\n            dispatch(goToChannelByChannelId(match, history));\n            break;\n        case 'group_channel_group_id':\n            dispatch(goToGroupChannelByGroupId(match, history));\n            break;\n        case 'direct_channel_username':\n            dispatch(goToDirectChannelByUsername(match, history));\n            break;\n        case 'direct_channel_email':\n            dispatch(goToDirectChannelByEmail(match, history));\n            break;\n        case 'direct_channel_user_ids':\n            dispatch(goToDirectChannelByUserIds(match, history));\n            break;\n        case 'direct_channel_user_id':\n            dispatch(goToDirectChannelByUserId(match, history, identifier));\n            break;\n        case 'error':\n            await dispatch(fetchChannelsAndMembers(teamObj!.id));\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n            break;\n        }\n        return {data: undefined};\n    };\n}\n\nexport async function getPathFromIdentifier(state: GlobalState, path: string, identifier: string) {\n    if (path === 'channels') {\n        // It's hard to tell an ID apart from a channel name of the same length, so check first if\n        // the identifier matches a channel that we have\n        const channelsByName = getChannelByName(state, identifier);\n        const moreChannelsByName = getOtherChannels(state).find((chan) => chan.name === identifier);\n\n        if (identifier.length === LENGTH_OF_ID) {\n            if (!channelsByName && !moreChannelsByName) {\n                try {\n                    await Client4.getChannel(identifier);\n                    return 'channel_id';\n                } catch (e) {\n                    if (e.status_code === 404) {\n                        return 'channel_name';\n                    }\n                    return 'error';\n                }\n            }\n            return 'channel_name';\n        } else if (\n            (!channelsByName && !moreChannelsByName && identifier.length === LENGTH_OF_GROUP_ID) ||\n            (\n                (channelsByName && channelsByName.type === Constants.GM_CHANNEL) ||\n                (moreChannelsByName && moreChannelsByName.type === Constants.GM_CHANNEL)\n            )\n        ) {\n            return 'group_channel_group_id';\n        } else if (isDirectChannelIdentifier(identifier)) {\n            return 'direct_channel_user_ids';\n        }\n        return 'channel_name';\n    } else if (path === 'messages') {\n        if (identifier.indexOf('@') === 0) {\n            return 'direct_channel_username';\n        } else if (identifier.indexOf('@') > 0) {\n            return 'direct_channel_email';\n        } else if (identifier.length === LENGTH_OF_ID) {\n            return 'direct_channel_user_id';\n        } else if (identifier.length === LENGTH_OF_GROUP_ID) {\n            return 'group_channel_group_id';\n        }\n        return 'error';\n    }\n\n    return 'error';\n}\n\nexport function goToChannelByChannelId(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelId = identifier.toLowerCase();\n\n        let channel = getChannel(state, channelId);\n        const member = state.entities.channels.myMembers[channelId];\n        const teamObj = getTeamByName(state, team);\n        if (!channel || !member) {\n            const dispatchResult = await dispatch(joinChannel(getCurrentUserId(state), teamObj!.id, channelId, ''));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            channel = dispatchResult.data!.channel;\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserId(match, history, Utils.getUserIdFromChannelId(channel.name, getCurrentUserId(state))));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            history.replace(`/${team}/channels/${channel.name}`);\n        }\n        return {data: undefined};\n    };\n}\n\nexport function goToChannelByChannelName(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelName = identifier.toLowerCase();\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return {data: undefined};\n        }\n\n        let channel = getChannelsNameMapInTeam(state, teamObj!.id)[channelName];\n        if (!channel) {\n            const getChannelDispatchResult = await dispatch(getChannelByNameAndTeamName(team, channelName, true));\n            if ('data' in getChannelDispatchResult) {\n                channel = getChannelDispatchResult.data!;\n            }\n        }\n\n        let member;\n        if (channel) {\n            member = state.entities.channels.myMembers[channel.id];\n            if (!member) {\n                const membership = await dispatch(getChannelMember(channel.id, getCurrentUserId(state)));\n                if ('data' in membership) {\n                    member = membership.data;\n                }\n            }\n        }\n\n        if (!channel || !member) {\n            if (channel?.type === Constants.PRIVATE_CHANNEL) {\n                // Prompt system admins and team admins before joining the private channel\n                const user = getCurrentUser(getState());\n                const isSystemAdmin = UserUtils.isSystemAdmin(user?.roles);\n                let prompt = false;\n                if (isSystemAdmin) {\n                    prompt = true;\n                } else {\n                    const teamMember = getMyTeamMember(state, teamObj.id);\n                    prompt = Boolean(teamMember && teamMember.scheme_admin);\n                }\n                if (prompt) {\n                    const joinPromptResult = await dispatch(joinPrivateChannelPrompt(teamObj, channel.display_name));\n                    if ('data' in joinPromptResult && !joinPromptResult.data!.join) {\n                        return {data: undefined};\n                    }\n                }\n            }\n\n            const joinChannelDispatchResult = await dispatch(joinChannel(getCurrentUserId(state), teamObj!.id, channel?.id || '', channelName));\n            if ('error' in joinChannelDispatchResult) {\n                if (!channel) {\n                    const getChannelDispatchResult = await dispatch(getChannelByNameAndTeamName(team, channelName, true));\n                    if ('error' in getChannelDispatchResult || getChannelDispatchResult.data!.delete_at === 0) {\n                        await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                        handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                        return {data: undefined};\n                    }\n                    channel = getChannelDispatchResult.data!;\n                }\n            } else {\n                channel = joinChannelDispatchResult.data!.channel;\n            }\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserIds(match, history));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            doChannelChange(channel);\n        }\n        return {data: undefined};\n    };\n}\n\nfunction goToDirectChannelByUsername(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const username = identifier.slice(1, identifier.length).toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByUsername(state, username);\n        if (!user) {\n            const dispatchResult = await dispatch(getUserByUsername(username));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        const directChannelDispatchRes = await dispatch(openDirectChannelToUserId(user.id));\n        if ('error' in directChannelDispatchRes) {\n            await dispatch(fetchChannelsAndMembers(teamObj!.id));\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n            return {data: undefined};\n        }\n\n        doChannelChange(directChannelDispatchRes.data!);\n        return {data: undefined};\n    };\n}\n\nexport function goToDirectChannelByUserId(match: Match, history: History, userId: string): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team} = match.params;\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const dispatchResult = await dispatch(getUser(userId));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n        return {data: undefined};\n    };\n}\n\nexport function goToDirectChannelByUserIds(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const userId = Utils.getUserIdFromChannelId(identifier.toLowerCase(), getCurrentUserId(getState()));\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const dispatchResult = await dispatch(getUser(userId));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n        return {data: undefined};\n    };\n}\n\nexport function goToDirectChannelByEmail(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const email = identifier.toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByEmail(state, email);\n        if (!user) {\n            const dispatchResult = await dispatch(getUserByEmail(email));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n        return {data: undefined};\n    };\n}\n\nfunction goToGroupChannelByGroupId(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {identifier, team} = match.params;\n        const groupId = identifier.toLowerCase();\n\n        history.replace(match.url.replace('/channels/', '/messages/'));\n\n        let channel = getChannelByName(state, groupId);\n        const teamObj = getTeamByName(state, team);\n        if (!channel) {\n            const dispatchResult = await dispatch(joinChannel(getCurrentUserId(state), teamObj!.id, '', groupId));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            channel = dispatchResult.data!.channel;\n        }\n\n        dispatch(markGroupChannelOpen(channel!.id));\n\n        doChannelChange(channel!);\n        return {data: undefined};\n    };\n}\n\nfunction doChannelChange(channel: Channel) {\n    GlobalActions.emitChannelClickEvent(channel);\n}\n\nfunction handleError(match: Match, history: History, defaultChannel: string) {\n    const {team} = match.params;\n    history.push(team ? `/${team}/channels/${defaultChannel}` : '/');\n}\n\nfunction isDirectChannelIdentifier(identifier: string) {\n    return identifier.length === LENGTH_OF_USER_ID_PAIR && USER_ID_PAIR_REGEXP.test(identifier);\n}\n\nasync function handleChannelJoinError(match: Match, history: History, defaultChannel: string) {\n    const {team} = match.params;\n    history.push(team ? `/error?type=channel_not_found&returnTo=/${team}/channels/${defaultChannel}` : '/');\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/prop-types */\n/* eslint-disable no-underscore-dangle */\n\nimport React, {PureComponent} from 'react';\nimport {findDOMNode} from 'react-dom';\n\nimport {isSafari} from 'utils/user_agent';\n\nconst scrollBarWidth = 8;\nconst scrollableContainerStyles = {\n    display: 'inline',\n    width: '0px',\n    height: '0px',\n    zIndex: '-1',\n    overflow: 'hidden',\n    margin: '0px',\n    padding: '0px',\n};\n\nconst scrollableWrapperStyle = {\n    position: 'absolute',\n    flex: '0 0 auto',\n    overflow: 'hidden',\n    visibility: 'hidden',\n    zIndex: '-1',\n    width: '100%',\n    height: '100%',\n    left: '0px',\n    top: '0px',\n};\n\nconst expandShrinkContainerStyles = {\n    flex: '0 0 auto',\n    overflow: 'hidden',\n    zIndex: '-1',\n    visibility: 'hidden',\n    left: `-${scrollBarWidth + 1}px`, //8px(scrollbar width) + 1px\n    bottom: `-${scrollBarWidth}px`, //8px because of scrollbar width\n    right: `-${scrollBarWidth}px`, //8px because of scrollbar width\n    top: `-${scrollBarWidth + 1}px`, //8px(scrollbar width) + 1px\n};\n\nconst expandShrinkStyles = {\n    position: 'absolute',\n    flex: '0 0 auto',\n    visibility: 'hidden',\n    overflow: 'scroll',\n    zIndex: '-1',\n    width: '100%',\n    height: '100%',\n};\n\nconst shrinkChildStyle = {\n    position: 'absolute',\n    height: '200%',\n    width: '200%',\n};\n\n//values below need to be changed when scrollbar width changes\nconst shrinkScrollDelta = (2 * scrollBarWidth) + 1; // 17 = 2* scrollbar width(8px) + 1px as buffer\n\n// 27 = 2* scrollbar width(8px) + 1px as buffer + 10px(this value is based of off lib(Link below). Probably not needed but doesnt hurt to leave)\n//https://github.com/wnr/element-resize-detector/blob/27983e59dce9d8f1296d8f555dc2340840fb0804/src/detection-strategy/scroll.js#L246\nconst expandScrollDelta = shrinkScrollDelta + 10;\n\nexport default class ItemMeasurer extends PureComponent {\n    _node = null;\n    _resizeSensorExpand = React.createRef();\n    _resizeSensorShrink = React.createRef();\n    _positionScrollbarsRef = null;\n    _measureItemAnimFrame = null;\n\n    componentDidMount() {\n        // eslint-disable-next-line react/no-find-dom-node\n        this._node = findDOMNode(this);\n\n        // Force sync measure for the initial mount.\n        // This is necessary to support the DynamicSizeList layout logic.\n        if (isSafari() && this.props.size) {\n            this._measureItemAnimFrame = requestAnimationFrame(() => {\n                this._measureItem(false);\n            });\n        } else {\n            this._measureItem(false);\n        }\n\n        if (this.props.size) {\n            // Don't wait for positioning scrollbars when we have size\n            // This is needed triggering an event for remounting a post\n            this.positionScrollBars();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if ((prevProps.size === 0 && this.props.size !== 0) || prevProps.size !== this.props.size) {\n            this.positionScrollBars();\n        }\n    }\n\n    _measureItem = (forceScrollCorrection) => {\n        const {handleNewMeasurements, size: oldSize, itemId} = this.props;\n\n        const node = this._node;\n\n        if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {\n            const newSize = Math.ceil(node.offsetHeight);\n\n            if (oldSize !== newSize) {\n                handleNewMeasurements(itemId, newSize, forceScrollCorrection);\n            }\n        }\n    };\n\n    positionScrollBars = (height = this.props.size) => {\n        //we are position these hidden div scroll bars to the end so they can emit\n        //scroll event when height in the div changes\n        //Heavily inspired from https://github.com/marcj/css-element-queries/blob/master/src/ResizeSensor.js\n        //and https://github.com/wnr/element-resize-detector/blob/master/src/detection-strategy/scroll.js\n        //For more info http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/#comment-244\n        if (this._positionScrollbarsRef) {\n            window.cancelAnimationFrame(this._positionScrollbarsRef);\n        }\n\n        this._positionScrollbarsRef = window.requestAnimationFrame(() => {\n            this._resizeSensorExpand.current.scrollTop = height + expandScrollDelta;\n            this._resizeSensorShrink.current.scrollTop = (2 * height) + shrinkScrollDelta;\n        });\n    };\n\n    scrollingDiv = (event) => {\n        if (event.target.offsetHeight !== this.props.size) {\n            this._measureItem(event.target.offsetWidth !== this.props.width);\n        }\n    };\n\n    renderItems = () => {\n        const item = this.props.item;\n\n        const expandChildStyle = {\n            position: 'absolute',\n            left: '0',\n            top: '0',\n            height: `${this.props.size + expandScrollDelta}px`,\n            width: '100%',\n        };\n\n        const renderItem = (\n            <div\n                role='listitem'\n                style={{position: 'relative'}}\n            >\n                {item}\n                <div style={scrollableContainerStyles}>\n                    <div\n                        dir='ltr'\n                        style={scrollableWrapperStyle}\n                    >\n                        <div style={expandShrinkContainerStyles}>\n                            <div\n                                style={expandShrinkStyles}\n                                ref={this._resizeSensorExpand}\n                                onScroll={this.scrollingDiv}\n                            >\n                                <div style={expandChildStyle}/>\n                            </div>\n                            <div\n                                style={expandShrinkStyles}\n                                ref={this._resizeSensorShrink}\n                                onScroll={this.scrollingDiv}\n                            >\n                                <div style={shrinkChildStyle}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        return renderItem;\n    };\n\n    componentWillUnmount() {\n        if (this._positionScrollbarsRef) {\n            window.cancelAnimationFrame(this._positionScrollbarsRef);\n        }\n\n        if (this._measureItemAnimFrame) {\n            window.cancelAnimationFrame(this._measureItemAnimFrame);\n        }\n\n        const {onUnmount, itemId, index} = this.props;\n        if (onUnmount) {\n            onUnmount(itemId, index);\n        }\n    }\n\n    render() {\n        return this.renderItems();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/prop-types */\n/* eslint-disable no-underscore-dangle */\n\nimport memoizeOne from 'memoize-one';\nimport {createElement, PureComponent} from 'react';\n\nimport ItemMeasurer from './item_measurer';\n\nconst atBottomMargin = 10;\n\nexport class DynamicVirtualizedList extends PureComponent {\n    _listMetaData = {\n        itemOffsetMap: {},\n        itemSizeMap: {},\n        totalMeasuredSize: 0,\n        atBottom: true,\n    };\n\n    _itemStyleCache = {};\n    _outerRef;\n    _scrollCorrectionInProgress = false;\n    _scrollByCorrection = null;\n    _keepScrollPosition = false;\n    _keepScrollToBottom = false;\n    _mountingCorrections = 0;\n    _correctedInstances = 0;\n\n    static defaultProps = {\n        innerTagName: 'div',\n        itemData: undefined,\n        outerTagName: 'div',\n        overscanCountForward: 30,\n        overscanCountBackward: 10,\n    };\n\n    state = {\n        scrollDirection: 'backward',\n        scrollOffset: typeof this.props.initialScrollOffset === 'number' ? this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false,\n        scrollDelta: 0,\n        scrollHeight: 0,\n        localOlderPostsToRender: [],\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props);\n    }\n\n    scrollBy = (scrollOffset, scrollBy) => () => {\n        const element = this._outerRef;\n        if (typeof element.scrollBy === 'function' && scrollBy) {\n            element.scrollBy(0, scrollBy);\n        } else if (scrollOffset) {\n            element.scrollTop = scrollOffset;\n        }\n\n        this._scrollCorrectionInProgress = false;\n    };\n\n    scrollTo(scrollOffset, scrollByValue, useAnimationFrame = false) {\n        this._scrollCorrectionInProgress = true;\n        this.setState(\n            (prevState) => ({\n                scrollDirection: prevState.scrollOffset >= scrollOffset ? 'backward' : 'forward',\n                scrollOffset,\n                scrollUpdateWasRequested: true,\n                scrollByValue,\n            }),\n            () => {\n                if (useAnimationFrame) {\n                    this._scrollByCorrection = window.requestAnimationFrame(\n                        this.scrollBy(\n                            this.state.scrollOffset,\n                            this.state.scrollByValue,\n                        ),\n                    );\n                } else {\n                    this.scrollBy(\n                        this.state.scrollOffset,\n                        this.state.scrollByValue,\n                    )();\n                }\n            },\n        );\n\n        this.forceUpdate();\n    }\n\n    scrollToItem(index, align = 'auto', offset = 0) {\n        const {scrollOffset} = this.state;\n\n        //Ideally the below scrollTo works fine but firefox has 6px issue and stays 6px from bottom when corrected\n        //so manually keeping scroll position bottom for now\n        const element = this._outerRef;\n        if (index === 0 && align === 'end') {\n            this.scrollTo(element.scrollHeight - this.props.height);\n            return;\n        }\n\n        const offsetOfItem = getOffsetForIndexAndAlignment(\n            this.props,\n            index,\n            align,\n            scrollOffset,\n            this._listMetaData,\n        );\n        if (!offsetOfItem) {\n            const itemSize = getItemSize(this.props, index, this._listMetaData);\n            if (!itemSize && this.props.scrollToFailed) {\n                if (this.state.scrolledToInitIndex) {\n                    this.props.scrollToFailed(index);\n                }\n            }\n        }\n\n        this.scrollTo(offsetOfItem + offset);\n    }\n\n    componentDidMount() {\n        const {initialScrollOffset} = this.props;\n\n        if (typeof initialScrollOffset === 'number' && this._outerRef !== null) {\n            const element = this._outerRef;\n            element.scrollTop = initialScrollOffset;\n        }\n\n        this._commitHook();\n    }\n\n    getSnapshotBeforeUpdate(_, prevState) {\n        if (prevState.localOlderPostsToRender[0] !== this.state.localOlderPostsToRender[0] ||\n            prevState.localOlderPostsToRender[1] !== this.state.localOlderPostsToRender[1]\n        ) {\n            const element = this._outerRef;\n            const previousScrollTop = element.scrollTop;\n            const previousScrollHeight = element.scrollHeight;\n            return {\n                previousScrollTop,\n                previousScrollHeight,\n            };\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.scrolledToInitIndex) {\n            const {\n                scrollDirection,\n                scrollOffset,\n                scrollUpdateWasRequested,\n                scrollHeight,\n            } = this.state;\n\n            const {\n                scrollDirection: prevScrollDirection,\n                scrollOffset: prevScrollOffset,\n                scrollUpdateWasRequested: prevScrollUpdateWasRequested,\n                scrollHeight: previousScrollHeight,\n            } = prevState;\n\n            if (\n                scrollDirection !== prevScrollDirection ||\n                scrollOffset !== prevScrollOffset ||\n                scrollUpdateWasRequested !== prevScrollUpdateWasRequested ||\n                scrollHeight !== previousScrollHeight\n            ) {\n                this._callPropsCallbacks();\n            }\n            if (!prevState.scrolledToInitIndex) {\n                this._keepScrollPosition = false;\n                this._keepScrollToBottom = false;\n            }\n        }\n\n        this._commitHook();\n        if (prevProps.itemData !== this.props.itemData) {\n            this._dataChange();\n        }\n\n        if (prevProps.height !== this.props.height) {\n            this._heightChange(prevProps.height, prevState.scrollOffset);\n        }\n\n        if (prevState.scrolledToInitIndex !== this.state.scrolledToInitIndex) {\n            this._dataChange(); // though this is not data change we are checking for first load change\n        }\n\n        if (prevProps.width !== this.props.width) {\n            this.innerRefWidth = this.props.innerRef.current.clientWidth;\n            this._widthChange(prevProps.height, prevState.scrollOffset);\n        }\n\n        if (prevState.localOlderPostsToRender[0] !== this.state.localOlderPostsToRender[0] ||\n            prevState.localOlderPostsToRender[1] !== this.state.localOlderPostsToRender[1]\n        ) {\n            const postlistScrollHeight = this._outerRef.scrollHeight;\n\n            const scrollValue = snapshot.previousScrollTop + (postlistScrollHeight - snapshot.previousScrollHeight);\n\n            this.scrollTo(\n                scrollValue,\n                scrollValue - snapshot.previousScrollTop,\n                true,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this._scrollByCorrection) {\n            window.cancelAnimationFrame(this._scrollByCorrection);\n        }\n    }\n\n    _callOnItemsRendered = memoizeOne((overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) =>\n        this.props.onItemsRendered({\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n        }),\n    );\n\n    _callOnScroll = memoizeOne((scrollDirection, scrollOffset, scrollUpdateWasRequested, scrollHeight, clientHeight) =>\n        this.props.onScroll({\n            scrollDirection,\n            scrollOffset,\n            scrollUpdateWasRequested,\n            scrollHeight,\n            clientHeight,\n        }),\n    );\n\n    _callPropsCallbacks() {\n        const {itemData, height} = this.props;\n        const {\n            scrollDirection,\n            scrollOffset,\n            scrollUpdateWasRequested,\n            scrollHeight,\n        } = this.state;\n        const itemCount = itemData.length;\n\n        if (typeof this.props.onItemsRendered === 'function') {\n            if (itemCount > 0) {\n                const [\n                    overscanStartIndex,\n                    overscanStopIndex,\n                    visibleStartIndex,\n                    visibleStopIndex,\n                ] = this._getRangeToRender();\n\n                this._callOnItemsRendered(\n                    overscanStartIndex,\n                    overscanStopIndex,\n                    visibleStartIndex,\n                    visibleStopIndex,\n                );\n\n                if (\n                    scrollDirection === 'backward' &&\n                    scrollOffset < 1000 &&\n                    overscanStopIndex !== itemCount - 1\n                ) {\n                    const sizeOfNextElement = getItemSize(\n                        this.props,\n                        overscanStopIndex + 1,\n                        this._listMetaData,\n                    ).size;\n                    if (!sizeOfNextElement && this.state.scrolledToInitIndex) {\n                        this.setState((prevState) => {\n                            if (\n                                prevState.localOlderPostsToRender[0] !==\n                                overscanStopIndex + 1\n                            ) {\n                                return {\n                                    localOlderPostsToRender: [\n                                        overscanStopIndex + 1,\n                                        overscanStopIndex + 50,\n                                    ],\n                                };\n                            }\n                            return null;\n                        });\n                    }\n                }\n            }\n        }\n\n        if (typeof this.props.onScroll === 'function') {\n            this._callOnScroll(\n                scrollDirection,\n                scrollOffset,\n                scrollUpdateWasRequested,\n                scrollHeight,\n                height,\n            );\n        }\n    }\n\n    // This method is called after mount and update.\n    // List implementations can override this method to be notified.\n    _commitHook = () => {\n        if (\n            !this.state.scrolledToInitIndex &&\n            Object.keys(this._listMetaData.itemOffsetMap).length\n        ) {\n            const {index, position, offset} = this.props.initScrollToIndex();\n            this.scrollToItem(index, position, offset);\n            this.setState({\n                scrolledToInitIndex: true,\n            });\n\n            if (index === 0) {\n                this._keepScrollToBottom = true;\n            } else {\n                this._keepScrollPosition = true;\n            }\n        }\n    };\n\n    // This method is called when data changes\n    // List implementations can override this method to be notified.\n    _dataChange = () => {\n        if (this._listMetaData.totalMeasuredSize < this.props.height) {\n            this.props.canLoadMorePosts();\n        }\n    };\n\n    _heightChange = (prevHeight, prevOffset) => {\n        const wasAtBottom =\n            prevOffset + prevHeight >=\n            this._listMetaData.totalMeasuredSize - atBottomMargin;\n\n        if (wasAtBottom) {\n            this.scrollToItem(0, 'end');\n        }\n    };\n\n    _widthChange = (prevHeight, prevOffset) => {\n        const wasAtBottom =\n            prevOffset + prevHeight >=\n            this._listMetaData.totalMeasuredSize - atBottomMargin;\n\n        if (wasAtBottom) {\n            this.scrollToItem(0, 'end');\n        }\n    };\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle = (index) => {\n        const {itemData} = this.props;\n\n        const itemStyleCache = this._itemStyleCache;\n\n        let style;\n        if (Object.prototype.hasOwnProperty.call(itemStyleCache, itemData[index])) {\n            style = itemStyleCache[itemData[index]];\n        } else {\n            style = {\n                left: 0,\n                top: getItemOffset(this.props, index, this._listMetaData),\n                height: getItemSize(this.props, index, this._listMetaData),\n                width: '100%',\n            };\n            itemStyleCache[itemData[index]] = style;\n        }\n\n        return style;\n    };\n\n    _getRangeToRender(scrollTop) {\n        const {itemData, overscanCountForward, overscanCountBackward} =\n            this.props;\n        const {scrollDirection, scrollOffset} = this.state;\n        const itemCount = itemData.length;\n\n        if (itemCount === 0) {\n            return [0, 0, 0, 0];\n        }\n        const scrollOffsetValue = scrollTop >= 0 ? scrollTop : scrollOffset;\n        const startIndex = getStartIndexForOffset(\n            this.props,\n            scrollOffsetValue,\n            this._listMetaData,\n        );\n        const stopIndex = getStopIndexForStartIndex(\n            this.props,\n            startIndex,\n            scrollOffsetValue,\n            this._listMetaData,\n        );\n\n        // Overscan by one item in each direction so that tab/focus works.\n        // If there isn't at least one extra item, tab loops back around.\n        const overscanBackward = scrollDirection === 'backward' ? overscanCountBackward : Math.max(1, overscanCountForward);\n\n        const overscanForward = scrollDirection === 'forward' ? overscanCountBackward : Math.max(1, overscanCountForward);\n\n        const minValue = Math.max(0, stopIndex - overscanBackward);\n        let maxValue = Math.max(0, Math.min(itemCount - 1, startIndex + overscanForward));\n\n        while (\n            !getItemSize(this.props, maxValue, this._listMetaData) &&\n            maxValue > 0 &&\n            this._listMetaData.totalMeasuredSize > this.props.height\n        ) {\n            maxValue--;\n        }\n\n        if (\n            !this.state.scrolledToInitIndex &&\n            this.props.initRangeToRender.length\n        ) {\n            return this.props.initRangeToRender;\n        }\n\n        return [minValue, maxValue, startIndex, stopIndex];\n    }\n\n    _correctScroll = () => {\n        const {scrollOffset} = this.state;\n        const element = this._outerRef;\n        if (element) {\n            element.scrollTop = scrollOffset;\n            this._scrollCorrectionInProgress = false;\n            this._correctedInstances = 0;\n            this._mountingCorrections = 0;\n        }\n    };\n\n    _generateOffsetMeasurements = () => {\n        const {itemOffsetMap, itemSizeMap} = this._listMetaData;\n        const {itemData} = this.props;\n        this._listMetaData.totalMeasuredSize = 0;\n\n        for (let i = itemData.length - 1; i >= 0; i--) {\n            const prevOffset = itemOffsetMap[itemData[i + 1]] || 0;\n\n            // In some browsers (e.g. Firefox) fast scrolling may skip rows.\n            // In this case, our assumptions about last measured indices may be incorrect.\n            // Handle this edge case to prevent NaN values from breaking styles.\n            // Slow scrolling back over these skipped rows will adjust their sizes.\n            const prevSize = itemSizeMap[itemData[i + 1]] || 0;\n\n            itemOffsetMap[itemData[i]] = prevOffset + prevSize;\n            this._listMetaData.totalMeasuredSize += itemSizeMap[itemData[i]] || 0;\n\n            // Reset cached style to clear stale position.\n            delete this._itemStyleCache[itemData[i]];\n        }\n    };\n\n    _handleNewMeasurements = (key, newSize, forceScrollCorrection) => {\n        const {itemSizeMap} = this._listMetaData;\n        const {itemData} = this.props;\n        const index = itemData.findIndex((item) => item === key);\n\n        // In some browsers (e.g. Firefox) fast scrolling may skip rows.\n        // In this case, our assumptions about last measured indices may be incorrect.\n        // Handle this edge case to prevent NaN values from breaking styles.\n        // Slow scrolling back over these skipped rows will adjust their sizes.\n        const oldSize = itemSizeMap[key] || 0;\n        if (oldSize === newSize) {\n            return;\n        }\n\n        itemSizeMap[key] = newSize;\n\n        if (!this.state.scrolledToInitIndex) {\n            this._generateOffsetMeasurements();\n            return;\n        }\n\n        const element = this._outerRef;\n        const wasAtBottom =\n            this.props.height + element.scrollTop >=\n            this._listMetaData.totalMeasuredSize - atBottomMargin;\n\n        if (\n            (wasAtBottom || this._keepScrollToBottom) &&\n            this.props.correctScrollToBottom\n        ) {\n            this._generateOffsetMeasurements();\n            this.scrollToItem(0, 'end');\n            this.forceUpdate();\n            return;\n        }\n\n        if (forceScrollCorrection || this._keepScrollPosition) {\n            const delta = newSize - oldSize;\n            const [, , visibleStartIndex] = this._getRangeToRender(this.state.scrollOffset);\n            this._generateOffsetMeasurements();\n            if (index < visibleStartIndex + 1) {\n                return;\n            }\n\n            this._scrollCorrectionInProgress = true;\n\n            this.setState(\n                (prevState) => {\n                    let deltaValue;\n                    if (this._mountingCorrections === 0) {\n                        deltaValue = delta;\n                    } else {\n                        deltaValue = prevState.scrollDelta + delta;\n                    }\n                    this._mountingCorrections++;\n                    const newOffset = prevState.scrollOffset + delta;\n                    return {\n                        scrollOffset: newOffset,\n                        scrollDelta: deltaValue,\n                    };\n                },\n                () => {\n                    this._correctedInstances++;\n                    if (\n                        this._mountingCorrections === this._correctedInstances\n                    ) {\n                        this._correctScroll();\n                    }\n                },\n            );\n            return;\n        }\n\n        this._generateOffsetMeasurements();\n    };\n\n    _onItemRowUnmount = (itemId, index) => {\n        const {props} = this;\n        if (props.itemData[index] === itemId) {\n            return;\n        }\n        const doesItemExist = props.itemData.includes(itemId);\n        if (!doesItemExist) {\n            delete this._listMetaData.itemSizeMap[itemId];\n            delete this._listMetaData.itemOffsetMap[itemId];\n            const element = this._outerRef;\n\n            const atBottom =\n                element.offsetHeight + element.scrollTop >=\n                this._listMetaData.totalMeasuredSize - atBottomMargin;\n\n            this._generateOffsetMeasurements();\n\n            if (atBottom) {\n                this.scrollToItem(0, 'end');\n            }\n\n            this.forceUpdate();\n        }\n    };\n\n    _onScrollVertical = (event) => {\n        if (!this.state.scrolledToInitIndex) {\n            return;\n        }\n        const {scrollTop, scrollHeight} = event.currentTarget;\n        if (this._scrollCorrectionInProgress) {\n            if (this.state.scrollUpdateWasRequested) {\n                this.setState(() => ({\n                    scrollUpdateWasRequested: false,\n                }));\n            }\n            return;\n        }\n\n        if (scrollHeight !== this.state.scrollHeight) {\n            this.setState({\n                scrollHeight,\n            });\n        }\n\n        this.setState((prevState) => {\n            if (prevState.scrollOffset === scrollTop) {\n                // Scroll position may have been updated by cDM/cDU,\n                // In which case we don't need to trigger another render,\n                return null;\n            }\n\n            return {\n                scrollDirection:\n                    prevState.scrollOffset < scrollTop ? 'forward' : 'backward',\n                scrollOffset: scrollTop,\n                scrollUpdateWasRequested: false,\n                scrollHeight,\n                scrollTop,\n                scrollDelta: 0,\n            };\n        });\n    };\n\n    _outerRefSetter = (ref) => {\n        const {outerRef} = this.props;\n        this.innerRefWidth = this.props.innerRef.current.clientWidth;\n        this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n            outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && Object.prototype.hasOwnProperty.call(outerRef, 'current')) {\n            outerRef.current = ref;\n        }\n    };\n\n    _renderItems = () => {\n        const {children, direction, itemData, loaderId, visibleId} =\n            this.props;\n        const width = this.innerRefWidth;\n        const [startIndex, stopIndex] = this._getRangeToRender();\n        const itemCount = itemData.length;\n        const items = [];\n        if (itemCount > 0) {\n            for (let index = itemCount - 1; index >= 0; index--) {\n                const {size} = getItemMetadata(\n                    this.props,\n                    index,\n                    this._listMetaData,\n                );\n\n                const [\n                    localOlderPostsToRenderStartIndex,\n                    localOlderPostsToRenderStopIndex,\n                ] = this.state.localOlderPostsToRender;\n\n                const isItemInLocalPosts =\n                    index >= localOlderPostsToRenderStartIndex &&\n                    index < localOlderPostsToRenderStopIndex + 1 &&\n                    localOlderPostsToRenderStartIndex === stopIndex + 1;\n\n                const isLoader = itemData[index] === loaderId;\n                const isVisible = itemData[index] === visibleId;\n                const itemId = itemData[index];\n\n                // It's important to read style after fetching item metadata.\n                // getItemMetadata() will clear stale styles.\n                const style = this._getItemStyle(index);\n                if (\n                    (index >= startIndex && index < stopIndex + 1) ||\n                    isItemInLocalPosts ||\n                    isLoader ||\n                    isVisible\n                ) {\n                    const item = createElement(children, {\n                        data: itemData,\n                        itemId,\n                    });\n\n                    // Always wrap children in a ItemMeasurer to detect changes in size.\n                    items.push(\n                        createElement(ItemMeasurer, {\n                            direction,\n                            handleNewMeasurements: this._handleNewMeasurements,\n                            index,\n                            item,\n                            key: itemId,\n                            size,\n                            itemId,\n                            width,\n                            onUnmount: this._onItemRowUnmount,\n                            itemCount,\n                        }),\n                    );\n                } else {\n                    items.push(\n                        createElement('div', {\n                            key: itemId,\n                            style,\n                        }),\n                    );\n                }\n            }\n        }\n        return items;\n    };\n\n    render() {\n        const {\n            className,\n            id,\n            innerRef,\n            innerTagName,\n            outerTagName,\n            style,\n            innerListStyle,\n        } = this.props;\n\n        const onScroll = this._onScrollVertical;\n\n        const items = this._renderItems();\n\n        return createElement(\n            outerTagName,\n            {\n                className,\n                id,\n                onScroll,\n                ref: this._outerRefSetter,\n                style: {\n                    WebkitOverflowScrolling: 'touch',\n                    overflowY: 'auto',\n                    overflowAnchor: 'none',\n                    willChange: 'transform',\n                    width: '100%',\n                    ...style,\n                },\n            },\n            createElement(\n                innerTagName,\n                {\n                    ref: innerRef,\n                    role: 'list',\n                    style: innerListStyle,\n                },\n                items,\n            ),\n        );\n    }\n}\n\nconst getItemMetadata = (props, index, listMetaData) => {\n    const {itemOffsetMap, itemSizeMap} = listMetaData;\n    const {itemData} = props;\n\n    // If the specified item has not yet been measured,\n    // Just return an estimated size for now.\n    if (!itemSizeMap[itemData[index]]) {\n        return {\n            offset: 0,\n            size: 0,\n        };\n    }\n\n    const offset = itemOffsetMap[itemData[index]] || 0;\n    const size = itemSizeMap[itemData[index]] || 0;\n\n    return {offset, size};\n};\n\nconst getItemOffset = (props, index, listMetaData) => getItemMetadata(props, index, listMetaData).offset;\n\nconst getOffsetForIndexAndAlignment = (\n    props,\n    index,\n    align,\n    scrollOffset,\n    listMetaData,\n) => {\n    const {height} = props;\n    const itemMetadata = getItemMetadata(props, index, listMetaData);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = listMetaData.totalMeasuredSize;\n\n    const maxOffset = Math.max(0, (itemMetadata.offset + itemMetadata.size) - height);\n    const minOffset = Math.max(0, itemMetadata.offset);\n\n    switch (align) {\n    case 'start':\n        return minOffset;\n    case 'end':\n        return maxOffset;\n    case 'center':\n        return Math.round(((minOffset - (height / 2)) + (itemMetadata.size / 2)));\n    case 'auto':\n    default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n            return estimatedTotalSize - (scrollOffset + height);\n        } else if (scrollOffset - minOffset < maxOffset - scrollOffset) {\n            return minOffset;\n        }\n        return maxOffset;\n    }\n};\n\nconst findNearestItem = (props, listMetaData, high, low, scrollOffset) => {\n    let index = low;\n    while (low <= high) {\n        var currentOffset = getItemMetadata(props, low, listMetaData).offset;\n        if (scrollOffset - currentOffset <= 0) {\n            index = low;\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        low++;\n    }\n    return index;\n};\n\nconst getStartIndexForOffset = (props, offset, listMetaData) => {\n    const {totalMeasuredSize} = listMetaData;\n    const {itemData} = props;\n\n    // If we've already positioned and measured past this point,\n    // Use a binary search to find the closets cell.\n    if (offset <= totalMeasuredSize) {\n        return findNearestItem(props, listMetaData, itemData.length, 0, offset);\n    }\n\n    // Otherwise render a new batch of items starting from where 0.\n    return 0;\n};\n\nconst getStopIndexForStartIndex = (\n    props,\n    startIndex,\n    scrollOffset,\n    listMetaData,\n) => {\n    const {itemData} = props;\n\n    let stopIndex = startIndex;\n    const maxOffset = scrollOffset + props.height;\n    const itemMetadata = getItemMetadata(props, stopIndex, listMetaData);\n    let offset = itemMetadata.offset + (itemMetadata.size || 0);\n\n    while (stopIndex > 0 && offset <= maxOffset) {\n        const itemMetadata = getItemMetadata(props, stopIndex, listMetaData);\n        offset = itemMetadata.offset + itemMetadata.size;\n        stopIndex--;\n    }\n\n    if (stopIndex >= itemData.length) {\n        return 0;\n    }\n\n    return stopIndex;\n};\n\nconst getItemSize = (props, index, listMetaData) => {\n    // Do not hard-code item dimensions.\n    // We don't know them initially.\n    // Even once we do, changes in item content or list size should reflow.\n    return getItemMetadata(props, index, listMetaData).size;\n};\n\nexport default DynamicVirtualizedList;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport type {FormatDateOptions} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {EyeOffOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getOldestPostTimeInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {isAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport useGetLimits from 'components/common/hooks/useGetLimits';\nimport {NotifyStatus} from 'components/common/hooks/useGetNotifyAdmin';\nimport useOpenPricingModal from 'components/common/hooks/useOpenPricingModal';\nimport {useNotifyAdmin} from 'components/notify_admin_cta/notify_admin_cta';\n\nimport {LicenseSkus, MattermostFeatures} from 'utils/constants';\n\nimport './index.scss';\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nconst ONE_YEAR_MS = ONE_DAY_MS * 365;\n\ninterface Props {\n    channelId?: string;\n    firstInaccessiblePostTime?: number;\n}\n\n// returns the same time on the next day.\nfunction getNextDay(timestamp?: number): number {\n    if (timestamp === undefined) {\n        return 0;\n    }\n\n    return timestamp + ONE_DAY_MS;\n}\n\nexport default function CenterMessageLock(props: Props) {\n    const intl = useIntl();\n\n    const openPricingModal = useOpenPricingModal();\n    const isAdminUser = isAdmin(useSelector(getCurrentUser).roles);\n    const [cloudLimits, limitsLoaded] = useGetLimits();\n    const currentTeam = useSelector(getCurrentTeam);\n\n    // firstInaccessiblePostTime is the most recently inaccessible post's created at date.\n    // It is used as a backup for when there are no available posts in the channel;\n    // The message then shows that the user can retrieve messages prior to the day\n    // **after** the most recent day with inaccessible posts.\n    const oldestPostTime = useSelector((state: GlobalState) => getOldestPostTimeInChannel(state, props.channelId || '')) || getNextDay(props.firstInaccessiblePostTime);\n    const [notifyAdminBtnText, notifyAdmin, notifyRequestStatus] = useNotifyAdmin({\n        ctaText: intl.formatMessage({\n            id: 'workspace_limits.message_history.locked.cta.end_user',\n            defaultMessage: 'Notify Admin',\n        }),\n    }, {\n        required_feature: MattermostFeatures.UNLIMITED_MESSAGES,\n        required_plan: LicenseSkus.Professional,\n        trial_notification: false,\n    });\n\n    if (!limitsLoaded) {\n        return null;\n    }\n\n    const dateFormat: FormatDateOptions = {month: 'long', day: 'numeric'};\n    if (Date.now() - oldestPostTime >= ONE_YEAR_MS) {\n        dateFormat.year = 'numeric';\n    }\n    const titleValues = {\n        date: intl.formatDate(oldestPostTime, dateFormat),\n        team: currentTeam?.display_name,\n    };\n\n    const limit = intl.formatNumber(cloudLimits?.messages?.history || 0);\n\n    let title = intl.formatMessage(\n        {\n            id: 'workspace_limits.message_history.locked.title.end_user',\n            defaultMessage: 'Notify your admin to unlock messages prior to {date} in {team}',\n        },\n        titleValues,\n    );\n    let description: React.ReactNode = intl.formatMessage(\n        {\n            id: 'workspace_limits.message_history.locked.description.end_user',\n            defaultMessage: 'Some older messages may not be shown because your workspace has over {limit} messages. Select Notify Admin to send an automatic request to your System Admins to upgrade.',\n        },\n        {\n            limit,\n        },\n    );\n\n    let cta = (\n        <button\n            className='btn btn-primary'\n            onClick={(e) => notifyAdmin(e, 'center_channel_posts_over_limit_banner')}\n            disabled={notifyRequestStatus === NotifyStatus.AlreadyComplete}\n        >\n            {notifyAdminBtnText}\n        </button>);\n\n    if (isAdminUser) {\n        title = intl.formatMessage({\n            id: 'workspace_limits.message_history.locked.title.admin',\n            defaultMessage: 'Unlock messages prior to {date} in {team}',\n        }, titleValues);\n\n        description = intl.formatMessage(\n            {\n                id: 'workspace_limits.message_history.locked.description.admin',\n                defaultMessage: 'To view and search all of the messages in your workspace’s history, rather than just the most recent {limit} messages, upgrade to one of our paid plans. <a>Review our plan options and pricing.</a>',\n            },\n            {\n                limit,\n                a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                    <a\n                        href='#'\n                        onClick={(e: React.MouseEvent) => {\n                            e.preventDefault();\n                            openPricingModal({trackingLocation: 'center_channel_posts_over_limit_banner'});\n                        }}\n                    >\n                        {chunks}\n                    </a>\n                ),\n            },\n        );\n\n        cta = (\n            <button\n                className='btn is-admin'\n                onClick={() => openPricingModal({trackingLocation: 'center_channel_posts_over_limit_banner'})}\n            >\n                {\n                    intl.formatMessage({\n                        id: 'workspace_limits.message_history.locked.cta.admin',\n                        defaultMessage: 'Upgrade now',\n                    })\n                }\n            </button>\n        );\n    }\n\n    return (<div className='CenterMessageLock'>\n        <div className='CenterMessageLock__left'>\n            <EyeOffOutlineIcon color={'rgba(var(--center-channel-color-rgb), 0.75)'}/>\n        </div>\n        <div className='CenterMessageLock__right'>\n            <div className='CenterMessageLock__title'>\n                {title}\n            </div>\n            <div className='CenterMessageLock__description'>\n                {description}\n            </div>\n            <div className='CenterMessageLock__cta'>\n                {cta}\n            </div>\n        </div>\n    </div>);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n};\n\nconst PrivateChannelIntroSvg = (props: SvgProps) => (\n    <svg\n        width={props.width ?? '130'}\n        height={props.height ?? '102'}\n        viewBox='0 0 130 102'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        xmlnsXlink='http://www.w3.org/1999/xlink'\n        {...props}\n    >\n        <g clipPath='url(#clip0_4212_90419)'>\n            <path\n                d='M2.50001 16L2.5 31L127.5 31L127.5 75L66 75'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n                strokeLinecap='round'\n            />\n            <path\n                d='M2.5 69L2.5 42L29 42'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n                strokeLinecap='round'\n            />\n            <path\n                d='M18.5 70.5L18.5 56.5L106 56.5'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 0 16)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 0 74)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 16 74)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='71'\n                cy='59'\n                r='43'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.12'\n            />\n            <path\n                d='M110.748 91.5258L119 100V56C119 54.8954 118.105 54 117 54H76.0005C74.8959 54 74.0005 54.8954 74.0005 56V88.9211C74.0005 90.0256 74.8959 90.9211 76.0005 90.9211H109.316C109.855 90.9211 110.372 91.1391 110.748 91.5258Z'\n                fill='#28427B'\n            />\n            <circle\n                opacity='0.48'\n                cx='86.831'\n                cy='65.831'\n                r='5.83099'\n                fill='var(--button-color)'\n            />\n            <path\n                opacity='0.4'\n                d='M96 64H112'\n                stroke='var(--button-color-rgb)'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M82 79H103.38'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M82 83H96.2535'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M96 68H110'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M82 75H93.0141'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M95.6064 75H107.268'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                d='M28.605 67.5638L15 81V12C15 10.8954 15.8954 10 17 10H83C84.1046 10 85 10.8954 85 12V64.9868C85 66.0914 84.1046 66.9868 83 66.9868H30.0103C29.4842 66.9868 28.9793 67.1941 28.605 67.5638Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M28.2536 67.2081L15.5 79.8035V12C15.5 11.1716 16.1716 10.5 17 10.5H83C83.8284 10.5 84.5 11.1716 84.5 12V64.9868C84.5 65.8153 83.8284 66.4868 83 66.4868H30.0103C29.3527 66.4868 28.7215 66.746 28.2536 67.2081Z'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n            />\n            <circle\n                cx='33'\n                cy='29'\n                r='9'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.4'\n            />\n            <path\n                d='M48 25H64'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 49H62'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 55H47'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M48 31H73'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 43H42'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46 43H64'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='78'\n                cy='19'\n                r='19'\n                fill='#32539A'\n            />\n            <path\n                d='M98 49L80 49'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M76 49L70 49'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M67 49L65 49'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <circle\n                cx='44'\n                cy='75'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='52'\n                cy='75'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='60'\n                cy='75'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <rect\n                x='70.5'\n                y='15.5'\n                width='15'\n                height='12'\n                rx='1.5'\n                stroke='var(--button-color)'\n            />\n            <path\n                d='M73 16V13C73 10.2386 75.2386 8 78 8V8C80.7614 8 83 10.2386 83 13V16'\n                stroke='var(--button-color)'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0_4212_90419'>\n                <rect\n                    width='130'\n                    height='102'\n                    fill='white'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default PrivateChannelIntroSvg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n};\n\nconst PublicChannelIntroSvg = (props: SvgProps) => (\n    <svg\n        width={props.width ?? '130'}\n        height={props.height ?? '102'}\n        viewBox='0 0 130 102'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        xmlnsXlink='http://www.w3.org/1999/xlink'\n    >\n        <g clipPath='url(#clip0_4212_90121)'>\n            <path\n                d='M2.50001 16L2.5 31L127.5 31L127.5 75L66 75'\n                stroke='rgba(var(--center-channel-color-rgb), 0.32)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M2.5 69L2.5 42L29 42'\n                stroke='rgba(var(--center-channel-color-rgb), 0.32)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M18.5 70.5L18.5 56.5L106 56.5'\n                stroke='rgba(var(--center-channel-color-rgb), 0.32)'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 0 16)'\n                fill='rgba(var(--center-channel-color-rgb), 0.32)'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 0 74)'\n                fill='rgba(var(--center-channel-color-rgb), 0.32)'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 16 74)'\n                fill='rgba(var(--center-channel-color-rgb), 0.32)'\n            />\n            <circle\n                cx='71'\n                cy='59'\n                r='43'\n                fill='rgba(var(--center-channel-color-rgb), 0.12)'\n            />\n            <path\n                d='M110.748 91.5258L119 100V56C119 54.8954 118.105 54 117 54H76.0005C74.8959 54 74.0005 54.8954 74.0005 56V88.9211C74.0005 90.0256 74.8959 90.9211 76.0005 90.9211H109.316C109.855 90.9211 110.372 91.1391 110.748 91.5258Z'\n                fill='#28427B'\n            />\n            <circle\n                opacity='0.48'\n                cx='86.831'\n                cy='65.831'\n                r='5.83099'\n                fill='var(--button-color)'\n            />\n            <path\n                opacity='0.4'\n                d='M96 64H112'\n                stroke='var(--button-color-rgb)'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M82 79H103.38'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M82 83H96.2535'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M96 68H110'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M82 75H93.0141'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M95.6064 75H107.268'\n                stroke='rgba(var(--button-color-rgb))'\n                strokeLinecap='round'\n            />\n            <path\n                d='M28.605 67.5638L15 81V12C15 10.8954 15.8954 10 17 10H83C84.1046 10 85 10.8954 85 12V64.9868C85 66.0914 84.1046 66.9868 83 66.9868H30.0103C29.4842 66.9868 28.9793 67.1941 28.605 67.5638Z'\n                fill='rgba(var(--center-channel-bg-rgb))'\n            />\n            <path\n                d='M28.2536 67.2081L15.5 79.8035V12C15.5 11.1716 16.1716 10.5 17 10.5H83C83.8284 10.5 84.5 11.1716 84.5 12V64.9868C84.5 65.8153 83.8284 66.4868 83 66.4868H30.0103C29.3527 66.4868 28.7215 66.746 28.2536 67.2081Z'\n                stroke='rgba(var(--center-channel-color-rgb), 0.8)'\n            />\n            <circle\n                cx='33'\n                cy='29'\n                r='9'\n                fill='rgba(var(--center-channel-color-rgb), 0.4)'\n            />\n            <path\n                d='M48 25H64'\n                stroke='rgba(var(--center-channel-color-rgb), 0.4)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 49H62'\n                stroke='rgba(var(--center-channel-color-rgb), 0.4)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 55H47'\n                stroke='rgba(var(--center-channel-color-rgb), 0.4)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M48 31H73'\n                stroke='rgba(var(--center-channel-color-rgb), 0.4)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 43H42'\n                stroke='rgba(var(--center-channel-color-rgb), 0.4)'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46 43H64'\n                stroke='rgba(var(--center-channel-color-rgb), 0.4)'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='78'\n                cy='19'\n                r='19'\n                fill='#32539A'\n            />\n            <path\n                d='M98 49L80 49'\n                stroke='rgba(var(--center-channel-color-rgb), 0.8)'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M76 49L70 49'\n                stroke='rgba(var(--center-channel-color-rgb), 0.8)'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M67 49L65 49'\n                stroke='rgba(var(--center-channel-color-rgb), 0.8)'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <circle\n                cx='44'\n                cy='75'\n                r='2'\n                fill='rgba(var(--center-channel-color-rgb), 0.32)'\n            />\n            <circle\n                cx='52'\n                cy='75'\n                r='2'\n                fill='rgba(var(--center-channel-color-rgb), 0.32)'\n            />\n            <circle\n                cx='60'\n                cy='75'\n                r='2'\n                fill='rgba(var(--center-channel-color-rgb), 0.32)'\n            />\n            <circle\n                cx='78'\n                cy='19'\n                r='9.5'\n                stroke='rgba(var(--button-color-rgb))'\n            />\n            <path\n                d='M87.5 20.2525C86.1859 21.8482 82.4292 23 78 23C73.5708 23 69.8141 21.8482 68.5 20.2525'\n                stroke='rgba(var(--button-color-rgb))'\n            />\n            <path\n                d='M86.6622 15C84.9331 16.1956 81.7014 17 78 17C74.2986 17 71.0669 16.1956 69.3378 15'\n                stroke='rgba(var(--button-color-rgb))'\n            />\n            <path\n                d='M81.5 19C81.5 21.7141 81.059 24.1482 80.3642 25.8854C80.0162 26.7553 79.6144 27.4258 79.1937 27.8706C78.7741 28.3143 78.3705 28.5 78 28.5C77.6295 28.5 77.2259 28.3143 76.8063 27.8706C76.3856 27.4258 75.9838 26.7553 75.6358 25.8854C74.941 24.1482 74.5 21.7141 74.5 19C74.5 16.2859 74.941 13.8518 75.6358 12.1146C75.9838 11.2447 76.3856 10.5742 76.8063 10.1294C77.2259 9.6857 77.6295 9.5 78 9.5C78.3705 9.5 78.7741 9.6857 79.1937 10.1294C79.6144 10.5742 80.0162 11.2447 80.3642 12.1146C81.059 13.8518 81.5 16.2859 81.5 19Z'\n                stroke='rgba(var(--button-color-rgb))'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0_4212_90121'>\n                <rect\n                    width='130'\n                    height='102'\n                    fill='rgba(var(--center-channel-bg-rgb))'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n\n);\n\nexport default PublicChannelIntroSvg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n};\n\nconst SvgComponent = (props: SvgProps) => (\n    <svg\n        width={props.width ?? '130'}\n        height={props.height ?? '92'}\n        viewBox='0 0 130 92'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        xmlnsXlink='http://www.w3.org/1999/xlink'\n        {...props}\n    >\n        <g clipPath='url(#clip0_4210_88396)'>\n            <path\n                d='M2.50001 6.00001L2.5 21L127.5 21L127.5 65L66 65'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.24'\n                strokeLinecap='round'\n            />\n            <path\n                d='M2.49999 59L2.49999 32L29 32'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.24'\n                strokeLinecap='round'\n            />\n            <path\n                d='M18.5 60.5L18.5 46.5L106 46.5'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.24'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 0 6)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 0 64)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 8.74228e-08 8.74228e-08 -1 16 64)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.4'\n            />\n            <circle\n                cx='71'\n                cy='49'\n                r='43'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.12'\n            />\n            <path\n                d='M109.748 82.5258L117.999 91V47C117.999 45.8954 117.104 45 115.999 45H74.9998C73.8952 45 72.9998 45.8954 72.9998 47V79.9211C72.9998 81.0256 73.8952 81.9211 74.9998 81.9211H108.315C108.855 81.9211 109.371 82.1391 109.748 82.5258Z'\n                fill='#28427B'\n            />\n            <circle\n                opacity='0.48'\n                cx='85.8309'\n                cy='56.831'\n                r='5.83099'\n                fill='#FFFFFF'\n            />\n            <path\n                opacity='0.4'\n                d='M94.9999 55H111'\n                stroke='#FFFFFF'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M80.9999 70H102.38'\n                stroke='#FFFFFF'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M80.9999 74H95.2535'\n                stroke='#FFFFFF'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M94.9999 59H109'\n                stroke='#FFFFFF'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M80.9999 66H92.014'\n                stroke='#FFFFFF'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.4'\n                d='M94.6064 66H106.268'\n                stroke='#FFFFFF'\n                strokeLinecap='round'\n            />\n            <path\n                d='M28.605 57.5638L15 71V2C15 0.895431 15.8954 0 17 0H83C84.1046 0 85 0.89543 85 2V54.9868C85 56.0914 84.1046 56.9868 83 56.9868H30.0103C29.4842 56.9868 28.9793 57.1941 28.605 57.5638Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M28.2536 57.2081L15.5 69.8035V2C15.5 1.17157 16.1716 0.5 17 0.5H83C83.8284 0.5 84.5 1.17157 84.5 2V54.9868C84.5 55.8153 83.8284 56.4868 83 56.4868H30.0103C29.3527 56.4868 28.7215 56.746 28.2536 57.2081Z'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n            />\n            <circle\n                cx='33'\n                cy='19'\n                r='9'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.4'\n            />\n            <path\n                d='M48 15H64'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 39H69'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 45H47'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M48 21H73'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M25 33H42'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46 33H64'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.4'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='44'\n                cy='65'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='52'\n                cy='65'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <circle\n                cx='60'\n                cy='65'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M101 33L83 33'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M79 33L73 33'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M70 33L68 33'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0_4210_88396'>\n                <rect\n                    width='130'\n                    height='92'\n                    fill='white'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default SvgComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport InvitationModal from 'components/invitation_modal';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\n\nimport './add_members_button.scss';\n\nexport interface AddMembersButtonProps {\n    totalUsers?: number;\n    usersLimit: number;\n    channel: Channel;\n    pluginButtons?: React.ReactNode;\n}\n\nconst AddMembersButton: React.FC<AddMembersButtonProps> = ({totalUsers, usersLimit, channel, pluginButtons}: AddMembersButtonProps) => {\n    const currentTeamId = useSelector(getCurrentTeamId);\n\n    if (!totalUsers) {\n        return (<LoadingSpinner/>);\n    }\n\n    const inviteUsers = totalUsers < usersLimit;\n\n    return (\n        <TeamPermissionGate\n            teamId={currentTeamId}\n            permissions={[Permissions.ADD_USER_TO_TEAM, Permissions.INVITE_GUEST]}\n        >\n            {inviteUsers ? (\n                <LessThanMaxFreeUsers\n                    pluginButtons={pluginButtons}\n                />\n            ) : (\n                <MoreThanMaxFreeUsers\n                    channel={channel}\n                    pluginButtons={pluginButtons}\n                />\n            )}\n        </TeamPermissionGate>\n    );\n};\n\nconst LessThanMaxFreeUsers = ({pluginButtons}: {pluginButtons: React.ReactNode}) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            {pluginButtons}\n            <div className='LessThanMaxFreeUsers'>\n                <ToggleModalButton\n                    id='introTextInvite'\n                    className='btn btn-sm btn-primary'\n                    modalId={ModalIdentifiers.INVITATION}\n                    dialogType={InvitationModal}\n                    onClick={() => trackEvent('channel_intro_message', 'click_invite_button')}\n                    dialogProps={{focusOriginElement: 'browseOrAddChannelMenuButton'}}\n                >\n                    <i\n                        className='icon-email-plus-outline'\n                        title={formatMessage({id: 'generic_icons.add', defaultMessage: 'Add Icon'})}\n                        aria-hidden='true'\n                    />\n                    <FormattedMessage\n                        id='intro_messages.inviteOthersToWorkspace.button'\n                        defaultMessage='Invite others to the workspace'\n                    />\n                </ToggleModalButton>\n            </div>\n        </>\n    );\n};\n\nconst MoreThanMaxFreeUsers = ({channel, pluginButtons}: {channel: Channel; pluginButtons: React.ReactNode}) => {\n    const {formatMessage} = useIntl();\n\n    const modalId = channel.group_constrained ? ModalIdentifiers.ADD_GROUPS_TO_CHANNEL : ModalIdentifiers.CHANNEL_INVITE;\n    const modal = channel.group_constrained ? AddGroupsToChannelModal : ChannelInviteModal;\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n\n    return (\n        <div className='MoreThanMaxFreeUsersWrapper'>\n            <div className='MoreThanMaxFreeUsers'>\n                <ChannelPermissionGate\n                    channelId={channel.id}\n                    teamId={channel.team_id}\n                    permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS]}\n                >\n                    <ToggleModalButton\n                        className='action-button'\n                        modalId={modalId}\n                        dialogType={modal}\n                        dialogProps={{channel}}\n                    >\n                        <i\n                            className='icon-account-plus-outline'\n                            title={formatMessage({id: 'generic_icons.add', defaultMessage: 'Add Icon'})}\n                            aria-hidden='true'\n                        />\n                        {channel.group_constrained &&\n                            <FormattedMessage\n                                id='intro_messages.inviteGropusToChannel.button'\n                                defaultMessage='Add groups'\n                            />}\n                        {!channel.group_constrained &&\n                            <FormattedMessage\n                                id='intro_messages.inviteMembersToChannel.button'\n                                defaultMessage='Add people'\n                            />}\n                    </ToggleModalButton>\n                </ChannelPermissionGate>\n            </div>\n            {pluginButtons}\n        </div>\n    );\n};\n\nexport default React.memo(AddMembersButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\n\nimport type {ChannelIntroButtonAction} from 'types/store/plugins';\n\ntype Props = {\n    channel: Channel;\n    channelMember?: ChannelMembership;\n    pluginButtons: ChannelIntroButtonAction[];\n}\n\nconst PluggableIntroButtons = React.memo(({\n    channel,\n    pluginButtons,\n    channelMember,\n}: Props) => {\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived || pluginButtons.length === 0 || !channelMember) {\n        return null;\n    }\n\n    const buttons = pluginButtons.map((buttonProps) => {\n        return (\n            <button\n                key={buttonProps.id}\n                className={'action-button'}\n                onClick={() => buttonProps.action?.(channel, channelMember)}\n            >\n                {buttonProps.icon}\n                {buttonProps.text}\n            </button>\n        );\n    });\n\n    return <>{buttons}</>;\n});\nPluggableIntroButtons.displayName = 'PluggableIntroButtons';\n\nexport default PluggableIntroButtons;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getMyChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getChannelIntroPluginButtons} from 'selectors/plugins';\n\nimport type {GlobalState} from 'types/store';\n\nimport PluggableIntroButtons from './pluggable_intro_buttons';\n\ntype OwnProps = {\n    channel: Channel;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    return {\n        channelMember: getMyChannelMembership(state, ownProps.channel.id),\n        pluginButtons: getChannelIntroPluginButtons(state),\n    };\n}\n\nexport default connect(mapStateToProps)(PluggableIntroButtons);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, defineMessages} from 'react-intl';\n\nimport {BellRingOutlineIcon, GlobeIcon, PencilOutlineIcon, StarOutlineIcon, LockOutlineIcon, StarIcon} from '@mattermost/compass-icons/components';\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {UserProfile as UserProfileType} from '@mattermost/types/users';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {NotificationLevel} from 'mattermost-redux/constants/channels';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport ChannelIntroPrivateSvg from 'components/common/svg_images_components/channel_intro_private_svg';\nimport ChannelIntroPublicSvg from 'components/common/svg_images_components/channel_intro_public_svg';\nimport ChannelIntroTownSquareSvg from 'components/common/svg_images_components/channel_intro_town_square_svg';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport ProfilePicture from 'components/profile_picture';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport UserProfile from 'components/user_profile';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {getMonthLong} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\n\nimport AddMembersButton from './add_members_button';\nimport PluggableIntroButtons from './pluggable_intro_buttons';\n\ntype Props = {\n    currentUserId: string;\n    channel?: Channel;\n    fullWidth: boolean;\n    locale: string;\n    channelProfiles: UserProfileType[];\n    enableUserCreation?: boolean;\n    isReadOnly?: boolean;\n    isFavorite: boolean;\n    teamIsGroupConstrained?: boolean;\n    creatorName: string;\n    teammate?: UserProfileType;\n    teammateName?: string;\n    currentUser: UserProfileType;\n    stats: any;\n    usersLimit: number;\n    channelMember?: ChannelMembership;\n    isMobileView: boolean;\n    actions: {\n        getTotalUsersStats: () => any;\n        favoriteChannel: (channelId: string) => any;\n        unfavoriteChannel: (channelId: string) => any;\n    };\n}\n\nexport default class ChannelIntroMessage extends React.PureComponent<Props> {\n    toggleFavorite = () => {\n        if (!this.props.channel) {\n            return;\n        }\n\n        if (this.props.isFavorite) {\n            this.props.actions.unfavoriteChannel(this.props.channel.id);\n        } else {\n            this.props.actions.favoriteChannel(this.props.channel.id);\n        }\n    };\n\n    componentDidMount() {\n        if (!this.props.stats?.total_users_count) {\n            this.props.actions.getTotalUsersStats();\n        }\n    }\n\n    render() {\n        const {\n            currentUserId,\n            channel,\n            fullWidth,\n            locale,\n            channelProfiles,\n            enableUserCreation,\n            isReadOnly,\n            isFavorite,\n            teamIsGroupConstrained,\n            creatorName,\n            teammate,\n            teammateName,\n            currentUser,\n            stats,\n            usersLimit,\n            channelMember,\n            isMobileView,\n        } = this.props;\n\n        let centeredIntro = '';\n        if (!fullWidth) {\n            centeredIntro = 'channel-intro--centered';\n        }\n\n        if (!channel) {\n            return null;\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            return createDMIntroMessage(channel, centeredIntro, currentUser, isFavorite, isMobileView, this.toggleFavorite, teammate, teammateName);\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            return createGMIntroMessage(channel, centeredIntro, isFavorite, isMobileView, this.toggleFavorite, channelProfiles, currentUserId, currentUser, channelMember);\n        } else if (channel.name === Constants.DEFAULT_CHANNEL) {\n            return createDefaultIntroMessage(channel, centeredIntro, currentUser, isFavorite, isMobileView, this.toggleFavorite, stats, usersLimit, enableUserCreation, isReadOnly, teamIsGroupConstrained);\n        } else if (channel.name === Constants.OFFTOPIC_CHANNEL) {\n            return createOffTopicIntroMessage(channel, centeredIntro, isFavorite, isMobileView, currentUser, this.toggleFavorite, stats, usersLimit);\n        } else if (channel.type === Constants.OPEN_CHANNEL || channel.type === Constants.PRIVATE_CHANNEL) {\n            return createStandardIntroMessage(channel, centeredIntro, currentUser, isFavorite, isMobileView, this.toggleFavorite, stats, usersLimit, locale, creatorName);\n        }\n        return null;\n    }\n}\n\nconst gmIntroMessages = defineMessages({\n    muted: {id: 'intro_messages.GM.muted', defaultMessage: 'This group message is currently <b>muted</b>, so you will not be notified.'},\n    [NotificationLevel.ALL]: {id: 'intro_messages.GM.all', defaultMessage: 'You\\'ll be notified <b>for all activity</b> in this group message.'},\n    [NotificationLevel.DEFAULT]: {id: 'intro_messages.GM.all', defaultMessage: 'You\\'ll be notified <b>for all activity</b> in this group message.'},\n    [NotificationLevel.MENTION]: {id: 'intro_messages.GM.mention', defaultMessage: 'You have selected to be notified <b>only when mentioned</b> in this group message.'},\n    [NotificationLevel.NONE]: {id: 'intro_messages.GM.none', defaultMessage: 'You have selected to <b>never</b> be notified in this group message.'},\n});\n\nconst getGMIntroMessageSpecificPart = (userProfile: UserProfileType | undefined, membership: ChannelMembership | undefined) => {\n    const isMuted = isChannelMuted(membership);\n    if (isMuted) {\n        return (\n            <FormattedMessage\n                {...gmIntroMessages.muted}\n                values={{\n                    b: (chunks) => <b>{chunks}</b>,\n                }}\n            />\n        );\n    }\n    const channelNotifyProp = membership?.notify_props?.desktop || NotificationLevel.DEFAULT;\n    const userNotifyProp = userProfile?.notify_props?.desktop || NotificationLevel.MENTION;\n    let notifyLevelToUse = channelNotifyProp;\n    if (notifyLevelToUse === NotificationLevel.DEFAULT) {\n        notifyLevelToUse = userNotifyProp;\n    }\n    if (channelNotifyProp === NotificationLevel.DEFAULT && userNotifyProp === NotificationLevel.MENTION) {\n        notifyLevelToUse = NotificationLevel.ALL;\n    }\n\n    return (\n        <FormattedMessage\n            {...gmIntroMessages[notifyLevelToUse]}\n            values={{\n                b: (chunks) => <b>{chunks}</b>,\n            }}\n        />\n    );\n};\n\nfunction createGMIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    profiles: UserProfileType[],\n    currentUserId: string,\n    currentUser: UserProfileType,\n    channelMembership?: ChannelMembership,\n) {\n    const channelIntroId = 'channelIntro';\n\n    if (profiles.length > 0) {\n        const currentUserProfile = profiles.find((v) => v.id === currentUserId);\n\n        const pictures = profiles.\n            filter((profile) => profile.id !== currentUserId).\n            map((profile) => (\n                <ProfilePicture\n                    key={'introprofilepicture' + profile.id}\n                    src={Utils.imageURLForUser(profile.id, profile.last_picture_update)}\n                    size='xl-custom-GM'\n                    userId={profile.id}\n                    username={profile.username}\n                />\n            ));\n\n        const actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {createSetHeaderButton(channel)}\n                {!isMobileView && createNotificationPreferencesButton(channel, currentUser)}\n                <PluggableIntroButtons channel={channel}/>\n            </div>\n        );\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img channel-intro-img__group'>\n                    {pictures}\n                </div>\n                <h2 className='channel-intro__title'>\n                    {channel.display_name}\n                </h2>\n                <p className='channel-intro__text'>\n                    <FormattedMessage\n                        id='intro_messages.group_message'\n                        defaultMessage={'This is the start of your group message history with these teammates. '}\n                    />\n                    {getGMIntroMessageSpecificPart(currentUserProfile, channelMembership)}\n                </p>\n                {actionButtons}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro__text'>\n                <FormattedMessage\n                    id='intro_messages.group_message'\n                    defaultMessage='This is the start of your group message history with these teammates. Messages and files shared here are not shown to people outside this area.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createDMIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    currentUser: UserProfileType,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    teammate?: UserProfileType,\n    teammateName?: string,\n) {\n    const channelIntroId = 'channelIntro';\n    if (teammate) {\n        const src = teammate ? Utils.imageURLForUser(teammate.id, teammate.last_picture_update) : '';\n\n        let pluggableButton = null;\n        let setHeaderButton = null;\n        if (!teammate?.is_bot) {\n            pluggableButton = <PluggableIntroButtons channel={channel}/>;\n            setHeaderButton = createSetHeaderButton(channel);\n        }\n\n        const actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {setHeaderButton}\n                {pluggableButton}\n            </div>\n        );\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img'>\n                    <ProfilePicture\n                        src={src}\n                        size='xl-custom-DM'\n                        status={teammate.is_bot ? '' : channel.status}\n                        userId={teammate?.id}\n                        username={teammate?.username}\n                    />\n                </div>\n                <h2 className='channel-intro__title'>\n                    <UserProfile\n                        userId={teammate?.id}\n                    />\n                </h2>\n                <p className='channel-intro__text'>\n                    <FormattedMessage\n                        id='intro_messages.DM'\n                        defaultMessage='This is the start of your direct message history with {teammate}. Messages and files shared here are not shown to anyone else.'\n                        values={{\n                            teammate: teammateName,\n                        }}\n                    />\n                </p>\n                {actionButtons}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro__text'>\n                <FormattedMessage\n                    id='intro_messages.teammate'\n                    defaultMessage='This is the start of your direct message history with this teammate. Messages and files shared here are not shown to anyone else.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createOffTopicIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    currentUser: UserProfileType,\n    toggleFavorite: () => void,\n    stats: any,\n    usersLimit: number,\n) {\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const children = createSetHeaderButton(channel);\n    const totalUsers = stats.total_users_count;\n    const inviteUsers = totalUsers < usersLimit;\n\n    let setHeaderButton = null;\n    let actionButtons = null;\n\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    const channelInviteButton = (\n        <AddMembersButton\n            totalUsers={totalUsers}\n            usersLimit={usersLimit}\n            channel={channel}\n            pluginButtons={<PluggableIntroButtons channel={channel}/>}\n        />\n    );\n\n    if (inviteUsers) {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {actionButtons = channelInviteButton}\n            </div>\n        );\n    } else {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {setHeaderButton}\n                {createNotificationPreferencesButton(channel, currentUser)}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <ChannelIntroPublicSvg/>\n            <h2 className='channel-intro__title'>\n                {channel.display_name}\n            </h2>\n            <p className='channel-intro__text'>\n                <FormattedMessage\n                    id='intro_messages.offTopic'\n                    defaultMessage='This is the start of {display_name}, a channel for non-work-related conversations.'\n                    values={{\n                        display_name: channel.display_name,\n                    }}\n                />\n            </p>\n            {actionButtons}\n        </div>\n    );\n}\n\nfunction createDefaultIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    currentUser: UserProfileType,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    stats: any,\n    usersLimit: number,\n    enableUserCreation?: boolean,\n    isReadOnly?: boolean,\n    teamIsGroupConstrained?: boolean,\n) {\n    let teamInviteLink = null;\n    const totalUsers = stats.total_users_count;\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const inviteUsers = totalUsers < usersLimit;\n\n    let setHeaderButton = null;\n    let pluginButtons = null;\n    let actionButtons = null;\n\n    if (!isReadOnly) {\n        pluginButtons = <PluggableIntroButtons channel={channel}/>;\n        const children = createSetHeaderButton(channel);\n        if (children) {\n            setHeaderButton = (\n                <ChannelPermissionGate\n                    teamId={channel.team_id}\n                    channelId={channel.id}\n                    permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n                >\n                    {children}\n                </ChannelPermissionGate>\n            );\n        }\n    }\n\n    if (!isReadOnly && enableUserCreation) {\n        teamInviteLink = (\n            <TeamPermissionGate\n                teamId={channel.team_id}\n                permissions={[Permissions.INVITE_USER]}\n            >\n                <TeamPermissionGate\n                    teamId={channel.team_id}\n                    permissions={[Permissions.ADD_USER_TO_TEAM]}\n                >\n                    {!teamIsGroupConstrained &&\n                        <AddMembersButton\n                            totalUsers={totalUsers}\n                            usersLimit={usersLimit}\n                            channel={channel}\n                            pluginButtons={pluginButtons}\n                        />\n                    }\n                    {teamIsGroupConstrained &&\n                    <ToggleModalButton\n                        className='intro-links color--link'\n                        modalId={ModalIdentifiers.ADD_GROUPS_TO_TEAM}\n                        dialogType={AddGroupsToTeamModal}\n                        dialogProps={{channel}}\n                    >\n                        <i\n                            className='fa fa-user-plus'\n                        />\n                        <FormattedMessage\n                            id='intro_messages.addGroupsToTeam'\n                            defaultMessage='Add other groups to this team'\n                        />\n                    </ToggleModalButton>\n                    }\n                </TeamPermissionGate>\n            </TeamPermissionGate>\n        );\n    }\n\n    if (inviteUsers) {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {actionButtons = teamInviteLink}\n            </div>\n        );\n    } else {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {setHeaderButton}\n                {createNotificationPreferencesButton(channel, currentUser)}\n                {teamIsGroupConstrained && pluginButtons}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <ChannelIntroTownSquareSvg/>\n            <h2 className='channel-intro__title'>\n                {channel.display_name}\n            </h2>\n            <p className='channel-intro__text'>\n                {!isReadOnly &&\n                    <FormattedMessage\n                        id='intro_messages.default'\n                        defaultMessage='Welcome to {display_name}. Post messages here that you want everyone to see. Everyone automatically becomes a member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n                {isReadOnly &&\n                    <FormattedMessage\n                        id='intro_messages.readonly.default'\n                        defaultMessage='Welcome to {display_name}. Messages can only be posted by admins. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n            </p>\n            {actionButtons}\n        </div>\n    );\n}\n\nfunction createStandardIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    currentUser: UserProfileType,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    stats: any,\n    usersLimit: number,\n    locale: string,\n    creatorName: string,\n) {\n    const uiName = channel.display_name;\n    let memberMessage;\n    let teamInviteLink = null;\n    const channelIsArchived = channel.delete_at !== 0;\n    const totalUsers = stats.total_users_count;\n    const inviteUsers = totalUsers < usersLimit;\n\n    if (channelIsArchived) {\n        memberMessage = '';\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.onlyInvited'\n                defaultMessage='This is the start of {display_name}. Only invited members can see this private channel.'\n                values={{\n                    display_name: channel.display_name,\n                }}\n            />\n        );\n    } else {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.anyMember'\n                defaultMessage='This is the start of {display_name}. Any team member can join and read this channel.'\n                values={{\n                    display_name: channel.display_name,\n                }}\n            />\n        );\n    }\n\n    const date = (\n        <FormattedDate\n            value={channel.create_at}\n            month={getMonthLong(locale)}\n            day='2-digit'\n            year='numeric'\n        />\n    );\n\n    let createMessage;\n    if (creatorName === '') {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreatorPrivate'\n                    defaultMessage='Private channel created on {date}.'\n                    values={{name: (uiName), date}}\n                />\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreator'\n                    defaultMessage='Public channel created on {date}.'\n                    values={{name: (uiName), date}}\n                />\n            );\n        }\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creatorPrivate'\n                    defaultMessage='Private channel created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    } else if (channel.type === Constants.OPEN_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creator'\n                    defaultMessage='Public channel created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    }\n\n    let purposeMessage;\n    if (channel.purpose && channel.purpose !== '') {\n        purposeMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.purpose'\n                    defaultMessage=\" This channel's purpose is: {purpose}\"\n                    values={{purpose: channel.purpose}}\n                />\n            </span>\n        );\n    }\n\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    let setHeaderButton = null;\n    let actionButtons = null;\n    const children = createSetHeaderButton(channel);\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    teamInviteLink = (\n        <AddMembersButton\n            totalUsers={totalUsers}\n            usersLimit={usersLimit}\n            channel={channel}\n            pluginButtons={<PluggableIntroButtons channel={channel}/>}\n        />\n    );\n\n    if (inviteUsers) {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {actionButtons = teamInviteLink}\n            </div>\n        );\n    } else {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {teamInviteLink}\n                {setHeaderButton}\n                {!isMobileView && createNotificationPreferencesButton(channel, currentUser)}\n                <PluggableIntroButtons channel={channel}/>\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            {isPrivate ? <ChannelIntroPrivateSvg/> : <ChannelIntroPublicSvg/>}\n            <h2 className='channel-intro__title'>\n                {channel.display_name}\n            </h2>\n            <div className='channel-intro__created'>\n                {isPrivate ? <LockOutlineIcon size={14}/> : <GlobeIcon size={14}/>}\n                {createMessage}\n            </div>\n            <p className='channel-intro__text'>\n                {memberMessage}\n                {purposeMessage}\n            </p>\n            {actionButtons}\n        </div>\n    );\n}\n\nfunction createSetHeaderButton(channel: Channel) {\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n\n    return (\n        <ToggleModalButton\n            modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n            ariaLabel={Utils.localizeMessage({id: 'intro_messages.setHeader', defaultMessage: 'Set header'})}\n            className={'action-button'}\n            dialogType={EditChannelHeaderModal}\n            dialogProps={{channel}}\n        >\n            <PencilOutlineIcon\n                size={24}\n            />\n            <FormattedMessage\n                id='intro_messages.setHeader'\n                defaultMessage='Set header'\n            />\n        </ToggleModalButton>\n    );\n}\n\nfunction createFavoriteButton(isFavorite: boolean, toggleFavorite: () => void, classes?: string) {\n    let favoriteText;\n    if (isFavorite) {\n        favoriteText = (\n            <FormattedMessage\n                id='channel_info_rhs.top_buttons.favorited'\n                defaultMessage='Favorited'\n            />);\n    } else {\n        favoriteText = (\n            <FormattedMessage\n                id='channel_info_rhs.top_buttons.favorite'\n                defaultMessage='Favorite'\n            />);\n    }\n    return (\n        <button\n            id='toggleFavoriteIntroButton'\n            className={`action-button ${isFavorite ? 'active' : ''}  ${classes}`}\n            onClick={toggleFavorite}\n            aria-label={'Favorite'}\n        >\n            {isFavorite ? <StarIcon size={24}/> : <StarOutlineIcon size={24}/>}\n            {favoriteText}\n        </button>\n    );\n}\n\nfunction createNotificationPreferencesButton(channel: Channel, currentUser: UserProfileType) {\n    return (\n        <ToggleModalButton\n            id='channelIntroNotificationPreferencesButton'\n            modalId={ModalIdentifiers.CHANNEL_NOTIFICATIONS}\n            ariaLabel={Utils.localizeMessage({id: 'intro_messages.notificationPreferences', defaultMessage: 'Notification Preferences'})}\n            className={'action-button'}\n            dialogType={ChannelNotificationsModal}\n            dialogProps={{channel, currentUser, focusOriginElement: 'channelIntroNotificationPreferencesButton'}}\n        >\n            <BellRingOutlineIcon size={24}/>\n            <FormattedMessage\n                id='intro_messages.notificationPreferences'\n                defaultMessage='Notifications'\n            />\n        </ToggleModalButton>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {favoriteChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\nimport {getTotalUsersStats} from 'mattermost-redux/actions/users';\nimport {getCurrentChannel, getDirectTeammate, getMyCurrentChannelMembership, isCurrentChannelFavorite} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser, getProfilesInCurrentChannel, getCurrentUserId, getUser, getTotalUsersStats as getTotalUsersStatsSelector} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {Preferences} from 'utils/constants';\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelIntroMessage from './channel_intro_message';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enableUserCreation = config.EnableUserCreation === 'true';\n    const isReadOnly = false;\n    const team = getCurrentTeam(state);\n    const channel = getCurrentChannel(state);\n    const channelMember = getMyCurrentChannelMembership(state);\n    const teammate = channel ? getDirectTeammate(state, channel.id) : undefined;\n    const currentUser = getCurrentUser(state);\n    const creator = channel ? getUser(state, channel.creator_id) : undefined;\n\n    const usersLimit = 10;\n\n    const stats = getTotalUsersStatsSelector(state) || {total_users_count: 0};\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        channel,\n        fullWidth: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n        locale: getCurrentLocale(state),\n        channelProfiles: getProfilesInCurrentChannel(state),\n        enableUserCreation,\n        isReadOnly,\n        isFavorite: isCurrentChannelFavorite(state),\n        teamIsGroupConstrained: Boolean(team?.group_constrained),\n        creatorName: getDisplayNameByUser(state, creator),\n        teammate,\n        teammateName: getDisplayNameByUser(state, teammate),\n        currentUser,\n        stats,\n        usersLimit,\n        channelMember,\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTotalUsersStats,\n            favoriteChannel,\n            unfavoriteChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelIntroMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {CloudUsage, Limits} from '@mattermost/types/cloud';\nimport type {Post} from '@mattermost/types/posts';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport * as PostListUtils from 'mattermost-redux/utils/post_list';\n\nimport type {emitShortcutReactToLastPostFrom} from 'actions/post_actions';\n\nimport CenterMessageLock from 'components/center_message_lock';\nimport PostComponent from 'components/post';\nimport ChannelIntroMessage from 'components/post_view/channel_intro_message/';\nimport CombinedUserActivityPost from 'components/post_view/combined_user_activity_post';\nimport DateSeparator from 'components/post_view/date_separator';\nimport NewMessageSeparator from 'components/post_view/new_message_separator/new_message_separator';\n\nimport {PostListRowListIds, Locations} from 'utils/constants';\nimport {isIdNotPost} from 'utils/post_utils';\n\nimport type {NewMessagesSeparatorActionComponent} from 'types/store/plugins';\n\nexport type PostListRowProps = {\n    listId: string;\n    previousListId?: string;\n    fullWidth?: boolean;\n    shouldHighlight?: boolean;\n    loadOlderPosts: () => void;\n    loadNewerPosts: () => void;\n    togglePostMenu: (opened: boolean) => void;\n    post: Post;\n    currentUserId: UserProfile['id'];\n\n    /**\n     * To Check if the current post is last in the list\n     */\n    isLastPost: boolean;\n\n    /**\n     * To check if the state of emoji for last message and from where it was emitted\n     */\n    shortcutReactToLastPostEmittedFrom: string;\n\n    /**\n     * is used for hiding animation of loader\n     */\n    loadingNewerPosts: boolean;\n    loadingOlderPosts: boolean;\n\n    usage: CloudUsage;\n    limits: Limits;\n    limitsLoaded: boolean;\n    exceededLimitChannelId?: string;\n    firstInaccessiblePostTime?: number;\n    channelId: string;\n\n    newMessagesSeparatorActions: NewMessagesSeparatorActionComponent[];\n\n    actions: {\n\n        /**\n          * Function to set or unset emoji picker for last message\n          */\n        emitShortcutReactToLastPostFrom: typeof emitShortcutReactToLastPostFrom;\n    };\n}\n\nexport default class PostListRow extends React.PureComponent<PostListRowProps> {\n    blockShortcutReactToLastPostForNonMessages(listId: string) {\n        const {actions: {emitShortcutReactToLastPostFrom}} = this.props;\n\n        if (isIdNotPost(listId)) {\n            // This is a good escape hatch as any of the above conditions don't return <Post/> component, Emoji picker is only at Post component\n            emitShortcutReactToLastPostFrom(Locations.NO_WHERE);\n        }\n    }\n\n    componentDidUpdate(prevProps: PostListRowProps) {\n        const {listId, isLastPost, shortcutReactToLastPostEmittedFrom} = this.props;\n\n        const shortcutReactToLastPostEmittedFromCenter = prevProps.shortcutReactToLastPostEmittedFrom !== shortcutReactToLastPostEmittedFrom &&\n            shortcutReactToLastPostEmittedFrom === Locations.CENTER;\n\n        // If last post is not a message then we block the shortcut to react to last message, early on\n        if (isLastPost && shortcutReactToLastPostEmittedFromCenter) {\n            this.blockShortcutReactToLastPostForNonMessages(listId);\n        }\n    }\n\n    render() {\n        const {listId, previousListId, loadingOlderPosts, loadingNewerPosts} = this.props;\n        const {\n            OLDER_MESSAGES_LOADER,\n            NEWER_MESSAGES_LOADER,\n            CHANNEL_INTRO_MESSAGE,\n            LOAD_OLDER_MESSAGES_TRIGGER,\n            LOAD_NEWER_MESSAGES_TRIGGER,\n        } = PostListRowListIds;\n\n        if (PostListUtils.isDateLine(listId)) {\n            const date = PostListUtils.getDateForDateLine(listId);\n\n            return (\n                <DateSeparator\n                    key={date}\n                    date={date}\n                />\n            );\n        }\n\n        if (PostListUtils.isStartOfNewMessages(listId)) {\n            return (\n                <NewMessageSeparator\n                    separatorId={listId}\n                    newMessagesSeparatorActions={this.props.newMessagesSeparatorActions}\n                    channelId={this.props.channelId}\n                />\n            );\n        }\n\n        if (this.props.exceededLimitChannelId) {\n            return (\n                <CenterMessageLock\n                    channelId={this.props.exceededLimitChannelId}\n                    firstInaccessiblePostTime={this.props.firstInaccessiblePostTime}\n                />\n            );\n        }\n\n        if (listId === CHANNEL_INTRO_MESSAGE) {\n            return (\n                <ChannelIntroMessage/>\n            );\n        }\n\n        if (listId === LOAD_OLDER_MESSAGES_TRIGGER || listId === LOAD_NEWER_MESSAGES_TRIGGER) {\n            return (\n                <button\n                    className='more-messages-text theme style--none color--link'\n                    onClick={listId === LOAD_OLDER_MESSAGES_TRIGGER ? this.props.loadOlderPosts : this.props.loadNewerPosts}\n                >\n                    <FormattedMessage\n                        id='posts_view.loadMore'\n                        defaultMessage='Load More Messages'\n                    />\n                </button>\n            );\n        }\n\n        const isOlderMessagesLoader = listId === OLDER_MESSAGES_LOADER;\n        const isNewerMessagesLoader = listId === NEWER_MESSAGES_LOADER;\n        if (isOlderMessagesLoader || isNewerMessagesLoader) {\n            const shouldHideAnimation = !loadingOlderPosts && !loadingNewerPosts;\n\n            return (\n                <div\n                    className='loading-screen'\n                >\n                    <div className={classNames('loading__content', {hideAnimation: shouldHideAnimation})}>\n                        <div className='round round-1'/>\n                        <div className='round round-2'/>\n                        <div className='round round-3'/>\n                    </div>\n                </div>\n            );\n        }\n\n        const postProps = {\n            previousPostId: previousListId,\n            shouldHighlight: Boolean(this.props.shouldHighlight),\n            togglePostMenu: this.props.togglePostMenu,\n            isLastPost: this.props.isLastPost,\n        };\n\n        if (PostListUtils.isCombinedUserActivityPost(listId)) {\n            return (\n                <CombinedUserActivityPost\n                    location={Locations.CENTER}\n                    combinedId={listId}\n                    {...postProps}\n                />\n            );\n        }\n\n        return (\n            <PostComponent\n                post={this.props.post}\n                location={Locations.CENTER}\n                {...postProps}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCloudLimits, getCloudLimitsLoaded} from 'mattermost-redux/selectors/entities/cloud';\nimport {getCurrentChannelId, getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getLimitedViews, getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getUsage} from 'mattermost-redux/selectors/entities/usage';\n\nimport {emitShortcutReactToLastPostFrom} from 'actions/post_actions';\nimport {getShortcutReactToLastPostEmittedFrom} from 'selectors/emojis';\n\nimport {PostListRowListIds} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostListRow from './post_list_row';\nimport type {PostListRowProps} from './post_list_row';\n\ntype OwnProps = Pick<PostListRowProps, 'listId'>\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const shortcutReactToLastPostEmittedFrom = getShortcutReactToLastPostEmittedFrom(state);\n    const usage = getUsage(state);\n    const limits = getCloudLimits(state);\n    const limitsLoaded = getCloudLimitsLoaded(state);\n    const post = getPost(state, ownProps.listId);\n    const currentUserId = getCurrentUserId(state);\n    const newMessagesSeparatorActions = state.plugins.components.NewMessagesSeparatorAction;\n\n    const props: Pick<\n    PostListRowProps,\n    'shortcutReactToLastPostEmittedFrom' | 'usage' | 'limits' | 'limitsLoaded' | 'exceededLimitChannelId' | 'firstInaccessiblePostTime' | 'post' | 'currentUserId' | 'newMessagesSeparatorActions'\n    > = {\n        shortcutReactToLastPostEmittedFrom,\n        usage,\n        limits,\n        limitsLoaded,\n        post,\n        currentUserId,\n        newMessagesSeparatorActions,\n    };\n    if ((ownProps.listId === PostListRowListIds.OLDER_MESSAGES_LOADER || ownProps.listId === PostListRowListIds.CHANNEL_INTRO_MESSAGE) && limitsLoaded) {\n        const currentChannelId = getCurrentChannelId(state);\n        const firstInaccessiblePostTime = getLimitedViews(state).channels[currentChannelId];\n        const channelLimitExceeded = Boolean(firstInaccessiblePostTime) || firstInaccessiblePostTime === 0;\n        if (channelLimitExceeded) {\n            props.exceededLimitChannelId = currentChannelId;\n            props.firstInaccessiblePostTime = firstInaccessiblePostTime;\n        }\n    }\n    return props;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            emitShortcutReactToLastPostFrom,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function ScrollToBottomIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                x='0px'\n                y='0px'\n                viewBox='-239 239 21 23'\n                enableBackground='new -239 239 21 23'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.arrow.down', defaultMessage: 'Down Arrow Icon'})}\n            >\n                <path d='M-239,241.4l2.4-2.4l8.1,8.2l8.1-8.2l2.4,2.4l-10.5,10.6L-239,241.4z M-228.5,257.2l8.1-8.2l2.4,2.4l-10.5,10.6l-10.5-10.6 l2.4-2.4L-228.5,257.2z'/>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport ScrollToBottomIcon from 'components/widgets/icons/scroll_to_bottom_icon';\n\ntype Props = {\n    isScrolling: boolean;\n    atBottom?: boolean;\n    onClick: () => void;\n};\n\nconst ScrollToBottomArrows = ({isScrolling, atBottom, onClick}: Props) => {\n    // only show on mobile\n    if (window.innerWidth > 768) {\n        return null;\n    }\n\n    return (\n        <div\n            className={classNames('post-list__arrows', {\n                scrolling: isScrolling && atBottom === false,\n            })}\n            onClick={onClick}\n        >\n            <ScrollToBottomIcon/>\n        </div>\n    );\n};\n\nexport default ScrollToBottomArrows;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport CloseIcon from 'components/widgets/icons/close_icon';\n\nimport './hint_toast.scss';\n\nexport const HINT_TOAST_TESTID = 'hint-toast';\n\ntype Props = {\n    children: React.ReactNode;\n    onDismiss: () => void;\n}\n\nexport const HintToast: React.FC<Props> = ({children, onDismiss}: Props) => {\n    const handleDismiss = () => {\n        if (typeof onDismiss === 'function') {\n            onDismiss();\n        }\n    };\n\n    return (\n        <div\n            data-testid={HINT_TOAST_TESTID}\n            className='hint-toast'\n        >\n            <div\n                className='hint-toast__message'\n            >\n                {children}\n            </div>\n            <div\n                className='hint-toast__dismiss'\n                onClick={handleDismiss}\n                data-testid='dismissHintToast'\n            >\n                <CloseIcon\n                    className='close-btn'\n                    id='dismissHintToast'\n                />\n            </div>\n        </div>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport CloseIcon from 'components/widgets/icons/close_icon';\nimport UnreadBelowIcon from 'components/widgets/icons/unread_below_icon';\n\nimport './scroll_to_bottom_toast.scss';\n\nexport const SCROLL_TO_BOTTOM_TOAST_TESTID = 'scroll-to-bottom-toast';\nexport const SCROLL_TO_BOTTOM_DISMISS_BUTTON_TESTID = 'scroll-to-bottom-toast--dismiss-button';\n\ntype ScrollToBottomToastProps = {\n    onDismiss: () => void;\n    onClick: () => void;\n}\n\nexport const ScrollToBottomToast = ({onDismiss, onClick}: ScrollToBottomToastProps) => {\n    const {formatMessage} = useIntl();\n\n    const jumpToRecentsMessage = formatMessage({\n        id: 'postlist.toast.scrollToBottom',\n        defaultMessage: 'Jump to recents',\n    });\n\n    const handleScrollToBottom: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.preventDefault();\n        onClick();\n    };\n\n    const handleDismiss: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onDismiss();\n    };\n\n    return (\n        <div\n            data-testid={SCROLL_TO_BOTTOM_TOAST_TESTID}\n            className='scroll-to-bottom-toast btn btn-primary'\n            onClick={handleScrollToBottom}\n        >\n            <UnreadBelowIcon/>\n            {jumpToRecentsMessage}\n            <div\n                className='scroll-to-bottom-toast__dismiss'\n                onClick={handleDismiss}\n                data-testid={SCROLL_TO_BOTTOM_DISMISS_BUTTON_TESTID}\n            >\n                <CloseIcon\n                    className='close-btn'\n                    id='dismissScrollToBottomToast'\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollToBottomToast;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport ScrollToBottomToast from './scroll_to_bottom_toast';\n\nexport default ScrollToBottomToast;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape, WrappedComponentProps} from 'react-intl';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getNewMessagesIndex} from 'mattermost-redux/utils/post_list';\n\nimport {HintToast} from 'components/hint-toast/hint_toast';\nimport ScrollToBottomToast from 'components/scroll_to_bottom_toast';\nimport {SearchShortcut} from 'components/search_shortcut';\nimport Timestamp, {RelativeRanges} from 'components/timestamp';\nimport Toast from 'components/toast/toast';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport {isToday} from 'utils/datetime';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {isIdNotPost} from 'utils/post_utils';\n\nimport './toast__wrapper.scss';\n\nconst TOAST_TEXT_COLLAPSE_WIDTH = 500;\n\nconst TOAST_REL_RANGES = [\n    RelativeRanges.TODAY_YESTERDAY,\n];\n\nexport type Props = WrappedComponentProps & RouteComponentProps<{team: string}> & {\n    channelMarkedAsUnread?: boolean;\n    postListIds: string[];\n    latestPostTimeStamp?: number;\n    atBottom: boolean | null;\n    lastViewedBottom: number;\n    width: number;\n    focusedPostId?: string;\n    initScrollOffsetFromBottom: number;\n    updateNewMessagesAtInChannel: (lastViewedAt?: number) => void;\n    scrollToNewMessage: () => void;\n    scrollToLatestMessages: () => void;\n    scrollToUnreadMessages: () => void;\n    updateLastViewedBottomAt: (lastViewedBottom?: number) => void;\n    showSearchHintToast: boolean;\n    onSearchHintDismiss: () => void;\n    showScrollToBottomToast: boolean;\n    onScrollToBottomToastDismiss: () => void;\n    hideScrollToBottomToast: () => void;\n    shouldStartFromBottomWhenUnread: boolean;\n    isNewMessageLineReached: boolean;\n    rootPosts: Record<string, boolean>;\n    lastViewedAt: number;\n    newRecentMessagesCount: number;\n    unreadScrollPosition: string;\n    isCollapsedThreadsEnabled: boolean;\n    unreadCountInChannel: number;\n    atLatestPost?: boolean;\n    channelId: string;\n    intl: IntlShape;\n    actions: {\n        updateToastStatus: (status: boolean) => void;\n    };\n};\n\ntype State = {\n    unreadCount: number;\n    unreadCountInChannel: number;\n    channelMarkedAsUnread?: boolean;\n    lastViewedAt?: number;\n    showUnreadToast?: boolean;\n    showNewMessagesToast?: boolean;\n    showMessageHistoryToast?: boolean;\n    showUnreadWithBottomStartToast?: boolean;\n    showScrollToBottomToast?: boolean;\n};\n\nexport class ToastWrapperClass extends React.PureComponent<Props, State> {\n    mounted?: boolean;\n    static defaultProps = {\n        focusedPostId: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            unreadCountInChannel: props.unreadCountInChannel,\n            unreadCount: 0,\n        };\n    }\n\n    static countNewMessages = (rootPosts: Record<string, boolean>, isCollapsedThreadsEnabled: boolean, postListIds: string[] = []) => {\n        const mark = getNewMessagesIndex(postListIds);\n        if (mark <= 0) {\n            return 0;\n        }\n        let newMessages = postListIds.slice(0, mark).filter((id) => !isIdNotPost(id));\n        if (isCollapsedThreadsEnabled) { // in collapsed mode we only count root posts\n            newMessages = newMessages.filter((id) => rootPosts[id]);\n        }\n        return newMessages.length;\n    };\n\n    static getDerivedStateFromProps(props: Props, prevState: State) {\n        let {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast} = prevState;\n        let unreadCount;\n\n        if (props.atLatestPost) {\n            if (props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST && prevState.unreadCountInChannel) {\n                unreadCount = prevState.unreadCountInChannel + props.newRecentMessagesCount;\n            } else {\n                unreadCount = ToastWrapperClass.countNewMessages(props.rootPosts, props.isCollapsedThreadsEnabled, props.postListIds);\n            }\n        } else if (props.channelMarkedAsUnread) {\n            if (props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST) {\n                unreadCount = props.unreadCountInChannel + props.newRecentMessagesCount;\n            } else {\n                unreadCount = prevState.unreadCountInChannel;\n            }\n        } else {\n            unreadCount = prevState.unreadCountInChannel + props.newRecentMessagesCount;\n        }\n\n        // show unread toast on mount when channel is not at bottom and unread count greater than 0\n        if (typeof showUnreadToast === 'undefined' && props.atBottom !== null) {\n            showUnreadToast = unreadCount > 0 && !props.atBottom;\n        }\n\n        if (typeof showMessageHistoryToast === 'undefined' && props.focusedPostId !== '' && props.atBottom !== null) {\n            showMessageHistoryToast = props.initScrollOffsetFromBottom > 1000 || !props.atLatestPost;\n        }\n\n        // show unread toast when a channel is marked as unread\n        if (props.channelMarkedAsUnread && (props.atBottom === false) && !prevState.channelMarkedAsUnread && !prevState.showUnreadToast) {\n            showUnreadToast = true;\n        }\n\n        // show unread toast when a channel is remarked as unread using the change in lastViewedAt\n        // lastViewedAt changes only if a channel is remarked as unread in channelMarkedAsUnread state\n        if (props.channelMarkedAsUnread && props.lastViewedAt !== prevState.lastViewedAt && (props.atBottom === false)) {\n            showUnreadToast = true;\n        }\n\n        if (!showUnreadToast && unreadCount > 0 && (props.atBottom === false) && props.latestPostTimeStamp && (props.lastViewedBottom < props.latestPostTimeStamp)) {\n            showNewMessagesToast = true;\n        }\n\n        if (props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST && !props.channelMarkedAsUnread) {\n            showUnreadToast = false;\n        }\n\n        if (!unreadCount) {\n            showUnreadToast = false;\n            showNewMessagesToast = false;\n        }\n\n        if (props.isNewMessageLineReached) {\n            showUnreadWithBottomStartToast = false;\n        }\n\n        if (\n            typeof showUnreadWithBottomStartToast === 'undefined' &&\n            props.lastViewedAt &&\n            props.lastViewedAt !== prevState.lastViewedAt &&\n            props.shouldStartFromBottomWhenUnread &&\n            unreadCount > 0 &&\n            !props.isNewMessageLineReached\n        ) {\n            showUnreadWithBottomStartToast = true;\n        }\n\n        return {\n            unreadCount,\n            showUnreadToast,\n            showNewMessagesToast,\n            showUnreadWithBottomStartToast,\n            lastViewedAt: props.lastViewedAt,\n            atBottom: props.atBottom,\n            channelMarkedAsUnread: props.channelMarkedAsUnread,\n            showMessageHistoryToast,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        const {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast} = this.state;\n        const toastPresent = Boolean(showUnreadToast || showNewMessagesToast || showMessageHistoryToast || showUnreadWithBottomStartToast);\n        document.addEventListener('keydown', this.handleShortcut);\n        this.props.actions.updateToastStatus(toastPresent);\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast} = this.state;\n        const {\n            atBottom,\n            atLatestPost,\n            postListIds,\n            lastViewedBottom,\n            updateNewMessagesAtInChannel,\n            actions,\n        } = this.props;\n\n        if (!prevProps.atBottom && atBottom && atLatestPost) {\n            this.hideNewMessagesToast(false);\n            this.hideUnreadToast();\n            this.hideArchiveToast();\n        }\n\n        const prevPostsCount = prevProps.postListIds.length;\n        const presentPostsCount = postListIds.length;\n        const postsAddedAtBottom = presentPostsCount !== prevPostsCount && postListIds[0] !== prevProps.postListIds[0];\n        const notBottomWithLatestPosts = atBottom === false && atLatestPost && presentPostsCount > 0;\n\n        //Marking existing messages as read based on last time user reached to the bottom\n        //This moves the new message indicator to the latest posts and keeping in sync with the toast count\n        if (postsAddedAtBottom && notBottomWithLatestPosts && !showUnreadToast) {\n            updateNewMessagesAtInChannel(lastViewedBottom);\n        }\n\n        const toastStateChanged = prevState.showUnreadToast !== showUnreadToast ||\n                                  prevState.showNewMessagesToast !== showNewMessagesToast ||\n                                  prevState.showMessageHistoryToast !== showMessageHistoryToast ||\n                                  prevState.showUnreadWithBottomStartToast !== showUnreadWithBottomStartToast;\n\n        if (toastStateChanged) {\n            const toastPresent = Boolean(showUnreadToast || showNewMessagesToast || showMessageHistoryToast || showUnreadWithBottomStartToast);\n            actions.updateToastStatus(toastPresent);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n    }\n\n    handleShortcut = (e: KeyboardEvent) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE)) {\n            if (this.state.showUnreadToast) {\n                this.hideUnreadToast();\n            } else if (this.state.showNewMessagesToast) {\n                this.hideNewMessagesToast();\n            } else if (this.state.showUnreadWithBottomStartToast) {\n                this.hideUnreadWithBottomStartToast();\n            } else {\n                this.hideArchiveToast();\n            }\n        }\n    };\n\n    hideUnreadToast = () => {\n        if (this.state.showUnreadToast) {\n            this.setState({\n                showUnreadToast: false,\n            });\n        }\n    };\n\n    hideArchiveToast = () => {\n        if (this.state.showMessageHistoryToast) {\n            this.setState({\n                showMessageHistoryToast: false,\n            });\n        }\n    };\n\n    hideNewMessagesToast = (updateLastViewedBottomAt = true) => {\n        if (this.state.showNewMessagesToast) {\n            this.setState({\n                showNewMessagesToast: false,\n            });\n            if (updateLastViewedBottomAt) {\n                this.props.updateLastViewedBottomAt();\n            }\n        }\n    };\n\n    hideSearchHintToast = () => {\n        if (this.props.onSearchHintDismiss) {\n            this.props.onSearchHintDismiss();\n        }\n    };\n\n    hideUnreadWithBottomStartToast = () => {\n        if (this.state.showUnreadWithBottomStartToast) {\n            this.setState({\n                showUnreadWithBottomStartToast: false,\n            });\n        }\n    };\n\n    newMessagesToastText = (count: number | undefined, since: number) => {\n        if (this.props.width > TOAST_TEXT_COLLAPSE_WIDTH && typeof since !== 'undefined') {\n            return (\n                <FormattedMessage\n                    id='postlist.toast.newMessagesSince'\n                    defaultMessage='{count, number} new {count, plural, one {message} other {messages}} {isToday, select, true {} other {since}} {date}'\n                    values={{\n                        count,\n                        isToday: isToday(new Date(since)).toString(),\n                        date: (\n                            <Timestamp\n                                value={since}\n                                useTime={false}\n                                ranges={TOAST_REL_RANGES}\n                            />\n                        ),\n                    }}\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='postlist.toast.newMessages'\n                defaultMessage={'{count, number} new {count, plural, one {message} other {messages}}'}\n                values={{count}}\n            />\n        );\n    };\n\n    archiveToastText = () => {\n        return (\n            <FormattedMessage\n                id='postlist.toast.history'\n                defaultMessage='Viewing message history'\n            />\n        );\n    };\n\n    getSearchHintToastText = () => {\n        return (\n            <FormattedMessage\n                id='postlist.toast.searchHint'\n                defaultMessage='Tip: Try {searchShortcut} to search this channel'\n                values={{\n                    searchShortcut: <SearchShortcut/>,\n                }}\n            />\n        );\n    };\n\n    changeUrlToRemountChannelView = () => {\n        const {match} = this.props;\n\n        // Inorder of mount the channel view we are redirecting to /team url to load the channel again\n        // Todo: Can be changed to dispatch if we put focussedPostId in redux state.\n        getHistory().replace(`/${match.params.team}`);\n    };\n\n    scrollToNewMessage = () => {\n        const {focusedPostId, atLatestPost, scrollToNewMessage, updateLastViewedBottomAt} = this.props;\n\n        // if latest set of posts are not loaded in the view then we cannot scroll to the message\n        // We will be chaging the url to remount the channel view so we can remove the focussedPostId react state\n        // if we don't remove the focussedPostId state then scroll tries to correct to that instead of new message line\n        if (focusedPostId && !atLatestPost) {\n            this.changeUrlToRemountChannelView();\n            return;\n        }\n\n        scrollToNewMessage();\n        updateLastViewedBottomAt();\n        this.hideNewMessagesToast();\n    };\n\n    scrollToLatestMessages = () => {\n        const {focusedPostId, atLatestPost, scrollToLatestMessages} = this.props;\n\n        if (focusedPostId) {\n            if (!atLatestPost) {\n                this.changeUrlToRemountChannelView();\n                return;\n            }\n            this.hideArchiveToast();\n        }\n\n        scrollToLatestMessages();\n        this.hideUnreadToast();\n        this.props.hideScrollToBottomToast?.();\n    };\n\n    scrollToUnreadMessages = () => {\n        this.props.scrollToUnreadMessages();\n        this.hideUnreadWithBottomStartToast();\n    };\n\n    getToastToRender() {\n        const {atLatestPost, atBottom, width, lastViewedAt, showSearchHintToast, showScrollToBottomToast} = this.props;\n        const {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast, unreadCount} = this.state;\n\n        const unreadToastProps = {\n            show: true,\n            width,\n            onDismiss: this.hideUnreadToast,\n            onClick: this.scrollToLatestMessages,\n            onClickMessage: (\n                <FormattedMessage\n                    id='postlist.toast.scrollToBottom'\n                    defaultMessage='Jump to recents'\n                />\n            ),\n            showActions: !atLatestPost || (atLatestPost && (atBottom === false)),\n        };\n\n        if (showUnreadToast && unreadCount > 0) {\n            return (\n                <Toast {...unreadToastProps}>\n                    {this.newMessagesToastText(unreadCount, lastViewedAt)}\n                </Toast>\n            );\n        }\n\n        const unreadWithBottomStartToastProps = {\n            show: true,\n            width,\n            onDismiss: this.hideUnreadWithBottomStartToast,\n            onClick: this.scrollToUnreadMessages,\n            onClickMessage: (\n                <FormattedMessage\n                    id='postlist.toast.scrollToUnread'\n                    defaultMessage='Jump to unreads'\n                />\n            ),\n            showActions: true,\n            jumpDirection: 'up' as const,\n        };\n\n        if (showUnreadWithBottomStartToast && unreadCount > 0) {\n            return (\n                <Toast {...unreadWithBottomStartToastProps}>\n                    {this.newMessagesToastText(unreadCount, lastViewedAt)}\n                </Toast>\n            );\n        }\n\n        if (showNewMessagesToast) {\n            const showNewMessagesToastOverrides = {\n                onDismiss: this.hideNewMessagesToast,\n                onClick: this.scrollToNewMessage,\n                onClickMessage: (\n                    <FormattedMessage\n                        id='postlist.toast.scrollToLatest'\n                        defaultMessage='Jump to new messages'\n                    />\n                ),\n            };\n\n            return (\n                <Toast\n                    {...unreadToastProps}\n                    {...showNewMessagesToastOverrides}\n                >\n                    {this.newMessagesToastText(unreadCount, lastViewedAt)}\n                </Toast>\n            );\n        }\n\n        if (showMessageHistoryToast) {\n            const archiveToastProps = {\n                show: true,\n                width,\n                onDismiss: this.hideArchiveToast,\n                onClick: this.scrollToLatestMessages,\n                onClickMessage: (\n                    <FormattedMessage\n                        id='postlist.toast.scrollToBottom'\n                        defaultMessage='Jump to recents'\n                    />\n                ),\n                showActions: true,\n                extraClasses: 'toast__history',\n            };\n\n            return (\n                <Toast {...archiveToastProps}>\n                    {this.archiveToastText()}\n                </Toast>\n            );\n        }\n\n        const toasts = [];\n        if (showScrollToBottomToast) {\n            toasts.push(\n                <ScrollToBottomToast\n                    key='scroll-to-bottom-toast'\n                    onClick={this.scrollToLatestMessages}\n                    onDismiss={this.props.onScrollToBottomToastDismiss}\n                />,\n            );\n        }\n\n        if (showSearchHintToast) {\n            toasts.push(\n                <HintToast\n                    key='search-hint-toast'\n                    onDismiss={this.hideSearchHintToast}\n                >\n                    {this.getSearchHintToastText()}\n                </HintToast>,\n            );\n        }\n\n        if (toasts.length > 0) {\n            return (\n                <div className='toasts-wrapper'>\n                    {toasts}\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const toastToRender = this.getToastToRender();\n\n        return (\n            <>\n                {toastToRender}\n            </>\n        );\n    }\n}\n\nexport default injectIntl(ToastWrapperClass);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getCurrentChannel, countCurrentChannelUnreadMessages, isManuallyUnread} from 'mattermost-redux/selectors/entities/channels';\nimport {getAllPosts, getPostIdsInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getUnreadScrollPositionPreference, isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport {updateToastStatus} from 'actions/views/channel';\n\nimport type {GlobalState} from 'types/store/index';\n\nimport ToastWrapper from './toast_wrapper';\n\ninterface OwnProps {\n    atLatestPost?: boolean;\n    channelId: string;\n}\n\nexport function makeGetRootPosts() {\n    return createSelector(\n        'makeGetRootPosts',\n        getAllPosts,\n        getCurrentUserId,\n        getCurrentChannel,\n        (allPosts, currentUserId, channel) => {\n            // Count the number of new posts that haven't been deleted and are root posts\n            return Object.values(allPosts).filter((post) => {\n                return (\n                    post.root_id === '' &&\n                    post.channel_id === channel?.id &&\n                    post.state !== Posts.POST_DELETED\n                );\n            }).reduce((map: Record<string, boolean>, obj) => {\n                map[obj.id] = true;\n                return map;\n            }, {});\n        },\n    );\n}\n\nexport function makeCountUnreadsBelow() {\n    return createSelector(\n        'makeCountUnreadsBelow',\n        getAllPosts,\n        getCurrentUserId,\n        (state: GlobalState, postIds: string[]) => postIds,\n        (state: GlobalState, postIds, lastViewedBottom: number) => lastViewedBottom,\n        isCollapsedThreadsEnabled,\n        (allPosts, currentUserId, postIds, lastViewedBottom, isCollapsed) => {\n            if (!postIds) {\n                return 0;\n            }\n\n            // Count the number of new posts made by other users that haven't been deleted\n            return postIds.map((id) => allPosts[id]).filter((post) => {\n                return post &&\n                    post.user_id !== currentUserId &&\n                    post.state !== Posts.POST_DELETED &&\n                    post.create_at > lastViewedBottom &&\n                    (isCollapsed ? post.root_id === '' : true); // in collapsed threads mode, only count root posts\n            }).length;\n        },\n    );\n}\n\n/* This connected component is written mainly for maintaining the unread count to be passed to the toast\n   Unread count logic:\n   * If channel is at the latest set of posts:\n      Unread count is the Number of posts below new message line\n   * if channel is not at the latest set of posts:\n      1. UnreadCount + any recent messages in the latest chunk.\n      2. If channel was marked as unread.\n        * Unread count of channel alone.\n*/\n\nfunction makeMapStateToProps() {\n    const countUnreadsBelow = makeCountUnreadsBelow();\n    const getRootPosts = makeGetRootPosts();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n    return function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n        let newRecentMessagesCount = 0;\n        const channelMarkedAsUnread = isManuallyUnread(state, ownProps.channelId);\n        const lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        const unreadScrollPosition = getUnreadScrollPositionPreference(state);\n        if (!ownProps.atLatestPost) {\n            let postIds = getPostIdsInChannel(state, ownProps.channelId) || [];\n            if (postIds) {\n                postIds = preparePostIdsForPostList(state, {postIds, lastViewedAt});\n            }\n            newRecentMessagesCount = countUnreadsBelow(state, postIds, lastViewedAt);\n        }\n        return {\n            rootPosts: getRootPosts(state),\n            lastViewedAt,\n            newRecentMessagesCount,\n            unreadScrollPosition,\n            isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n            unreadCountInChannel: countCurrentChannelUnreadMessages(state),\n            channelMarkedAsUnread,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateToastStatus,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps, mapDispatchToProps)(ToastWrapper));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useMemo} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {getLatestPostId, usePostAriaLabel} from 'utils/post_utils';\n\nimport type {GlobalState} from 'types/store';\n\ninterface Props {\n    postIds?: string[];\n}\n\nconst LatestPostReader = (props: Props): JSX.Element => {\n    const {postIds} = props;\n    const latestPostId = useMemo(() => getLatestPostId(postIds || []), [postIds]);\n    const latestPost = useSelector<GlobalState, Post>((state) => getPost(state, latestPostId));\n\n    const ariaLabel = usePostAriaLabel(latestPost);\n\n    return (\n        <span\n            className='sr-only'\n            aria-live='polite'\n        >\n            {ariaLabel}\n        </span>\n    );\n};\n\nexport default LatestPostReader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\nimport {getNewMessagesIndex, isDateLine, isStartOfNewMessages} from 'mattermost-redux/utils/post_list';\n\nimport type {updateNewMessagesAtInChannel} from 'actions/global_actions';\nimport type {CanLoadMorePosts} from 'actions/views/channel';\n\nimport {DynamicVirtualizedList} from 'components/dynamic_virtualized_list';\nimport type {OnItemsRenderedArgs} from 'components/dynamic_virtualized_list';\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport PostListRow from 'components/post_view/post_list_row';\nimport ScrollToBottomArrows from 'components/post_view/scroll_to_bottom_arrows';\nimport ToastWrapper from 'components/toast_wrapper';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {PostListRowListIds, EventTypes, PostRequestTypes} from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\nimport {getPreviousPostId, getLatestPostId} from 'utils/post_utils';\nimport * as Utils from 'utils/utils';\n\nimport LatestPostReader from './latest_post_reader';\n\nconst OVERSCAN_COUNT_BACKWARD = 80;\nconst OVERSCAN_COUNT_FORWARD = 80;\nconst HEIGHT_TRIGGER_FOR_MORE_POSTS = 1000;\nconst BUFFER_TO_BE_CONSIDERED_BOTTOM = 10;\n\nconst MAXIMUM_POSTS_FOR_SLICING = {\n    channel: 50,\n    permalink: 100,\n};\n\nconst postListStyle = {\n    padding: '14px 0px 7px',\n};\n\nconst virtListStyles = {\n    position: 'absolute',\n    bottom: '0',\n    maxHeight: '100%',\n};\n\nconst OFFSET_TO_SHOW_TOAST = -50;\n\ntype Props = {\n\n    /*\n     * Array of Ids in the channel including date separators, new message indicator, more messages loader,\n     * manual load messages trigger and postId in the order of newest to oldest for populating virtual list rows\n     */\n    postListIds?: string[];\n\n    /*\n     * The current channel id\n     */\n    channelId: string;\n\n    /*\n     * Used for disabling auto retry of posts and enabling manual link for loading posts\n     */\n    autoRetryEnable: boolean;\n\n    /*\n     * Used in passing to post row for enabling animation when loading posts\n     */\n    loadingNewerPosts: boolean;\n    loadingOlderPosts: boolean;\n\n    isMobileView: boolean;\n\n    /*\n     * Used for populating header, scroll correction and disabling triggering loadOlderPosts\n     */\n    atOldestPost?: boolean;\n\n    /*\n     * Used for disabling triggering loadNewerPosts\n     */\n    atLatestPost?: boolean;\n\n    latestPostTimeStamp?: number;\n    lastViewedAt: number;\n\n    /*\n     * Set to focus this post\n     */\n    focusedPostId?: string;\n\n    shouldStartFromBottomWhenUnread: boolean;\n\n    actions: {\n\n        /*\n         * Function to get older posts in the channel\n         */\n        loadOlderPosts: () => Promise<void>;\n\n        /*\n         * Function to get newer posts in the channel\n         */\n        loadNewerPosts: () => Promise<void>;\n\n        /*\n         * Function used for autoLoad of posts incase screen is not filled with posts\n         */\n        canLoadMorePosts: (type: CanLoadMorePosts) => Promise<void>;\n\n        /*\n         * Function to change the post selected for postList\n         */\n        changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n\n        updateNewMessagesAtInChannel: typeof updateNewMessagesAtInChannel;\n\n        toggleShouldStartFromBottomWhenUnread: () => void;\n    };\n}\n\ntype State = {\n    isScrolling: boolean;\n\n    // Intentionally setting null so that toast can determine when the first time this state is defined\n    atBottom: boolean | null;\n    lastViewedBottom: number;\n    postListIds: string[];\n    topPostId: string;\n    postMenuOpened: boolean;\n    dynamicListStyle: {\n        willChange: string;\n    };\n    initScrollCompleted: boolean;\n    initScrollOffsetFromBottom: number;\n    showSearchHint: boolean;\n    isSearchHintDismissed: boolean;\n    isMobileView?: boolean;\n    isNewMessageLineReached: boolean;\n    showScrollToBottomToast: boolean;\n    isScrollToBottomDismissed: boolean;\n}\n\nexport default class PostList extends React.PureComponent<Props, State> {\n    listRef: React.RefObject<DynamicVirtualizedList>;\n    postListRef: React.RefObject<HTMLDivElement>;\n    scrollStopAction: DelayedAction | null = null;\n    initRangeToRender: number[];\n    showSearchHintThreshold: number;\n    mounted: boolean;\n    newMessageLineIndex: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        const channelIntroMessage = PostListRowListIds.CHANNEL_INTRO_MESSAGE;\n        this.mounted = true;\n\n        this.state = {\n            isScrolling: false,\n\n            // Intentionally setting null so that toast can determine when the first time this state is defined\n            atBottom: null,\n            lastViewedBottom: Date.now(),\n            postListIds: [channelIntroMessage],\n            topPostId: '',\n            postMenuOpened: false,\n            dynamicListStyle: {\n                willChange: 'transform',\n            },\n            initScrollCompleted: false,\n            initScrollOffsetFromBottom: 0,\n            showSearchHint: false,\n            isSearchHintDismissed: false,\n            isNewMessageLineReached: false,\n            showScrollToBottomToast: false,\n            isScrollToBottomDismissed: false,\n        };\n\n        this.listRef = React.createRef();\n        this.postListRef = React.createRef();\n        if (this.props.isMobileView) {\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n\n        this.initRangeToRender = this.props.focusedPostId ? [0, MAXIMUM_POSTS_FOR_SLICING.permalink] : [0, MAXIMUM_POSTS_FOR_SLICING.channel];\n\n        let postIndex = 0;\n        if (props.focusedPostId) {\n            postIndex = (this.props.postListIds || []).findIndex((postId) => postId === this.props.focusedPostId);\n        } else {\n            postIndex = getNewMessagesIndex(props.postListIds || []);\n        }\n        this.newMessageLineIndex = getNewMessagesIndex(props.postListIds || []);\n\n        const maxPostsForSlicing = props.focusedPostId ? MAXIMUM_POSTS_FOR_SLICING.permalink : MAXIMUM_POSTS_FOR_SLICING.channel;\n        this.initRangeToRender = [\n            Math.max(postIndex - 30, 0),\n            Math.max(postIndex + 30, Math.min((props.postListIds || []).length - 1, maxPostsForSlicing)),\n        ];\n        this.showSearchHintThreshold = this.getShowSearchHintThreshold();\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n\n        window.addEventListener('resize', this.handleWindowResize);\n        EventEmitter.addListener(EventTypes.POST_LIST_SCROLL_TO_BOTTOM, this.scrollToLatestMessages);\n    }\n\n    getSnapshotBeforeUpdate(prevProps: Props) {\n        if (this.postListRef && this.postListRef.current) {\n            const postsAddedAtTop = this.props.postListIds && this.props.postListIds.length !== (prevProps.postListIds || []).length && this.props.postListIds[0] === (prevProps.postListIds || [])[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && this.state.atBottom === false) {\n                const postListNode = this.postListRef.current;\n                const previousScrollTop = postListNode.parentElement?.scrollTop;\n                const previousScrollHeight = postListNode.scrollHeight;\n\n                return {\n                    previousScrollTop,\n                    previousScrollHeight,\n                };\n            }\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps: Props, _prevState: State, snapshot: {previousScrollTop: number; previousScrollHeight: number}) {\n        if (this.props.isMobileView && !prevProps.isMobileView) {\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n\n        if (!this.postListRef.current) {\n            return;\n        }\n        const prevPostsCount = (prevProps.postListIds || []).length;\n        const presentPostsCount = (this.props.postListIds || []).length;\n\n        this.newMessageLineIndex = getNewMessagesIndex(this.props.postListIds || []);\n\n        if (snapshot) {\n            const postlistScrollHeight = this.postListRef.current.scrollHeight;\n            const postsAddedAtTop = presentPostsCount !== prevPostsCount && (this.props.postListIds || [])[0] === (prevProps.postListIds || [])[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && !this.state.atBottom && snapshot) {\n                const scrollValue = snapshot.previousScrollTop + (postlistScrollHeight - snapshot.previousScrollHeight);\n                if (scrollValue !== 0 && (scrollValue - snapshot.previousScrollTop) !== 0) {\n                    //true as third param so chrome can use animationFrame when correcting scroll\n                    this.listRef.current?.scrollTo(scrollValue, scrollValue - snapshot.previousScrollTop, true);\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        window.removeEventListener('resize', this.handleWindowResize);\n        EventEmitter.removeListener(EventTypes.POST_LIST_SCROLL_TO_BOTTOM, this.scrollToLatestMessages);\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const postListIds = props.postListIds || [];\n        let newPostListIds;\n\n        if (props.atOldestPost) {\n            newPostListIds = [...postListIds, PostListRowListIds.CHANNEL_INTRO_MESSAGE];\n        } else if (props.autoRetryEnable) {\n            newPostListIds = [...postListIds, PostListRowListIds.OLDER_MESSAGES_LOADER];\n        } else {\n            newPostListIds = [...postListIds, PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER];\n        }\n\n        if (!props.atLatestPost) {\n            if (props.autoRetryEnable) {\n                newPostListIds = [PostListRowListIds.NEWER_MESSAGES_LOADER, ...newPostListIds];\n            } else {\n                newPostListIds = [PostListRowListIds.LOAD_NEWER_MESSAGES_TRIGGER, ...newPostListIds];\n            }\n        }\n\n        const nextState: Partial<State> = {\n            postListIds: newPostListIds,\n        };\n\n        if (props.isMobileView !== state.isMobileView) {\n            nextState.isMobileView = props.isMobileView;\n\n            const dynamicListStyle = state.dynamicListStyle;\n            if (state.postMenuOpened) {\n                if (!props.isMobileView && dynamicListStyle.willChange === 'unset') {\n                    nextState.dynamicListStyle = {\n                        ...dynamicListStyle,\n                        willChange: 'transform',\n                    };\n                } else if (props.isMobileView && dynamicListStyle.willChange === 'transform') {\n                    nextState.dynamicListStyle = {\n                        ...dynamicListStyle,\n                        willChange: 'unset',\n                    };\n                }\n            }\n        }\n\n        return nextState;\n    }\n\n    handleWindowResize = () => {\n        this.showSearchHintThreshold = this.getShowSearchHintThreshold();\n    };\n\n    togglePostMenu = (opened: boolean) => {\n        let dynamicListStyle = this.state.dynamicListStyle;\n        if (this.props.isMobileView) {\n            dynamicListStyle = {\n                ...dynamicListStyle,\n                willChange: opened ? 'unset' : 'transform',\n            };\n        }\n\n        this.setState({\n            postMenuOpened: opened,\n            dynamicListStyle,\n        });\n    };\n\n    onNewMessageLineReached = () => {\n        this.setState({\n            isNewMessageLineReached: true,\n        });\n    };\n\n    renderRow = ({data, itemId, style}: {data: string[]; itemId: string; style: Record<string, string>}) => {\n        const index = data.indexOf(itemId);\n        let className = '';\n        const basePaddingClass = 'post-row__padding';\n        const previousItemId = (index !== -1 && index < data.length - 1) ? data[index + 1] : '';\n        const nextItemId = (index > 0 && index < data.length) ? data[index - 1] : '';\n\n        if (isDateLine(nextItemId) || isStartOfNewMessages(nextItemId)) {\n            className += basePaddingClass + ' bottom';\n        }\n\n        if (isDateLine(previousItemId) || isStartOfNewMessages(previousItemId)) {\n            if (className.includes(basePaddingClass)) {\n                className += ' top';\n            } else {\n                className += basePaddingClass + ' top';\n            }\n        }\n\n        // Since the first in the list is the latest message\n        const isLastPost = itemId === this.state.postListIds[0];\n\n        return (\n            <div\n                style={style}\n                className={className}\n            >\n                <PostListRow\n                    listId={itemId}\n                    previousListId={getPreviousPostId(data, index)}\n                    shouldHighlight={itemId === this.props.focusedPostId}\n                    loadOlderPosts={this.props.actions.loadOlderPosts}\n                    loadNewerPosts={this.props.actions.loadNewerPosts}\n                    togglePostMenu={this.togglePostMenu}\n                    isLastPost={isLastPost}\n                    loadingNewerPosts={this.props.loadingNewerPosts}\n                    loadingOlderPosts={this.props.loadingOlderPosts}\n                    channelId={this.props.channelId}\n                />\n            </div>\n        );\n    };\n\n    scrollToFailed = (index: number) => {\n        if (index === 0) {\n            this.props.actions.changeUnreadChunkTimeStamp(0);\n        } else {\n            this.props.actions.changeUnreadChunkTimeStamp(this.props.lastViewedAt);\n        }\n    };\n\n    onScroll = ({\n        scrollDirection,\n        scrollOffset,\n        scrollUpdateWasRequested,\n        clientHeight,\n        scrollHeight}:\n    {\n        scrollDirection: string;\n        scrollOffset: number;\n        scrollUpdateWasRequested: boolean;\n        clientHeight: number;\n        scrollHeight: number;\n    }) => {\n        if (scrollHeight <= 0) {\n            return;\n        }\n\n        const didUserScrollBackwards = scrollDirection === 'backward' && !scrollUpdateWasRequested;\n        const didUserScrollForwards = scrollDirection === 'forward' && !scrollUpdateWasRequested;\n        const isOffsetWithInRange = scrollOffset < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n        const offsetFromBottom = this.getOffsetFromBottom(scrollOffset, scrollHeight, clientHeight);\n        const shouldLoadNewPosts = offsetFromBottom < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n\n        if (didUserScrollBackwards && isOffsetWithInRange && !this.props.atOldestPost) {\n            this.props.actions.loadOlderPosts();\n        } else if (didUserScrollForwards && shouldLoadNewPosts && !this.props.atLatestPost) {\n            this.props.actions.loadNewerPosts();\n        }\n\n        if (this.props.isMobileView) {\n            if (!this.state.isScrolling) {\n                this.setState({\n                    isScrolling: true,\n                });\n            }\n\n            if (this.scrollStopAction) {\n                this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n            }\n        }\n\n        this.checkBottom(scrollOffset, scrollHeight, clientHeight);\n\n        if (scrollUpdateWasRequested) { //if scroll change is programatically requested i.e by calling scrollTo\n            //This is a private method on virtlist\n            const postsRenderedRange = this.listRef.current?._getRangeToRender(); //eslint-disable-line no-underscore-dangle\n\n            // postsRenderedRange[3] is the visibleStopIndex which is post at the bottom of the screen\n            if (postsRenderedRange && postsRenderedRange[3] <= 1 && !this.props.atLatestPost) {\n                this.props.actions.canLoadMorePosts(PostRequestTypes.AFTER_ID);\n            }\n\n            if (!this.state.atBottom && scrollHeight) {\n                this.setState({\n                    initScrollOffsetFromBottom: offsetFromBottom,\n                });\n            }\n        }\n\n        if (this.props.isMobileView && this.state.showSearchHint) {\n            this.setState({\n                showSearchHint: false,\n            });\n        }\n\n        if (!this.props.isMobileView && !this.state.isSearchHintDismissed) {\n            this.setState({\n                showSearchHint: offsetFromBottom > this.showSearchHintThreshold,\n            });\n        }\n\n        this.updateScrollToBottomToastVisibility(scrollOffset, scrollHeight, clientHeight);\n    };\n\n    getShowSearchHintThreshold = () => {\n        return window.screen.height * 3;\n    };\n\n    checkBottom = (scrollOffset: number, scrollHeight: number, clientHeight: number) => {\n        this.updateAtBottom(this.isAtBottom(scrollOffset, scrollHeight, clientHeight));\n    };\n\n    // Calculate how far the post list is from being scrolled to the bottom\n    getOffsetFromBottom = (scrollOffset: number, scrollHeight: number, clientHeight: number) => scrollHeight - clientHeight - scrollOffset;\n\n    isAtBottom = (scrollOffset: number, scrollHeight: number, clientHeight: number) => {\n        const offsetFromBottom = this.getOffsetFromBottom(scrollOffset, scrollHeight, clientHeight);\n\n        return offsetFromBottom <= BUFFER_TO_BE_CONSIDERED_BOTTOM && scrollHeight > 0;\n    };\n\n    updateAtBottom = (atBottom: boolean) => {\n        if (atBottom !== this.state.atBottom) {\n            // Update lastViewedBottom when the list reaches or leaves the bottom\n            let lastViewedBottom = Date.now();\n            if (this.props.latestPostTimeStamp && this.props.latestPostTimeStamp > lastViewedBottom) {\n                lastViewedBottom = this.props.latestPostTimeStamp;\n            }\n\n            // if we hit the bottom, we haven't just landed on the unread channel\n            this.setState({\n                atBottom,\n                lastViewedBottom,\n            });\n        }\n    };\n\n    updateLastViewedBottomAt = (lastViewedBottom = Date.now()) => {\n        this.setState({\n            lastViewedBottom,\n        });\n    };\n\n    handleScrollStop = () => {\n        if (this.mounted) {\n            this.setState({\n                isScrolling: false,\n            });\n        }\n    };\n\n    handleSearchHintDismiss = () => {\n        this.setState({\n            showSearchHint: false,\n            isSearchHintDismissed: true,\n        });\n    };\n\n    handleScrollToBottomToastDismiss = () => {\n        this.setState({\n            showScrollToBottomToast: false,\n            isScrollToBottomDismissed: true,\n        });\n    };\n\n    hideScrollToBottomToast = () => {\n        this.setState({\n            showScrollToBottomToast: false,\n        });\n    };\n\n    /*\n     * - Show the scroll-to-bottom toast at the same time as the search-hint toast.\n     * - Only show if the user hasn't dismissed it before, within a session.\n     * - Hide it if the user is at the bottom of the list.\n     */\n    updateScrollToBottomToastVisibility = (scrollOffset: number, scrollHeight: number, clientHeight: number) => {\n        if (this.state.showScrollToBottomToast && this.state.atBottom) {\n            this.setState({\n                showScrollToBottomToast: false,\n            });\n            return;\n        }\n\n        if (!this.state.isScrollToBottomDismissed) {\n            const offsetFromBottom = this.getOffsetFromBottom(scrollOffset, scrollHeight, clientHeight);\n            this.setState({\n                showScrollToBottomToast: offsetFromBottom > this.showSearchHintThreshold,\n            });\n        }\n    };\n\n    updateFloatingTimestamp = (visibleTopItem: number) => {\n        if (!this.props.isMobileView) {\n            return;\n        }\n\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        this.setState({\n            topPostId: getLatestPostId(this.props.postListIds.slice(visibleTopItem)),\n        });\n    };\n\n    onItemsRendered = ({visibleStartIndex, visibleStopIndex}: Pick<OnItemsRenderedArgs, 'visibleStartIndex' | 'visibleStopIndex'>) => {\n        this.updateFloatingTimestamp(visibleStartIndex);\n\n        if (\n            this.newMessageLineIndex > 0 &&\n             !this.state.isNewMessageLineReached &&\n             this.newMessageLineIndex <= visibleStartIndex &&\n             this.newMessageLineIndex >= visibleStopIndex\n        ) {\n            this.onNewMessageLineReached();\n        }\n    };\n\n    initScrollToIndex = () => {\n        if (this.props.focusedPostId) {\n            const index = this.state.postListIds.findIndex(\n                (item) => item === this.props.focusedPostId,\n            );\n            return {\n                index,\n                position: 'center',\n            };\n        }\n\n        if (this.props.shouldStartFromBottomWhenUnread) {\n            return {\n                index: 0,\n                position: 'end',\n            };\n        }\n\n        const newMessagesSeparatorIndex = getNewMessagesIndex(this.state.postListIds);\n\n        if (newMessagesSeparatorIndex > 0) {\n            // if there is a dateLine above START_OF_NEW_MESSAGES then scroll to date line\n            if (isDateLine(this.state.postListIds[newMessagesSeparatorIndex + 1])) {\n                return {\n                    index: newMessagesSeparatorIndex + 1,\n                    position: 'start',\n                    offset: OFFSET_TO_SHOW_TOAST,\n                };\n            }\n            return {\n                index: newMessagesSeparatorIndex,\n                position: 'start',\n                offset: OFFSET_TO_SHOW_TOAST,\n            };\n        }\n\n        return {\n            index: 0,\n            position: 'end',\n        };\n    };\n\n    scrollToLatestMessages = () => {\n        if (this.props.atLatestPost) {\n            this.scrollToBottom();\n        } else {\n            this.updateNewMessagesAtInChannel();\n            this.props.actions.changeUnreadChunkTimeStamp(0);\n        }\n    };\n\n    scrollToUnreadMessages = () => {\n        this.props.actions.toggleShouldStartFromBottomWhenUnread();\n    };\n\n    scrollToBottom = () => {\n        this.listRef.current?.scrollToItem(0, 'end');\n    };\n\n    scrollToNewMessage = () => {\n        this.listRef.current?.scrollToItem(getNewMessagesIndex(this.state.postListIds), 'start', OFFSET_TO_SHOW_TOAST);\n    };\n\n    updateNewMessagesAtInChannel = (lastViewedAt = Date.now()) => {\n        this.props.actions.updateNewMessagesAtInChannel(this.props.channelId, lastViewedAt);\n    };\n\n    renderToasts = (width: number) => {\n        return (\n            <ToastWrapper\n                atLatestPost={this.props.atLatestPost}\n                postListIds={this.state.postListIds}\n                atBottom={this.state.atBottom}\n                width={width}\n                lastViewedBottom={this.state.lastViewedBottom}\n                latestPostTimeStamp={this.props.latestPostTimeStamp}\n                scrollToUnreadMessages={this.scrollToUnreadMessages}\n                scrollToNewMessage={this.scrollToNewMessage}\n                scrollToLatestMessages={this.scrollToLatestMessages}\n                updateNewMessagesAtInChannel={this.updateNewMessagesAtInChannel}\n                updateLastViewedBottomAt={this.updateLastViewedBottomAt}\n                shouldStartFromBottomWhenUnread={this.props.shouldStartFromBottomWhenUnread}\n                isNewMessageLineReached={this.state.isNewMessageLineReached}\n                channelId={this.props.channelId}\n                focusedPostId={this.props.focusedPostId}\n                initScrollOffsetFromBottom={this.state.initScrollOffsetFromBottom}\n                onSearchHintDismiss={this.handleSearchHintDismiss}\n                showSearchHintToast={this.state.showSearchHint}\n                showScrollToBottomToast={this.state.showScrollToBottomToast}\n                onScrollToBottomToastDismiss={this.handleScrollToBottomToastDismiss}\n                hideScrollToBottomToast={this.hideScrollToBottomToast}\n            />\n        );\n    };\n\n    render() {\n        const {channelId} = this.props;\n        const {dynamicListStyle} = this.state;\n\n        return (\n            <div\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n                data-a11y-loop-navigation={false}\n                aria-label={Utils.localizeMessage({id: 'accessibility.sections.centerContent', defaultMessage: 'message list main region'})}\n            >\n                {this.props.isMobileView && (\n                    <>\n                        <FloatingTimestamp\n                            isScrolling={this.state.isScrolling}\n                            postId={this.state.topPostId}\n                        />\n                        <ScrollToBottomArrows\n                            isScrolling={this.state.isScrolling}\n                            atBottom={Boolean(this.state.atBottom)}\n                            onClick={this.scrollToBottom}\n                        />\n                    </>\n                )}\n                <div\n                    className='post-list-holder-by-time'\n                    key={'postlist-' + channelId}\n                >\n                    <div\n                        className='post-list__table'\n                    >\n                        <div\n                            id='postListContent'\n                            className='post-list__content'\n                        >\n                            <LatestPostReader postIds={this.props.postListIds}/>\n                            <AutoSizer>\n                                {({height, width}) => (\n                                    <>\n                                        <div>\n                                            <Pluggable pluggableName='ChannelToast'/>\n\n                                            {this.renderToasts(width)}\n                                        </div>\n\n                                        <DynamicVirtualizedList\n                                            ref={this.listRef}\n                                            id='postListScrollContainer'\n                                            className='post-list__dynamic'\n                                            height={height}\n                                            width={width}\n                                            itemData={this.state.postListIds}\n                                            overscanCountForward={OVERSCAN_COUNT_FORWARD}\n                                            overscanCountBackward={OVERSCAN_COUNT_BACKWARD}\n                                            onScroll={this.onScroll}\n                                            initScrollToIndex={this.initScrollToIndex}\n                                            canLoadMorePosts={this.props.actions.canLoadMorePosts}\n                                            innerRef={this.postListRef}\n                                            style={{...virtListStyles, ...dynamicListStyle}}\n                                            innerListStyle={postListStyle}\n                                            initRangeToRender={this.initRangeToRender}\n                                            loaderId={PostListRowListIds.OLDER_MESSAGES_LOADER}\n                                            correctScrollToBottom={this.props.atLatestPost}\n                                            onItemsRendered={this.onItemsRendered}\n                                            scrollToFailed={this.scrollToFailed}\n                                        >\n                                            {this.renderRow}\n                                        </DynamicVirtualizedList>\n                                    </>\n                                )}\n                            </AutoSizer>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport type {updateNewMessagesAtInChannel} from 'actions/global_actions';\nimport {clearMarks, countRequestsBetween, mark, shouldTrackPerformance, trackEvent} from 'actions/telemetry_actions.jsx';\nimport type {LoadPostsParameters, LoadPostsReturnValue, CanLoadMorePosts} from 'actions/views/channel';\n\nimport LoadingScreen from 'components/loading_screen';\nimport VirtPostList from 'components/post_view/post_list_virtualized/post_list_virtualized';\n\nimport {PostRequestTypes} from 'utils/constants';\nimport {Mark, Measure, measureAndReport} from 'utils/performance_telemetry';\nimport {getOldestPostId, getLatestPostId} from 'utils/post_utils';\n\nconst MAX_NUMBER_OF_AUTO_RETRIES = 3;\nexport const MAX_EXTRA_PAGES_LOADED = 10;\n\n// Measures the time between channel or team switch started and the post list component rendering posts.\n// Set \"fresh\" to true when the posts have not been loaded before.\nfunction markAndMeasureChannelSwitchEnd(fresh = false) {\n    mark(Mark.PostListLoaded);\n\n    // Send new performance metrics to server\n    const channelSwitch = measureAndReport({\n        name: Measure.ChannelSwitch,\n        startMark: Mark.ChannelLinkClicked,\n        endMark: Mark.PostListLoaded,\n        labels: {\n            fresh: fresh.toString(),\n        },\n        canFail: true,\n    });\n    const teamSwitch = measureAndReport({\n        name: Measure.TeamSwitch,\n        startMark: Mark.TeamLinkClicked,\n        endMark: Mark.PostListLoaded,\n        labels: {\n            fresh: fresh.toString(),\n        },\n        canFail: true,\n    });\n\n    // Send old performance metrics to Rudder\n    if (shouldTrackPerformance()) {\n        if (channelSwitch) {\n            const requestCount1 = countRequestsBetween(Mark.ChannelLinkClicked, Mark.PostListLoaded);\n\n            trackEvent('performance', Measure.ChannelSwitch, {\n                duration: Math.round(channelSwitch.duration),\n                fresh,\n                requestCount: requestCount1,\n            });\n        }\n\n        if (teamSwitch) {\n            const requestCount2 = countRequestsBetween(Mark.TeamLinkClicked, Mark.PostListLoaded);\n\n            trackEvent('performance', Measure.TeamSwitch, {\n                duration: Math.round(teamSwitch.duration),\n                fresh,\n                requestCount: requestCount2,\n            });\n        }\n    }\n\n    // Clear all the metrics so that we can differentiate between a channel and team switch next time this is called\n    clearMarks([\n        Mark.ChannelLinkClicked,\n        Mark.TeamLinkClicked,\n        Mark.PostListLoaded,\n    ]);\n}\n\nexport interface Props {\n\n    /**\n     *  Array of formatted post ids in the channel\n     *  This will be different from postListIds because of grouping and filtering of posts\n     *  This array should be used for making Before and After API calls\n     */\n    formattedPostIds?: string[];\n\n    /**\n     *  Array of post ids in the channel, ordered from newest to oldest\n     */\n    postListIds?: string[];\n\n    /**\n     * The channel the posts are in\n     */\n    channelId: string;\n\n    /*\n     * To get posts for perma view\n     */\n    focusedPostId?: string;\n\n    /*\n     * Used for determining if we are not at the recent most chunk in channel\n     */\n    atLatestPost: boolean;\n\n    /*\n     * Used for determining if we are at the channels oldest post\n     */\n    atOldestPost?: boolean;\n\n    /*\n     * Used for loading posts using unread API\n     */\n    isFirstLoad: boolean;\n\n    /*\n     * Used for syncing posts and is also passed down to virt list for newMessages indicator\n     */\n    latestPostTimeStamp?: number;\n\n    /*\n     * Used for passing down to virt list so it can change the chunk of posts selected\n     */\n    changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n\n    /*\n     * Used for skipping the call on load\n     */\n    isPrefetchingInProcess: boolean;\n\n    isMobileView: boolean;\n\n    lastViewedAt: number;\n\n    toggleShouldStartFromBottomWhenUnread: () => void;\n    shouldStartFromBottomWhenUnread: boolean;\n    hasInaccessiblePosts: boolean;\n\n    actions: {\n\n        /*\n         * Used for getting permalink view posts\n         */\n        loadPostsAround: (channelId: string, focusedPostId: string) => Promise<ActionResult>;\n\n        /*\n         * Used for geting unreads posts\n         */\n        loadUnreads: (channelId: string) => Promise<ActionResult>;\n\n        /*\n         * Used for getting posts using BEFORE_ID and AFTER_ID\n         */\n        loadPosts: (parameters: LoadPostsParameters) => Promise<LoadPostsReturnValue>;\n\n        /*\n         * Used to loading posts since a timestamp to sync the posts\n         */\n        syncPostsInChannel: (channelId: string, since: number, prefetch: boolean) => Promise<ActionResult>;\n\n        /*\n         * Used to loading posts if it not first visit, permalink or there exists any postListIds\n         * This happens when previous channel visit has a chunk which is not the latest set of posts\n         */\n        loadLatestPosts: (channelId: string) => Promise<ActionResult>;\n\n        markChannelAsRead: (channelId: string) => void;\n        updateNewMessagesAtInChannel: typeof updateNewMessagesAtInChannel;\n    };\n}\n\ninterface State {\n    loadingNewerPosts: boolean;\n    loadingOlderPosts: boolean;\n    autoRetryEnable: boolean;\n}\n\nexport default class PostList extends React.PureComponent<Props, State> {\n    private autoRetriesCount: number;\n    private actionsForPostList: {\n        loadOlderPosts: () => Promise<void>;\n        loadNewerPosts: () => Promise<void>;\n        canLoadMorePosts: (type: CanLoadMorePosts) => Promise<void>;\n        changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n        updateNewMessagesAtInChannel: typeof updateNewMessagesAtInChannel;\n        toggleShouldStartFromBottomWhenUnread: () => void;\n    };\n    private mounted: boolean | undefined;\n\n    // public for testing purposes only\n    public extraPagesLoaded: number;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loadingNewerPosts: false,\n            loadingOlderPosts: false,\n            autoRetryEnable: true,\n        };\n\n        this.extraPagesLoaded = 0;\n\n        this.autoRetriesCount = 0;\n        this.actionsForPostList = {\n            loadOlderPosts: this.getPostsBefore,\n            loadNewerPosts: this.getPostsAfter,\n            canLoadMorePosts: this.canLoadMorePosts,\n            changeUnreadChunkTimeStamp: props.changeUnreadChunkTimeStamp,\n            toggleShouldStartFromBottomWhenUnread: props.toggleShouldStartFromBottomWhenUnread,\n            updateNewMessagesAtInChannel: this.props.actions.updateNewMessagesAtInChannel,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        if (this.props.channelId) {\n            this.postsOnLoad(this.props.channelId);\n            if (this.props.postListIds) {\n                markAndMeasureChannelSwitchEnd();\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.channelId !== prevProps.channelId) {\n            this.postsOnLoad(this.props.channelId);\n        }\n        if (this.props.postListIds != null && prevProps.postListIds == null) {\n            markAndMeasureChannelSwitchEnd(true);\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    postsOnLoad = async (channelId: string) => {\n        const {focusedPostId, isFirstLoad, latestPostTimeStamp, isPrefetchingInProcess, actions} = this.props;\n        if (focusedPostId) {\n            await actions.loadPostsAround(channelId, focusedPostId);\n        } else if (isFirstLoad) {\n            if (!isPrefetchingInProcess) {\n                await actions.loadUnreads(channelId);\n            }\n        } else if (latestPostTimeStamp) {\n            await actions.syncPostsInChannel(channelId, latestPostTimeStamp, false);\n        } else {\n            await actions.loadLatestPosts(channelId);\n        }\n\n        if (!focusedPostId) {\n            // Posts are marked as read from here to not cause a race when loading posts\n            // marking channel as read and viewed after calling for posts in channel\n            this.props.actions.markChannelAsRead(channelId);\n        }\n\n        if (this.mounted) {\n            this.setState({\n                loadingOlderPosts: false,\n                loadingNewerPosts: false,\n            });\n        }\n    };\n\n    callLoadPosts = async (channelId: string, postId: string, type: CanLoadMorePosts) => {\n        const {error} = await this.props.actions.loadPosts({\n            channelId,\n            postId,\n            type,\n        });\n\n        if (type === PostRequestTypes.BEFORE_ID) {\n            this.setState({loadingOlderPosts: false});\n        } else {\n            this.setState({loadingNewerPosts: false});\n        }\n\n        if (error) {\n            if (this.autoRetriesCount < MAX_NUMBER_OF_AUTO_RETRIES) {\n                this.autoRetriesCount++;\n                await this.callLoadPosts(channelId, postId, type);\n            } else if (this.mounted) {\n                this.setState({autoRetryEnable: false});\n            }\n        } else {\n            if (this.mounted) {\n                this.setState({autoRetryEnable: true});\n            }\n\n            if (!this.state.autoRetryEnable) {\n                this.autoRetriesCount = 0;\n            }\n        }\n\n        return {error};\n    };\n\n    getOldestVisiblePostId = () => {\n        return getOldestPostId(this.props.postListIds || []);\n    };\n\n    getLatestVisiblePostId = () => {\n        return getLatestPostId(this.props.postListIds || []);\n    };\n\n    canLoadMorePosts = async (type: CanLoadMorePosts = PostRequestTypes.BEFORE_ID) => {\n        if (this.props.hasInaccessiblePosts) {\n            return;\n        }\n\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        if (this.state.loadingOlderPosts || this.state.loadingNewerPosts) {\n            return;\n        }\n\n        if (this.extraPagesLoaded > MAX_EXTRA_PAGES_LOADED) {\n            // Prevent this from loading a lot of pages in a channel with only hidden messages\n            // Enable load more messages manual link\n            if (this.state.autoRetryEnable) {\n                this.setState({autoRetryEnable: false});\n            }\n            return;\n        }\n\n        if (!this.props.atOldestPost && type === PostRequestTypes.BEFORE_ID) {\n            await this.getPostsBefore();\n        } else if (!this.props.atLatestPost) {\n            // if all olderPosts are loaded load new ones\n            await this.getPostsAfter();\n        }\n\n        this.extraPagesLoaded += 1;\n    };\n\n    getPostsBefore = async () => {\n        if (this.state.loadingOlderPosts) {\n            return;\n        }\n\n        // Reset counter after \"Load more\" button click\n        if (!this.state.autoRetryEnable) {\n            this.extraPagesLoaded = 0;\n        }\n\n        const oldestPostId = this.getOldestVisiblePostId();\n        this.setState({loadingOlderPosts: true});\n        await this.callLoadPosts(this.props.channelId, oldestPostId, PostRequestTypes.BEFORE_ID);\n    };\n\n    getPostsAfter = async () => {\n        if (this.state.loadingNewerPosts) {\n            return;\n        }\n\n        // Reset counter after \"Load more\" button click\n        if (!this.state.autoRetryEnable) {\n            this.extraPagesLoaded = 0;\n        }\n\n        const latestPostId = this.getLatestVisiblePostId();\n        this.setState({loadingNewerPosts: true});\n        await this.callLoadPosts(this.props.channelId, latestPostId, PostRequestTypes.AFTER_ID);\n    };\n\n    render() {\n        if (!this.props.postListIds) {\n            return (\n                <LoadingScreen centered={true}/>\n            );\n        }\n\n        return (\n            <div\n                className='post-list-holder-by-time'\n                key={'postlist-' + this.props.channelId}\n            >\n                <div className='post-list__table'>\n                    <div\n                        id='virtualizedPostListContent'\n                        className='post-list__content'\n                    >\n                        <VirtPostList\n                            loadingNewerPosts={this.state.loadingNewerPosts}\n                            loadingOlderPosts={this.state.loadingOlderPosts}\n                            atOldestPost={this.props.atOldestPost}\n                            atLatestPost={this.props.atLatestPost}\n                            focusedPostId={this.props.focusedPostId}\n                            channelId={this.props.channelId}\n                            autoRetryEnable={this.state.autoRetryEnable}\n                            shouldStartFromBottomWhenUnread={this.props.shouldStartFromBottomWhenUnread}\n                            actions={this.actionsForPostList}\n                            postListIds={this.props.formattedPostIds}\n                            latestPostTimeStamp={this.props.latestPostTimeStamp}\n                            isMobileView={this.props.isMobileView}\n                            lastViewedAt={this.props.lastViewedAt}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {markChannelAsRead} from 'mattermost-redux/actions/channels';\nimport {RequestStatus} from 'mattermost-redux/constants';\nimport {getRecentPostsChunkInChannel, makeGetPostsChunkAroundPost, getUnreadPostsChunk, getPost, isPostsChunkIncludingUnreadsPosts, getLimitedViews} from 'mattermost-redux/selectors/entities/posts';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport {updateNewMessagesAtInChannel} from 'actions/global_actions';\nimport {\n    loadPosts,\n    loadUnreads,\n    loadPostsAround,\n    syncPostsInChannel,\n    loadLatestPosts,\n} from 'actions/views/channel';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {getLatestPostId} from 'utils/post_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostList from './post_list';\n\nconst isFirstLoad = (state: GlobalState, channelId: string) => !state.entities.posts.postsInChannel[channelId];\nconst memoizedGetLatestPostId = memoizeResult((postIds: string[]) => getLatestPostId(postIds));\n\n// This function is added as a fail safe for the channel sync issue we have.\n// When the user switches to a team for the first time we show the channel of previous team and then settle for the right channel after that\n// This causes the scroll correction etc an issue because post_list is not mounted for new channel instead it is updated\n\ninterface Props {\n    focusedPostId?: string;\n    unreadChunkTimeStamp?: number;\n    changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n    channelId: string;\n}\n\nfunction makeMapStateToProps() {\n    const getPostsChunkAroundPost = makeGetPostsChunkAroundPost();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n\n    return function mapStateToProps(state: GlobalState, ownProps: Pick<Props, 'focusedPostId' | 'unreadChunkTimeStamp' | 'channelId'> & {shouldStartFromBottomWhenUnread: boolean}) {\n        let latestPostTimeStamp = 0;\n        let postIds: string[] | undefined;\n        let chunk;\n        let atLatestPost = false;\n        let atOldestPost = false;\n        let formattedPostIds: string[] | undefined;\n        const {focusedPostId, unreadChunkTimeStamp, channelId, shouldStartFromBottomWhenUnread} = ownProps;\n        const channelViewState = state.views.channel;\n        const lastViewedAt = channelViewState.lastChannelViewTime[channelId];\n        const isPrefetchingInProcess = channelViewState.channelPrefetchStatus[channelId] === RequestStatus.STARTED;\n        const limitedViews = getLimitedViews(state);\n        const hasInaccessiblePosts = Boolean(limitedViews.channels[channelId]) || limitedViews.channels[channelId] === 0;\n\n        const focusedPost = getPost(state, focusedPostId || '');\n\n        if (focusedPostId && focusedPost !== undefined) {\n            chunk = getPostsChunkAroundPost(state, focusedPostId, channelId);\n        } else if (unreadChunkTimeStamp && !shouldStartFromBottomWhenUnread) {\n            chunk = getUnreadPostsChunk(state, channelId, unreadChunkTimeStamp);\n        } else {\n            chunk = getRecentPostsChunkInChannel(state, channelId);\n        }\n\n        if (chunk) {\n            postIds = chunk.order;\n            atLatestPost = Boolean(chunk.recent);\n            atOldestPost = Boolean(chunk.oldest);\n        }\n\n        let shouldHideNewMessageIndicator = false;\n        if (unreadChunkTimeStamp != null) {\n            shouldHideNewMessageIndicator = shouldStartFromBottomWhenUnread && !isPostsChunkIncludingUnreadsPosts(state, chunk!, unreadChunkTimeStamp);\n        }\n\n        if (postIds) {\n            formattedPostIds = preparePostIdsForPostList(state, {postIds, lastViewedAt, indicateNewMessages: !shouldHideNewMessageIndicator});\n            if (postIds.length) {\n                const latestPostId = memoizedGetLatestPostId(postIds);\n                const latestPost = getPost(state, latestPostId);\n                latestPostTimeStamp = latestPost.create_at;\n            }\n        }\n\n        return {\n            lastViewedAt,\n            isFirstLoad: isFirstLoad(state, channelId),\n            formattedPostIds,\n            atLatestPost,\n            atOldestPost,\n            latestPostTimeStamp,\n            postListIds: postIds,\n            isPrefetchingInProcess,\n            shouldStartFromBottomWhenUnread,\n            isMobileView: getIsMobileView(state),\n            hasInaccessiblePosts,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadUnreads,\n            loadPosts,\n            loadLatestPosts,\n            loadPostsAround,\n            syncPostsInChannel,\n            markChannelAsRead,\n            updateNewMessagesAtInChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PostList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport {Preferences} from 'utils/constants';\n\nimport PostList from './post_list';\n\ntype Props = {\n    lastViewedAt?: number;\n    channelLoading: boolean;\n    channelId: string;\n    focusedPostId?: string;\n    unreadScrollPosition: string;\n};\n\ninterface State {\n    unreadChunkTimeStamp?: number;\n    loaderForChangeOfPostsChunk: boolean;\n    channelLoading: boolean;\n    shouldStartFromBottomWhenUnread: boolean;\n}\n\nexport default class PostView extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        const shouldStartFromBottomWhenUnread = this.props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST;\n        this.state = {\n            unreadChunkTimeStamp: props.lastViewedAt,\n            shouldStartFromBottomWhenUnread,\n            loaderForChangeOfPostsChunk: false,\n            channelLoading: props.channelLoading,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (state.unreadChunkTimeStamp === null && props.lastViewedAt) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n            };\n        }\n        if (props.channelLoading !== state.channelLoading) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n                channelLoading: props.channelLoading,\n            };\n        }\n\n        return null;\n    }\n\n    changeUnreadChunkTimeStamp = (unreadChunkTimeStamp: number) => {\n        this.setState({\n            unreadChunkTimeStamp,\n            loaderForChangeOfPostsChunk: true,\n        }, () => {\n            window.requestAnimationFrame(() => {\n                this.setState({\n                    loaderForChangeOfPostsChunk: false,\n                });\n            });\n        });\n    };\n\n    toggleShouldStartFromBottomWhenUnread = () => {\n        this.setState((state) => ({\n            loaderForChangeOfPostsChunk: true,\n            shouldStartFromBottomWhenUnread: !state.shouldStartFromBottomWhenUnread,\n        }), () => {\n            window.requestAnimationFrame(() => {\n                this.setState({\n                    loaderForChangeOfPostsChunk: false,\n                });\n            });\n        });\n    };\n\n    render() {\n        if (this.props.channelLoading || this.state.loaderForChangeOfPostsChunk) {\n            return (\n                <div id='post-list'>\n                    <LoadingScreen centered={true}/>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                id='post-list'\n                role='main'\n            >\n                <PostList\n                    unreadChunkTimeStamp={this.state.unreadChunkTimeStamp}\n                    channelId={this.props.channelId}\n                    changeUnreadChunkTimeStamp={this.changeUnreadChunkTimeStamp}\n                    shouldStartFromBottomWhenUnread={this.state.shouldStartFromBottomWhenUnread}\n                    toggleShouldStartFromBottomWhenUnread={this.toggleShouldStartFromBottomWhenUnread}\n                    focusedPostId={this.props.focusedPostId}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team, TeamMembership} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getUnreadScrollPositionPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTeamByName, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostView from './post_view';\n\nexport const isChannelLoading = (params: RouteViewParams, channel?: Channel, team?: Team, teammate?: UserProfile, teamMemberships?: Record<string, TeamMembership>) => {\n    if (params.postid) {\n        return false;\n    }\n\n    const identifier = params.identifier?.toLowerCase();\n\n    if (channel && team) {\n        if (channel.type !== Constants.DM_CHANNEL && channel.name !== identifier) {\n            return true;\n        } else if (channel.type === Constants.DM_CHANNEL && teammate && identifier !== `@${teammate.username}`) {\n            return true;\n        }\n\n        const teamId = team.id;\n        if ((channel.team_id && channel.team_id !== teamId) || (teamMemberships && !teamMemberships[teamId])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\ntype RouteViewParams = {\n    team?: string;\n    identifier?: string;\n    postid?: string;\n};\n\ntype Props = {channelId: string} & RouteComponentProps<RouteViewParams>\n\nfunction makeMapStateToProps() {\n    return function mapStateToProps(state: GlobalState, ownProps: Props) {\n        const params = ownProps.match?.params;\n        const team = getTeamByName(state, params?.team || '');\n        let teammate;\n\n        const channel = getChannel(state, ownProps.channelId);\n        let lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        if (channel) {\n            if (channel.type === Constants.DM_CHANNEL && channel.teammate_id) {\n                teammate = getUser(state, channel.teammate_id);\n            }\n            lastViewedAt = channel.last_post_at ? lastViewedAt : channel.last_post_at;\n        }\n\n        const teamMemberships = getTeamMemberships(state);\n        const channelLoading = isChannelLoading(params!, channel, team, teammate, teamMemberships);\n        const unreadScrollPosition = getUnreadScrollPositionPreference(state);\n        return {\n            unreadScrollPosition,\n            lastViewedAt,\n            channelLoading,\n        };\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps)(PostView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst onClickRefresh = () => {\n    location.reload();\n};\n\nconst TIME_TO_SHOW = 5000;\nconst TIME_TO_DISMISS = 2000;\n\ntype Props = {\n    updateWaitForLoader: (v: boolean) => void;\n}\n\nconst InputLoading = ({\n    updateWaitForLoader,\n}: Props) => {\n    const [showMessage, setShowMessage] = useState(false);\n\n    useEffect(() => {\n        let timeout = setTimeout(() => {\n            setShowMessage(true);\n            updateWaitForLoader(true);\n            timeout = setTimeout(() => {\n                updateWaitForLoader(false);\n            }, TIME_TO_DISMISS);\n        }, TIME_TO_SHOW);\n\n        return () => {\n            clearTimeout(timeout);\n            updateWaitForLoader(false);\n        };\n    }, []);\n\n    return (\n        <div\n            className='AdvancedTextEditor__skeleton'\n        >\n            {showMessage && (\n                <>\n                    <FormattedMessage\n                        id='center_panel.input.cannot_load_component'\n                        defaultMessage='Something went wrong while loading the component. Please wait a moment, or try reloading the app.'\n                    />\n                    <button\n                        className='btn btn-tertiary channel-archived__close-btn'\n                        onClick={onClickRefresh}\n                    >\n                        <FormattedMessage\n                            id='center_panel.reloadPage'\n                            defaultMessage='Reload'\n                        />\n                    </button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default InputLoading;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {lazy} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport deferComponentRender from 'components/deferComponentRender';\nimport {DropOverlayIdCenterChannel} from 'components/file_upload_overlay/file_upload_overlay';\nimport PostView from 'components/post_view';\n\nimport WebSocketClient from 'client/web_websocket_client';\n\nimport InputLoading from './input_loading';\n\nimport type {PropsFromRedux} from './index';\n\nconst ChannelHeader = makeAsyncComponent('ChannelHeader', lazy(() => import('components/channel_header')));\nconst FileUploadOverlay = makeAsyncComponent('FileUploadOverlay', lazy(() => import('components/file_upload_overlay')));\nconst ChannelBookmarks = makeAsyncComponent('ChannelBookmarks', lazy(() => import('components/channel_bookmarks')));\nconst AdvancedCreatePost = makeAsyncComponent('AdvancedCreatePost', lazy(() => import('components/advanced_create_post')));\nconst ChannelBanner = makeAsyncComponent('ChannelBanner', lazy(() => import('components/channel_banner/channel_banner')));\n\nexport type Props = PropsFromRedux & RouteComponentProps<{\n    postid?: string;\n}>;\n\ntype State = {\n    channelId: string;\n    url: string;\n    focusedPostId?: string;\n    deferredPostView: any;\n    waitForLoader: boolean;\n};\n\nexport default class ChannelView extends React.PureComponent<Props, State> {\n    public static createDeferredPostView = () => {\n        return deferComponentRender(\n            PostView,\n            <div\n                id='post-list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n            />,\n        );\n    };\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        let updatedState = {};\n        const focusedPostId = props.match.params.postid;\n\n        if (props.match.url !== state.url && props.channelId !== state.channelId) {\n            updatedState = {deferredPostView: ChannelView.createDeferredPostView(), url: props.match.url, focusedPostId};\n        }\n\n        if (props.channelId !== state.channelId) {\n            updatedState = {...updatedState, channelId: props.channelId, focusedPostId};\n        }\n\n        if (focusedPostId && focusedPostId !== state.focusedPostId) {\n            updatedState = {...updatedState, focusedPostId};\n        }\n\n        if (Object.keys(updatedState).length) {\n            return updatedState;\n        }\n\n        return null;\n    }\n\n    channelViewRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            url: props.match.url,\n            channelId: props.channelId,\n            focusedPostId: props.match.params.postid,\n            deferredPostView: ChannelView.createDeferredPostView(),\n            waitForLoader: false,\n        };\n\n        this.channelViewRef = React.createRef();\n    }\n\n    onClickCloseChannel = () => {\n        this.props.goToLastViewedChannel();\n    };\n\n    onUpdateInputShowLoader = (v: boolean) => {\n        this.setState({waitForLoader: v});\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        // TODO: debounce\n        if (prevProps.channelId !== this.props.channelId && this.props.enableWebSocketEventScope) {\n            WebSocketClient.updateActiveChannel(this.props.channelId);\n        }\n        if (prevProps.channelId !== this.props.channelId || prevProps.channelIsArchived !== this.props.channelIsArchived) {\n            if (this.props.channelIsArchived && !this.props.viewArchivedChannels) {\n                this.props.goToLastViewedChannel();\n            }\n        }\n    }\n\n    render() {\n        let createPost;\n        if (this.props.deactivatedChannel) {\n            createPost = (\n                <div\n                    className='post-create__container AdvancedTextEditor__ctr'\n                    id='post-create'\n                >\n                    <div\n                        className='channel-archived__message'\n                    >\n                        <FormattedMessage\n                            id='channelView.archivedChannelWithDeactivatedUser'\n                            defaultMessage='You are viewing an archived channel with a <b>deactivated user</b>. New messages cannot be posted.'\n                            values={{\n                                b: (chunks: string) => <b>{chunks}</b>,\n                            }}\n                        />\n                        <button\n                            className='btn btn-primary channel-archived__close-btn'\n                            onClick={this.onClickCloseChannel}\n                        >\n                            <FormattedMessage\n                                id='center_panel.archived.closeChannel'\n                                defaultMessage='Close Channel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.props.channelIsArchived) {\n            createPost = (\n                <div\n                    className='post-create__container'\n                    id='post-create'\n                >\n                    <div\n                        id='channelArchivedMessage'\n                        className='channel-archived__message'\n                    >\n                        <FormattedMessage\n                            id='channelView.archivedChannel'\n                            defaultMessage='You are viewing an <b>archived channel</b>. New messages cannot be posted.'\n                            values={{\n                                b: (chunks: string) => <b>{chunks}</b>,\n                            }}\n                        />\n                        <button\n                            className='btn btn-primary channel-archived__close-btn'\n                            onClick={this.onClickCloseChannel}\n                        >\n                            <FormattedMessage\n                                id='center_panel.archived.closeChannel'\n                                defaultMessage='Close Channel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.props.missingChannelRole || this.state.waitForLoader) {\n            createPost = <InputLoading updateWaitForLoader={this.onUpdateInputShowLoader}/>;\n        } else {\n            createPost = (\n                <div\n                    id='post-create'\n                    data-testid='post-create'\n                    className='post-create__container AdvancedTextEditor__ctr'\n                >\n                    <AdvancedCreatePost/>\n                </div>\n            );\n        }\n\n        const DeferredPostView = this.state.deferredPostView;\n\n        return (\n            <div\n                ref={this.channelViewRef}\n                id='app-content'\n                className='app__content'\n            >\n                <FileUploadOverlay\n                    overlayType='center'\n                    id={DropOverlayIdCenterChannel}\n                />\n                <ChannelHeader {...this.props}/>\n                {this.props.isChannelBookmarksEnabled && <ChannelBookmarks channelId={this.props.channelId}/>}\n                <ChannelBanner channelId={this.props.channelId}/>\n                <DeferredPostView\n                    channelId={this.props.channelId}\n                    focusedPostId={this.state.focusedPostId}\n                />\n                {createPost}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {\n    getCurrentChannel,\n    getMyChannelMembership,\n    isDeactivatedDirectChannel,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles_helpers';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {isFirstAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport {getIsChannelBookmarksEnabled} from 'components/channel_bookmarks/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelView from './channel_view';\n\nfunction isMissingChannelRoles(state: GlobalState, channel?: Channel) {\n    const channelRoles = channel ? getMyChannelMembership(state, channel.id)?.roles || '' : '';\n    return !channelRoles.split(' ').some((v) => Boolean(getRoles(state)[v]));\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const channel = getCurrentChannel(state);\n\n    const config = getConfig(state);\n\n    const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n    const enableOnboardingFlow = config.EnableOnboardingFlow === 'true';\n    const enableWebSocketEventScope = config.FeatureFlagWebSocketEventScope === 'true';\n\n    const missingChannelRole = isMissingChannelRoles(state, channel);\n\n    return {\n        channelId: channel ? channel.id : '',\n        deactivatedChannel: channel ? isDeactivatedDirectChannel(state, channel.id) : false,\n        enableOnboardingFlow,\n        channelIsArchived: channel ? channel.delete_at !== 0 : false,\n        viewArchivedChannels,\n        isCloud: getLicense(state).Cloud === 'true',\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        isFirstAdmin: isFirstAdmin(state),\n        enableWebSocketEventScope,\n        isChannelBookmarksEnabled: getIsChannelBookmarksEnabled(state),\n        missingChannelRole,\n    };\n}\n\nconst mapDispatchToProps = ({\n    goToLastViewedChannel,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default withRouter(connector(ChannelView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ChannelView from 'components/channel_view/index';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\nexport interface Match {\n    params: {\n        identifier: string;\n        team: string;\n        postid?: string;\n        path: string;\n    };\n    url: string;\n}\n\nexport type MatchAndHistory = Pick<Props, 'match' | 'history'>\n\ntype Props = {\n    match: Match;\n    actions: {\n        onChannelByIdentifierEnter: (props: MatchAndHistory) => any;\n    };\n    history: any;\n};\n\nexport default class ChannelIdentifierRouter extends React.PureComponent<Props> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            prevProps: props,\n        };\n    }\n\n    private replaceUrlTimeout!: NodeJS.Timeout;\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.match.params.team !== prevProps.match.params.team ||\n            this.props.match.params.identifier !== prevProps.match.params.identifier) {\n            clearTimeout(this.replaceUrlTimeout);\n            this.props.actions.onChannelByIdentifierEnter(this.props);\n            this.replaceUrlIfPermalink();\n        }\n    }\n    componentDidMount() {\n        this.props.actions.onChannelByIdentifierEnter(this.props);\n        this.replaceUrlIfPermalink();\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.replaceUrlTimeout);\n    }\n\n    replaceUrlIfPermalink = () => {\n        if (this.props.match.params.postid) {\n            this.replaceUrlTimeout = setTimeout(() => {\n                const channelUrl = this.props.match.url.split('/').slice(0, -1).join('/');\n                getHistory().replace(channelUrl);\n            }, Constants.PERMALINK_FADEOUT);\n        }\n    };\n\n    render() {\n        return <ChannelView/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {onChannelByIdentifierEnter} from './actions';\nimport ChannelIdentifierRouter from './channel_identifier_router';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            onChannelByIdentifierEnter,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(ChannelIdentifierRouter));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {lazy} from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport ChannelIdentifierRouter from 'components/channel_layout/channel_identifier_router';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {SCHEDULED_POST_URL_SUFFIX} from 'utils/constants';\nimport {IDENTIFIER_PATH_PATTERN, ID_PATH_PATTERN, TEAM_NAME_PATH_PATTERN} from 'utils/path';\n\nimport type {OwnProps, PropsFromRedux} from './index';\n\nconst MobileChannelHeader = makeAsyncComponent('MobileChannelHeader', lazy(() => import('components/mobile_channel_header')));\nconst GlobalThreads = makeAsyncComponent('GlobalThreads', lazy(() => import('components/threading/global_threads')),\n    (\n        <div className='app__content'>\n            <LoadingScreen/>\n        </div>\n    ),\n);\nconst Drafts = makeAsyncComponent('Drafts', lazy(() => import('components/drafts')),\n    (\n        <div className='app__content'>\n            <LoadingScreen/>\n        </div>\n    ),\n);\nconst PermalinkView = makeAsyncComponent('PermalinkView', lazy(() => import('components/permalink_view')));\nconst PlaybookRunner = makeAsyncComponent('PlaybookRunner', lazy(() => import('components/channel_layout/playbook_runner')));\n\ntype Props = PropsFromRedux & OwnProps;\n\ntype State = {\n    returnTo: string;\n    lastReturnTo: string;\n};\n\nexport default class CenterChannel extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            returnTo: '',\n            lastReturnTo: '',\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (prevState.lastReturnTo !== nextProps.location.pathname && nextProps.location.pathname.includes('/pl/')) {\n            return {\n                lastReturnTo: nextProps.location.pathname,\n                returnTo: prevState.lastReturnTo,\n            };\n        }\n        return {lastReturnTo: nextProps.location.pathname};\n    }\n\n    async componentDidMount() {\n        const {actions} = this.props;\n        await actions.getProfiles();\n    }\n\n    render() {\n        const {lastChannelPath, isCollapsedThreadsEnabled, isMobileView} = this.props;\n        const url = this.props.match.url;\n\n        return (\n            <div\n                key='inner-wrap'\n                className={classNames('inner-wrap', 'channel__wrap', {\n                    'move--right': this.props.lhsOpen,\n                    'move--left': this.props.rhsOpen,\n                    'move--left-small': this.props.rhsMenuOpen,\n                })}\n            >\n                {isMobileView && <MobileChannelHeader/>}\n                <div className='row main'>\n                    <Switch>\n                        <Route\n                            path={`${url}/pl/:postid(${ID_PATH_PATTERN})`}\n                            render={(props) => (\n                                <PermalinkView\n                                    {...props}\n                                    returnTo={this.state.returnTo}\n                                />\n                            )}\n                        />\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/:path(channels|messages)/:identifier(${IDENTIFIER_PATH_PATTERN})/:postid(${ID_PATH_PATTERN})?`}\n                            component={ChannelIdentifierRouter}\n                        />\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/_playbooks/:playbookId(${ID_PATH_PATTERN})/run`}\n                        >\n                            <PlaybookRunner/>\n                        </Route>\n                        {isCollapsedThreadsEnabled ? (\n                            <Route\n                                path={`/:team(${TEAM_NAME_PATH_PATTERN})/threads/:threadIdentifier(${ID_PATH_PATTERN})?`}\n                                component={GlobalThreads}\n                            />\n                        ) : null}\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/drafts`}\n                            component={Drafts}\n                        />\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/${SCHEDULED_POST_URL_SUFFIX}`}\n                            component={Drafts}\n                        />\n\n                        <Redirect to={lastChannelPath}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getProfiles} from 'mattermost-redux/actions/users';\nimport {getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {getLastViewedChannelNameByTeamName, getLastViewedTypeByTeamName, getPreviousTeamId, getPreviousTeamLastViewedType} from 'selectors/local_storage';\nimport {getIsRhsOpen, getIsRhsMenuOpen} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {PreviousViewedTypes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport CenterChannel from './center_channel';\n\ntype Params = {\n    team: string;\n}\n\nexport type OwnProps = RouteComponentProps<Params>;\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => {\n    const lastViewedType = getLastViewedTypeByTeamName(state, ownProps.match.params.team);\n    let channelName = getLastViewedChannelNameByTeamName(state, ownProps.match.params.team);\n\n    const previousTeamId = getPreviousTeamId(state);\n    const team = getTeamByName(state, ownProps.match.params.team);\n\n    let previousTeamLastViewedType;\n\n    if (previousTeamId !== team?.id) {\n        previousTeamLastViewedType = getPreviousTeamLastViewedType(state);\n    }\n\n    if (!channelName) {\n        channelName = getRedirectChannelNameForTeam(state, team!.id);\n    }\n\n    let lastChannelPath;\n    if (isCollapsedThreadsEnabled(state) && (previousTeamLastViewedType === PreviousViewedTypes.THREADS || lastViewedType === PreviousViewedTypes.THREADS)) {\n        lastChannelPath = `${ownProps.match.url}/threads`;\n    } else {\n        lastChannelPath = `${ownProps.match.url}/channels/${channelName}`;\n    }\n\n    return {\n        lastChannelPath,\n        lhsOpen: getIsLhsOpen(state),\n        rhsOpen: getIsRhsOpen(state),\n        rhsMenuOpen: getIsRhsMenuOpen(state),\n        isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n        currentUserId: getCurrentUserId(state),\n        isMobileView: getIsMobileView(state),\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfiles,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default withRouter(connector(CenterChannel));\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory, useLocation} from 'react-router-dom';\n\nimport {openModal} from 'actions/views/modals';\n\nimport InvitationModal from 'components/invitation_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {ModalData} from 'types/actions';\n\ninterface ActionMap {\n    [key: string]: ModalData<any>;\n}\n\nfunction QueryParamActionController() {\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const actionMap: ActionMap = {\n        open_invitation_modal: {\n            modalId: ModalIdentifiers.INVITATION,\n            dialogType: InvitationModal,\n        },\n    };\n\n    useEffect(() => {\n        const searchParams = new URLSearchParams(location.search);\n        const action = searchParams.get('action');\n\n        if (action && actionMap[action]) {\n            dispatch(openModal(actionMap[action]));\n\n            // Delete the action after it's been invoked so that it's not locked for subsequent refreshes\n            searchParams.delete('action');\n            history.replace({\n                search: searchParams.toString(),\n            });\n        }\n    }, [location, actionMap]);\n\n    return null;\n}\n\nexport default QueryParamActionController;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Dispatch} from 'redux';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {getChannelIdsForCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport type {GlobalState} from 'types/store';\n\nlet isFirstPreload = true;\n\nexport function trackPreloadedChannels(prefetchQueueObj: Record<string, string[]>) {\n    return (dispatch: Dispatch, getState: () => GlobalState) => {\n        const state = getState();\n        const channelIdsForTeam = getChannelIdsForCurrentTeam(state);\n\n        trackEvent('performance', 'preloaded_channels', {\n            numHigh: prefetchQueueObj[1]?.length || 0,\n            numMedium: prefetchQueueObj[2]?.length || 0,\n            numLow: prefetchQueueObj[3]?.length || 0,\n\n            numTotal: channelIdsForTeam.length,\n\n            // Tracks whether this is the first team that we've preloaded channels for in this session since\n            // the first preload will likely include DMs and GMs\n            isFirstPreload,\n        });\n\n        isFirstPreload = false;\n    };\n}\n\nenum Priority {\n    high = 1,\n    medium,\n    low\n}\n\nenum PrefetchLimits {\n    mentionMax = 10,\n    unreadMax = 20,\n}\n\n// function to return a queue obj with priotiy as key and array of channelIds as values.\n// high priority has channels with mentions\n// medium priority has channels with unreads\n// <10 unread channels. Prefetch everything.\n// 10-20 unread. Prefetch only mentions, capped to 10.\n// >20 unread. Don't prefetch anything.\nexport const prefetchQueue = memoizeResult((\n    unreadChannels: Channel[],\n    memberships: RelationOneToOne<Channel, ChannelMembership>,\n    collapsedThreads: boolean,\n) => {\n    const unreadChannelsCount = unreadChannels.length;\n    let result: {\n        1: string[];\n        2: string[];\n        3: string[];\n    } = {\n        [Priority.high]: [], // 1 being high priority requests\n        [Priority.medium]: [],\n        [Priority.low]: [], //TODO: add chanenls such as fav.\n    };\n    if (!unreadChannelsCount || unreadChannelsCount > PrefetchLimits.unreadMax) {\n        return result;\n    }\n    for (const channel of unreadChannels) {\n        const channelId = channel.id;\n        const membership = memberships[channelId];\n\n        if (unreadChannelsCount >= PrefetchLimits.mentionMax && result[Priority.high].length >= PrefetchLimits.mentionMax) {\n            break;\n        }\n\n        // TODO We check for muted channels 3 times here: getUnreadChannels checks it, this checks it, and the mark_unread\n        // check below is equivalent to checking if its muted.\n        if (membership && !isChannelMuted(membership)) {\n            if (collapsedThreads ? membership.mention_count_root : membership.mention_count) {\n                result = {\n                    ...result,\n                    [Priority.high]: [...result[Priority.high], channelId],\n                };\n            } else if (\n                membership.notify_props &&\n                membership.notify_props.mark_unread !== 'mention' &&\n                unreadChannelsCount < PrefetchLimits.mentionMax\n            ) {\n                result = {\n                    ...result,\n                    [Priority.medium]: [...result[Priority.medium], channelId],\n                };\n            }\n        }\n    }\n    return result;\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PQueue from 'p-queue';\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {loadProfilesForSidebar} from 'actions/user_actions';\n\nimport {Constants} from 'utils/constants';\n\nconst queue = new PQueue({concurrency: 2});\n\ntype Props = {\n    currentChannelId: string;\n    prefetchQueueObj: Record<string, string[]>;\n    prefetchRequestStatus: Record<string, string>;\n\n    // Whether or not the categories in the sidebar have been loaded for the current team\n    sidebarLoaded: boolean;\n\n    unreadChannels: Channel[];\n\n    actions: {\n        prefetchChannelPosts: (channelId: string, delay?: number) => Promise<ActionResult>;\n        trackPreloadedChannels: (prefetchQueueObj: Record<string, string[]>) => void;\n    };\n}\n\n/*\n    This component is responsible for prefetching data. As of now component only fetches for channel posts based on the below set of rules.\n    * Priority order:\n        Fetches channel posts 2 at a time, with mentions followed channels with unreads.\n\n    * Conditions for prefetching posts:\n        On load of webapp\n        On socket reconnect or system comes from sleep\n        On new message in a channel where user has not visited in the present session\n        On addition of user to a channel/GM\n        On Team switch\n\n        In order to solve the above conditions the component looks for changes in selector unread channels.\n        if there is a change in unreads selector, then component clears existing queue as it can be obselete\n        i.e there can be new mentions and we need to prioritise instead of unreads so, contructs a new queue\n        with dispacthes of unreads posts for channels which do not have prefetched requests.\n\n    * other changes:\n        Adds current channel posts requests to be dispatched as soon as it is set in redux state instead of dispatching it from actions down the hierarchy. Otherwise couple of prefetching requests are sent before the postlist makes a request for posts.\n        Add a jitter(0-1sec) for delaying post requests in case of a new message in open/private channels. This is to prevent a case when all clients request messages when new post is made in a channel with thousands of users.\n*/\nexport default class DataPrefetch extends React.PureComponent<Props> {\n    private prefetchTimeout?: number;\n\n    async componentDidUpdate(prevProps: Props) {\n        const {currentChannelId, prefetchQueueObj, sidebarLoaded} = this.props;\n        if (sidebarLoaded && !prevProps.sidebarLoaded) {\n            loadProfilesForSidebar();\n        }\n\n        if (currentChannelId && sidebarLoaded && (!prevProps.currentChannelId || !prevProps.sidebarLoaded)) {\n            queue.add(async () => this.prefetchPosts(currentChannelId));\n            this.prefetchData();\n        } else if (prevProps.prefetchQueueObj !== prefetchQueueObj) {\n            clearTimeout(this.prefetchTimeout);\n            await queue.clear();\n            this.prefetchData();\n        }\n\n        if (currentChannelId && sidebarLoaded && (!prevProps.currentChannelId || !prevProps.sidebarLoaded)) {\n            this.props.actions.trackPreloadedChannels(prefetchQueueObj);\n        }\n    }\n\n    public prefetchPosts = (channelId: string) => {\n        let delay;\n        const channel = this.props.unreadChannels.find((unreadChannel) => channelId === unreadChannel.id);\n        if (channel && (channel.type === Constants.PRIVATE_CHANNEL || channel.type === Constants.OPEN_CHANNEL)) {\n            const isLatestPostInLastMin = (Date.now() - channel.last_post_at) <= 1000;\n            if (isLatestPostInLastMin) {\n                delay = Math.random() * 1000; // 1ms - 1000ms random wait to not choke server\n            }\n        }\n        return this.props.actions.prefetchChannelPosts(channelId, delay);\n    };\n\n    private prefetchData = () => {\n        const {prefetchRequestStatus, prefetchQueueObj} = this.props;\n        for (const priority in prefetchQueueObj) {\n            if (!Object.hasOwn(prefetchQueueObj, priority)) {\n                continue;\n            }\n\n            const priorityQueue = prefetchQueueObj[priority];\n            for (const channelId of priorityQueue) {\n                if (!Object.hasOwn(prefetchRequestStatus, channelId)) {\n                    queue.add(async () => this.prefetchPosts(channelId));\n                }\n            }\n        }\n    };\n\n    render() {\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCurrentChannelId, getUnreadChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {prefetchChannelPosts} from 'actions/views/channel';\nimport {getCategoriesForCurrentTeam} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport {prefetchQueue, trackPreloadedChannels} from './actions';\nimport DataPrefetch from './data_prefetch';\n\nfunction isSidebarLoaded(state: GlobalState) {\n    return getCategoriesForCurrentTeam(state).length > 0;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const lastUnreadChannel = state.views.channel.lastUnreadChannel;\n    const memberships = getMyChannelMemberships(state);\n    const unreadChannels = getUnreadChannels(state, lastUnreadChannel);\n    const prefetchQueueObj = prefetchQueue(unreadChannels, memberships, isCollapsedThreadsEnabled(state));\n    const prefetchRequestStatus = state.views.channel.channelPrefetchStatus;\n\n    return {\n        currentChannelId: getCurrentChannelId(state),\n        prefetchQueueObj,\n        prefetchRequestStatus,\n        sidebarLoaded: isSidebarLoaded(state),\n        unreadChannels,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            prefetchChannelPosts,\n            trackPreloadedChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataPrefetch);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {HTMLAttributes} from 'react';\nimport React, {useRef} from 'react';\n\nimport {DEFAULT_LHS_WIDTH, CssVarKeyForResizable, ResizeDirection} from '../constants';\nimport ResizableDivider from '../resizable_divider';\n\ninterface Props extends HTMLAttributes<'div'> {\n    children: React.ReactNode;\n}\n\nfunction ResizableLhs({\n    children,\n    id,\n    className,\n}: Props) {\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    return (\n        <div\n            id={id}\n            className={className}\n            ref={containerRef}\n        >\n            {children}\n            <ResizableDivider\n                name={'lhsResizeHandle'}\n                globalCssVar={CssVarKeyForResizable.LHS}\n                defaultWidth={DEFAULT_LHS_WIDTH}\n                dir={ResizeDirection.LEFT}\n                containerRef={containerRef}\n            />\n        </div>\n    );\n}\n\nexport default ResizableLhs;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport {\n    LightbulbOutlineIcon,\n    AccountPlusOutlineIcon,\n    AccountMultiplePlusOutlineIcon,\n    SettingsOutlineIcon,\n    AccountMultipleOutlineIcon,\n    ExitToAppIcon,\n    MessagePlusOutlineIcon,\n    PlusIcon,\n    MonitorAccountIcon,\n} from '@mattermost/compass-icons/components';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCloudSubscription, getSubscriptionProduct} from 'mattermost-redux/selectors/entities/cloud';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {haveICurrentTeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles_helpers';\nimport {getJoinableTeamIds} from 'mattermost-redux/selectors/entities/teams';\n\nimport {openModal} from 'actions/views/modals';\nimport {getMainMenuPluginComponents} from 'selectors/plugins';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\nimport useGetUsageDeltas from 'components/common/hooks/useGetUsageDeltas';\nimport InvitationModal from 'components/invitation_modal';\nimport LeaveTeamModal from 'components/leave_team_modal';\nimport * as Menu from 'components/menu';\nimport TeamGroupsManageModal from 'components/team_groups_manage_modal';\nimport TeamMembersModal from 'components/team_members_modal';\nimport TeamSettingsModal from 'components/team_settings_modal';\nimport RestrictedIndicator from 'components/widgets/menu/menu_items/restricted_indicator';\n\nimport {FREEMIUM_TO_ENTERPRISE_TRIAL_LENGTH_DAYS} from 'utils/cloud_utils';\nimport {LicenseSkus, ModalIdentifiers, MattermostFeatures, CloudProducts} from 'utils/constants';\nimport {isCloudLicense} from 'utils/license_utils';\n\nimport type {GlobalState} from 'types/store';\n\ninterface Props {\n    currentTeam: Team;\n}\n\nexport default function SidebarTeamMenu(props: Props) {\n    const license = useSelector(getLicense);\n    const config = useSelector(getConfig);\n\n    const havePermissionToCreateTeam = useSelector((state: GlobalState) => haveISystemPermission(state, {permission: Permissions.CREATE_TEAM}));\n    const havePermissionToManageTeam = useSelector((state: GlobalState) => haveICurrentTeamPermission(state, Permissions.MANAGE_TEAM));\n    const havePermissionToAddUserToTeam = useSelector((state: GlobalState) => haveICurrentTeamPermission(state, Permissions.ADD_USER_TO_TEAM));\n    const havePermissionToInviteGuest = useSelector((state: GlobalState) => haveICurrentTeamPermission(state, Permissions.INVITE_GUEST));\n    const isCloud = isCloudLicense(license);\n    const isGuestAccessEnabled = config?.EnableGuestAccounts === 'true';\n    const isTeamGroupConstrained = Boolean(props.currentTeam?.group_constrained);\n    const isLicensedForLDAPGroups = license?.LDAPGroups === 'true';\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const joinableTeams = useSelector(getJoinableTeamIds);\n    const haveMoreJoinableTeams = joinableTeams?.length > 0;\n    const canJoinAnotherTeam = !experimentalPrimaryTeam && haveMoreJoinableTeams;\n\n    const tooltipText = props.currentTeam.description ? props.currentTeam.description : props.currentTeam.display_name;\n\n    return (\n        <Menu.Container\n            menuButton={{\n                id: 'sidebarTeamMenuButton',\n                class: 'btn btn-sm btn-quaternary btn-inverted',\n                children: (\n                    <>\n                        <span>{props.currentTeam.display_name}</span>\n                        <i className='icon icon-chevron-down'/>\n                    </>\n                ),\n            }}\n            menuButtonTooltip={{\n                text: tooltipText,\n            }}\n            menu={{\n                id: 'sidebarTeamMenu',\n            }}\n        >\n            {((isGuestAccessEnabled && havePermissionToInviteGuest) || havePermissionToAddUserToTeam) && (\n                <InvitePeopleMenuItem/>\n            )}\n            {isTeamGroupConstrained && isLicensedForLDAPGroups && havePermissionToManageTeam && (\n                <AddGroupsToTeamMenuItem/>\n            )}\n            {havePermissionToManageTeam && (\n                <TeamSettingsMenuItem/>\n            )}\n            <ManageViewMembersMenuItem/>\n            {(isTeamGroupConstrained && isLicensedForLDAPGroups && havePermissionToManageTeam) && (\n                <ManageGroupsMenuItem\n                    teamID={props.currentTeam.id}\n                />\n            )}\n            {(!isTeamGroupConstrained && experimentalPrimaryTeam !== props.currentTeam.name) && (\n                <LeaveTeamMenuItem/>\n            )}\n            {(canJoinAnotherTeam || havePermissionToCreateTeam) && <Menu.Separator/>}\n            {canJoinAnotherTeam &&\n                <JoinAnotherTeamMenuItem/>\n            }\n            {havePermissionToCreateTeam && (\n                <CreateTeamMenuItem\n                    isCloud={isCloud}\n                />\n            )}\n            <Menu.Separator/>\n            <LearnAboutTeamsMenuItem/>\n            <PluginMenuItems/>\n        </Menu.Container>\n    );\n}\n\nfunction InvitePeopleMenuItem(props: Menu.FirstMenuItemProps) {\n    const dispatch = useDispatch();\n\n    const handleClick = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.INVITATION,\n            dialogType: InvitationModal,\n            dialogProps: {\n                focusOriginElement: 'sidebarTeamMenuButton',\n            },\n        }));\n    }, [dispatch]);\n\n    return (\n        <Menu.Item\n            onClick={handleClick}\n            leadingElement={(\n                <AccountMultiplePlusOutlineIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            labels={(\n                <>\n                    <FormattedMessage\n                        id='sidebarLeft.teamMenu.invitePeopleMenuItem.primaryLabel'\n                        defaultMessage='Invite people'\n                    />\n                    <FormattedMessage\n                        id='sidebarLeft.teamMenu.invitePeopleMenuItem.secondaryLabel'\n                        defaultMessage='Add or invite people to the team'\n                    />\n                </>\n            )}\n            aria-haspopup='dialog'\n            {...props}\n        />\n    );\n}\n\nfunction AddGroupsToTeamMenuItem(props: Menu.FirstMenuItemProps) {\n    const dispatch = useDispatch();\n\n    const handleClick = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM,\n            dialogType: AddGroupsToTeamModal,\n            dialogProps: {\n                focusOriginElement: 'sidebarTeamMenuButton',\n            },\n        }));\n    }, [dispatch]);\n\n    return (\n        <Menu.Item\n            onClick={handleClick}\n            leadingElement={(\n                <AccountPlusOutlineIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.addGroupsToTeamMenuItem.primaryLabel'\n                    defaultMessage='Add groups'\n                />\n            )}\n            aria-haspopup='dialog'\n            {...props}\n        />\n    );\n}\n\nfunction TeamSettingsMenuItem(props: Menu.FirstMenuItemProps) {\n    const dispatch = useDispatch();\n\n    const handleClick = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.TEAM_SETTINGS,\n            dialogType: TeamSettingsModal,\n            dialogProps: {\n                focusOriginElement: 'sidebarTeamMenuButton',\n            },\n        }));\n    }, [dispatch]);\n\n    return (\n        <Menu.Item\n            leadingElement={(\n                <SettingsOutlineIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            onClick={handleClick}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.teamSettingsMenuItem.primaryLabel'\n                    defaultMessage='Team settings'\n                />\n            )}\n            aria-haspopup='dialog'\n            {...props}\n        />\n    );\n}\n\nfunction ManageViewMembersMenuItem(props: Menu.FirstMenuItemProps) {\n    const dispatch = useDispatch();\n\n    const havePermissionToRemoveUserFromTeam = useSelector((state: GlobalState) => haveICurrentTeamPermission(state, Permissions.REMOVE_USER_FROM_TEAM));\n    const havePermissionToManageTeamRoles = useSelector((state: GlobalState) => haveICurrentTeamPermission(state, Permissions.MANAGE_TEAM_ROLES));\n\n    const handleClick = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.TEAM_MEMBERS,\n            dialogType: TeamMembersModal,\n            dialogProps: {\n                focusOriginElement: 'sidebarTeamMenuButton',\n            },\n        }));\n    }, [dispatch]);\n\n    let label = (\n        <FormattedMessage\n            id='sidebarLeft.teamMenu.viewMembersMenuItem.primaryLabel'\n            defaultMessage='View members'\n        />\n    );\n    if (havePermissionToRemoveUserFromTeam && havePermissionToManageTeamRoles) {\n        label = (\n            <FormattedMessage\n                id='sidebarLeft.teamMenu.manageMembersMenuItem.primaryLabel'\n                defaultMessage='Manage members'\n            />\n        );\n    }\n\n    return (\n        <Menu.Item\n            leadingElement={(\n                <AccountMultipleOutlineIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            onClick={handleClick}\n            labels={label}\n            aria-haspopup='dialog'\n            {...props}\n        />\n    );\n}\n\ninterface ManageGroupsMenuItemProps {\n    teamID: Team['id'];\n}\n\nfunction ManageGroupsMenuItem({teamID}: ManageGroupsMenuItemProps) {\n    const dispatch = useDispatch();\n\n    const handleClick = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.MANAGE_TEAM_GROUPS,\n            dialogType: TeamGroupsManageModal,\n            dialogProps: {\n                teamID,\n            },\n        }));\n    }, [dispatch, teamID]);\n\n    return (\n        <Menu.Item\n            leadingElement={(\n                <MonitorAccountIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            onClick={handleClick}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.manageGroupsMenuItem.primaryLabel'\n                    defaultMessage='Manage groups'\n                />\n            )}\n            aria-haspopup='dialog'\n        />\n    );\n}\n\nfunction LeaveTeamMenuItem() {\n    const dispatch = useDispatch();\n\n    const handleClick = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.LEAVE_TEAM,\n            dialogType: LeaveTeamModal,\n        }));\n    }, [dispatch]);\n\n    return (\n        <Menu.Item\n            leadingElement={(\n                <ExitToAppIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            onClick={handleClick}\n            isDestructive={true}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.leaveTeamMenuItem.primaryLabel'\n                    defaultMessage='Leave team'\n                />\n            )}\n            aria-haspopup='dialog'\n        />\n    );\n}\n\nfunction JoinAnotherTeamMenuItem() {\n    const history = useHistory();\n\n    const handleClick = useCallback(() => {\n        history.push('/select_team');\n    }, [history]);\n\n    return (\n        <Menu.Item\n            leadingElement={(\n                <MessagePlusOutlineIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            onClick={handleClick}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.joinAnotherTeamMenuItem.primaryLabel'\n                    defaultMessage='Join another team'\n                />\n            )}\n        />\n    );\n}\n\ninterface CreateTeamMenuItemProps {\n    isCloud: boolean;\n}\n\nfunction CreateTeamMenuItem({isCloud}: CreateTeamMenuItemProps) {\n    const history = useHistory();\n\n    const cloudSubscription = useSelector(getCloudSubscription);\n    const subscriptionProduct = useSelector(getSubscriptionProduct);\n    const isFreeTrial = isCloud && cloudSubscription?.is_free_trial === 'true';\n    const isStarterFree = isCloud && subscriptionProduct?.sku === CloudProducts.STARTER;\n    const usageDeltas = useGetUsageDeltas();\n    const isTeamsLimitReached = isStarterFree && !isFreeTrial && usageDeltas.teams.active >= 0;\n    const isTeamCreateRestricted = isCloud && (isFreeTrial || isTeamsLimitReached);\n\n    const handleClick = useCallback(() => {\n        if (isTeamsLimitReached || isTeamCreateRestricted) {\n            return;\n        }\n\n        history.push('/create_team');\n    }, [history, isTeamsLimitReached]);\n\n    return (\n        <Menu.Item\n            leadingElement={(\n                <PlusIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            onClick={handleClick}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.createTeamMenuItem.primaryLabel'\n                    defaultMessage='Create a team'\n                />\n            )}\n            trailingElements={isTeamCreateRestricted && <RestrictedIndicatorForCreateTeam isFreeTrial={isFreeTrial}/>}\n        />\n    );\n}\n\nfunction RestrictedIndicatorForCreateTeam({isFreeTrial}: {isFreeTrial: boolean}) {\n    const {formatMessage} = useIntl();\n\n    return (\n        <RestrictedIndicator\n            feature={MattermostFeatures.CREATE_MULTIPLE_TEAMS}\n            minimumPlanRequiredForFeature={LicenseSkus.Professional}\n            blocked={!isFreeTrial}\n            tooltipMessage={formatMessage({\n                id: 'navbar_dropdown.create.tooltip.cloudFreeTrial',\n                defaultMessage: 'During your trial you are able to create multiple teams. These teams will be archived after your trial.',\n            })}\n            titleAdminPreTrial={formatMessage({\n                id: 'navbar_dropdown.create.modal.titleAdminPreTrial',\n                defaultMessage: 'Try unlimited teams with a free trial',\n            })}\n            messageAdminPreTrial={formatMessage({\n                id: 'navbar_dropdown.create.modal.messageAdminPreTrial',\n                defaultMessage: 'Create unlimited teams with one of our paid plans. Get the full experience of Enterprise when you start a free, {trialLength} day trial.',\n            },\n            {\n                trialLength: FREEMIUM_TO_ENTERPRISE_TRIAL_LENGTH_DAYS,\n            },\n            )}\n            titleAdminPostTrial={formatMessage({\n                id: 'navbar_dropdown.create.modal.titleAdminPostTrial',\n                defaultMessage: 'Upgrade to create unlimited teams',\n            })}\n            messageAdminPostTrial={formatMessage({\n                id: 'navbar_dropdown.create.modal.messageAdminPostTrial',\n                defaultMessage: \"Multiple teams allow for context-specific spaces that are more attuned to your and your teams' needs. Upgrade to the Professional plan to create unlimited teams.\",\n            })}\n            titleEndUser={formatMessage({\n                id: 'navbar_dropdown.create.modal.titleEndUser',\n                defaultMessage: 'Multiple teams available in paid plans',\n            })}\n            messageEndUser={formatMessage({\n                id: 'navbar_dropdown.create.modal.messageEndUser',\n                defaultMessage: \"Multiple teams allow for context-specific spaces that are more attuned to your teams' needs.\",\n            })}\n        />\n    );\n}\n\nconst MATTERMOST_ACADEMY_TEAM_TRAINING_LINK = 'https://mattermost.com/pl/mattermost-academy-team-training';\n\nfunction LearnAboutTeamsMenuItem() {\n    const handleClick = useCallback(() => {\n        window.open(MATTERMOST_ACADEMY_TEAM_TRAINING_LINK, '_blank', 'noopener noreferrer');\n    }, []);\n\n    return (\n        <Menu.Item\n            className='learnAboutTeamsMenuItem'\n            onClick={handleClick}\n            leadingElement={(\n                <LightbulbOutlineIcon\n                    size={18}\n                    aria-hidden='true'\n                />\n            )}\n            labels={(\n                <FormattedMessage\n                    id='sidebarLeft.teamMenu.learnAboutTeamsMenuItem.primaryLabel'\n                    defaultMessage='Learn about teams'\n                />\n            )}\n        />\n    );\n}\n\nfunction PluginMenuItems() {\n    const pluginInMainMenu = useSelector(getMainMenuPluginComponents);\n\n    if (pluginInMainMenu.length > 0) {\n        const pluginMenuItems = pluginInMainMenu.map((plugin) => {\n            function handleClick() {\n                if (plugin.action) {\n                    plugin.action();\n                }\n            }\n\n            return (\n                <Menu.Item\n                    id={`${plugin.id}_pluginmenuitem`}\n                    key={plugin.id}\n                    onClick={handleClick}\n                    labels={<span>{plugin.text}</span>}\n                />\n            );\n        });\n\n        return (\n            <>\n                <Menu.Separator/>\n                {pluginMenuItems}\n            </>\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport SidebarBrowseOrAddChannelMenu from './sidebar_browse_or_add_channel_menu';\nimport SidebarTeamMenu from './sidebar_team_menu';\n\nimport './sidebar_header.scss';\n\nexport type Props = {\n    showNewChannelModal: () => void;\n    showMoreChannelsModal: () => void;\n    showCreateUserGroupModal: () => void;\n    invitePeopleModal: () => void;\n    showCreateCategoryModal: () => void;\n    canCreateChannel: boolean;\n    canJoinPublicChannel: boolean;\n    handleOpenDirectMessagesModal: () => void;\n    unreadFilterEnabled: boolean;\n    canCreateCustomGroups: boolean;\n}\n\nconst SidebarHeader = (props: Props) => {\n    const currentTeam = useSelector(getCurrentTeam);\n\n    if (!currentTeam) {\n        return null;\n    }\n\n    return (\n        <header className='sidebarHeaderContainer'>\n            <SidebarTeamMenu currentTeam={currentTeam}/>\n            {(props.canCreateChannel || props.canJoinPublicChannel) && (\n                <SidebarBrowseOrAddChannelMenu\n                    canCreateChannel={props.canCreateChannel}\n                    onCreateNewChannelClick={props.showNewChannelModal}\n                    canJoinPublicChannel={props.canJoinPublicChannel}\n                    onBrowseChannelClick={props.showMoreChannelsModal}\n                    onOpenDirectMessageClick={props.handleOpenDirectMessagesModal}\n                    canCreateCustomGroups={props.canCreateCustomGroups}\n                    onCreateNewUserGroupClick={props.showCreateUserGroupModal}\n                    unreadFilterEnabled={props.unreadFilterEnabled}\n                    onCreateNewCategoryClick={props.showCreateCategoryModal}\n                    onInvitePeopleClick={props.invitePeopleModal}\n                />\n            )}\n        </header>\n    );\n};\n\nexport default SidebarHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SidebarHeader from './sidebar_header';\n\nexport default SidebarHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {WrappedComponentProps} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport NoResultsIndicator from 'components/no_results_indicator/no_results_indicator';\nimport {NoResultsVariant} from 'components/no_results_indicator/types';\nimport SuggestionBox from 'components/suggestion/suggestion_box';\nimport type SuggestionBoxComponent from 'components/suggestion/suggestion_box/suggestion_box';\nimport SuggestionList from 'components/suggestion/suggestion_list';\nimport SwitchChannelProvider from 'components/suggestion/switch_channel_provider';\n\nimport {focusElement} from 'utils/a11y_utils';\nimport {getHistory} from 'utils/browser_history';\nimport Constants, {RHSStates} from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\n\nimport type {RhsState} from 'types/store/rhs';\n\nconst CHANNEL_MODE = 'channel';\n\ntype ProviderSuggestions = {\n    matchedPretext: any;\n    terms: string[];\n    items: any[];\n    component: React.ReactNode;\n};\n\nexport type Props = WrappedComponentProps & {\n    onExited: () => void;\n\n    isMobileView: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n\n    actions: {\n        joinChannelById: (channelId: string) => Promise<ActionResult>;\n        switchToChannel: (channel: Channel) => Promise<ActionResult>;\n        closeRightHandSide: () => void;\n    };\n    focusOriginElement: string;\n};\n\ntype State = {\n    text: string;\n    mode: string | null;\n    hasSuggestions: boolean;\n    shouldShowLoadingSpinner: boolean;\n    pretext: string;\n};\n\nexport class QuickSwitchModal extends React.PureComponent<Props, State> {\n    private channelProviders: SwitchChannelProvider[];\n    private switchBox: SuggestionBoxComponent | null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.channelProviders = [new SwitchChannelProvider()];\n        this.switchBox = null;\n\n        this.state = {\n            text: '',\n            mode: CHANNEL_MODE,\n            hasSuggestions: true,\n            shouldShowLoadingSpinner: true,\n            pretext: '',\n        };\n    }\n\n    private focusTextbox = (): void => {\n        if (this.switchBox === null) {\n            return;\n        }\n        const textbox = this.switchBox.getTextbox();\n        if (document.activeElement !== textbox) {\n            textbox.focus();\n            Utils.placeCaretAtEnd(textbox);\n        }\n    };\n\n    private setSwitchBoxRef = (input: SuggestionBoxComponent): void => {\n        this.switchBox = input;\n        this.focusTextbox();\n    };\n\n    private hideOnSelect = (): void => {\n        this.focusPostTextbox();\n        this.setState({\n            text: '',\n        });\n        this.props.onExited();\n    };\n\n    private focusPostTextbox = (): void => {\n        if (!UserAgent.isMobile()) {\n            setTimeout(() => {\n                const textbox = document.querySelector('#post_textbox') as HTMLElement;\n                if (textbox) {\n                    textbox.focus();\n                }\n            });\n        }\n    };\n\n    private hideOnCancel = () => {\n        this.props.onExited?.();\n        focusElement(this.props.focusOriginElement, true);\n    };\n\n    private onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({text: e.target.value, shouldShowLoadingSpinner: true});\n    };\n\n    public handleSubmit = async (selected?: any): Promise<void> => {\n        if (!selected) {\n            return;\n        }\n\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        if (this.state.mode === CHANNEL_MODE) {\n            const {joinChannelById, switchToChannel} = this.props.actions;\n            const selectedChannel = selected.channel;\n\n            if (selected.type === Constants.MENTION_MORE_CHANNELS && selectedChannel.type === Constants.OPEN_CHANNEL) {\n                await joinChannelById(selectedChannel.id);\n            }\n            switchToChannel(selectedChannel).then((result: ActionResult) => {\n                if ('data' in result) {\n                    this.hideOnSelect();\n                }\n            });\n        } else {\n            getHistory().push('/' + selected.name);\n            this.hideOnSelect();\n        }\n    };\n\n    private handleSuggestionsReceived = (suggestions: ProviderSuggestions): void => {\n        const loadingPropPresent = suggestions.items.some((item: any) => item.loading);\n        this.setState({\n            shouldShowLoadingSpinner: loadingPropPresent,\n            pretext: suggestions.matchedPretext,\n            hasSuggestions: suggestions.items.length > 0,\n        });\n    };\n\n    public render = (): JSX.Element => {\n        const providers: SwitchChannelProvider[] = this.channelProviders;\n\n        const header = (\n            <h2 id='quickSwitchHeader'>\n                <FormattedMessage\n                    id='quick_switch_modal.switchChannels'\n                    defaultMessage='Find Channels'\n                />\n            </h2>\n        );\n\n        let help: React.ReactNode;\n        if (this.props.isMobileView) {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help_mobile'\n                    defaultMessage='Type to find a channel.'\n                />\n            );\n        } else {\n            help = (\n                <FormattedMessage\n                    id='quickSwitchModal.help_no_team'\n                    defaultMessage='Type to find a channel. Use <b>UP/DOWN</b> to browse, <b>ENTER</b> to select, <b>ESC</b> to dismiss.'\n                    values={{\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n            );\n        }\n\n        const modalHeaderText = (\n            <div className='channel-switcher__header'>\n                {header}\n            </div>\n        );\n\n        const modalSubheaderText = (\n            <div\n                className='channel-switcher__hint'\n                id='quickSwitchHint'\n            >\n                {help}\n            </div>\n        );\n\n        return (\n            <GenericModal\n                className='a11y__modal channel-switcher'\n                id='quickSwitchModal'\n                show={true}\n                bodyPadding={false}\n                enforceFocus={false}\n                onExited={this.hideOnCancel}\n                onHide={this.hideOnCancel}\n                ariaLabel={this.props.intl.formatMessage({id: 'quick_switch_modal.switchChannels', defaultMessage: 'Find Channels'})}\n                modalHeaderText={modalHeaderText}\n                modalSubheaderText={modalSubheaderText}\n                compassDesign={true}\n            >\n                <div className='channel-switcher__suggestion-box'>\n                    <i className='icon icon-magnify icon-16'/>\n                    <SuggestionBox\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        ref={this.setSwitchBoxRef}\n                        id='quickSwitchInput'\n                        aria-label={this.props.intl.formatMessage({id: 'quick_switch_modal.input', defaultMessage: 'quick switch input'})}\n                        className='form-control focused'\n                        onChange={this.onChange}\n                        value={this.state.text}\n                        onItemSelected={this.handleSubmit}\n                        listComponent={SuggestionList}\n                        listPosition='bottom'\n                        maxLength='64'\n                        providers={providers}\n                        completeOnTab={false}\n                        spellCheck='false'\n                        delayInputUpdate={true}\n                        openWhenEmpty={true}\n                        onSuggestionsReceived={this.handleSuggestionsReceived}\n                        forceSuggestionsWhenBlur={true}\n                        renderDividers={[Constants.MENTION_UNREAD, Constants.MENTION_RECENT_CHANNELS]}\n                        shouldSearchCompleteText={true}\n                    />\n                    {\n                        !this.state.shouldShowLoadingSpinner &&\n                        !this.state.hasSuggestions &&\n                        this.state.text &&\n                        (\n                            <NoResultsIndicator\n                                variant={NoResultsVariant.Search}\n                                titleValues={{channelName: `${this.state.pretext}`}}\n                            />\n                        )\n                    }\n                </div>\n            </GenericModal>\n        );\n    };\n}\n\nexport default injectIntl(QuickSwitchModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {joinChannelById, switchToChannel} from 'actions/views/channel';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport QuickSwitchModal from './quick_switch_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            joinChannelById,\n            switchToChannel,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickSwitchModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {defineMessages, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport WithTooltip from 'components/with_tooltip';\nimport {ShortcutKeys} from 'components/with_tooltip/tooltip_shortcut';\n\nimport Constants from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\n\nconst messages = defineMessages({\n    disableTooltip: {\n        id: 'sidebar_left.channel_filter.showAllChannels',\n        defaultMessage: 'Show all channels',\n    },\n    enableTooltip: {\n        id: 'sidebar_left.channel_filter.filterByUnread',\n        defaultMessage: 'Filter by unread',\n    },\n});\n\nconst shortcut = {\n    default: [ShortcutKeys.ctrl, ShortcutKeys.shift, 'U'],\n    mac: [ShortcutKeys.cmd, ShortcutKeys.shift, 'U'],\n};\n\ntype Props = {\n    intl: IntlShape;\n    unreadFilterEnabled: boolean;\n    actions: {\n        setUnreadFilterEnabled: (enabled: boolean) => void;\n    };\n};\n\nexport class ChannelFilter extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleUnreadFilterKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleUnreadFilterKeyPress);\n    }\n\n    handleUnreadFilterClick = (e?: React.MouseEvent) => {\n        e?.preventDefault();\n        e?.stopPropagation();\n        this.toggleUnreadFilter();\n    };\n\n    handleUnreadFilterKeyPress = (e: KeyboardEvent) => {\n        if (Keyboard.cmdOrCtrlPressed(e) && e.shiftKey && Keyboard.isKeyPressed(e, Constants.KeyCodes.U)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.toggleUnreadFilter();\n        }\n    };\n\n    toggleUnreadFilter = () => {\n        const {unreadFilterEnabled} = this.props;\n\n        if (unreadFilterEnabled) {\n            trackEvent('ui', 'ui_sidebar_unread_filter_disabled');\n        } else {\n            trackEvent('ui', 'ui_sidebar_unread_filter_enabled');\n        }\n\n        this.props.actions.setUnreadFilterEnabled(!unreadFilterEnabled);\n    };\n\n    render() {\n        const {intl, unreadFilterEnabled} = this.props;\n\n        const unreadsAriaLabel = intl.formatMessage({id: 'sidebar_left.channel_filter.filterUnreadAria', defaultMessage: 'unreads filter'});\n\n        return (\n            <div className='SidebarFilters'>\n                <WithTooltip\n                    title={unreadFilterEnabled ? messages.disableTooltip : messages.enableTooltip}\n                    shortcut={shortcut}\n                >\n                    <a\n                        href='#'\n                        className={classNames('SidebarFilters_filterButton', {\n                            active: unreadFilterEnabled,\n                        })}\n                        onClick={this.toggleUnreadFilter}\n                        aria-label={unreadsAriaLabel}\n                    >\n                        <i className='icon icon-filter-variant'/>\n                    </a>\n                </WithTooltip>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(ChannelFilter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getMyTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setUnreadFilterEnabled} from 'actions/views/channel_sidebar';\nimport {isUnreadFilterEnabled} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelFilter from './channel_filter';\n\nfunction mapStateToProps(state: GlobalState) {\n    const teams = getMyTeams(state);\n\n    return {\n        hasMultipleTeams: teams && teams.length > 1,\n        unreadFilterEnabled: isUnreadFilterEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            setUnreadFilterEnabled,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelFilter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {WrappedComponentProps} from 'react-intl';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport QuickSwitchModal from 'components/quick_switch_modal';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\nimport ChannelFilter from '../channel_filter';\n\nexport type Props = WrappedComponentProps & {\n    showUnreadsCategory: boolean;\n    isQuickSwitcherOpen: boolean;\n    actions: {\n        openModal: <P>(modalData: ModalData<P>) => void;\n        closeModal: (modalId: string) => void;\n    };\n};\n\nclass ChannelNavigator extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleShortcut);\n        document.addEventListener('keydown', this.handleQuickSwitchKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n        document.removeEventListener('keydown', this.handleQuickSwitchKeyPress);\n    }\n\n    openQuickSwitcher = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        trackEvent('ui', 'ui_sidebar_open_channel_switcher_v2');\n\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.QUICK_SWITCH,\n            dialogType: QuickSwitchModal,\n            dialogProps: {focusOriginElement: 'SidebarChannelNavigatorButton'},\n        });\n    };\n\n    handleShortcut = (e: KeyboardEvent) => {\n        const {actions: {closeModal}} = this.props;\n\n        if (Keyboard.cmdOrCtrlPressed(e) && e.shiftKey) {\n            if (Keyboard.isKeyPressed(e, Constants.KeyCodes.M)) {\n                e.preventDefault();\n                closeModal(ModalIdentifiers.QUICK_SWITCH);\n            }\n            if (Keyboard.isKeyPressed(e, Constants.KeyCodes.L)) {\n                // just close the modal if it's open, but let someone else handle the shortcut\n                closeModal(ModalIdentifiers.QUICK_SWITCH);\n            }\n        }\n    };\n\n    handleQuickSwitchKeyPress = (e: KeyboardEvent) => {\n        if (Keyboard.cmdOrCtrlPressed(e) && !e.shiftKey && Keyboard.isKeyPressed(e, Constants.KeyCodes.K)) {\n            if (!e.altKey && !Utils.isTextSelectedInPostOrReply(e)) {\n                e.preventDefault();\n                this.toggleQuickSwitchModal();\n            }\n        }\n    };\n\n    toggleQuickSwitchModal = () => {\n        const {isQuickSwitcherOpen, actions: {openModal, closeModal}} = this.props;\n\n        if (isQuickSwitcherOpen) {\n            closeModal(ModalIdentifiers.QUICK_SWITCH);\n        } else {\n            openModal({\n                modalId: ModalIdentifiers.QUICK_SWITCH,\n                dialogType: QuickSwitchModal,\n                dialogProps: {focusOriginElement: 'SidebarChannelNavigatorButton'},\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className={'SidebarChannelNavigator webapp'}>\n                {!this.props.showUnreadsCategory && <ChannelFilter/>}\n                <button\n                    className={'SidebarChannelNavigator_jumpToButton'}\n                    onClick={this.openQuickSwitcher}\n                    aria-label={this.props.intl.formatMessage({id: 'sidebar_left.channel_navigator.channelSwitcherLabel', defaultMessage: 'Channel Switcher'})}\n                    aria-haspopup='dialog'\n                    data-testid='SidebarChannelNavigatorButton'\n                    id='SidebarChannelNavigatorButton'\n                >\n                    <i className='icon icon-magnify'/>\n                    <FormattedMessage\n                        id='sidebar_left.channel_navigator.jumpTo'\n                        defaultMessage='Find channel'\n                    />\n                    <div className={'SidebarChannelNavigator_shortcutText'}>\n                        {`${UserAgent.isMac() ? '⌘' : 'Ctrl+'}K`}\n                    </div>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(ChannelNavigator);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelNavigator from './channel_navigator';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n        isQuickSwitcherOpen: isModalOpen(state, ModalIdentifiers.QUICK_SWITCH),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            closeModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelNavigator);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage, defineMessages, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\n\nimport '../category_modal.scss';\n\ntype Props = {\n    category: ChannelCategory;\n    onExited: () => void;\n    actions: {\n        deleteCategory: (categoryId: string) => void;\n    };\n};\n\nexport default function DeleteCategoryModal(props: Props) {\n    const intl = useIntl();\n\n    const handleConfirm = useCallback(() => {\n        props.actions.deleteCategory(props.category.id);\n    }, [props.actions.deleteCategory, props.category]);\n\n    return (\n        <GenericModal\n            compassDesign={true}\n            ariaLabel={intl.formatMessage({id: 'delete_category_modal.deleteCategory', defaultMessage: 'Delete this category?'})}\n            onExited={props.onExited}\n            modalHeaderText={(\n                <FormattedMessage\n                    id='delete_category_modal.deleteCategory'\n                    defaultMessage='Delete this category?'\n                />\n            )}\n            handleCancel={props.onExited}\n            handleConfirm={handleConfirm}\n            confirmButtonText={(\n                <FormattedMessage\n                    id='delete_category_modal.delete'\n                    defaultMessage='Delete'\n                />\n            )}\n            confirmButtonClassName={'delete'}\n        >\n            <span className='delete-category__helpText'>\n                <FormattedMessage\n                    id='delete_category_modal.helpText'\n                    defaultMessage=\"Channels in <b>{category_name}</b> will move back to the Channels and Direct messages categories. You're not removed from any channels.\"\n                    values={{\n                        category_name: props.category.display_name,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n            </span>\n        </GenericModal>\n    );\n}\n\n// TODO MM-52680 These strings are properly defined in @mattermost/components, but the i18n tooling currently can't\n// find them there, so we've had to redefine them here\ndefineMessages({\n    cancel: {\n        id: 'generic_modal.cancel',\n        defaultMessage: 'Cancel',\n    },\n    confirm: {\n        id: 'generic_modal.confirm',\n        defaultMessage: 'Confirm',\n    },\n    paginationCount: {\n        id: 'footer_pagination.count',\n        defaultMessage: 'Showing {startCount, number}-{endCount, number} of {total, number}',\n    },\n    paginationNext: {\n        id: 'footer_pagination.next',\n        defaultMessage: 'Next',\n    },\n    paginationPrev: {\n        id: 'footer_pagination.prev',\n        defaultMessage: 'Previous',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {deleteCategory} from 'mattermost-redux/actions/channel_categories';\n\nimport DeleteCategoryModal from './delete_category_modal';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteCategory,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(DeleteCategoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, useMemo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    BellOutlineIcon,\n    TrashCanOutlineIcon,\n    PencilOutlineIcon,\n    FormatListBulletedIcon,\n    SortAlphabeticalAscendingIcon,\n    ClockOutlineIcon,\n    ChevronRightIcon,\n    CheckIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport {CategorySorting} from '@mattermost/types/channel_categories';\n\nimport {setCategoryMuted, setCategorySorting} from 'mattermost-redux/actions/channel_categories';\nimport {readMultipleChannels} from 'mattermost-redux/actions/channels';\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {openModal} from 'actions/views/modals';\nimport {makeGetUnreadIdsForCategory} from 'selectors/views/channel_sidebar';\n\nimport DeleteCategoryModal from 'components/delete_category_modal';\nimport EditCategoryModal from 'components/edit_category_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport CreateNewCategoryMenuItem from './create_new_category_menu_item';\nimport MarkAsReadMenuItem from './mark_as_read_menu_item';\nimport SidebarCategoryGenericMenu from './sidebar_category_generic_menu';\n\ntype Props = {\n    category: ChannelCategory;\n};\n\nconst SidebarCategoryMenu = ({\n    category,\n}: Props) => {\n    const dispatch = useDispatch();\n    const showUnreadsCategory = useSelector(shouldShowUnreadsCategory);\n    const getUnreadsIdsForCategory = useMemo(makeGetUnreadIdsForCategory, [category]);\n    const unreadsIds = useSelector((state: GlobalState) => getUnreadsIdsForCategory(state, category));\n    const {formatMessage} = useIntl();\n\n    let muteUnmuteCategoryMenuItem: JSX.Element | null = null;\n    if (category.type !== CategoryTypes.DIRECT_MESSAGES) {\n        function toggleCategoryMute() {\n            dispatch(setCategoryMuted(category.id, !category.muted));\n        }\n\n        muteUnmuteCategoryMenuItem = (\n            <Menu.Item\n                id={`mute-${category.id}`}\n                onClick={toggleCategoryMute}\n                leadingElement={<BellOutlineIcon size={18}/>}\n                labels={\n                    category.muted ? (\n                        <FormattedMessage\n                            id='sidebar_left.sidebar_category_menu.unmuteCategory'\n                            defaultMessage='Unmute Category'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='sidebar_left.sidebar_category_menu.muteCategory'\n                            defaultMessage='Mute Category'\n                        />\n                    )\n                }\n            />\n        );\n    }\n\n    let deleteCategoryMenuItem: JSX.Element | null = null;\n    let renameCategoryMenuItem: JSX.Element | null = null;\n    if (category.type === CategoryTypes.CUSTOM) {\n        function handleDeleteCategory() {\n            dispatch(openModal({\n                modalId: ModalIdentifiers.DELETE_CATEGORY,\n                dialogType: DeleteCategoryModal,\n                dialogProps: {\n                    category,\n                },\n            }));\n        }\n\n        deleteCategoryMenuItem = (\n            <Menu.Item\n                id={`delete-${category.id}`}\n                isDestructive={true}\n                aria-haspopup={true}\n                onClick={handleDeleteCategory}\n                leadingElement={<TrashCanOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_category_menu.deleteCategory'\n                        defaultMessage='Delete Category'\n                    />\n                )}\n            />\n        );\n\n        function handleRenameCategory() {\n            dispatch(openModal({\n                modalId: ModalIdentifiers.EDIT_CATEGORY,\n                dialogType: EditCategoryModal,\n                dialogProps: {\n                    categoryId: category.id,\n                    initialCategoryName: category.display_name,\n                },\n            }));\n        }\n\n        renameCategoryMenuItem = (\n            <Menu.Item\n                id={`rename-${category.id}`}\n                onClick={handleRenameCategory}\n                aria-haspopup={true}\n                leadingElement={<PencilOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_category_menu.renameCategory'\n                        defaultMessage='Rename Category'\n                    />\n                )}\n            />\n        );\n    }\n\n    function handleSortChannels(sorting: CategorySorting) {\n        dispatch(setCategorySorting(category.id, sorting));\n        trackEvent('ui', `ui_sidebar_sort_dm_${sorting}`);\n    }\n\n    let sortChannelsSelectedValue = (\n        <FormattedMessage\n            id='sidebar.sortedManually'\n            defaultMessage='Manually'\n        />\n    );\n    let sortChannelsIcon = <FormatListBulletedIcon size={18}/>;\n    if (category.sorting === CategorySorting.Alphabetical) {\n        sortChannelsSelectedValue = (\n            <FormattedMessage\n                id='user.settings.sidebar.sortAlpha'\n                defaultMessage='Alphabetically'\n            />\n        );\n        sortChannelsIcon = <SortAlphabeticalAscendingIcon size={18}/>;\n    } else if (category.sorting === CategorySorting.Recency) {\n        sortChannelsSelectedValue = (\n            <FormattedMessage\n                id='user.settings.sidebar.recent'\n                defaultMessage='Recent Activity'\n            />\n        );\n        sortChannelsIcon = <ClockOutlineIcon size={18}/>;\n    }\n\n    const sortChannelsMenuItem = (\n        <Menu.SubMenu\n            id={`sortChannels-${category.id}`}\n            leadingElement={sortChannelsIcon}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.sort'\n                    defaultMessage='Sort'\n                />\n            )}\n            trailingElements={(\n                <>\n                    {sortChannelsSelectedValue}\n                    <ChevronRightIcon size={16}/>\n                </>\n            )}\n            menuId={`sortChannels-${category.id}-menu`}\n            menuAriaLabel={formatMessage({id: 'sidebar_left.sidebar_category_menu.sort.dropdownAriaLabel', defaultMessage: 'Sort submenu'})}\n        >\n            <Menu.Item\n                id={`sortAplhabetical-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='user.settings.sidebar.sortAlpha'\n                        defaultMessage='Alphabetically'\n                    />\n                )}\n                onClick={() => handleSortChannels(CategorySorting.Alphabetical)}\n                trailingElements={category.sorting === CategorySorting.Alphabetical ? <CheckIcon size={16}/> : null}\n            />\n            <Menu.Item\n                id={`sortByMostRecent-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar.sortedByRecencyLabel'\n                        defaultMessage='Recent Activity'\n                    />\n                )}\n                onClick={() => handleSortChannels(CategorySorting.Recency)}\n                trailingElements={category.sorting === CategorySorting.Recency ? <CheckIcon size={16}/> : null}\n            />\n            <Menu.Item\n                id={`sortManual-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar.sortedManually'\n                        defaultMessage='Manually'\n                    />\n                )}\n                onClick={() => handleSortChannels(CategorySorting.Manual)}\n                trailingElements={category.sorting === CategorySorting.Manual ? <CheckIcon size={16}/> : null}\n            />\n        </Menu.SubMenu>\n    );\n\n    const handleViewCategory = useCallback(() => {\n        dispatch(readMultipleChannels(unreadsIds));\n        trackEvent('ui', 'ui_sidebar_category_menu_viewCategory');\n    }, [dispatch, unreadsIds]);\n\n    const markAsReadMenuItem = showUnreadsCategory === false ? (\n        <MarkAsReadMenuItem\n            id={category.id}\n            handleViewCategory={handleViewCategory}\n            numChannels={unreadsIds.length}\n        />\n    ) : null;\n\n    return (\n        <SidebarCategoryGenericMenu\n            id={category.id}\n            name={category.display_name}\n        >\n            {markAsReadMenuItem}\n            {markAsReadMenuItem && <Menu.Separator/>}\n            {muteUnmuteCategoryMenuItem}\n            {renameCategoryMenuItem}\n            {deleteCategoryMenuItem}\n            <Menu.Separator/>\n            {sortChannelsMenuItem}\n            <Menu.Separator/>\n            <CreateNewCategoryMenuItem id={category.id}/>\n        </SidebarCategoryGenericMenu>\n    );\n};\n\nexport default memo(SidebarCategoryMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useState} from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    SortAlphabeticalAscendingIcon,\n    ClockOutlineIcon,\n    AccountMultipleOutlineIcon,\n    AccountPlusOutlineIcon,\n    DotsVerticalIcon,\n    ChevronRightIcon,\n    CheckIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport {CategorySorting} from '@mattermost/types/channel_categories';\n\nimport {setCategorySorting} from 'mattermost-redux/actions/channel_categories';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getVisibleDmGmLimit} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport * as Menu from 'components/menu';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    category: ChannelCategory;\n    handleOpenDirectMessagesModal: (e: MouseEvent<HTMLLIElement> | KeyboardEvent<HTMLLIElement>) => void;\n};\n\nconst SidebarCategorySortingMenu = ({\n    category,\n    handleOpenDirectMessagesModal,\n}: Props) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const {formatMessage} = useIntl();\n\n    const dispatch = useDispatch();\n    const selectedDmNumber = useSelector(getVisibleDmGmLimit);\n    const currentUserId = useSelector(getCurrentUserId);\n\n    function handleSortDirectMessages(sorting: CategorySorting) {\n        dispatch(setCategorySorting(category.id, sorting));\n        trackEvent('ui', `ui_sidebar_sort_dm_${sorting}`);\n    }\n\n    let sortDirectMessagesIcon = <ClockOutlineIcon size={18}/>;\n    let sortDirectMessagesSelectedValue = (\n        <FormattedMessage\n            id='user.settings.sidebar.recent'\n            defaultMessage='Recent Activity'\n        />\n    );\n    if (category.sorting === CategorySorting.Alphabetical) {\n        sortDirectMessagesSelectedValue = (\n            <FormattedMessage\n                id='user.settings.sidebar.sortAlpha'\n                defaultMessage='Alphabetically'\n            />\n        );\n        sortDirectMessagesIcon = <SortAlphabeticalAscendingIcon size={18}/>;\n    }\n\n    const sortDirectMessagesMenuItem = (\n        <Menu.SubMenu\n            id={`sortDirectMessages-${category.id}`}\n            leadingElement={sortDirectMessagesIcon}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.sort'\n                    defaultMessage='Sort'\n                />\n            )}\n            trailingElements={\n                <>\n                    {sortDirectMessagesSelectedValue}\n                    <ChevronRightIcon size={16}/>\n                </>\n            }\n            menuId={`sortDirectMessages-${category.id}-menu`}\n        >\n            <Menu.Item\n                id={`sortAlphabetical-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='user.settings.sidebar.sortAlpha'\n                        defaultMessage='Alphabetically'\n                    />\n                )}\n                onClick={() => handleSortDirectMessages(CategorySorting.Alphabetical)}\n                trailingElements={category.sorting === CategorySorting.Alphabetical ? <CheckIcon size={16}/> : null}\n            />\n            <Menu.Item\n                id={`sortByMostRecent-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar.sortedByRecencyLabel'\n                        defaultMessage='Recent Activity'\n                    />\n                )}\n                onClick={() => handleSortDirectMessages(CategorySorting.Recency)}\n                trailingElements={category.sorting === CategorySorting.Recency ? <CheckIcon size={16}/> : null}\n            />\n        </Menu.SubMenu>\n\n    );\n\n    function handlelimitVisibleDMsGMs(number: number) {\n        dispatch(savePreferences(currentUserId, [{\n            user_id: currentUserId,\n            category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: number.toString(),\n        }]));\n    }\n\n    let showMessagesCountSelectedValue = <span>{selectedDmNumber}</span>;\n    if (selectedDmNumber === 10000) {\n        showMessagesCountSelectedValue = (\n            <FormattedMessage\n                id='channel_notifications.levels.all'\n                defaultMessage='All'\n            />\n        );\n    }\n\n    const showMessagesCountMenuItem = (\n        <Menu.SubMenu\n            id={`showMessagesCount-${category.id}`}\n            leadingElement={<AccountMultipleOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.show'\n                    defaultMessage='Show'\n                />\n            )}\n            trailingElements={(\n                <>\n                    {showMessagesCountSelectedValue}\n                    <ChevronRightIcon size={16}/>\n                </>\n            )}\n            menuId={`showMessagesCount-${category.id}-menu`}\n        >\n            {Constants.DM_AND_GM_SHOW_COUNTS.map((dmGmShowCount) => (\n                <Menu.Item\n                    id={`showDmCount-${category.id}-${dmGmShowCount}`}\n                    key={`showDmCount-${category.id}-${dmGmShowCount}`}\n                    labels={<span>{dmGmShowCount}</span>}\n                    onClick={() => handlelimitVisibleDMsGMs(dmGmShowCount)}\n                    trailingElements={selectedDmNumber === dmGmShowCount ? <CheckIcon size={16}/> : null}\n                />\n            ))}\n        </Menu.SubMenu>\n\n    );\n\n    const openDirectMessageMenuItem = (\n        <Menu.Item\n            id={`openDirectMessage-${category.id}`}\n            onClick={handleOpenDirectMessagesModal}\n            leadingElement={<AccountPlusOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.openDirectMessage'\n                    defaultMessage='Open a direct message'\n                />\n            )}\n        />\n    );\n\n    function handleMenuToggle(isOpen: boolean) {\n        setIsMenuOpen(isOpen);\n    }\n\n    return (\n        <div\n            className={classNames(\n                'SidebarMenu',\n                'MenuWrapper',\n                {menuOpen: isMenuOpen},\n                {'MenuWrapper--open': isMenuOpen},\n            )}\n        >\n            <Menu.Container\n                menuButton={{\n                    id: `SidebarCategorySortingMenu-Button-${category.id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}, {name: category.display_name}),\n                    class: 'SidebarMenu_menuButton sortingMenu',\n                    children: <DotsVerticalIcon size={16}/>,\n                }}\n                menuButtonTooltip={{\n                    text: formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}, {name: category.display_name}),\n                    class: 'hidden-xs',\n                }}\n                menu={{\n                    id: `SidebarCategorySortingMenu-MenuList-${category.id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.dropdownAriaLabel', defaultMessage: 'Edit category menu'}),\n                    onToggle: handleMenuToggle,\n                }}\n            >\n                {sortDirectMessagesMenuItem}\n                {showMessagesCountMenuItem}\n                <Menu.Separator/>\n                {openDirectMessageMenuItem}\n            </Menu.Container>\n        </div>\n    );\n};\n\nexport default memo(SidebarCategorySortingMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {GlobalState} from 'types/store';\n\nexport function isAddChannelCtaDropdownOpen(state: GlobalState) {\n    return state.views.addChannelCtaDropdown.isOpen;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveICurrentChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {setAddChannelCtaDropdown} from 'actions/views/add_channel_dropdown';\nimport {openModal} from 'actions/views/modals';\nimport {isAddChannelCtaDropdownOpen} from 'selectors/views/add_channel_dropdown';\n\nimport BrowseChannels from 'components/browse_channels';\nimport NewChannelModal from 'components/new_channel_modal/new_channel_modal';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport {ModalIdentifiers, Preferences, Touched} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nconst AddChannelsCtaButton = (): JSX.Element | null => {\n    const dispatch = useDispatch();\n    const currentTeamId = useSelector(getCurrentTeamId);\n    const intl = useIntl();\n    const touchedAddChannelsCtaButton = useSelector((state: GlobalState) => getBool(state, Preferences.TOUCHED, Touched.ADD_CHANNELS_CTA));\n\n    const canCreatePublicChannel = useSelector((state: GlobalState) => haveICurrentChannelPermission(state, Permissions.CREATE_PUBLIC_CHANNEL));\n    const canCreatePrivateChannel = useSelector((state: GlobalState) => haveICurrentChannelPermission(state, Permissions.CREATE_PRIVATE_CHANNEL));\n    const canCreateChannel = canCreatePrivateChannel || canCreatePublicChannel;\n    const canJoinPublicChannel = useSelector((state: GlobalState) => haveICurrentChannelPermission(state, Permissions.JOIN_PUBLIC_CHANNELS));\n    const isAddChannelCtaOpen = useSelector(isAddChannelCtaDropdownOpen);\n    const currentUserId = useSelector(getCurrentUserId);\n    const openAddChannelsCtaOpen = useCallback((open: boolean) => {\n        dispatch(setAddChannelCtaDropdown(open));\n    }, []);\n\n    let buttonClass = 'SidebarChannelNavigator__addChannelsCtaLhsButton';\n\n    if (!touchedAddChannelsCtaButton) {\n        buttonClass += ' SidebarChannelNavigator__addChannelsCtaLhsButton--untouched';\n    }\n\n    if ((!canCreateChannel && !canJoinPublicChannel) || !currentTeamId) {\n        return null;\n    }\n\n    const showMoreChannelsModal = () => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.MORE_CHANNELS,\n            dialogType: BrowseChannels,\n        }));\n        trackEvent('ui', 'browse_channels_button_is_clicked');\n    };\n\n    const showNewChannelModal = () => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n            dialogType: NewChannelModal,\n        }));\n        trackEvent('ui', 'create_new_channel_button_is_clicked');\n    };\n\n    const renderDropdownItems = () => {\n        let joinPublicChannel;\n        if (canJoinPublicChannel) {\n            joinPublicChannel = (\n                <Menu.ItemAction\n                    id='showMoreChannels'\n                    onClick={showMoreChannelsModal}\n                    icon={<i className='icon-globe'/>}\n                    text={intl.formatMessage({id: 'sidebar_left.add_channel_dropdown.browseChannels', defaultMessage: 'Browse channels'})}\n                />\n            );\n        }\n\n        let createChannel;\n        if (canCreateChannel) {\n            createChannel = (\n                <Menu.ItemAction\n                    id='showNewChannel'\n                    onClick={showNewChannelModal}\n                    icon={<i className='icon-plus'/>}\n                    text={intl.formatMessage({id: 'sidebar_left.add_channel_dropdown.createNewChannel', defaultMessage: 'Create new channel'})}\n                />\n            );\n        }\n\n        return (\n            <>\n                <Menu.Group>\n                    {createChannel}\n                    {joinPublicChannel}\n                </Menu.Group>\n            </>\n        );\n    };\n\n    const addChannelsButton = (btnCallback?: () => void) => {\n        const handleClick = () => btnCallback?.();\n        return (\n            <button\n                className={buttonClass}\n                id={'addChannelsCta'}\n                aria-label={intl.formatMessage({id: 'sidebar_left.add_channel_dropdown.dropdownAriaLabel', defaultMessage: 'Add Channel Dropdown'})}\n                onClick={handleClick}\n            >\n                <div\n                    aria-label={intl.formatMessage({id: 'sidebar_left.sidebar_channel_navigator.addChannelsCta', defaultMessage: 'Add channels'})}\n                >\n                    <i className='icon-plus-box'/>\n                    <span>\n                        {intl.formatMessage({id: 'sidebar_left.addChannelsCta', defaultMessage: 'Add Channels'})}\n                    </span>\n                </div>\n            </button>\n        );\n    };\n\n    const storePreferencesAndTrackEvent = () => {\n        trackEvent('ui', 'add_channels_cta_button_clicked');\n        if (!touchedAddChannelsCtaButton) {\n            dispatch(savePreferences(\n                currentUserId,\n                [{\n                    category: Preferences.TOUCHED,\n                    user_id: currentUserId,\n                    name: Touched.ADD_CHANNELS_CTA,\n                    value: 'true',\n                }],\n            ));\n        }\n    };\n\n    const trackOpen = (opened: boolean) => {\n        openAddChannelsCtaOpen(opened);\n        storePreferencesAndTrackEvent();\n    };\n\n    if (!canCreateChannel) {\n        const browseChannelsAction = () => {\n            showMoreChannelsModal();\n            storePreferencesAndTrackEvent();\n        };\n        return addChannelsButton(browseChannelsAction);\n    }\n\n    return (\n        <MenuWrapper\n            className='AddChannelsCtaDropdown'\n            onToggle={trackOpen}\n            open={isAddChannelCtaOpen}\n        >\n            {addChannelsButton()}\n            <Menu\n                id='AddChannelCtaDropdown'\n                ariaLabel={intl.formatMessage({id: 'sidebar_left.add_channel_cta_dropdown.dropdownAriaLabel', defaultMessage: 'Add Channels Dropdown'})}\n            >\n                {renderDropdownItems()}\n            </Menu>\n        </MenuWrapper>\n    );\n};\n\nexport default AddChannelsCtaButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function setAddChannelCtaDropdown(open: boolean) {\n    return {\n        type: ActionTypes.ADD_CHANNEL_CTA_DROPDOWN_TOGGLE,\n        open,\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl, FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport InvitationModal from 'components/invitation_modal';\nimport {getAnalyticsCategory} from 'components/onboarding_tasks';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport ToggleModalButton from 'components/toggle_modal_button';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    className?: string;\n    isAdmin: boolean;\n}\n\nconst InviteMembersButton = (props: Props): JSX.Element | null => {\n    const intl = useIntl();\n    const currentTeamId = useSelector(getCurrentTeamId);\n\n    const handleButtonClick = () => {\n        trackEvent(getAnalyticsCategory(props.isAdmin), 'click_sidebar_invite_members_button');\n    };\n\n    if (!currentTeamId) {\n        return null;\n    }\n\n    return (\n        <TeamPermissionGate\n            teamId={currentTeamId}\n            permissions={[Permissions.ADD_USER_TO_TEAM, Permissions.INVITE_GUEST]}\n        >\n            <ToggleModalButton\n                ariaLabel={intl.formatMessage({id: 'sidebar_left.inviteMembers', defaultMessage: 'Invite Members'})}\n                id='inviteMembersButton'\n                className={`intro-links color--link cursor--pointer${props.className ? ` ${props.className}` : ''}`}\n                modalId={ModalIdentifiers.INVITATION}\n                dialogType={InvitationModal}\n                onClick={handleButtonClick}\n                dialogProps={{focusOriginElement: 'inviteMembersButton'}}\n            >\n                <div\n                    className='SidebarChannelNavigator__inviteMembersLhsButton'\n                    aria-label={intl.formatMessage({id: 'sidebar_left.sidebar_channel_navigator.inviteUsers', defaultMessage: 'Invite Members'})}\n                >\n                    <i\n                        className='icon-plus-box'\n                        aria-hidden='true'\n                    />\n                    <FormattedMessage\n                        id={'sidebar_left.inviteMembers'}\n                        defaultMessage='Invite Members'\n                    />\n                </div>\n            </ToggleModalButton>\n        </TeamPermissionGate>\n    );\n};\n\nexport default InviteMembersButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {Draggable, Droppable} from 'react-beautiful-dnd';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport {CategorySorting} from '@mattermost/types/channel_categories';\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {localizeMessage} from 'mattermost-redux/utils/i18n_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport KeyboardShortcutSequence, {\n    KEYBOARD_SHORTCUTS,\n} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport WithTooltip from 'components/with_tooltip';\n\nimport Constants, {A11yCustomEventTypes, DraggingStateTypes, DraggingStates} from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nimport type {DraggingState} from 'types/store';\n\nimport SidebarCategoryMenu from './sidebar_category_menu';\nimport SidebarCategorySortingMenu from './sidebar_category_sorting_menu';\n\nimport AddChannelsCtaButton from '../add_channels_cta_button';\nimport InviteMembersButton from '../invite_members_button';\nimport {SidebarCategoryHeader} from '../sidebar_category_header';\nimport SidebarChannel from '../sidebar_channel';\n\ntype Props = {\n    category: ChannelCategory;\n    categoryIndex: number;\n    channelIds: string[];\n    setChannelRef: (channelId: string, ref: HTMLLIElement) => void;\n    handleOpenMoreDirectChannelsModal: (e: Event) => void;\n    isNewCategory: boolean;\n    draggingState: DraggingState;\n    currentUserId: string;\n    isAdmin: boolean;\n    actions: {\n        setCategoryCollapsed: (categoryId: string, collapsed: boolean) => void;\n        setCategorySorting: (categoryId: string, sorting: CategorySorting) => void;\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n};\n\ntype State = {\n    isMenuOpen: boolean;\n}\n\nexport default class SidebarCategory extends React.PureComponent<Props, State> {\n    categoryTitleRef: React.RefObject<HTMLButtonElement>;\n    newDropBoxRef: React.RefObject<HTMLDivElement>;\n\n    a11yKeyDownRegistered: boolean;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.categoryTitleRef = React.createRef();\n        this.newDropBoxRef = React.createRef();\n\n        this.state = {\n            isMenuOpen: false,\n        };\n\n        this.a11yKeyDownRegistered = false;\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.category.collapsed !== prevProps.category.collapsed && this.newDropBoxRef.current) {\n            this.newDropBoxRef.current.classList.add('animating');\n        }\n    }\n\n    componentDidMount() {\n        this.categoryTitleRef.current?.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n        this.categoryTitleRef.current?.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n    }\n\n    componentWillUnmount() {\n        this.categoryTitleRef.current?.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n        this.categoryTitleRef.current?.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n\n        if (this.a11yKeyDownRegistered) {\n            this.handleA11yDeactivateEvent();\n        }\n    }\n\n    handleA11yActivateEvent = () => {\n        this.categoryTitleRef.current?.addEventListener('keydown', this.handleA11yKeyDown);\n\n        this.a11yKeyDownRegistered = true;\n    };\n\n    handleA11yDeactivateEvent = () => {\n        this.categoryTitleRef.current?.removeEventListener('keydown', this.handleA11yKeyDown);\n\n        this.a11yKeyDownRegistered = false;\n    };\n\n    handleA11yKeyDown = (e: KeyboardEvent<HTMLButtonElement>['nativeEvent']) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            e.preventDefault();\n            this.handleCollapse();\n        }\n    };\n\n    renderChannel = (channelId: string, index: number) => {\n        const {setChannelRef, category, draggingState} = this.props;\n        return (\n            <SidebarChannel\n                key={channelId}\n                channelIndex={index}\n                channelId={channelId}\n                isDraggable={true}\n                setChannelRef={setChannelRef}\n                isCategoryCollapsed={category.collapsed}\n                isCategoryDragged={draggingState.type === DraggingStateTypes.CATEGORY && draggingState.id === category.id}\n                isAutoSortedCategory={category.sorting === CategorySorting.Alphabetical || category.sorting === CategorySorting.Recency}\n            />\n        );\n    };\n\n    handleCollapse = () => {\n        const {category} = this.props;\n\n        if (category.collapsed) {\n            trackEvent('ui', 'ui_sidebar_expand_category');\n        } else {\n            trackEvent('ui', 'ui_sidebar_collapse_category');\n        }\n\n        this.props.actions.setCategoryCollapsed(category.id, !category.collapsed);\n    };\n\n    removeAnimation = () => {\n        if (this.newDropBoxRef.current) {\n            this.newDropBoxRef.current.classList.remove('animating');\n        }\n    };\n\n    handleOpenDirectMessagesModal = (event: MouseEvent<HTMLLIElement | HTMLButtonElement> | KeyboardEvent<HTMLLIElement | HTMLButtonElement>) => {\n        event.preventDefault();\n\n        this.props.handleOpenMoreDirectChannelsModal(event.nativeEvent);\n        trackEvent('ui', 'ui_sidebar_create_direct_message');\n    };\n\n    isDropDisabled = () => {\n        const {draggingState, category} = this.props;\n\n        if (category.type === CategoryTypes.DIRECT_MESSAGES) {\n            return draggingState.type === DraggingStateTypes.CHANNEL;\n        } else if (category.type === CategoryTypes.CHANNELS) {\n            return draggingState.type === DraggingStateTypes.DM;\n        }\n\n        return false;\n    };\n\n    renderNewDropBox = (isDraggingOver: boolean) => {\n        const {draggingState, category, isNewCategory, channelIds} = this.props;\n\n        if (!isNewCategory || channelIds?.length) {\n            return null;\n        }\n\n        return (\n            <>\n                <Draggable\n                    draggableId={`NEW_CHANNEL_SPACER__${category.id}`}\n                    isDragDisabled={true}\n                    index={0}\n                >\n                    {(provided) => {\n                        // NEW_CHANNEL_SPACER here is used as a spacer to ensure react-beautiful-dnd will not try and place the first channel\n                        // on the header. This acts as a space filler for the header so that the first channel dragged in will float below it.\n                        return (\n                            <li\n                                ref={provided.innerRef}\n                                draggable='false'\n                                className={'SidebarChannel noFloat newChannelSpacer'}\n                                {...provided.draggableProps}\n                                tabIndex={-1}\n                            />\n                        );\n                    }}\n                </Draggable>\n                <div className='SidebarCategory_newDropBox'>\n                    <div\n                        ref={this.newDropBoxRef}\n                        className={classNames('SidebarCategory_newDropBox-content', {\n                            collapsed: category.collapsed || (draggingState.type === DraggingStateTypes.CATEGORY && draggingState.id === category.id),\n                            isDraggingOver,\n                        })}\n                        onTransitionEnd={this.removeAnimation}\n                    >\n                        <i className='icon-hand-right'/>\n                        <span className='SidebarCategory_newDropBox-label'>\n                            <FormattedMessage\n                                id='sidebar_left.sidebar_category.newDropBoxLabel'\n                                defaultMessage='Drag channels here...'\n                            />\n                        </span>\n                    </div>\n                </div>\n            </>\n        );\n    };\n\n    showPlaceholder = () => {\n        const {channelIds, draggingState, category, isNewCategory} = this.props;\n\n        if (category.sorting === CategorySorting.Alphabetical ||\n            category.sorting === CategorySorting.Recency ||\n            isNewCategory) {\n            // Always show the placeholder if the channel being dragged is from the current category\n            if (channelIds.find((id) => id === draggingState.id)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    };\n\n    render() {\n        const {\n            category,\n            categoryIndex,\n            channelIds,\n            isNewCategory,\n        } = this.props;\n\n        if (!category) {\n            return null;\n        }\n\n        if (category.type === CategoryTypes.FAVORITES && !channelIds?.length) {\n            return null;\n        }\n\n        const renderedChannels = channelIds.map(this.renderChannel);\n\n        let categoryMenu: JSX.Element;\n        let newLabel: JSX.Element;\n        const directMessagesModalButton: JSX.Element | null = null;\n        let isCollapsible = true;\n        if (isNewCategory) {\n            newLabel = (\n                <div className='SidebarCategory_newLabel'>\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_category.newLabel'\n                        defaultMessage='new'\n                    />\n                </div>\n            );\n\n            categoryMenu = <SidebarCategoryMenu category={category}/>;\n        } else if (category.type === CategoryTypes.DIRECT_MESSAGES) {\n            const addHelpLabel = localizeMessage({id: 'sidebar.createDirectMessage', defaultMessage: 'Create new direct message'});\n\n            categoryMenu = (\n                <>\n                    <SidebarCategorySortingMenu\n                        category={category}\n                        handleOpenDirectMessagesModal={this.handleOpenDirectMessagesModal}\n                    />\n                    <WithTooltip\n                        title={\n                            <>\n                                {addHelpLabel}\n                                <KeyboardShortcutSequence\n                                    shortcut={KEYBOARD_SHORTCUTS.navDMMenu}\n                                    hideDescription={true}\n                                    isInsideTooltip={true}\n                                />\n                            </>\n                        }\n                    >\n                        <button\n                            id='newDirectMessageButton'\n                            className='SidebarChannelGroupHeader_addButton'\n                            onClick={this.handleOpenDirectMessagesModal}\n                            aria-label={addHelpLabel}\n                        >\n                            <i className='icon-plus'/>\n                        </button>\n                    </WithTooltip>\n                </>\n            );\n\n            if (!channelIds || !channelIds.length) {\n                isCollapsible = false;\n            }\n        } else {\n            categoryMenu = <SidebarCategoryMenu category={category}/>;\n        }\n\n        let displayName = category.display_name;\n        if (category.type !== CategoryTypes.CUSTOM) {\n            const message = categoryNames[category.type as keyof typeof categoryNames];\n            displayName = localizeMessage({id: message.id, defaultMessage: message.defaultMessage});\n        }\n\n        return (\n            <Draggable\n                draggableId={category.id}\n                index={categoryIndex}\n                disableInteractiveElementBlocking={true}\n            >\n                {(provided, snapshot) => {\n                    let inviteMembersButton = null;\n                    if (category.type === 'direct_messages' && !category.collapsed) {\n                        inviteMembersButton = (\n                            <InviteMembersButton\n                                className='followingSibling'\n                                isAdmin={this.props.isAdmin}\n                            />\n                        );\n                    }\n\n                    let addChannelsCtaButton = null;\n                    if (category.type === 'channels' && !category.collapsed) {\n                        addChannelsCtaButton = (\n                            <AddChannelsCtaButton/>\n                        );\n                    }\n\n                    return (\n                        <div\n                            className={classNames('SidebarChannelGroup a11y__section', {\n                                dropDisabled: this.isDropDisabled(),\n                                menuIsOpen: this.state.isMenuOpen,\n                                capture: this.props.draggingState.state === DraggingStates.CAPTURE,\n                                isCollapsed: category.collapsed,\n                            })}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                        >\n                            <Droppable\n                                droppableId={category.id}\n                                type='SIDEBAR_CHANNEL'\n                                isDropDisabled={this.isDropDisabled()}\n                            >\n                                {(droppableProvided, droppableSnapshot) => {\n                                    return (\n                                        <div\n                                            {...droppableProvided.droppableProps}\n                                            ref={droppableProvided.innerRef}\n                                            className={classNames({\n                                                draggingOver: droppableSnapshot.isDraggingOver,\n                                            })}\n                                        >\n                                            <SidebarCategoryHeader\n                                                ref={this.categoryTitleRef}\n                                                displayName={displayName}\n                                                dragHandleProps={provided.dragHandleProps}\n                                                isCollapsed={category.collapsed}\n                                                isCollapsible={isCollapsible}\n                                                isDragging={snapshot.isDragging}\n                                                isDraggingOver={droppableSnapshot.isDraggingOver}\n                                                muted={category.muted}\n                                                onClick={this.handleCollapse}\n                                            >\n                                                {newLabel}\n                                                {directMessagesModalButton}\n                                                {categoryMenu}\n                                            </SidebarCategoryHeader>\n                                            <div\n                                                className={classNames('SidebarChannelGroup_content')}\n                                            >\n                                                <ul\n                                                    className='NavGroupContent'\n                                                >\n                                                    {this.renderNewDropBox(droppableSnapshot.isDraggingOver)}\n                                                    {renderedChannels}\n                                                    {this.showPlaceholder() ? droppableProvided.placeholder : null}\n                                                </ul>\n                                            </div>\n                                        </div>\n                                    );\n                                }}\n                            </Droppable>\n                            {inviteMembersButton}\n                            {addChannelsCtaButton}\n                        </div>\n                    );\n                }}\n            </Draggable>\n        );\n    }\n}\n\nconst categoryNames = defineMessages({\n    channels: {\n        id: 'sidebar.types.channels',\n        defaultMessage: 'CHANNELS',\n    },\n    direct_messages: {\n        id: 'sidebar.types.direct_messages',\n        defaultMessage: 'DIRECT MESSAGES',\n    },\n    favorites: {\n        id: 'sidebar.types.favorites',\n        defaultMessage: 'FAVORITES',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\n\nimport {setCategoryCollapsed, setCategorySorting} from 'mattermost-redux/actions/channel_categories';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentUser, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {isAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport {getDraggingState, makeGetFilteredChannelIdsForCategory} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarCategory from './sidebar_category';\n\ntype OwnProps = {\n    category: ChannelCategory;\n}\n\nfunction makeMapStateToProps() {\n    const getChannelIdsForCategory = makeGetFilteredChannelIdsForCategory();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        return {\n            channelIds: getChannelIdsForCategory(state, ownProps.category),\n            draggingState: getDraggingState(state),\n            currentUserId: getCurrentUserId(state),\n            isAdmin: isAdmin(getCurrentUser(state).roles),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            setCategoryCollapsed,\n            setCategorySorting,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SidebarCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport React, {lazy} from 'react';\nimport type {CSSProperties} from 'react';\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd';\nimport type {DropResult, DragStart, BeforeCapture} from 'react-beautiful-dnd';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage, injectIntl, type WrappedComponentProps} from 'react-intl';\nimport {SpringSystem} from 'rebound';\nimport type {Spring} from 'rebound';\n\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport SidebarCategory from 'components/sidebar/sidebar_category';\n\nimport {findNextUnreadChannelId} from 'utils/channel_utils';\nimport {Constants, DraggingStates, DraggingStateTypes} from 'utils/constants';\nimport {isKeyPressed, cmdOrCtrlPressed} from 'utils/keyboard';\nimport {mod} from 'utils/utils';\n\nimport type {DraggingState} from 'types/store';\nimport type {StaticPage} from 'types/store/lhs';\n\nconst DraftsLink = makeAsyncComponent('DraftsLink', lazy(() => import('components/drafts/drafts_link/drafts_link')));\nconst GlobalThreadsLink = makeAsyncComponent('GlobalThreadsLink', lazy(() => import('components/threading/global_threads_link')));\nconst UnreadChannelIndicator = makeAsyncComponent('UnreadChannelIndicator', lazy(() => import('../unread_channel_indicator')));\nconst UnreadChannels = makeAsyncComponent('UnreadChannels', lazy(() => import('../unread_channels')));\n\nexport function renderView(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />\n    );\n}\n\nexport function renderThumbHorizontal(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />\n    );\n}\n\nexport function renderTrackVertical(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--verticalTrack'\n        />\n    );\n}\n\nexport function renderThumbVertical(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />\n    );\n}\n\nconst scrollbarStyles: CSSProperties = {position: 'absolute'};\n\ntype Props = WrappedComponentProps & {\n    currentTeam?: Team;\n    currentChannelId: string;\n    categories: ChannelCategory[];\n    unreadChannelIds: string[];\n    isUnreadFilterEnabled: boolean;\n    displayedChannels: Channel[];\n    newCategoryIds: string[];\n    draggingState: DraggingState;\n    multiSelectedChannelIds: string[];\n    showUnreadsCategory: boolean;\n    collapsedThreads: boolean;\n    hasUnreadThreads: boolean;\n    currentStaticPageId: string;\n    staticPages: StaticPage[];\n\n    handleOpenMoreDirectChannelsModal: (e: Event) => void;\n    onDragStart: (initial: DragStart) => void;\n    onDragEnd: (result: DropResult) => void;\n\n    actions: {\n        moveChannelsInSidebar: (categoryId: string, targetIndex: number, draggableChannelId: string) => void;\n        moveCategory: (teamId: string, categoryId: string, newIndex: number) => void;\n        switchToChannelById: (channelId: string) => void;\n        switchToLhsStaticPage: (pageId: string) => void;\n        close: () => void;\n        setDraggingState: (data: DraggingState) => void;\n        stopDragging: () => void;\n        clearChannelSelection: () => void;\n    };\n};\n\ntype State = {\n    showTopUnread: boolean;\n    showBottomUnread: boolean;\n    autoHide: boolean;\n};\n\n// scrollMargin is the margin at the edge of the channel list that we leave when scrolling to a channel.\nconst scrollMargin = 10;\n\n// categoryHeaderHeight is the height of the category header\nconst categoryHeaderHeight = 32;\n\n// scrollMarginWithUnread is the margin that we leave at the edge of the channel list when scrolling to a channel so\n// that the channel is not under the unread indicator.\nconst scrollMarginWithUnread = 55;\n\nexport class SidebarList extends React.PureComponent<Props, State> {\n    channelRefs: Map<string, HTMLLIElement>;\n    scrollbar: React.RefObject<Scrollbars>;\n    animate: SpringSystem;\n    scrollAnimation: Spring;\n    channelsListScrollTimeout: NodeJS.Timeout | null = null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.channelRefs = new Map();\n        this.state = {\n            showTopUnread: false,\n            showBottomUnread: false,\n            autoHide: true,\n        };\n        this.scrollbar = React.createRef();\n\n        this.animate = new SpringSystem();\n        this.scrollAnimation = this.animate.createSpring();\n        this.scrollAnimation.setOvershootClampingEnabled(true); // disables the spring action at the end of animation\n        this.scrollAnimation.addListener({onSpringUpdate: this.handleScrollAnimationUpdate});\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.navigateChannelShortcut);\n        document.addEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.navigateChannelShortcut);\n        document.removeEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (!this.props.currentChannelId || !prevProps.currentChannelId) {\n            return;\n        }\n\n        // reset the scrollbar upon switching teams\n        if (this.props.currentTeam !== prevProps.currentTeam) {\n            this.scrollbar.current!.scrollToTop();\n        }\n\n        // Scroll to selected channel so it's in view\n        if (this.props.currentChannelId !== prevProps.currentChannelId) {\n            // This will be re-enabled when we can avoid animating the scroll on first load and team switch\n            // this.scrollToChannel(this.props.currentChannelId);\n        }\n\n        // TODO: Copying over so it doesn't get lost, but we don't have a design for the sidebar on mobile yet\n        // close the LHS on mobile when you change channels\n        if (this.props.currentChannelId !== prevProps.currentChannelId) {\n            this.props.actions.close();\n        }\n\n        this.updateUnreadIndicators();\n    }\n\n    getDisplayedChannelIds = () => {\n        return this.props.displayedChannels.map((channel) => channel.id);\n    };\n\n    getDisplayedStaticPageIds = () => {\n        return this.props.staticPages.map((item) => item.id);\n    };\n\n    setChannelRef = (channelId: string, ref: HTMLLIElement) => {\n        if (ref) {\n            this.channelRefs.set(channelId, ref);\n        } else {\n            this.channelRefs.delete(channelId);\n        }\n    };\n\n    getFirstUnreadChannelFromChannelIdArray = (channelIds: string[]) => {\n        return channelIds.find((channelId) => {\n            return channelId !== this.props.currentChannelId && this.props.unreadChannelIds.includes(channelId);\n        });\n    };\n\n    handleScrollAnimationUpdate = (spring: Spring) => {\n        const val = spring.getCurrentValue();\n        this.scrollbar.current!.scrollTop(val);\n    };\n\n    scrollToFirstUnreadChannel = () => {\n        this.scrollToChannel(this.getFirstUnreadChannel(), true);\n    };\n\n    scrollToLastUnreadChannel = () => {\n        this.scrollToChannel(this.getLastUnreadChannel(), true);\n    };\n\n    scrollToChannel = (channelId: string | null | undefined, scrollingToUnread = false) => {\n        if (!channelId) {\n            return;\n        }\n\n        const element = this.channelRefs.get(channelId);\n        if (!element) {\n            return;\n        }\n\n        const top = element.offsetTop;\n        const bottom = top + element.offsetHeight;\n\n        const scrollTop = this.scrollbar.current!.getScrollTop();\n        const scrollHeight = this.scrollbar.current!.getClientHeight();\n\n        if (top < (scrollTop + categoryHeaderHeight)) {\n            // Scroll up to the item\n            const margin = (scrollingToUnread || !this.state.showTopUnread) ? scrollMargin : scrollMarginWithUnread;\n\n            let scrollEnd;\n            const displayedChannels = this.getDisplayedChannelIds();\n            if (displayedChannels.length > 0 && displayedChannels[0] === channelId) {\n                // This is the first channel, so scroll right to the top\n                scrollEnd = 0;\n            } else {\n                scrollEnd = top - margin - categoryHeaderHeight;\n            }\n\n            this.scrollToPosition(scrollEnd);\n        } else if (bottom > scrollTop + scrollHeight) {\n            // Scroll down to the item\n            const margin = (scrollingToUnread || !this.state.showBottomUnread) ? scrollMargin : scrollMarginWithUnread;\n            const scrollEnd = (bottom - scrollHeight) + margin;\n\n            this.scrollToPosition(scrollEnd);\n        }\n    };\n\n    scrollToPosition = (scrollEnd: number) => {\n        // Stop the current animation before scrolling\n        this.scrollAnimation.setCurrentValue(this.scrollbar.current!.getScrollTop()).setAtRest();\n\n        this.scrollAnimation.setEndValue(scrollEnd);\n    };\n\n    updateUnreadIndicators = () => {\n        if (this.props.draggingState.state) {\n            this.setState({\n                showTopUnread: false,\n                showBottomUnread: false,\n            });\n            return;\n        }\n\n        let showTopUnread = false;\n        let showBottomUnread = false;\n\n        // Consider partially obscured channels as above/below\n        const firstUnreadChannel = this.getFirstUnreadChannel();\n        const lastUnreadChannel = this.getLastUnreadChannel();\n\n        if (firstUnreadChannel) {\n            const firstUnreadElement = this.channelRefs.get(firstUnreadChannel);\n\n            if (firstUnreadElement && ((firstUnreadElement.offsetTop + firstUnreadElement.offsetHeight) - scrollMargin - categoryHeaderHeight) < this.scrollbar.current!.getScrollTop()) {\n                showTopUnread = true;\n            }\n        }\n\n        if (lastUnreadChannel) {\n            const lastUnreadElement = this.channelRefs.get(lastUnreadChannel);\n\n            if (lastUnreadElement && (lastUnreadElement.offsetTop + scrollMargin) > (this.scrollbar.current!.getScrollTop() + this.scrollbar.current!.getClientHeight())) {\n                showBottomUnread = true;\n            }\n        }\n\n        if (showTopUnread !== this.state.showTopUnread || showBottomUnread !== this.state.showBottomUnread) {\n            this.setState({\n                showTopUnread,\n                showBottomUnread,\n            });\n        }\n    };\n\n    getFirstUnreadChannel = () => {\n        return this.getFirstUnreadChannelFromChannelIdArray(this.getDisplayedChannelIds());\n    };\n\n    getLastUnreadChannel = () => {\n        return this.getFirstUnreadChannelFromChannelIdArray(this.getDisplayedChannelIds().reverse());\n    };\n\n    navigateById = (id: string) => {\n        if (this.props.staticPages.findIndex((i) => i.id === id) === -1) {\n            this.props.actions.switchToChannelById(id);\n        } else {\n            this.props.actions.switchToLhsStaticPage(id);\n        }\n    };\n\n    navigateChannelShortcut = (e: KeyboardEvent) => {\n        if (e.altKey && !e.shiftKey && !e.ctrlKey && !e.metaKey && (isKeyPressed(e, Constants.KeyCodes.UP) || isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            const staticPageIds = this.getDisplayedStaticPageIds();\n            const allIds = [...staticPageIds, ...this.getDisplayedChannelIds()];\n\n            const curSelectedId = this.props.currentChannelId || this.props.currentStaticPageId;\n            const curIndex = allIds.indexOf(curSelectedId);\n\n            let nextIndex;\n            if (isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                nextIndex = curIndex + 1;\n            } else {\n                nextIndex = curIndex - 1;\n            }\n\n            const nextId = allIds[mod(nextIndex, allIds.length)];\n            this.navigateById(nextId);\n            if (nextIndex >= staticPageIds.length) {\n                this.scrollToChannel(nextId);\n            }\n        } else if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.K)) {\n            this.props.handleOpenMoreDirectChannelsModal(e);\n        }\n    };\n\n    navigateUnreadChannelShortcut = (e: KeyboardEvent) => {\n        if (e.altKey && e.shiftKey && !e.ctrlKey && !e.metaKey && (isKeyPressed(e, Constants.KeyCodes.UP) || isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            const allChannelIds = this.getDisplayedChannelIds();\n            const unreadChannelIds = [...this.props.unreadChannelIds];\n\n            if (this.props.collapsedThreads) {\n                allChannelIds.unshift('');\n\n                if (this.props.hasUnreadThreads) {\n                    unreadChannelIds.unshift('');\n                }\n            }\n\n            let direction = 0;\n            if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n                direction = -1;\n            } else {\n                direction = 1;\n            }\n\n            const nextIndex = findNextUnreadChannelId(\n                this.props.currentChannelId,\n                allChannelIds,\n                unreadChannelIds,\n                direction,\n            );\n\n            if (nextIndex !== -1) {\n                const nextChannelId = allChannelIds[nextIndex];\n                this.navigateById(nextChannelId);\n                this.scrollToChannel(nextChannelId);\n            }\n        }\n    };\n\n    renderCategory = (category: ChannelCategory, index: number) => {\n        return (\n            <SidebarCategory\n                key={category.id}\n                category={category}\n                categoryIndex={index}\n                setChannelRef={this.setChannelRef}\n                handleOpenMoreDirectChannelsModal={this.props.handleOpenMoreDirectChannelsModal}\n                isNewCategory={this.props.newCategoryIds.includes(category.id)}\n            />\n        );\n    };\n\n    onScroll = debounce(() => {\n        this.updateUnreadIndicators();\n    }, 100);\n\n    onTransitionEnd = debounce(() => {\n        this.updateUnreadIndicators();\n    }, 100);\n\n    onBeforeCapture = (before: BeforeCapture) => {\n        // // Ensure no channels are animating\n        this.channelRefs.forEach((ref) => ref.classList.remove('animating'));\n\n        // Turn off scrolling temporarily so that dimensions can be captured\n        const droppable = [...document.querySelectorAll<HTMLDivElement>('[data-rbd-droppable-id*=\"droppable-categories\"]')];\n        droppable[0].style.height = `${droppable[0].scrollHeight}px`;\n\n        if (!this.props.multiSelectedChannelIds.find((id) => before.draggableId === id)) {\n            this.props.actions.clearChannelSelection();\n        }\n\n        const draggingState: DraggingState = {\n            state: DraggingStates.CAPTURE,\n            id: before.draggableId,\n        };\n\n        if (this.props.categories.some((category) => category.id === before.draggableId)) {\n            draggingState.type = DraggingStateTypes.CATEGORY;\n        } else {\n            const draggingChannels = this.props.displayedChannels.filter((channel) => this.props.multiSelectedChannelIds.indexOf(channel.id) !== -1 || channel.id === before.draggableId);\n            if (draggingChannels.every((channel) => channel.type === General.DM_CHANNEL || channel.type === General.GM_CHANNEL)) {\n                draggingState.type = DraggingStateTypes.DM;\n            } else if (draggingChannels.every((channel) => channel.type !== General.DM_CHANNEL && channel.type !== General.GM_CHANNEL)) {\n                draggingState.type = DraggingStateTypes.CHANNEL;\n            } else {\n                draggingState.type = DraggingStateTypes.MIXED_CHANNELS;\n            }\n        }\n\n        this.props.actions.setDraggingState(draggingState);\n    };\n\n    onBeforeDragStart = () => {\n        this.props.actions.setDraggingState({state: DraggingStates.BEFORE});\n    };\n\n    onDragStart = (initial: DragStart) => {\n        this.props.onDragStart(initial);\n\n        this.props.actions.setDraggingState({state: DraggingStates.DURING});\n\n        // Re-enable scroll box resizing\n        const droppable = [...document.querySelectorAll<HTMLDivElement>('[data-rbd-droppable-id*=\"droppable-categories\"]')];\n        droppable[0].style.height = '';\n    };\n\n    onDragEnd = (result: DropResult) => {\n        this.props.onDragEnd(result);\n\n        if (result.reason === 'DROP' && result.destination) {\n            if (result.type === 'SIDEBAR_CHANNEL') {\n                this.props.actions.moveChannelsInSidebar(result.destination.droppableId, result.destination.index, result.draggableId);\n                trackEvent('ui', 'ui_sidebar_dragdrop_dropped_channel');\n            } else if (result.type === 'SIDEBAR_CATEGORY') {\n                this.props.actions.moveCategory(this.props.currentTeam!.id, result.draggableId, result.destination.index);\n                trackEvent('ui', 'ui_sidebar_dragdrop_dropped_category');\n            }\n        }\n\n        this.props.actions.stopDragging();\n    };\n\n    showChannelListScrollbar = () => {\n        if (this.channelsListScrollTimeout !== null) {\n            clearTimeout(this.channelsListScrollTimeout);\n        }\n\n        this.setState({autoHide: false});\n    };\n\n    hideChannelListScrollbar = () => {\n        this.channelsListScrollTimeout = setTimeout(() => {\n            this.setState({autoHide: true});\n        }, 300);\n    };\n\n    render() {\n        const {categories} = this.props;\n\n        let channelList: React.ReactNode;\n        if (this.props.isUnreadFilterEnabled) {\n            channelList = (\n                <UnreadChannels\n                    setChannelRef={this.setChannelRef}\n                />\n            );\n        } else {\n            let unreadsCategory;\n            if (this.props.showUnreadsCategory) {\n                unreadsCategory = (\n                    <UnreadChannels\n                        setChannelRef={this.setChannelRef}\n                    />\n                );\n            }\n\n            const renderedCategories = categories.map(this.renderCategory);\n\n            channelList = (\n                <>\n                    {unreadsCategory}\n                    <DragDropContext\n                        onDragEnd={this.onDragEnd}\n                        onBeforeDragStart={this.onBeforeDragStart}\n                        onBeforeCapture={this.onBeforeCapture}\n                        onDragStart={this.onDragStart}\n                    >\n                        <Droppable\n                            droppableId='droppable-categories'\n                            type='SIDEBAR_CATEGORY'\n                        >\n                            {(provided) => {\n                                return (\n                                    <div\n                                        id={'sidebar-droppable-categories'}\n                                        ref={provided.innerRef}\n                                        {...provided.droppableProps}\n                                    >\n                                        {renderedCategories}\n                                        {provided.placeholder}\n                                    </div>\n                                );\n                            }}\n                        </Droppable>\n                    </DragDropContext>\n                </>\n            );\n        }\n\n        const above = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        const below = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        const ariaLabel = this.props.intl.formatMessage({id: 'accessibility.sections.lhsList', defaultMessage: 'channel sidebar region'});\n\n        return (\n\n            // NOTE: id attribute added to temporarily support the desktop app's at-mention DOM scraping of the old sidebar\n            <>\n                <GlobalThreadsLink/>\n                <DraftsLink/>\n                <div\n                    id='sidebar-left'\n                    role='application'\n                    aria-label={ariaLabel}\n                    className={classNames('SidebarNavContainer a11y__region', {\n                        disabled: this.props.isUnreadFilterEnabled,\n                    })}\n                    data-a11y-disable-nav={Boolean(this.props.draggingState.type)}\n                    data-a11y-sort-order='7'\n                    onTransitionEnd={this.onTransitionEnd}\n                >\n                    <UnreadChannelIndicator\n                        name='Top'\n                        show={this.state.showTopUnread}\n                        onClick={this.scrollToFirstUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-top'\n                        content={above}\n                    />\n                    <UnreadChannelIndicator\n                        name='Bottom'\n                        show={this.state.showBottomUnread}\n                        onClick={this.scrollToLastUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-bottom'\n                        content={below}\n                    />\n                    <div\n                        onPointerLeave={this.hideChannelListScrollbar}\n                        onPointerOver={this.showChannelListScrollbar}\n                    >\n                        <Scrollbars\n                            ref={this.scrollbar}\n                            autoHide={this.state.autoHide}\n                            renderThumbHorizontal={renderThumbHorizontal}\n                            renderThumbVertical={renderThumbVertical}\n                            renderTrackVertical={renderTrackVertical}\n                            renderView={renderView}\n                            onScroll={this.onScroll}\n                            style={scrollbarStyles}\n                        >\n                            {channelList}\n                        </Scrollbars>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default injectIntl(SidebarList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {moveCategory} from 'mattermost-redux/actions/channel_categories';\nimport {getCurrentChannelId, getUnreadChannelIds} from 'mattermost-redux/selectors/entities/channels';\nimport {shouldShowUnreadsCategory, isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getThreadCountsInCurrentTeam} from 'mattermost-redux/selectors/entities/threads';\n\nimport {switchToChannelById} from 'actions/views/channel';\nimport {\n    moveChannelsInSidebar,\n    setDraggingState,\n    stopDragging,\n    clearChannelSelection,\n} from 'actions/views/channel_sidebar';\nimport {close, switchToLhsStaticPage} from 'actions/views/lhs';\nimport {getCurrentStaticPageId, getVisibleStaticPages} from 'selectors/lhs';\nimport {\n    getDisplayedChannels,\n    getDraggingState,\n    getCategoriesForCurrentTeam,\n    isUnreadFilterEnabled,\n} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarList from './sidebar_list';\n\nfunction mapStateToProps(state: GlobalState) {\n    const currentTeam = getCurrentTeam(state);\n    const collapsedThreads = isCollapsedThreadsEnabled(state);\n\n    let hasUnreadThreads = false;\n    if (collapsedThreads) {\n        hasUnreadThreads = Boolean(getThreadCountsInCurrentTeam(state)?.total_unread_threads);\n    }\n\n    return {\n        currentTeam,\n        currentChannelId: getCurrentChannelId(state),\n        categories: getCategoriesForCurrentTeam(state),\n        isUnreadFilterEnabled: isUnreadFilterEnabled(state),\n        unreadChannelIds: getUnreadChannelIds(state),\n        displayedChannels: getDisplayedChannels(state),\n        draggingState: getDraggingState(state),\n        newCategoryIds: state.views.channelSidebar.newCategoryIds,\n        multiSelectedChannelIds: state.views.channelSidebar.multiSelectedChannelIds,\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n        collapsedThreads,\n        hasUnreadThreads,\n        currentStaticPageId: getCurrentStaticPageId(state),\n        staticPages: getVisibleStaticPages(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            close,\n            switchToChannelById,\n            moveChannelsInSidebar,\n            moveCategory,\n            setDraggingState,\n            stopDragging,\n            clearChannelSelection,\n            switchToLhsStaticPage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {lazy} from 'react';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport DataPrefetch from 'components/data_prefetch';\nimport ResizableLhs from 'components/resizable_sidebar/resizable_lhs';\nimport SidebarHeader from 'components/sidebar/sidebar_header';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {ModalIdentifiers, RHSStates} from 'utils/constants';\nimport {isKeyPressed, cmdOrCtrlPressed} from 'utils/keyboard';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\nimport type {RhsState} from 'types/store/rhs';\n\nimport ChannelNavigator from './channel_navigator';\nimport SidebarList from './sidebar_list';\n\nconst MobileSidebarHeader = makeAsyncComponent('MobileSidebarHeader', lazy(() => import('./mobile_sidebar_header')));\nconst MoreDirectChannels = makeAsyncComponent('MoreDirectChannels', lazy(() => import('components/more_direct_channels')));\nconst BrowseChannels = makeAsyncComponent('BrowseChannels', lazy(() => import('components/browse_channels')));\nconst EditCategoryModal = makeAsyncComponent('EditCategoryModal', lazy(() => import('components/edit_category_modal')));\nconst CreateUserGroupsModal = makeAsyncComponent('CreateUserGroupsModal', lazy(() => import('components/create_user_groups_modal')));\nconst InvitationModal = makeAsyncComponent('InvitationModal', lazy(() => import('components/invitation_modal')));\nconst KeyboardShortcutsModal = makeAsyncComponent('KeyboardShortcutsModal', lazy(() => import('components/keyboard_shortcuts/keyboard_shortcuts_modal/keyboard_shortcuts_modal')));\nconst NewChannelModal = makeAsyncComponent('NewChannelModal', lazy(() => import('components/new_channel_modal/new_channel_modal')));\nconst UserSettingsModal = makeAsyncComponent('UserSettingsModal', lazy(() => import('components/user_settings/modal')));\n\ntype Props = {\n    teamId: string;\n    canCreatePublicChannel: boolean;\n    canCreatePrivateChannel: boolean;\n    canJoinPublicChannel: boolean;\n    isOpen: boolean;\n    actions: {\n        fetchMyCategories: (teamId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n        closeModal: (modalId: string) => void;\n        clearChannelSelection: () => void;\n        closeRightHandSide: () => void;\n    };\n    unreadFilterEnabled: boolean;\n    isMobileView: boolean;\n    isKeyBoardShortcutModalOpen: boolean;\n    canCreateCustomGroups: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n};\n\ntype State = {\n    showDirectChannelsModal: boolean;\n    isDragging: boolean;\n};\n\nexport default class Sidebar extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            showDirectChannelsModal: false,\n            isDragging: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.teamId) {\n            this.props.actions.fetchMyCategories(this.props.teamId);\n        }\n\n        window.addEventListener('click', this.handleClickClearChannelSelection);\n        window.addEventListener('keydown', this.handleKeyDownEvent);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teamId && prevProps.teamId !== this.props.teamId) {\n            this.props.actions.fetchMyCategories(this.props.teamId);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.handleClickClearChannelSelection);\n        window.removeEventListener('keydown', this.handleKeyDownEvent);\n    }\n\n    handleClickClearChannelSelection = (event: MouseEvent) => {\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        this.props.actions.clearChannelSelection();\n    };\n\n    handleKeyDownEvent = (event: KeyboardEvent) => {\n        if (isKeyPressed(event, Constants.KeyCodes.ESCAPE)) {\n            this.props.actions.clearChannelSelection();\n            return;\n        }\n\n        const ctrlOrMetaKeyPressed = cmdOrCtrlPressed(event, true);\n\n        if (ctrlOrMetaKeyPressed) {\n            if (isKeyPressed(event, Constants.KeyCodes.FORWARD_SLASH)) {\n                event.preventDefault();\n                if (this.props.isKeyBoardShortcutModalOpen) {\n                    this.props.actions.closeModal(ModalIdentifiers.KEYBOARD_SHORTCUTS_MODAL);\n                } else {\n                    this.props.actions.openModal({\n                        modalId: ModalIdentifiers.KEYBOARD_SHORTCUTS_MODAL,\n                        dialogType: KeyboardShortcutsModal,\n                    });\n                }\n            } else if (isKeyPressed(event, Constants.KeyCodes.A) && event.shiftKey) {\n                event.preventDefault();\n\n                this.props.actions.openModal({\n                    modalId: ModalIdentifiers.USER_SETTINGS,\n                    dialogType: UserSettingsModal,\n                    dialogProps: {\n                        isContentProductSettings: true,\n                        focusOriginElement: 'sidebar.tsx',\n                    },\n                });\n            }\n        }\n    };\n\n    showMoreDirectChannelsModal = () => {\n        this.setState({showDirectChannelsModal: true});\n        trackEvent('ui', 'ui_channels_more_direct_v2');\n    };\n\n    hideMoreDirectChannelsModal = () => {\n        this.setState({showDirectChannelsModal: false});\n    };\n\n    showCreateCategoryModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n            dialogProps: {},\n        });\n        trackEvent('ui', 'ui_sidebar_menu_createCategory');\n    };\n\n    showMoreChannelsModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.MORE_CHANNELS,\n            dialogType: BrowseChannels,\n        });\n        trackEvent('ui', 'ui_channels_more_public_v2');\n    };\n\n    invitePeopleModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.INVITATION,\n            dialogType: InvitationModal,\n            dialogProps: {focusOriginElement: 'browseOrAddChannelMenuButton'},\n        });\n        trackEvent('ui', 'ui_channels_dropdown_invite_people');\n    };\n\n    showNewChannelModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n            dialogType: NewChannelModal,\n        });\n        this.closeEditRHS();\n        trackEvent('ui', 'ui_channels_create_channel_v2');\n    };\n\n    showCreateUserGroupModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.USER_GROUPS_CREATE,\n            dialogType: CreateUserGroupsModal,\n        });\n        trackEvent('ui', 'ui_channels_create_user_group');\n    };\n\n    handleOpenMoreDirectChannelsModal = (e?: Event) => {\n        e?.preventDefault();\n        if (this.state.showDirectChannelsModal) {\n            this.hideMoreDirectChannelsModal();\n        } else {\n            this.showMoreDirectChannelsModal();\n            this.closeEditRHS();\n        }\n    };\n\n    onDragStart = () => {\n        this.setState({isDragging: true});\n    };\n\n    onDragEnd = () => {\n        this.setState({isDragging: false});\n    };\n\n    renderModals = () => {\n        let moreDirectChannelsModal;\n        if (this.state.showDirectChannelsModal) {\n            moreDirectChannelsModal = (\n                <MoreDirectChannels\n                    onModalDismissed={this.hideMoreDirectChannelsModal}\n                    isExistingChannel={false}\n                    focusOriginElement='newDirectMessageButton'\n                />\n            );\n        }\n\n        return (\n            <>\n                {moreDirectChannelsModal}\n            </>\n        );\n    };\n\n    closeEditRHS = () => {\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n    };\n\n    render() {\n        if (!this.props.teamId) {\n            return (<div/>);\n        }\n\n        const ariaLabel = localizeMessage({id: 'accessibility.sections.lhsNavigator', defaultMessage: 'channel navigator region'});\n\n        return (\n            <ResizableLhs\n                id='SidebarContainer'\n                className={classNames({\n                    'move--right': this.props.isOpen && this.props.isMobileView,\n                    dragging: this.state.isDragging,\n                })}\n            >\n                {this.props.isMobileView ? <MobileSidebarHeader/> : (\n                    <SidebarHeader\n                        showNewChannelModal={this.showNewChannelModal}\n                        showMoreChannelsModal={this.showMoreChannelsModal}\n                        showCreateUserGroupModal={this.showCreateUserGroupModal}\n                        invitePeopleModal={this.invitePeopleModal}\n                        showCreateCategoryModal={this.showCreateCategoryModal}\n                        canCreateChannel={this.props.canCreatePrivateChannel || this.props.canCreatePublicChannel}\n                        canJoinPublicChannel={this.props.canJoinPublicChannel}\n                        handleOpenDirectMessagesModal={this.handleOpenMoreDirectChannelsModal}\n                        unreadFilterEnabled={this.props.unreadFilterEnabled}\n                        canCreateCustomGroups={this.props.canCreateCustomGroups}\n                    />\n                )}\n                <div\n                    id='lhsNavigator'\n                    role='application'\n                    aria-label={ariaLabel}\n                    className='a11y__region'\n                    data-a11y-sort-order='6'\n                >\n                    <ChannelNavigator/>\n                </div>\n                <div className='sidebar--left__icons'>\n                    <Pluggable pluggableName='LeftSidebarHeader'/>\n                </div>\n                <SidebarList\n                    handleOpenMoreDirectChannelsModal={this.handleOpenMoreDirectChannelsModal}\n                    onDragStart={this.onDragStart}\n                    onDragEnd={this.onDragEnd}\n                />\n                <DataPrefetch/>\n                {this.renderModals()}\n            </ResizableLhs>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {fetchMyCategories} from 'mattermost-redux/actions/channel_categories';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {isCustomGroupsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveICurrentChannelPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {clearChannelSelection} from 'actions/views/channel_sidebar';\nimport {closeModal, openModal} from 'actions/views/modals';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\nimport {isUnreadFilterEnabled} from 'selectors/views/channel_sidebar';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport Sidebar from './sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    const currentTeam = getCurrentTeam(state);\n    const unreadFilterEnabled = isUnreadFilterEnabled(state);\n\n    let canCreatePublicChannel = false;\n    let canCreatePrivateChannel = false;\n    let canJoinPublicChannel = false;\n\n    if (currentTeam) {\n        canCreatePublicChannel = haveICurrentChannelPermission(state, Permissions.CREATE_PUBLIC_CHANNEL);\n        canCreatePrivateChannel = haveICurrentChannelPermission(state, Permissions.CREATE_PRIVATE_CHANNEL);\n        canJoinPublicChannel = haveICurrentChannelPermission(state, Permissions.JOIN_PUBLIC_CHANNELS);\n    }\n\n    const canCreateCustomGroups = isCustomGroupsEnabled(state) && haveISystemPermission(state, {permission: Permissions.CREATE_CUSTOM_GROUP});\n\n    return {\n        teamId: currentTeam ? currentTeam.id : '',\n        canCreatePrivateChannel,\n        canCreatePublicChannel,\n        canJoinPublicChannel,\n        isOpen: getIsLhsOpen(state),\n        unreadFilterEnabled,\n        isMobileView: getIsMobileView(state),\n        isKeyBoardShortcutModalOpen: isModalOpen(state, ModalIdentifiers.KEYBOARD_SHORTCUTS_MODAL),\n        canCreateCustomGroups,\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            clearChannelSelection,\n            fetchMyCategories,\n            openModal,\n            closeModal,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect, useRef} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {resetReloadPostsInChannel} from 'mattermost-redux/actions/posts';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\n\nconst PostsChannelResetWatcher = () => {\n    const dispatch = useDispatch();\n    const isCRTEnabled = useSelector(isCollapsedThreadsEnabled);\n    const loaded = useRef(false);\n    useEffect(() => {\n        if (loaded.current) {\n            dispatch(resetReloadPostsInChannel());\n        } else {\n            loaded.current = true;\n        }\n    }, [isCRTEnabled]);\n    return null;\n};\n\nexport default PostsChannelResetWatcher;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {basicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\nimport type {BasicUnreadStatus} from 'mattermost-redux/selectors/entities/channels';\nimport {ensureString} from 'mattermost-redux/utils/post_utils';\n\nimport faviconDefault16x16 from 'images/favicon/favicon-default-16x16.png';\nimport faviconDefault24x24 from 'images/favicon/favicon-default-24x24.png';\nimport faviconDefault32x32 from 'images/favicon/favicon-default-32x32.png';\nimport faviconDefault64x64 from 'images/favicon/favicon-default-64x64.png';\nimport faviconDefault96x96 from 'images/favicon/favicon-default-96x96.png';\nimport faviconMention16x16 from 'images/favicon/favicon-mentions-16x16.png';\nimport faviconMention24x24 from 'images/favicon/favicon-mentions-24x24.png';\nimport faviconMention32x32 from 'images/favicon/favicon-mentions-32x32.png';\nimport faviconMention64x64 from 'images/favicon/favicon-mentions-64x64.png';\nimport faviconMention96x96 from 'images/favicon/favicon-mentions-96x96.png';\nimport faviconUnread16x16 from 'images/favicon/favicon-unread-16x16.png';\nimport faviconUnread24x24 from 'images/favicon/favicon-unread-24x24.png';\nimport faviconUnread32x32 from 'images/favicon/favicon-unread-32x32.png';\nimport faviconUnread64x64 from 'images/favicon/favicon-unread-64x64.png';\nimport faviconUnread96x96 from 'images/favicon/favicon-unread-96x96.png';\nimport {Constants} from 'utils/constants';\nimport DesktopApp from 'utils/desktop_api';\nimport * as UserAgent from 'utils/user_agent';\n\nenum BadgeStatus {\n    Mention = 'Mention',\n    Unread = 'Unread',\n    None = 'None'\n}\n\ntype Props = {\n    intl: IntlShape;\n    unreadStatus: BasicUnreadStatus;\n    siteName?: string;\n    currentChannel?: Channel;\n    currentTeam?: Team;\n    currentTeammate: Channel | null;\n    inGlobalThreads: boolean;\n    inDrafts: boolean;\n    inScheduledPosts: boolean;\n};\n\nexport class UnreadsStatusHandlerClass extends React.PureComponent<Props> {\n    componentDidUpdate(prevProps: Props) {\n        this.updateTitle();\n        const oldBadgeStatus = this.getBadgeStatus(prevProps.unreadStatus);\n        const newBadgeStatus = this.getBadgeStatus(this.props.unreadStatus);\n\n        if (oldBadgeStatus !== newBadgeStatus) {\n            this.updateFavicon(newBadgeStatus);\n        }\n\n        this.updateDesktopApp();\n    }\n\n    get isDynamicFaviconSupported() {\n        return UserAgent.isChrome() || UserAgent.isFirefox();\n    }\n\n    getBadgeStatus(unreadStatus: BasicUnreadStatus) {\n        if (typeof unreadStatus === 'number') {\n            return BadgeStatus.Mention;\n        } else if (unreadStatus) {\n            return BadgeStatus.Unread;\n        }\n        return BadgeStatus.None;\n    }\n\n    updateDesktopApp = () => {\n        const {unreadStatus} = this.props;\n        const {isUnread, unreadMentionCount} = basicUnreadMeta(unreadStatus);\n\n        DesktopApp.updateUnreadsAndMentions(isUnread, unreadMentionCount);\n    };\n\n    updateTitle = () => {\n        const {\n            siteName,\n            currentChannel,\n            currentTeam,\n            currentTeammate,\n            unreadStatus,\n            inGlobalThreads,\n            inDrafts,\n            inScheduledPosts,\n        } = this.props;\n        const {formatMessage} = this.props.intl;\n\n        const currentSiteName = siteName || '';\n\n        const {isUnread, unreadMentionCount} = basicUnreadMeta(unreadStatus);\n\n        const mentionTitle = unreadMentionCount > 0 ? `(${unreadMentionCount}) ` : '';\n        const unreadTitle = !this.isDynamicFaviconSupported && isUnread ? '* ' : '';\n\n        if (currentChannel && currentTeam && currentChannel.id) {\n            let currentChannelName = currentChannel.display_name;\n            if (currentChannel.type === Constants.DM_CHANNEL) {\n                if (currentTeammate != null) {\n                    currentChannelName = currentTeammate.display_name;\n                }\n            }\n            document.title = `${mentionTitle}${unreadTitle}${currentChannelName} - ${currentTeam.display_name} ${currentSiteName}`;\n        } else if (currentTeam && inGlobalThreads) {\n            document.title = formatMessage({\n                id: 'globalThreads.title',\n                defaultMessage: '{prefix}Threads - {displayName} {siteName}',\n            }, {\n                prefix: `${mentionTitle}${unreadTitle}`,\n                displayName: currentTeam.display_name,\n                siteName: currentSiteName,\n            });\n        } else if (currentTeam && inDrafts) {\n            document.title = formatMessage({\n                id: 'drafts.title',\n                defaultMessage: '{prefix}Drafts - {displayName} {siteName}',\n            }, {\n                prefix: `${mentionTitle}${unreadTitle}`,\n                displayName: currentTeam.display_name,\n                siteName: currentSiteName,\n            });\n        } else if (currentTeam && inScheduledPosts) {\n            document.title = formatMessage({\n                id: 'scheduledPosts.title',\n                defaultMessage: '{prefix}Scheduled - {displayName} {siteName}',\n            }, {\n                prefix: `${mentionTitle}${unreadTitle}`,\n                displayName: currentTeam.display_name,\n                siteName: currentSiteName,\n            });\n        } else {\n            document.title = formatMessage({id: 'sidebar.team_select', defaultMessage: '{siteName} - Join a team'}, {siteName: currentSiteName || 'Mattermost'});\n        }\n    };\n\n    updateFavicon = (badgeStatus: BadgeStatus) => {\n        if (!(UserAgent.isFirefox() || UserAgent.isChrome())) {\n            return;\n        }\n\n        const link = document.querySelector('link[rel=\"icon\"]');\n\n        if (!link) {\n            return;\n        }\n        const link16x16 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"16x16\"]');\n        const link24x24 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"24x24\"]');\n        const link32x32 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"32x32\"]');\n        const link64x64 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"64x64\"]');\n        const link96x96 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"96x96\"]');\n\n        const getFavicon = (url: string): string => ensureString(url);\n\n        switch (badgeStatus) {\n        case BadgeStatus.Mention: {\n            link16x16!.href = getFavicon(faviconMention16x16);\n            link24x24!.href = getFavicon(faviconMention24x24);\n            link32x32!.href = getFavicon(faviconMention32x32);\n            link64x64!.href = getFavicon(faviconMention64x64);\n            link96x96!.href = getFavicon(faviconMention96x96);\n            break;\n        }\n        case BadgeStatus.Unread: {\n            link16x16!.href = getFavicon(faviconUnread16x16);\n            link24x24!.href = getFavicon(faviconUnread24x24);\n            link32x32!.href = getFavicon(faviconUnread32x32);\n            link64x64!.href = getFavicon(faviconUnread64x64);\n            link96x96!.href = getFavicon(faviconUnread96x96);\n            break;\n        }\n        default: {\n            link16x16!.href = getFavicon(faviconDefault16x16);\n            link24x24!.href = getFavicon(faviconDefault24x24);\n            link32x32!.href = getFavicon(faviconDefault32x32);\n            link64x64!.href = getFavicon(faviconDefault64x64);\n            link96x96!.href = getFavicon(faviconDefault96x96);\n        }\n        }\n    };\n\n    render() {\n        return null;\n    }\n}\n\nexport default injectIntl(UnreadsStatusHandlerClass);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter, matchPath} from 'react-router-dom';\nimport type {RouteChildrenProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getCurrentChannel, getUnreadStatus} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport UnreadsStatusHandler from './unreads_status_handler';\n\ntype Props = RouteChildrenProps;\n\nfunction mapStateToProps(state: GlobalState, {location: {pathname}}: Props) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeammate = (currentChannel && currentChannel.teammate_id) ? currentChannel : null;\n    const currentTeam = getCurrentTeam(state);\n\n    return {\n        currentChannel,\n        currentTeam,\n        currentTeammate,\n        siteName: config.SiteName,\n        unreadStatus: getUnreadStatus(state),\n        inGlobalThreads: matchPath(pathname, {path: '/:team/threads/:threadIdentifier?'}) != null,\n        inDrafts: matchPath(pathname, {path: '/:team/drafts'}) != null,\n        inScheduledPosts: matchPath(pathname, {path: '/:team/scheduled_posts'}) != null,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UnreadsStatusHandler));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {lazy, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {cleanUpStatusAndProfileFetchingPoll} from 'mattermost-redux/actions/status_profile_polling';\nimport {getIsUserStatusesConfigEnabled} from 'mattermost-redux/selectors/entities/common';\n\nimport {addVisibleUsersInCurrentChannelAndSelfToStatusPoll} from 'actions/status_actions';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport CenterChannel from 'components/channel_layout/center_channel';\nimport LoadingScreen from 'components/loading_screen';\nimport QueryParamActionController from 'components/query_param_actions/query_param_action_controller';\nimport Sidebar from 'components/sidebar';\nimport CRTPostsChannelResetWatcher from 'components/threading/channel_threads/posts_channel_reset_watcher';\nimport UnreadsStatusHandler from 'components/unreads_status_handler';\n\nimport Pluggable from 'plugins/pluggable';\nimport {Constants} from 'utils/constants';\nimport {isInternetExplorer, isEdge} from 'utils/user_agent';\n\nconst ProductNoticesModal = makeAsyncComponent('ProductNoticesModal', lazy(() => import('components/product_notices_modal')));\nconst ResetStatusModal = makeAsyncComponent('ResetStatusModal', lazy(() => import('components/reset_status_modal')));\nconst MobileSidebarRight = makeAsyncComponent('MobileSidebarRight', lazy(() => import('components/mobile_sidebar_right')));\n\nconst BODY_CLASS_FOR_CHANNEL = ['app__body', 'channel-view'];\n\ntype Props = {\n    shouldRenderCenterChannel: boolean;\n}\n\nexport default function ChannelController(props: Props) {\n    const isMobileView = useSelector(getIsMobileView);\n    const enabledUserStatuses = useSelector(getIsUserStatusesConfigEnabled);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const isMsBrowser = isInternetExplorer() || isEdge();\n        const {navigator} = window;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const platform = navigator?.userAgentData?.platform || navigator?.platform || 'unknown';\n        document.body.classList.add(...getClassnamesForBody(platform, isMsBrowser));\n\n        return () => {\n            document.body.classList.remove(...BODY_CLASS_FOR_CHANNEL);\n\n            // This cleans up the status and profile setInterval of fetching poll we use to batch requests\n            // when fetching statuses and profiles for a list of users.\n            dispatch(cleanUpStatusAndProfileFetchingPoll());\n        };\n    }, []);\n\n    // Starts a regular interval to fetch statuses of users.\n    // see function \"addVisibleUsersInCurrentChannelAndSelfToStatusPoll\" for more details on which user's statuses are fetched.\n    useEffect(() => {\n        let loadStatusesIntervalId: NodeJS.Timeout;\n        if (enabledUserStatuses) {\n            loadStatusesIntervalId = setInterval(() => {\n                dispatch(addVisibleUsersInCurrentChannelAndSelfToStatusPoll());\n            }, Constants.STATUS_INTERVAL);\n        }\n\n        return () => {\n            clearInterval(loadStatusesIntervalId);\n        };\n    }, [enabledUserStatuses]);\n\n    return (\n        <>\n            <CRTPostsChannelResetWatcher/>\n            <QueryParamActionController/>\n            <Sidebar/>\n            <div\n                id='channel_view'\n                className='channel-view'\n                data-testid='channel_view'\n            >\n                <UnreadsStatusHandler/>\n                <ProductNoticesModal/>\n                <div className={classNames('container-fluid channel-view-inner')}>\n                    {props.shouldRenderCenterChannel ? <CenterChannel/> : <LoadingScreen centered={true}/>}\n                    <Pluggable pluggableName='Root'/>\n                    <ResetStatusModal/>\n                </div>\n            </div>\n            {isMobileView && <MobileSidebarRight/>}\n        </>\n    );\n}\n\nexport function getClassnamesForBody(platform: Window['navigator']['platform'], isMsBrowser = false) {\n    const bodyClass = [...BODY_CLASS_FOR_CHANNEL];\n\n    // OS Detection\n    if (platform === 'Win32' || platform === 'Win64') {\n        bodyClass.push('os--windows');\n    } else if (platform === 'MacIntel' || platform === 'MacPPC') {\n        bodyClass.push('os--mac');\n    }\n\n    // IE Detection\n    if (isMsBrowser) {\n        bodyClass.push('browser--ie');\n    }\n\n    return bodyClass;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport iNoBounce from 'inobounce';\nimport React, {lazy, memo, useEffect, useRef, useState} from 'react';\nimport {Route, Switch, useHistory, useParams} from 'react-router-dom';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {reconnect} from 'actions/websocket_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {makeAsyncComponent, makeAsyncPluggableComponent} from 'components/async_load';\nimport ChannelController from 'components/channel_layout/channel_controller';\nimport useTelemetryIdentitySync from 'components/common/hooks/useTelemetryIdentifySync';\nimport InitialLoadingScreen from 'components/initial_loading_screen';\n\nimport Constants from 'utils/constants';\nimport DesktopApp from 'utils/desktop_api';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {TEAM_NAME_PATH_PATTERN} from 'utils/path';\nimport {isIosSafari} from 'utils/user_agent';\n\nimport type {OwnProps, PropsFromRedux} from './index';\n\nconst BackstageController = makeAsyncComponent('BackstageController', lazy(() => import('components/backstage')));\nconst Pluggable = makeAsyncPluggableComponent();\n\nconst WAKEUP_CHECK_INTERVAL = 30000; // 30 seconds\nconst WAKEUP_THRESHOLD = 60000; // 60 seconds\nconst UNREAD_CHECK_TIME_MILLISECONDS = 120 * 1000;\n\ndeclare global {\n    interface Window {\n        isActive: boolean;\n    }\n}\n\ntype Props = PropsFromRedux & OwnProps;\n\nfunction TeamController(props: Props) {\n    const history = useHistory();\n    const {team: teamNameParam} = useParams<Props['match']['params']>();\n\n    const [initialChannelsLoaded, setInitialChannelsLoaded] = useState(false);\n\n    const [team, setTeam] = useState<Team | null>(getTeamFromTeamList(props.teamsList, teamNameParam));\n\n    const blurTime = useRef(Date.now());\n    const lastTime = useRef(Date.now());\n\n    useTelemetryIdentitySync();\n\n    useEffect(() => {\n        InitialLoadingScreen.stop('team_controller');\n        DesktopApp.reactAppInitialized();\n        async function fetchAllChannels() {\n            await props.fetchAllMyTeamsChannels();\n            setInitialChannelsLoaded(true);\n        }\n\n        props.fetchAllMyChannelMembers();\n        fetchAllChannels();\n    }, []);\n\n    useEffect(() => {\n        if (props.disableWakeUpReconnectHandler) {\n            return () => {};\n        }\n\n        const wakeUpIntervalId = setInterval(() => {\n            const currentTime = Date.now();\n            if ((currentTime - lastTime.current) > WAKEUP_THRESHOLD) {\n                console.log('computer woke up - reconnecting'); //eslint-disable-line no-console\n                reconnect();\n            }\n            lastTime.current = currentTime;\n        }, WAKEUP_CHECK_INTERVAL);\n\n        return () => {\n            clearInterval(wakeUpIntervalId);\n        };\n    }, [props.disableWakeUpReconnectHandler]);\n\n    // Effect runs on mount, add event listeners on windows object\n    useEffect(() => {\n        function handleFocus() {\n            window.isActive = true;\n            props.markAsReadOnFocus();\n\n            // Temporary flag to disable refetching of channel members on browser focus\n            if (!props.disableRefetchingOnBrowserFocus) {\n                const currentTime = Date.now();\n                if ((currentTime - blurTime.current) > UNREAD_CHECK_TIME_MILLISECONDS && props.currentTeamId) {\n                    props.fetchChannelsAndMembers(props.currentTeamId);\n                }\n            }\n        }\n\n        function handleBlur() {\n            window.isActive = false;\n            blurTime.current = Date.now();\n            props.unsetActiveChannelOnServer();\n        }\n\n        function handleKeydown(event: KeyboardEvent) {\n            if (event.shiftKey && cmdOrCtrlPressed(event) && isKeyPressed(event, Constants.KeyCodes.L)) {\n                const replyTextbox = document.querySelector<HTMLElement>('#sidebar-right.is-open.expanded #reply_textbox');\n                if (replyTextbox) {\n                    replyTextbox.focus();\n                } else {\n                    const postTextbox = document.getElementById('post_textbox');\n                    if (postTextbox) {\n                        postTextbox.focus();\n                    }\n                }\n            }\n        }\n\n        window.addEventListener('focus', handleFocus);\n        window.addEventListener('blur', handleBlur);\n        window.addEventListener('keydown', handleKeydown);\n\n        return () => {\n            window.removeEventListener('focus', handleFocus);\n            window.removeEventListener('blur', handleBlur);\n            window.removeEventListener('keydown', handleKeydown);\n        };\n    }, [props.currentTeamId]);\n\n    // Effect runs on mount, adds active state to window\n    useEffect(() => {\n        const browserIsIosSafari = isIosSafari();\n        if (browserIsIosSafari) {\n            // Use iNoBounce to prevent scrolling past the boundaries of the page\n            iNoBounce.enable();\n        }\n\n        // Set up tracking for whether the window is active\n        window.isActive = true;\n\n        LocalStorageStore.setTeamIdJoinedOnLoad(null);\n\n        return () => {\n            window.isActive = false;\n\n            if (browserIsIosSafari) {\n                iNoBounce.disable();\n            }\n        };\n    }, []);\n\n    async function initTeamOrRedirect(team: Team) {\n        const {data: joinedTeam, error} = await props.initializeTeam(team) as ActionResult<Team, ServerError>; // Fix in MM-46907;\n        if (error) {\n            history.push('/error?type=team_not_found');\n            return;\n        }\n        if (joinedTeam) {\n            setTeam(joinedTeam);\n        }\n    }\n\n    async function joinTeamOrRedirect(teamNameParam: string, joinedOnFirstLoad: boolean) {\n        setTeam(null);\n\n        const {data: joinedTeam, error} = await props.joinTeam(teamNameParam, joinedOnFirstLoad) as ActionResult<Team, ServerError>; // Fix in MM-46907;\n        if (error) {\n            history.push('/error?type=team_not_found');\n            return;\n        }\n        if (joinedTeam) {\n            setTeam(joinedTeam);\n        }\n    }\n\n    const teamsListDependency = props.teamsList.map((team) => team.id).sort().join('+');\n\n    // Effect to run when url for team or teamsList changes\n    useEffect(() => {\n        if (teamNameParam) {\n            // skip reserved team names\n            if (Constants.RESERVED_TEAM_NAMES.includes(teamNameParam)) {\n                return;\n            }\n\n            const teamFromTeamNameParam = getTeamFromTeamList(props.teamsList, teamNameParam);\n            if (teamFromTeamNameParam) {\n                // If the team is already in the teams list, initialize it when we switch teams\n                initTeamOrRedirect(teamFromTeamNameParam);\n            } else if (team && team.name !== teamNameParam) {\n                // When we are already in a team and the new team is not in the teams list, attempt to join it\n                joinTeamOrRedirect(teamNameParam, false);\n            } else if (!team) {\n                // When we are not in a team and the new team is not in the teams list, attempt to join it\n                joinTeamOrRedirect(teamNameParam, true);\n            }\n        }\n    }, [teamNameParam, teamsListDependency]);\n\n    if (props.mfaRequired) {\n        history.push('/mfa/setup');\n        return null;\n    }\n\n    if (team === null) {\n        return null;\n    }\n\n    const teamLoaded = team?.name.toLowerCase() === teamNameParam?.toLowerCase();\n\n    return (\n        <Switch>\n            <Route\n                path={`/:team(${TEAM_NAME_PATH_PATTERN})/integrations`}\n                component={BackstageController}\n            />\n            <Route\n                path={`/:team(${TEAM_NAME_PATH_PATTERN})/emoji`}\n                component={BackstageController}\n            />\n            {props.plugins?.map((plugin) => (\n                <Route\n                    key={plugin.id}\n                    path={`/:team(${TEAM_NAME_PATH_PATTERN})/` + (plugin as any).route}\n                    render={() => (\n                        <Pluggable\n                            pluggableName={'NeedsTeamComponent'}\n                            pluggableId={plugin.id}\n                            css={{gridArea: 'center'}}\n                        />\n                    )}\n                />\n            ))}\n            <ChannelController shouldRenderCenterChannel={initialChannelsLoaded && teamLoaded}/>\n        </Switch>\n    );\n}\n\nfunction getTeamFromTeamList(teamsList: Props['teamsList'], teamName?: string) {\n    if (!teamName) {\n        return null;\n    }\n\n    const team = teamsList.find((teamInList) => teamInList.name === teamName) ?? null;\n    if (!team) {\n        return null;\n    }\n\n    return team;\n}\n\nexport default memo(TeamController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\n/**\n * The purpose of this hook is to sync the user's id and role with client4's user id and role,\n * which is essential to identify the user in telemetry.\n */\nfunction useTelemetryIdentitySync() {\n    const user = useSelector(getCurrentUser);\n    const userId = user?.id ?? '';\n    const userRoles = user?.roles ?? '';\n\n    useEffect(() => {\n        if (userId) {\n            Client4.setUserId(userId);\n        }\n        if (userRoles) {\n            Client4.setUserRoles(userRoles);\n        }\n    }, [userId, userRoles]);\n}\n\nexport default useTelemetryIdentitySync;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {fetchAllMyTeamsChannels, fetchAllMyChannelMembers, fetchChannelsAndMembers, unsetActiveChannelOnServer} from 'mattermost-redux/actions/channels';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId, getMyTeams} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {markAsReadOnFocus} from 'actions/views/channel';\nimport {getSelectedPostId} from 'selectors/rhs';\nimport {getSelectedThreadIdInCurrentTeam} from 'selectors/views/threads';\n\nimport {initializeTeam, joinTeam} from 'components/team_controller/actions';\n\nimport {checkIfMFARequired} from 'utils/route';\n\nimport type {GlobalState} from 'types/store';\n\nimport TeamController from './team_controller';\n\ntype Params = {\n    url: string;\n    team?: string;\n}\n\nexport type OwnProps = RouteComponentProps<Params>;\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n    const plugins = state.plugins.components.NeedsTeamComponent;\n    const disableRefetchingOnBrowserFocus = config.DisableRefetchingOnBrowserFocus === 'true';\n    const disableWakeUpReconnectHandler = config.DisableWakeUpReconnectHandler === 'true';\n\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        currentChannelId: getCurrentChannelId(state),\n        teamsList: getMyTeams(state),\n        plugins,\n        selectedThreadId: getSelectedThreadIdInCurrentTeam(state),\n        selectedPostId: getSelectedPostId(state),\n        mfaRequired: checkIfMFARequired(currentUser, license, config, ownProps.match.url),\n        disableRefetchingOnBrowserFocus,\n        disableWakeUpReconnectHandler,\n    };\n}\n\nconst mapDispatchToProps = {\n    fetchChannelsAndMembers,\n    fetchAllMyTeamsChannels,\n    fetchAllMyChannelMembers,\n    markAsReadOnFocus,\n    initializeTeam,\n    joinTeam,\n    unsetActiveChannelOnServer,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(TeamController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport {SyncableType} from '@mattermost/types/groups';\nimport type {Group, SyncablePatch} from '@mattermost/types/groups';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\nimport ConfirmModal from 'components/confirm_modal';\nimport Nbsp from 'components/html_entities/nbsp';\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal';\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport {ModalIdentifiers} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\ntype Props = {\n    intl: IntlShape;\n    team: Team;\n    actions: {\n        getGroupsAssociatedToTeam: (teamID: string, q: string, page: number, perPage: number, filterAllowReference: boolean) => Promise<ActionResult<{groups: Group[]; totalGroupCount: number}>>;\n        closeModal: (modalId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n        unlinkGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType) => Promise<ActionResult>;\n        patchGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType, patch: Partial<SyncablePatch>) => Promise<ActionResult>;\n        getMyTeamMembers: () => void;\n    };\n};\n\ntype State = {\n    showConfirmModal: boolean;\n    item: Group;\n    listModal?: ListModal;\n}\n\nclass TeamGroupsManageModal extends React.PureComponent<Props, State> {\n    state = {\n        showConfirmModal: false,\n        item: {\n            member_count: 0,\n        },\n    } as State;\n\n    loadItems = async (pageNumber: number, searchTerm: string) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToTeam(this.props.team.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE, true);\n\n        return {\n            items: data!.groups,\n            totalCount: data!.totalGroupCount,\n        };\n    };\n\n    handleDeleteCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    handleDeleteConfirmed = () => {\n        this.setState({showConfirmModal: false});\n        const {item, listModal} = this.state;\n        this.props.actions.unlinkGroupSyncable(item.id, this.props.team.id, SyncableType.Team).then(async () => {\n            if (listModal) {\n                listModal.setState({loading: true});\n                const {items, totalCount} = await listModal.props.loadItems(listModal.state.page, listModal.state.searchTerm);\n\n                listModal.setState({loading: false, items, totalCount});\n            }\n        });\n    };\n\n    onClickRemoveGroup = (item: Group, listModal: ListModal) => {\n        this.setState({showConfirmModal: true, item, listModal});\n    };\n\n    onClickConfirmRemoveGroup = (item: Group, listModal: ListModal) => this.props.actions.unlinkGroupSyncable(item.id, this.props.team.id, SyncableType.Team).then(async () => {\n        listModal.setState({loading: true});\n        const {items, totalCount} = await listModal.props.loadItems(listModal.state.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items, totalCount});\n    });\n\n    onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_TEAM_GROUPS);\n    };\n\n    titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToTeamModal});\n    };\n\n    setTeamMemberStatus = async (item: Group, listModal: ListModal, isTeamAdmin: boolean) => {\n        this.props.actions.patchGroupSyncable(item.id, this.props.team.id, SyncableType.Team, {scheme_admin: isTeamAdmin}).then(async () => {\n            listModal.setState({loading: true});\n            const {items, totalCount} = await listModal.props.loadItems(listModal.state.page, listModal.state.searchTerm);\n\n            this.props.actions.getMyTeamMembers();\n\n            listModal.setState({loading: false, items, totalCount});\n        });\n    };\n\n    renderRow = (item: Group, listModal: ListModal) => {\n        let title;\n        if (item.scheme_admin) {\n            title = (\n                <FormattedMessage\n                    id='team_members_dropdown.teamAdmins'\n                    defaultMessage='Team Admins'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='team_members_dropdown.teamMembers'\n                    defaultMessage='Team Members'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details'>\n                    <div\n                        className='more-modal__name'\n                        data-testid='group-name'\n                    >{item.display_name} <Nbsp/> {'-'} <Nbsp/>\n                        <span className='more-modal__name_count'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: item.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <MenuWrapper>\n                        <button\n                            id={`teamGroupsDropdown_${item.display_name}`}\n                            className='dropdown-toggle theme color--link style--none'\n                            type='button'\n                            aria-expanded='true'\n                            data-testid='menu-button'\n                        >\n                            <span>{title} </span>\n                            <DropdownIcon/>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            ariaLabel={Utils.localizeMessage({id: 'team_members_dropdown.menuAriaLabel', defaultMessage: 'Change the role of a team member'})}\n                        >\n                            <Menu.ItemAction\n                                show={!item.scheme_admin}\n                                onClick={() => this.setTeamMemberStatus(item, listModal, true)}\n                                text={Utils.localizeMessage({id: 'team_members_dropdown.makeTeamAdmins', defaultMessage: 'Make Team Admins'})}\n                            />\n                            <Menu.ItemAction\n                                show={Boolean(item.scheme_admin)}\n                                onClick={() => this.setTeamMemberStatus(item, listModal, false)}\n                                text={Utils.localizeMessage({id: 'team_members_dropdown.makeTeamMembers', defaultMessage: 'Make Team Members'})}\n                            />\n                            <Menu.ItemAction\n                                id='remove-group'\n                                onClick={() => this.onClickRemoveGroup(item, listModal)}\n                                text={Utils.localizeMessage({id: 'group_list_modal.removeGroupButton', defaultMessage: 'Remove Group'})}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const memberCount = this.state.item.member_count;\n        return (\n            <>\n                <ListModal\n                    show={!this.state.showConfirmModal}\n                    titleText={formatMessage({id: 'team_groups', defaultMessage: '{team} Groups'}, {team: this.props.team.display_name})}\n                    searchPlaceholderText={formatMessage({id: 'manage_team_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                    renderRow={this.renderRow}\n                    loadItems={this.loadItems}\n                    onHide={this.onHide}\n                    titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                    titleBarButtonOnClick={this.titleButtonOnClick}\n                    data-testid='list-modal'\n                />\n                <ConfirmModal\n                    show={this.state.showConfirmModal}\n                    title={formatMessage({id: 'remove_group_confirm_title', defaultMessage: 'Remove Group and {memberCount, number} {memberCount, plural, one {Member} other {Members}}'}, {memberCount})}\n                    message={formatMessage({id: 'remove_group_confirm_message', defaultMessage: '{memberCount, number} {memberCount, plural, one {member} other {members}} associated to this group will be removed from the team. Are you sure you wish to remove this group and {memberCount} {memberCount, plural, one {member} other {members}}?'}, {memberCount})}\n                    confirmButtonText={formatMessage({id: 'remove_group_confirm_button', defaultMessage: 'Yes, Remove Group and {memberCount, plural, one {Member} other {Members}}'}, {memberCount})}\n                    onConfirm={this.handleDeleteConfirmed}\n                    onCancel={this.handleDeleteCanceled}\n                    id='confirm-modal'\n                />\n            </>\n        );\n    }\n}\n\nexport default injectIntl(TeamGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getGroupsAssociatedToTeam, unlinkGroupSyncable, patchGroupSyncable} from 'mattermost-redux/actions/groups';\nimport {getMyTeamMembers} from 'mattermost-redux/actions/teams';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport TeamGroupsManageModal from './team_groups_manage_modal';\n\ntype OwnProps = {\n    teamID: string;\n};\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => {\n    return {\n        team: state.entities.teams.teams[ownProps.teamID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        getGroupsAssociatedToTeam,\n        closeModal,\n        openModal,\n        unlinkGroupSyncable,\n        patchGroupSyncable,\n        getMyTeamMembers,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {WrappedComponentProps} from 'react-intl';\n\nimport type {Team, TeamMembership} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {isGuest, isAdmin, isSystemAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 3;\n\ntype Props = WrappedComponentProps & {\n    user: UserProfile;\n    currentUser: UserProfile;\n    teamMember: TeamMembership;\n    teamUrl: string;\n    currentTeam?: Team;\n    index: number;\n    totalUsers: number;\n    collapsedThreads: ReturnType<typeof isCollapsedThreadsEnabled>;\n    actions: {\n        getMyTeamMembers: () => void;\n        getMyTeamUnreads: (collapsedThreads: boolean) => void;\n        getUser: (id: string) => void;\n        getTeamMember: (teamId: string, userId: string) => void;\n        getTeamStats: (teamId: string) => void;\n        getChannelStats: (channelId: string) => void;\n        updateTeamMemberSchemeRoles: (teamId: string, userId: string, b1: boolean, b2: boolean) => Promise<ActionResult>;\n        updateUserActive: (userId: string, active: boolean) => Promise<ActionResult>;\n        removeUserFromTeamAndGetStats: (teamId: string, userId: string) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    serverError: string|null;\n    showDemoteModal: boolean;\n    user: UserProfile|null;\n    role: string|null;\n}\n\nclass TeamMembersDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    private handleMakeMember = async () => {\n        const me = this.props.currentUser;\n        if (this.props.user.id === me.id && me.roles.includes('system_admin')) {\n            this.handleDemote(this.props.user, 'team_user');\n        } else {\n            const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n            if (error) {\n                this.setState({serverError: error.message});\n            } else {\n                this.props.actions.getUser(this.props.user.id);\n                this.props.actions.getTeamMember(this.props.teamMember.team_id, this.props.user.id);\n                if (this.props.user.id === me.id) {\n                    await this.props.actions.getMyTeamMembers();\n                    this.props.actions.getMyTeamUnreads(this.props.collapsedThreads);\n                }\n            }\n        }\n    };\n\n    private handleRemoveFromTeam = async () => {\n        const {error} = await this.props.actions.removeUserFromTeamAndGetStats(this.props.teamMember.team_id, this.props.user.id);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    };\n\n    private handleMakeAdmin = async () => {\n        const me = this.props.currentUser;\n        if (this.props.user.id === me.id && me.roles.includes('system_admin')) {\n            this.handleDemote(this.props.user, 'team_user team_admin');\n        } else {\n            const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n            if (error) {\n                this.setState({serverError: error.message});\n            } else {\n                this.props.actions.getUser(this.props.user.id);\n                this.props.actions.getTeamMember(this.props.teamMember.team_id, this.props.user.id);\n            }\n        }\n    };\n\n    private handleDemote = (user: UserProfile, role: string): void => {\n        this.setState({\n            serverError: this.state.serverError,\n            showDemoteModal: true,\n            user,\n            role,\n        });\n    };\n\n    private handleDemoteCancel = (): void => {\n        this.setState({\n            serverError: null,\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        });\n    };\n\n    private handleDemoteSubmit = async () => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getUser(this.props.user.id);\n            getHistory().push(this.props.teamUrl);\n        }\n    };\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        const {currentTeam, teamMember, user, intl} = this.props;\n\n        let currentRoles = null;\n\n        if (isGuest(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.guest'\n                    defaultMessage='Guest'\n                />\n            );\n        } else if (user.roles.length > 0 && isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        } else if ((teamMember.roles.length > 0 && isAdmin(teamMember.roles)) || teamMember.scheme_admin) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.teamAdmin'\n                    defaultMessage='Team Admin'\n                />\n            );\n        } else {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.member'\n                    defaultMessage='Member'\n                />\n            );\n        }\n\n        const me = this.props.currentUser;\n        let showMakeMember = !isGuest(user.roles) && (isAdmin(teamMember.roles) || teamMember.scheme_admin) && !isSystemAdmin(user.roles);\n        let showMakeAdmin = !isGuest(user.roles) && !isAdmin(teamMember.roles) && !isSystemAdmin(user.roles) && !teamMember.scheme_admin;\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeMember = false;\n            showMakeAdmin = false;\n        }\n\n        const canRemoveFromTeam = user.id !== me.id && (!currentTeam?.group_constrained || user.is_bot);\n\n        let makeDemoteModal = null;\n        if (user.id === me.id) {\n            const title = (\n                <FormattedMessage\n                    id='team_members_dropdown.confirmDemoteRoleTitle'\n                    defaultMessage='Confirm Demotion from System Admin Role'\n                />\n            );\n\n            const message = (\n                <div>\n                    <FormattedMessage\n                        id='team_members_dropdown.confirmDemoteDescription'\n                        defaultMessage=\"If you demote yourself from the System Admin role and there is not another user with System Admin privileges, you'll need to re-assign a System Admin by accessing the Mattermost server through a terminal and running the following command.\"\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='team_members_dropdown.confirmDemotionCmd'\n                        defaultMessage='platform roles system_admin {username}'\n                        values={{\n                            username: me.username,\n                        }}\n                    />\n                    {serverError}\n                </div>\n            );\n\n            const confirmButton = (\n                <FormattedMessage\n                    id='team_members_dropdown.confirmDemotion'\n                    defaultMessage='Confirm Demotion'\n                />\n            );\n\n            makeDemoteModal = (\n                <ConfirmModal\n                    show={this.state.showDemoteModal}\n                    title={title}\n                    message={message}\n                    confirmButtonText={confirmButton}\n                    onConfirm={this.handleDemoteSubmit}\n                    onCancel={this.handleDemoteCancel}\n                />\n            );\n        }\n\n        if (!canRemoveFromTeam && !showMakeAdmin && !showMakeMember) {\n            return <div>{currentRoles}</div>;\n        }\n\n        const {index, totalUsers} = this.props;\n        let openUp = false;\n        if (totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP) {\n            openUp = true;\n        }\n\n        const menuRemove = (\n            <Menu.ItemAction\n                id='removeFromTeam'\n                onClick={this.handleRemoveFromTeam}\n                text={\n                    <FormattedMessage\n                        id='team_members_dropdown.leave_team'\n                        defaultMessage='Remove from Team'\n                    />\n                }\n            />\n        );\n        const menuMakeAdmin = (\n            <Menu.ItemAction\n                onClick={this.handleMakeAdmin}\n                text={\n                    <FormattedMessage\n                        id='team_members_dropdown.makeAdmin'\n                        defaultMessage='Make Team Admin'\n                    />\n                }\n            />\n        );\n        const menuMakeMember = (\n            <Menu.ItemAction\n                onClick={this.handleMakeMember}\n                text={\n                    <FormattedMessage\n                        id='team_members_dropdown.makeMember'\n                        defaultMessage='Make Team Member'\n                    />\n                }\n            />\n        );\n        return (\n            <MenuWrapper>\n                <button\n                    id={`teamMembersDropdown_${user.username}`}\n                    className='dropdown-toggle theme color--link style--none'\n                    type='button'\n                    aria-expanded='true'\n                >\n                    <span>{currentRoles} </span>\n                    <DropdownIcon/>\n                </button>\n                <div>\n                    <Menu\n                        openLeft={true}\n                        openUp={openUp}\n                        ariaLabel={intl.formatMessage({id: 'team_members_dropdown.menuAriaLabel', defaultMessage: 'Change the role of a team member'})}\n                    >\n                        {canRemoveFromTeam ? menuRemove : null}\n                        {showMakeAdmin ? menuMakeAdmin : null}\n                        {showMakeMember ? menuMakeMember : null}\n                    </Menu>\n                    {makeDemoteModal}\n                    {serverError}\n                </div>\n            </MenuWrapper>\n        );\n    }\n}\n\nexport default injectIntl(TeamMembersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getChannelStats} from 'mattermost-redux/actions/channels';\nimport {\n    getMyTeamMembers,\n    getMyTeamUnreads,\n    getTeamStats,\n    getTeamMember,\n    updateTeamMemberSchemeRoles,\n} from 'mattermost-redux/actions/teams';\nimport {getUser, updateUserActive} from 'mattermost-redux/actions/users';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentRelativeTeamUrl, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {removeUserFromTeamAndGetStats} from 'actions/team_actions';\n\nimport TeamMembersDropdown from './team_members_dropdown';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        currentTeam: getCurrentTeam(state),\n        collapsedThreads: isCollapsedThreadsEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMyTeamMembers,\n            getMyTeamUnreads,\n            getUser,\n            getTeamMember,\n            getTeamStats,\n            getChannelStats,\n            updateUserActive,\n            updateTeamMemberSchemeRoles,\n            removeUserFromTeamAndGetStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {TeamMembership, TeamStats, GetTeamMembersOpts} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Teams} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list_container';\nimport TeamMembersDropdown from 'components/team_members_dropdown';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nconst USERS_PER_PAGE = 50;\n\ntype Props = {\n    searchTerm: string;\n    users: UserProfile[];\n    teamMembers: {\n        [userId: string]: TeamMembership;\n    };\n    currentTeamId: string;\n    totalTeamMembers: number;\n    canManageTeamMembers?: boolean;\n    actions: {\n        getTeamMembers: (teamId: string, page?: number, perPage?: number, options?: GetTeamMembersOpts) => Promise<ActionResult<TeamMembership[]>>;\n        searchProfiles: (term: string, options?: {[key: string]: any}) => Promise<ActionResult<UserProfile[]>>;\n        getTeamStats: (teamId: string) => Promise<ActionResult<TeamStats>>;\n        loadProfilesAndTeamMembers: (page: number, perPage: number, teamId: string, options?: {[key: string]: any}) => Promise<ActionResult>;\n        loadStatusesForProfilesList: (users: UserProfile[]) => void;\n        loadTeamMembersForProfilesList: (profiles: any, teamId: string, reloadAllMembers: boolean) => Promise<ActionResult>;\n        setModalSearchTerm: (term: string) => ActionResult;\n    };\n}\n\ntype State = {\n    loading: boolean;\n}\n\nexport default class MemberListTeam extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    async componentDidMount() {\n        await Promise.all([\n            this.props.actions.loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, this.props.currentTeamId, {active: true}),\n            this.props.actions.getTeamMembers(this.props.currentTeamId, 0, Constants.DEFAULT_MAX_USERS_PER_TEAM,\n                {\n                    sort: Teams.SORT_USERNAME_OPTION,\n                    exclude_deleted_users: true,\n                },\n            ),\n            this.props.actions.getTeamStats(this.props.currentTeamId),\n        ]);\n        this.loadComplete();\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setModalSearchTerm('');\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.loadComplete();\n                this.searchTimeoutId = 0;\n                return;\n            }\n\n            const searchTimeoutId = window.setTimeout(\n                async () => {\n                    const {\n                        loadStatusesForProfilesList,\n                        loadTeamMembersForProfilesList,\n                        searchProfiles,\n                    } = this.props.actions;\n                    const {data} = await searchProfiles(searchTerm, {team_id: this.props.currentTeamId});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    this.setState({loading: true});\n\n                    loadStatusesForProfilesList(data!);\n                    loadTeamMembersForProfilesList(data, this.props.currentTeamId, true).then(({data: membersLoaded}) => {\n                        if (membersLoaded) {\n                            this.loadComplete();\n                        }\n                    });\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    };\n\n    nextPage = async (page: number) => {\n        this.setState({loading: true});\n        await Promise.all([\n            this.props.actions.loadProfilesAndTeamMembers(page, USERS_PER_PAGE, this.props.currentTeamId, {active: true}),\n            this.props.actions.getTeamMembers(this.props.currentTeamId, page, Constants.DEFAULT_MAX_USERS_PER_TEAM,\n                {\n                    sort: Teams.SORT_USERNAME_OPTION,\n                    exclude_deleted_users: true,\n                } as GetTeamMembersOpts,\n            ),\n        ]);\n        this.loadComplete();\n    };\n\n    search = (term: string) => {\n        this.props.actions.setModalSearchTerm(term);\n    };\n\n    render() {\n        let teamMembersDropdown;\n        if (this.props.canManageTeamMembers) {\n            teamMembersDropdown = [TeamMembersDropdown];\n        }\n\n        const teamMembers = this.props.teamMembers;\n        const users = this.props.users;\n        const actionUserProps: {\n            [userId: string]: {\n                teamMember: TeamMembership;\n            };\n        } = {};\n\n        let usersToDisplay;\n        if (this.state.loading) {\n            usersToDisplay = null;\n        } else {\n            usersToDisplay = [];\n\n            for (let i = 0; i < users.length; i++) {\n                const user = users[i];\n\n                if (teamMembers[user.id] && user.delete_at === 0) {\n                    usersToDisplay.push(user);\n                    actionUserProps[user.id] = {\n                        teamMember: teamMembers[user.id],\n                    };\n                }\n            }\n        }\n\n        return (\n            <SearchableUserList\n                users={usersToDisplay}\n                usersPerPage={USERS_PER_PAGE}\n                total={this.props.totalTeamMembers}\n                nextPage={this.nextPage}\n                search={this.search}\n                actions={teamMembersDropdown}\n                actionUserProps={actionUserProps}\n                focusOnMount={!UserAgent.isMobile()}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getTeamStats, getTeamMembers} from 'mattermost-redux/actions/teams';\nimport {searchProfiles} from 'mattermost-redux/actions/users';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getMembersInCurrentTeam, getCurrentTeamStats} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentTeam, searchProfilesInCurrentTeam} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadStatusesForProfilesList} from 'actions/status_actions';\nimport {loadProfilesAndTeamMembers, loadTeamMembersForProfilesList} from 'actions/user_actions';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport type {GlobalState} from 'types/store';\n\nimport MemberListTeam from './member_list_team';\n\ntype Props = {\n    teamId?: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const canManageTeamMembers = haveITeamPermission(state, ownProps.teamId, Permissions.MANAGE_TEAM_ROLES);\n\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        users = searchProfilesInCurrentTeam(state, searchTerm);\n    } else {\n        users = getProfilesInCurrentTeam(state);\n    }\n\n    const stats = getCurrentTeamStats(state) || {active_member_count: 0};\n\n    return {\n        searchTerm,\n        users,\n        teamMembers: getMembersInCurrentTeam(state) || {},\n        currentTeamId: state.entities.teams.currentTeamId,\n        totalTeamMembers: stats.active_member_count,\n        canManageTeamMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            searchProfiles,\n            getTeamStats,\n            getTeamMembers,\n            loadProfilesAndTeamMembers,\n            loadStatusesForProfilesList,\n            loadTeamMembersForProfilesList,\n            setModalSearchTerm,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberListTeam);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport InvitationModal from 'components/invitation_modal';\nimport MemberListTeam from 'components/member_list_team';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport {focusElement} from 'utils/a11y_utils';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {ModalData} from 'types/actions';\n\ntype Props = {\n    currentTeam?: Team;\n    onExited: () => void;\n    onLoad?: () => void;\n    focusOriginElement?: string;\n    actions: {\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class TeamMembersModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.onLoad) {\n            this.props.onLoad();\n        }\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    };\n\n    handleInvitePeople = () => {\n        const {actions} = this.props;\n\n        actions.openModal({\n            modalId: ModalIdentifiers.INVITATION,\n            dialogType: InvitationModal,\n        });\n\n        this.handleHide();\n    };\n\n    handleExit = () => {\n        if (this.props.focusOriginElement) {\n            focusElement(this.props.focusOriginElement, true);\n        }\n        this.props.onExited();\n    };\n\n    render() {\n        let teamDisplayName = '';\n        if (this.props.currentTeam) {\n            teamDisplayName = this.props.currentTeam.display_name;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='none'\n                aria-labelledby='teamMemberModalLabel'\n                id='teamMembersModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='teamMemberModalLabel'\n                    >\n                        <FormattedMessage\n                            id='team_member_modal.members'\n                            defaultMessage='{team} Members'\n                            values={{\n                                team: teamDisplayName,\n                            }}\n                        />\n                    </Modal.Title>\n                    <TeamPermissionGate\n                        teamId={this.props.currentTeam?.id}\n                        permissions={[Permissions.ADD_USER_TO_TEAM, Permissions.INVITE_GUEST]}\n                    >\n                        <button\n                            id='invitePeople'\n                            type='button'\n                            className='btn btn-primary btn-sm invite-people-btn'\n                            onClick={this.handleInvitePeople}\n                        >\n                            <FormattedMessage\n                                id='team_member_modal.invitePeople'\n                                defaultMessage='Invite People'\n                            />\n                        </button>\n                    </TeamPermissionGate>\n                </Modal.Header>\n                <Modal.Body>\n                    <MemberListTeam\n                        teamId={this.props.currentTeam?.id}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {openModal} from 'actions/views/modals';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport TeamMembersModal from './team_members_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const modalId = ModalIdentifiers.TEAM_MEMBERS;\n    return {\n        currentTeam: getCurrentTeam(state),\n        show: isModalOpen(state, modalId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembersModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useMemo} from 'react';\nimport type {KeyboardEventHandler} from 'react';\nimport type {StylesConfig} from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\n\nimport './select_text_input.scss';\n\nconst components = {\n    DropdownIndicator: null,\n};\n\nexport interface SelectTextInputOption {\n    label: string;\n    value: string;\n}\n\ntype Props = {\n    placeholder: string;\n    value: string[];\n    handleNewSelection: (selection: string) => void;\n    onChange: (option?: SelectTextInputOption[] | null) => void;\n    id?: string;\n    isClearable?: boolean;\n    description?: string;\n}\n\nconst styles = {\n    control: (baseStyles) => ({\n        ...baseStyles,\n        background: 'var(--center-channel-color-rgb)',\n    }),\n    input: (baseStyles) => ({\n        ...baseStyles,\n        color: 'rgba(var(--center-channel-color-rgb), 0.64)',\n    }),\n    multiValue: (baseStyles) => ({\n        ...baseStyles,\n        borderRadius: '10px',\n        background: 'rgba(var(--center-channel-color-rgb), 0.08)',\n        display: 'flex',\n        alignItems: 'center',\n    }),\n    multiValueLabel: (baseStyles) => ({\n        ...baseStyles,\n        padding: '4px 6px 4px 10px',\n        color: 'var(--center-channel-color)',\n        fontFamily: 'Open Sans',\n        fontSize: '10px',\n        fontWeight: 600,\n        lineHeight: '12px',\n        letterSpacing: '0.2px',\n    }),\n    multiValueRemove: (baseStyles) => ({\n        ...baseStyles,\n        borderRadius: '50%',\n        background: 'rgba(var(--center-channel-color-rgb), 0.32)',\n        fontFamily: 'compass-icons',\n        fontSize: '12px',\n        fontWeight: 400,\n        color: 'white',\n        width: '10px',\n        height: '10px',\n        padding: 0,\n        marginRight: '4px',\n        ':hover': {\n            background: 'rgba(var(--center-channel-color-rgb), 0.32)',\n            color: 'white',\n        },\n    }),\n} satisfies StylesConfig<SelectTextInputOption, true>;\n\nconst SelectTextInput = ({placeholder, value, handleNewSelection, onChange, id, isClearable, description}: Props) => {\n    const [inputValue, setInputValue] = React.useState('');\n\n    const handleTextEnter = useCallback(() => {\n        // do not add the value if already exists\n        if (value?.includes(inputValue.trim()) || inputValue.length === 0) {\n            return;\n        }\n        handleNewSelection(inputValue);\n        setInputValue('');\n    }, [handleNewSelection, inputValue, value]);\n\n    const handleKeyDown: KeyboardEventHandler = useCallback((event) => {\n        if (!inputValue) {\n            return;\n        }\n        switch (event.key) {\n        case ' ':\n        case ',':\n        case 'Enter':\n            handleTextEnter();\n            event.preventDefault();\n        }\n    }, [inputValue, handleTextEnter]);\n\n    const selectValues = useMemo(() => {\n        return value.map((singleValue) => ({label: singleValue, value: singleValue}));\n    }, [value]);\n\n    return (\n        <>\n            <CreatableSelect\n                id={id}\n                className='select-text-input'\n                styles={styles}\n                components={components}\n                isClearable={isClearable}\n                onChange={useCallback((value) => onChange(value as SelectTextInputOption[]), [onChange])}\n                inputValue={inputValue}\n                isMulti={true}\n                menuIsOpen={false}\n                onInputChange={setInputValue}\n                onKeyDown={handleKeyDown}\n                placeholder={placeholder}\n                value={selectValues}\n                onBlur={handleTextEnter}\n            />\n            {description ? <p className='select-text-description'>{description}</p> : undefined}\n        </>\n    );\n};\n\nexport default SelectTextInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport SelectTextInput, {type SelectTextInputOption} from 'components/common/select_text_input/select_text_input';\nimport CheckboxSettingItem from 'components/widgets/modals/components/checkbox_setting_item';\nimport {type SaveChangesPanelState} from 'components/widgets/modals/components/save_changes_panel';\n\ntype Props = {\n    allowedDomains: string[];\n    setAllowedDomains: (domains: string[]) => void;\n    setHasChanges: (hasChanges: boolean) => void;\n    setSaveChangesPanelState: (state: SaveChangesPanelState) => void;\n}\n\nconst AllowedDomainsSelect = ({allowedDomains, setAllowedDomains, setHasChanges, setSaveChangesPanelState}: Props) => {\n    const [showAllowedDomains, setShowAllowedDomains] = useState<boolean>(allowedDomains.length > 0);\n    const {formatMessage} = useIntl();\n\n    const handleEnableAllowedDomains = useCallback((enabled: boolean) => {\n        setShowAllowedDomains(enabled);\n        if (!enabled) {\n            setAllowedDomains([]);\n        }\n    }, [setAllowedDomains]);\n\n    const updateAllowedDomains = useCallback((domain: string) => {\n        setHasChanges(true);\n        setSaveChangesPanelState('editing');\n        setAllowedDomains([...allowedDomains, domain]);\n    }, [allowedDomains, setAllowedDomains, setHasChanges, setSaveChangesPanelState]);\n\n    const handleOnChangeDomains = useCallback((allowedDomainsOptions?: SelectTextInputOption[] | null) => {\n        setHasChanges(true);\n        setSaveChangesPanelState('editing');\n        setAllowedDomains(allowedDomainsOptions?.map((domain) => domain.value) || []);\n    }, [setAllowedDomains, setHasChanges, setSaveChangesPanelState]);\n\n    return (\n        <>\n            <CheckboxSettingItem\n                inputFieldTitle={\n                    <FormattedMessage\n                        id='general_tab.allowedDomains'\n                        defaultMessage='Allow only users with a specific email domain to join this team'\n                    />\n                }\n                data-testid='allowedDomainsCheckbox'\n                className='access-allowed-domains-section'\n                title={formatMessage({\n                    id: 'general_tab.AllowedDomainsTitle',\n                    defaultMessage: 'Users with a specific email domain',\n                })}\n                description={formatMessage({\n                    id: 'general_tab.AllowedDomainsInfo',\n                    defaultMessage: 'When enabled, users can only join the team if their email matches a specific domain (e.g. \"mattermost.org\")',\n                })}\n                descriptionAboveContent={true}\n                inputFieldData={{name: 'showAllowedDomains'}}\n                inputFieldValue={showAllowedDomains}\n                handleChange={handleEnableAllowedDomains}\n            />\n            {showAllowedDomains &&\n            <SelectTextInput\n                id='allowedDomains'\n                placeholder={formatMessage({id: 'general_tab.AllowedDomainsExample', defaultMessage: 'corp.mattermost.com, mattermost.com'})}\n                aria-label={formatMessage({id: 'general_tab.allowedDomains.ariaLabel', defaultMessage: 'Allowed Domains'})}\n                value={allowedDomains}\n                onChange={handleOnChangeDomains}\n                handleNewSelection={updateAllowedDomains}\n                isClearable={false}\n                description={formatMessage({id: 'general_tab.AllowedDomainsTip', defaultMessage: 'Seperate multiple domains with a space, comma, tab or enter.'})}\n            />\n            }\n        </>\n    );\n};\n\nexport default AllowedDomainsSelect;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState, useEffect} from 'react';\nimport {defineMessages, useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {RefreshIcon} from '@mattermost/compass-icons/components';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport Input from 'components/widgets/inputs/input/input';\nimport type {BaseSettingItemProps} from 'components/widgets/modals/components/base_setting_item';\nimport BaseSettingItem from 'components/widgets/modals/components/base_setting_item';\n\nimport type {GlobalState} from 'types/store';\n\nconst translations = defineMessages({\n    OpenInviteDescriptionError: {\n        id: 'team_settings.openInviteDescription.error',\n        defaultMessage: 'There was an error generating the invite code, please try again',\n    },\n});\n\ntype Props = {\n    regenerateTeamInviteId: (teamId: string) => Promise<ActionResult>;\n}\n\nconst InviteSectionInput = ({regenerateTeamInviteId}: Props) => {\n    const team = useSelector((state: GlobalState) => getCurrentTeam(state));\n    const canInviteTeamMembers = useSelector((state: GlobalState) => haveITeamPermission(state, team?.id || '', Permissions.INVITE_USER));\n    const [inviteId, setInviteId] = useState<Team['invite_id']>(team?.invite_id ?? '');\n    const [inviteIdError, setInviteIdError] = useState<BaseSettingItemProps['error'] | undefined>();\n    const {formatMessage} = useIntl();\n\n    useEffect(() => {\n        setInviteId(team?.invite_id || '');\n    }, [team?.invite_id]);\n\n    const handleRegenerateInviteId = useCallback(async () => {\n        const {data, error} = await regenerateTeamInviteId(team?.id || '');\n\n        if (data?.invite_id) {\n            setInviteId(data.invite_id);\n            return;\n        }\n\n        if (error) {\n            setInviteIdError(translations.OpenInviteDescriptionError);\n        }\n    }, [regenerateTeamInviteId, team?.id]);\n\n    if (!canInviteTeamMembers) {\n        return null;\n    }\n    const inviteSectionInput = (\n        <div\n            data-testid='teamInviteContainer'\n            id='teamInviteContainer'\n        >\n            <Input\n                id='teamInviteId'\n                type='text'\n                value={inviteId}\n                maxLength={32}\n            />\n            <button\n                data-testid='regenerateButton'\n                id='regenerateButton'\n                className='btn btn-tertiary'\n                onClick={handleRegenerateInviteId}\n            >\n                <RefreshIcon/>\n                {formatMessage({id: 'general_tab.regenerate', defaultMessage: 'Regenerate'})}\n            </button>\n        </div>\n    );\n\n    return (\n        <BaseSettingItem\n            className='access-invite-section'\n            title={formatMessage({\n                id: 'general_tab.codeTitle',\n                defaultMessage: 'Invite Code',\n            })}\n            description={formatMessage({\n                id: 'general_tab.codeLongDesc',\n                defaultMessage: 'The Invite Code is part of the unique team invitation link which is sent to members you’re inviting to this team. Regenerating the code creates a new invitation link and invalidates the previous link.',\n\n            })}\n            content={inviteSectionInput}\n            error={inviteIdError}\n            descriptionAboveContent={true}\n        />\n    );\n};\n\nexport default InviteSectionInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport ExternalLink from 'components/external_link';\nimport BaseSettingItem from 'components/widgets/modals/components/base_setting_item';\nimport CheckboxSettingItem from 'components/widgets/modals/components/checkbox_setting_item';\n\ntype Props = {\n    allowOpenInvite: boolean;\n    isGroupConstrained?: boolean;\n    setAllowOpenInvite: (value: boolean) => void;\n};\n\nconst OpenInvite = ({isGroupConstrained, allowOpenInvite, setAllowOpenInvite}: Props) => {\n    const {formatMessage} = useIntl();\n    if (isGroupConstrained) {\n        const groupConstrainedContent = (\n            <p id='groupConstrainedContent' >{\n                formatMessage({\n                    id: 'team_settings.openInviteDescription.groupConstrained',\n                    defaultMessage: 'Members of this team are added and removed by linked groups. <link>Learn More</link>',\n                }, {\n                    link: (msg: React.ReactNode) => (\n                        <ExternalLink\n                            href='https://mattermost.com/pl/default-ldap-group-constrained-team-channel.html'\n                            location='open_invite'\n                        >\n                            {msg}\n                        </ExternalLink>\n                    ),\n                })}\n            </p>\n        );\n        return (\n            <BaseSettingItem\n                className='access-invite-domains-section'\n                title={formatMessage({\n                    id: 'general_tab.openInviteText',\n                    defaultMessage: 'Users on this server',\n                })}\n                description={formatMessage({\n                    id: 'general_tab.openInviteDesc',\n                    defaultMessage: 'When enabled, a link to this team will be included on the landing page allowing anyone with an account to join this team. Changing this setting will create a new invitation link and invalidate the previous link.',\n                })}\n                descriptionAboveContent={true}\n                content={groupConstrainedContent}\n            />\n        );\n    }\n\n    return (\n        <CheckboxSettingItem\n            className='access-invite-domains-section'\n            inputFieldTitle={\n                <FormattedMessage\n                    id='general_tab.openInviteTitle'\n                    defaultMessage='Allow any user with an account on this server to join this team'\n                />\n            }\n            inputFieldData={{name: 'allowOpenInvite'}}\n            inputFieldValue={allowOpenInvite}\n            handleChange={setAllowOpenInvite}\n            title={formatMessage({\n                id: 'general_tab.openInviteText',\n                defaultMessage: 'Users on this server',\n            })}\n            description={formatMessage({\n                id: 'general_tab.openInviteDesc',\n                defaultMessage: 'When enabled, a link to this team will be included on the landing page allowing anyone with an account to join this team. Changing this setting will create a new invitation link and invalidate the previous link.',\n            })}\n            descriptionAboveContent={true}\n        />\n    );\n};\n\nexport default OpenInvite;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport ModalSection from 'components/widgets/modals/components/modal_section';\nimport SaveChangesPanel, {type SaveChangesPanelState} from 'components/widgets/modals/components/save_changes_panel';\n\nimport AllowedDomainsSelect from './allowed_domains_select';\nimport InviteSectionInput from './invite_section_input';\nimport OpenInvite from './open_invite';\n\nimport type {PropsFromRedux, OwnProps} from '.';\n\nimport './team_access_tab.scss';\n\nconst generateAllowedDomainOptions = (allowedDomains?: string) => {\n    if (!allowedDomains || allowedDomains.length === 0) {\n        return [];\n    }\n    const domainList = allowedDomains.includes(',') ? allowedDomains.split(',') : [allowedDomains];\n    return domainList.map((domain) => domain.trim());\n};\n\ntype Props = PropsFromRedux & OwnProps;\n\nconst AccessTab = ({closeModal, collapseModal, hasChangeTabError, hasChanges, setHasChangeTabError, setHasChanges, team, actions}: Props) => {\n    const [allowedDomains, setAllowedDomains] = useState<string[]>(() => generateAllowedDomainOptions(team.allowed_domains));\n    const [allowOpenInvite, setAllowOpenInvite] = useState<boolean>(team.allow_open_invite ?? false);\n    const [saveChangesPanelState, setSaveChangesPanelState] = useState<SaveChangesPanelState>();\n    const {formatMessage} = useIntl();\n\n    const handleAllowedDomainsSubmit = useCallback(async (): Promise<boolean> => {\n        const {error} = await actions.patchTeam({\n            id: team.id,\n            allowed_domains: allowedDomains.length === 1 ? allowedDomains[0] : allowedDomains.join(', '),\n        });\n        if (error) {\n            return false;\n        }\n        return true;\n    }, [actions, allowedDomains, team]);\n\n    const handleOpenInviteSubmit = useCallback(async (): Promise<boolean> => {\n        if (allowOpenInvite === team.allow_open_invite) {\n            return true;\n        }\n        const data = {\n            id: team.id,\n            allow_open_invite: allowOpenInvite,\n        };\n\n        const {error} = await actions.patchTeam(data);\n        if (error) {\n            return false;\n        }\n        return true;\n    }, [actions, allowOpenInvite, team]);\n\n    const updateOpenInvite = useCallback((value: boolean) => {\n        setHasChanges(true);\n        setSaveChangesPanelState('editing');\n        setAllowOpenInvite(value);\n    }, [setHasChanges]);\n\n    const handleClose = useCallback(() => {\n        setSaveChangesPanelState('editing');\n        setHasChanges(false);\n        setHasChangeTabError(false);\n    }, [setHasChangeTabError, setHasChanges]);\n\n    const handleCancel = useCallback(() => {\n        setAllowedDomains(generateAllowedDomainOptions(team.allowed_domains));\n        setAllowOpenInvite(team.allow_open_invite ?? false);\n        handleClose();\n    }, [handleClose, team.allow_open_invite, team.allowed_domains]);\n\n    const collapseModalHandler = useCallback(() => {\n        if (hasChanges) {\n            setHasChangeTabError(true);\n            return;\n        }\n        collapseModal();\n    }, [collapseModal, hasChanges, setHasChangeTabError]);\n\n    const handleSaveChanges = useCallback(async () => {\n        const allowedDomainSuccess = await handleAllowedDomainsSubmit();\n        const openInviteSuccess = await handleOpenInviteSubmit();\n        if (!allowedDomainSuccess || !openInviteSuccess) {\n            setSaveChangesPanelState('error');\n            return;\n        }\n        setSaveChangesPanelState('saved');\n        setHasChangeTabError(false);\n    }, [handleAllowedDomainsSubmit, handleOpenInviteSubmit, setHasChangeTabError]);\n\n    return (\n        <ModalSection\n            content={\n                <>\n                    <div className='modal-header'>\n                        <button\n                            id='closeButton'\n                            type='button'\n                            className='close'\n                            data-dismiss='modal'\n                            onClick={closeModal}\n                        >\n                            <span aria-hidden='true'>{'×'}</span>\n                        </button>\n                        <h4 className='modal-title'>\n                            <div className='modal-back'>\n                                <i\n                                    className='fa fa-angle-left'\n                                    aria-label={formatMessage({\n                                        id: 'generic_icons.collapse',\n                                        defaultMessage: 'Collapes Icon',\n                                    })}\n                                    onClick={collapseModalHandler}\n                                />\n                            </div>\n                            <span>{formatMessage({id: 'team_settings_modal.title', defaultMessage: 'Team Settings'})}</span>\n                        </h4>\n                    </div>\n                    <div\n                        className='modal-access-tab-content user-settings'\n                        id='accessSettings'\n                        aria-labelledby='accessButton'\n                        role='tabpanel'\n                    >\n                        {team.group_constrained ?\n                            undefined :\n                            <AllowedDomainsSelect\n                                allowedDomains={allowedDomains}\n                                setAllowedDomains={setAllowedDomains}\n                                setHasChanges={setHasChanges}\n                                setSaveChangesPanelState={setSaveChangesPanelState}\n                            />\n                        }\n                        <div className='divider-light'/>\n                        <OpenInvite\n                            isGroupConstrained={team.group_constrained}\n                            allowOpenInvite={allowOpenInvite}\n                            setAllowOpenInvite={updateOpenInvite}\n                        />\n                        <div className='divider-light'/>\n                        {team.group_constrained ?\n                            undefined :\n                            <InviteSectionInput regenerateTeamInviteId={actions.regenerateTeamInviteId}/>\n                        }\n                        {hasChanges ?\n                            <SaveChangesPanel\n                                handleCancel={handleCancel}\n                                handleSubmit={handleSaveChanges}\n                                handleClose={handleClose}\n                                tabChangeError={hasChangeTabError}\n                                state={saveChangesPanelState}\n                            /> : undefined}\n                    </div>\n                </>\n            }\n        />\n    );\n};\nexport default AccessTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {patchTeam, regenerateTeamInviteId} from 'mattermost-redux/actions/teams';\n\nimport TeamAccessTab from './team_access_tab';\n\nexport type OwnProps = {\n    team: Team;\n    hasChanges: boolean;\n    hasChangeTabError: boolean;\n    setHasChanges: (hasChanges: boolean) => void;\n    setHasChangeTabError: (hasChangesError: boolean) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            patchTeam,\n            regenerateTeamInviteId,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(TeamAccessTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport type {ChangeEvent} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport Input from 'components/widgets/inputs/input/input';\nimport BaseSettingItem, {type BaseSettingItemProps} from 'components/widgets/modals/components/base_setting_item';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    handleDescriptionChanges: (name: string) => void;\n    description: Team['description'];\n    clientError?: BaseSettingItemProps['error'];\n};\n\nconst TeamDescriptionSection = ({handleDescriptionChanges, clientError, description}: Props) => {\n    const {formatMessage} = useIntl();\n\n    const updateDescription = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        handleDescriptionChanges(e.target.value);\n    }, [handleDescriptionChanges]);\n\n    const descriptionSectionInput = (\n        <Input\n            id='teamDescription'\n            data-testid='teamDescriptionInput'\n            containerClassName='description-section-input'\n            type='textarea'\n            maxLength={Constants.MAX_TEAMDESCRIPTION_LENGTH}\n            onChange={updateDescription}\n            value={description}\n            label={formatMessage({id: 'general_tab.teamDescription', defaultMessage: 'Description'})}\n        />\n    );\n\n    return (\n        <BaseSettingItem\n            description={formatMessage({\n                id: 'general_tab.teamDescriptionInfo',\n                defaultMessage: 'Team description provides additional information to help users select the right team. Maximum of 50 characters.',\n            })}\n            content={descriptionSectionInput}\n            className='description-setting-item'\n            error={clientError}\n        />\n    );\n};\n\nexport default TeamDescriptionSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport type {ChangeEvent} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport Input from 'components/widgets/inputs/input/input';\nimport BaseSettingItem, {type BaseSettingItemProps} from 'components/widgets/modals/components/base_setting_item';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    handleNameChanges: (name: string) => void;\n    name: Team['display_name'];\n    clientError: BaseSettingItemProps['error'];\n};\n\nconst TeamNameSection = ({clientError, handleNameChanges, name}: Props) => {\n    const {formatMessage} = useIntl();\n\n    const updateName = useCallback((e: ChangeEvent<HTMLInputElement>) => handleNameChanges(e.target.value), [handleNameChanges]);\n\n    const nameSectionInput = (\n        <Input\n            id='teamName'\n            data-testid='teamNameInput'\n            type='text'\n            maxLength={Constants.MAX_TEAMNAME_LENGTH}\n            onChange={updateName}\n            value={name}\n            label={formatMessage({id: 'general_tab.teamName', defaultMessage: 'Team Name'})}\n        />\n    );\n\n    return (\n        <BaseSettingItem\n            title={formatMessage({\n                id: 'general_tab.teamInfo',\n                defaultMessage: 'Team info',\n            })}\n            description={formatMessage({\n                id: 'general_tab.teamNameInfo',\n                defaultMessage: 'This name will appear on your sign-in screen and at the top of the left sidebar.',\n            })}\n            content={nameSectionInput}\n            error={clientError}\n        />\n    );\n};\n\nexport default TeamNameSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ChangeEvent, useRef, useState, useEffect, useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {TrashCanOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Team} from '@mattermost/types/teams';\n\nimport EditIcon from 'components/widgets/icons/fa_edit_icon';\nimport BaseSettingItem from 'components/widgets/modals/components/base_setting_item';\nimport type {BaseSettingItemProps} from 'components/widgets/modals/components/base_setting_item';\n\nimport Constants from 'utils/constants';\nimport * as FileUtils from 'utils/file_utils';\nimport {imageURLForTeam} from 'utils/utils';\n\nimport './team_picture_section.scss';\n\ntype Props = {\n    team: Team;\n    file?: File | null;\n    teamName: string;\n    disabled: boolean;\n    onFileChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    onRemove: () => void;\n    clientError?: BaseSettingItemProps['error'];\n};\n\nconst TeamPictureSection = ({team, file, teamName, disabled, onFileChange, onRemove, clientError}: Props) => {\n    const selectInput = useRef<HTMLInputElement>(null);\n    const [image, setImage] = useState<string>('');\n    const [orientationStyles, setOrientationStyles] = useState<{transform: string; transformOrigin: string}>();\n    const {formatMessage} = useIntl();\n\n    const teamImageSource = imageURLForTeam(team);\n\n    const handleInputFile = useCallback(() => {\n        if (selectInput.current) {\n            selectInput.current.value = '';\n            selectInput.current.click();\n        }\n    }, []);\n\n    const editIcon = () => {\n        return (\n            <>\n                <input\n                    data-testid='uploadPicture'\n                    ref={selectInput}\n                    className='hidden'\n                    accept={Constants.ACCEPT_STATIC_IMAGE}\n                    disabled={disabled}\n                    type='file'\n                    onChange={onFileChange}\n                    aria-hidden={true}\n                    tabIndex={-1}\n                />\n                <span\n                    disabled={disabled}\n                    onClick={handleInputFile}\n                >\n                    <EditIcon/>\n                </span>\n            </>\n        );\n    };\n\n    const teamImage = () => {\n        if (file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + image + ')',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'round',\n                ...orientationStyles,\n            };\n\n            return (\n                <div\n                    id='teamIconImage'\n                    style={imageStyles}\n                    className='team-img-preview'\n                    onClick={handleInputFile}\n                />\n            );\n        }\n        if (teamImageSource) {\n            return (\n                <img\n                    id='teamIconImage'\n                    className='team-img-preview'\n                    src={teamImageSource}\n                    onClick={handleInputFile}\n                />\n            );\n        }\n        return (\n            <div className='team-picture-section__team-icon' >\n                <span\n                    id='teamIconInitial'\n                    onClick={handleInputFile}\n                    className='team-picture-section__team-name'\n                >{teamName.charAt(0).toUpperCase() + teamName.charAt(1)}</span>\n            </div>\n        );\n    };\n\n    const setPicture = (file: File) => {\n        if (file) {\n            const previewBlob = URL.createObjectURL(file);\n\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target!.result! as ArrayBuffer);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                setImage(previewBlob);\n                setOrientationStyles(orientationStyles);\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    };\n\n    useEffect(() => {\n        if (file) {\n            setPicture(file);\n        }\n    }, [file]);\n\n    const removeImageButton = () => {\n        if (file || teamImageSource) {\n            return (\n                <button\n                    onClick={onRemove}\n                    data-testid='removeImageButton'\n                    className='style--none picture-setting-item__remove-button'\n                >\n                    <TrashCanOutlineIcon/>\n                    {formatMessage({id: 'setting_picture.remove_image', defaultMessage: 'Remove image'})}\n                </button>\n            );\n        }\n\n        return null;\n    };\n\n    const teamPictureSection = (\n        <>\n            <div className='team-picture-section' >\n                {teamImage()}\n                {editIcon()}\n            </div>\n            {removeImageButton()}\n        </>\n    );\n\n    return (\n        <BaseSettingItem\n            title={formatMessage({\n                id: 'setting_picture.title',\n                defaultMessage: 'Team Icon',\n            })}\n            description={teamImageSource ? undefined : formatMessage(\n                {\n                    id: 'setting_picture.help.profile',\n                    defaultMessage: 'Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}',\n                },\n                {\n                    max: '50MB',\n                },\n            )}\n            content={teamPictureSection}\n            className='picture-setting-item'\n            error={clientError}\n        />\n    );\n};\n\nexport default TeamPictureSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport type {ChangeEvent} from 'react';\nimport {defineMessages, useIntl} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {BaseSettingItemProps} from 'components/widgets/modals/components/base_setting_item';\nimport ModalSection from 'components/widgets/modals/components/modal_section';\nimport SaveChangesPanel, {type SaveChangesPanelState} from 'components/widgets/modals/components/save_changes_panel';\n\nimport Constants from 'utils/constants';\n\nimport TeamDescriptionSection from './team_description_section';\nimport TeamNameSection from './team_name_section';\nimport TeamPictureSection from './team_picture_section';\n\nimport type {PropsFromRedux, OwnProps} from '.';\n\nimport './team_info_tab.scss';\n\nconst ACCEPTED_TEAM_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];\nconst translations = defineMessages({\n    Required: {\n        id: 'general_tab.required',\n        defaultMessage: 'This field is required',\n    },\n    TeamNameRestrictions: {\n        id: 'general_tab.teamNameRestrictions',\n        defaultMessage: 'Team Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description.',\n        values: {min: Constants.MIN_TEAMNAME_LENGTH, max: Constants.MAX_TEAMNAME_LENGTH},\n    },\n    TeamIconInvalidFileType: {\n        id: 'general_tab.teamIconInvalidFileType',\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for team icons',\n    },\n    TeamIconTooLarge: {\n        id: 'general_tab.teamIconTooLarge',\n        defaultMessage: 'Unable to upload team icon. File is too large.',\n    },\n    TeamIconError: {\n        id: 'general_tab.teamIconError',\n        defaultMessage: 'An error occurred while selecting the image.',\n    },\n});\ntype Props = PropsFromRedux & OwnProps;\n\nconst InfoTab = ({team, hasChanges, maxFileSize, closeModal, collapseModal, hasChangeTabError, setHasChangeTabError, setHasChanges, actions}: Props) => {\n    const [name, setName] = useState<Team['display_name']>(team.display_name);\n    const [description, setDescription] = useState<Team['description']>(team.description);\n    const [teamIconFile, setTeamIconFile] = useState<File | undefined>();\n    const [loading, setLoading] = useState<boolean>(false);\n    const [imageClientError, setImageClientError] = useState<BaseSettingItemProps['error'] | undefined>();\n    const [nameClientError, setNameClientError] = useState<BaseSettingItemProps['error'] | undefined>();\n    const [saveChangesPanelState, setSaveChangesPanelState] = useState<SaveChangesPanelState>();\n    const {formatMessage} = useIntl();\n\n    const handleNameDescriptionSubmit = useCallback(async (): Promise<boolean> => {\n        if (name.trim() === team.display_name && description === team.description) {\n            return true;\n        }\n\n        if (!name) {\n            setNameClientError(translations.Required);\n            return false;\n        } else if (name.length < Constants.MIN_TEAMNAME_LENGTH) {\n            setNameClientError(translations.TeamNameRestrictions);\n            return false;\n        }\n        setNameClientError(undefined);\n        const {error} = await actions.patchTeam({id: team.id, display_name: name, description});\n        if (error) {\n            return false;\n        }\n        return true;\n    }, [actions, description, name, team.description, team.display_name, team.id]);\n\n    const handleTeamIconSubmit = useCallback(async (): Promise<boolean> => {\n        if (!teamIconFile) {\n            return true;\n        }\n        setLoading(true);\n        setImageClientError(undefined);\n        const {error} = await actions.setTeamIcon(team.id, teamIconFile);\n        setLoading(false);\n        if (error) {\n            return false;\n        }\n        return true;\n    }, [actions, team, teamIconFile]);\n\n    const handleSaveChanges = useCallback(async () => {\n        const nameDescriptionSuccess = await handleNameDescriptionSubmit();\n        const teamIconSuccess = await handleTeamIconSubmit();\n        if (!teamIconSuccess || !nameDescriptionSuccess) {\n            setSaveChangesPanelState('error');\n            return;\n        }\n        setSaveChangesPanelState('saved');\n        setHasChangeTabError(false);\n    }, [handleNameDescriptionSubmit, handleTeamIconSubmit, setHasChangeTabError]);\n\n    const handleClose = useCallback(() => {\n        setSaveChangesPanelState('editing');\n        setHasChanges(false);\n        setHasChangeTabError(false);\n    }, [setHasChangeTabError, setHasChanges]);\n\n    const handleCancel = useCallback(() => {\n        setName(team.display_name ?? team.name);\n        setDescription(team.description);\n        setTeamIconFile(undefined);\n        setImageClientError(undefined);\n        setNameClientError(undefined);\n        handleClose();\n    }, [handleClose, team.description, team.display_name, team.name]);\n\n    const handleTeamIconRemove = useCallback(async () => {\n        setLoading(true);\n        setImageClientError(undefined);\n        setTeamIconFile(undefined);\n        handleClose();\n\n        const {error} = await actions.removeTeamIcon(team.id);\n        setLoading(false);\n        if (error) {\n            setSaveChangesPanelState('error');\n            setHasChanges(true);\n            setHasChangeTabError(true);\n        }\n    }, [actions, handleClose, setHasChangeTabError, setHasChanges, team.id]);\n\n    const updateTeamIcon = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e && e.target && e.target.files && e.target.files[0]) {\n            const file = e.target.files[0];\n\n            if (!ACCEPTED_TEAM_IMAGE_TYPES.includes(file.type)) {\n                setImageClientError(translations.TeamIconInvalidFileType);\n            } else if (file.size > maxFileSize) {\n                setImageClientError(translations.TeamIconTooLarge);\n            } else {\n                setTeamIconFile(file);\n                setImageClientError(undefined);\n                setSaveChangesPanelState('editing');\n                setHasChanges(true);\n            }\n        } else {\n            setTeamIconFile(undefined);\n            setImageClientError(translations.TeamIconError);\n        }\n    }, [maxFileSize, setHasChanges]);\n\n    const handleNameChanges = useCallback((name: string) => {\n        setHasChanges(true);\n        setSaveChangesPanelState('editing');\n        setName(name);\n    }, [setHasChanges]);\n\n    const handleDescriptionChanges = useCallback((description: string) => {\n        setHasChanges(true);\n        setSaveChangesPanelState('editing');\n        setDescription(description);\n    }, [setHasChanges]);\n\n    const handleCollapseModal = useCallback(() => {\n        if (hasChanges) {\n            setHasChangeTabError(true);\n            return;\n        }\n        collapseModal();\n    }, [collapseModal, hasChanges, setHasChangeTabError]);\n\n    const modalSectionContent = (\n        <>\n            <div className='modal-header'>\n                <button\n                    id='closeButton'\n                    type='button'\n                    className='close'\n                    data-dismiss='modal'\n                    onClick={closeModal}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                </button>\n                <h4 className='modal-title'>\n                    <div className='modal-back'>\n                        <i\n                            className='fa fa-angle-left'\n                            aria-label={formatMessage({\n                                id: 'generic_icons.collapse',\n                                defaultMessage: 'Collapes Icon',\n                            })}\n                            onClick={handleCollapseModal}\n                        />\n                    </div>\n                    <span>{formatMessage({id: 'team_settings_modal.title', defaultMessage: 'Team Settings'})}</span>\n                </h4>\n            </div>\n            <div\n                className='modal-info-tab-content user-settings'\n                id='infoSettings'\n                aria-labelledby='infoButton'\n                role='tabpanel'\n            >\n                <div className='name-description-container' >\n                    <TeamNameSection\n                        name={name}\n                        clientError={nameClientError}\n                        handleNameChanges={handleNameChanges}\n                    />\n                    <TeamDescriptionSection\n                        description={description}\n                        handleDescriptionChanges={handleDescriptionChanges}\n                    />\n                </div>\n                <TeamPictureSection\n                    team={team}\n                    file={teamIconFile}\n                    disabled={loading}\n                    onFileChange={updateTeamIcon}\n                    onRemove={handleTeamIconRemove}\n                    teamName={team.display_name ?? team.name}\n                    clientError={imageClientError}\n                />\n                {hasChanges ?\n                    <SaveChangesPanel\n                        handleCancel={handleCancel}\n                        handleSubmit={handleSaveChanges}\n                        handleClose={handleClose}\n                        tabChangeError={hasChangeTabError}\n                        state={saveChangesPanelState}\n                    /> : undefined}\n            </div>\n        </>\n    );\n\n    return <ModalSection content={modalSectionContent}/>;\n};\nexport default InfoTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {getTeam, patchTeam, removeTeamIcon, setTeamIcon} from 'mattermost-redux/actions/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store/index';\n\nimport TeamInfoTab from './team_info_tab';\n\nexport type OwnProps = {\n    team: Team;\n    hasChanges: boolean;\n    hasChangeTabError: boolean;\n    setHasChanges: (hasChanges: boolean) => void;\n    setHasChangeTabError: (hasChangesError: boolean) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const maxFileSize = parseInt(config.MaxFileSize ?? '', 10);\n\n    return {\n        maxFileSize,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeam,\n            patchTeam,\n            removeTeamIcon,\n            setTeamIcon,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(TeamInfoTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport AccessTab from './team_access_tab';\nimport InfoTab from './team_info_tab';\n\ntype Props = {\n    activeTab: string;\n    hasChanges: boolean;\n    hasChangeTabError: boolean;\n    setHasChanges: (hasChanges: boolean) => void;\n    setHasChangeTabError: (hasChangesError: boolean) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    team?: Team;\n};\n\nconst TeamSettings = ({\n    activeTab = '',\n    closeModal,\n    collapseModal,\n    team,\n    hasChanges,\n    hasChangeTabError,\n    setHasChanges,\n    setHasChangeTabError,\n}: Props) => {\n    if (!team) {\n        return null;\n    }\n\n    let result;\n    switch (activeTab) {\n    case 'info':\n        result = (\n            <InfoTab\n                team={team}\n                hasChanges={hasChanges}\n                setHasChanges={setHasChanges}\n                hasChangeTabError={hasChangeTabError}\n                setHasChangeTabError={setHasChangeTabError}\n                closeModal={closeModal}\n                collapseModal={collapseModal}\n            />\n        );\n        break;\n    case 'access':\n        result = (\n            <AccessTab\n                team={team}\n                hasChanges={hasChanges}\n                setHasChanges={setHasChanges}\n                hasChangeTabError={hasChangeTabError}\n                setHasChangeTabError={setHasChangeTabError}\n                closeModal={closeModal}\n                collapseModal={collapseModal}\n            />\n        );\n        break;\n    default:\n        result = (\n            <div/>\n        );\n        break;\n    }\n\n    return result;\n};\n\nexport default TeamSettings;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamSettings from './team_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        team: getCurrentTeam(state),\n    };\n}\n\nexport default connect(mapStateToProps)(TeamSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState, useRef, useCallback} from 'react';\nimport {Modal, type ModalBody} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {useIntl} from 'react-intl';\n\nimport TeamSettings from 'components/team_settings';\n\nimport {focusElement} from 'utils/a11y_utils';\n\nconst SettingsSidebar = React.lazy(() => import('components/settings_sidebar'));\n\ntype Props = {\n    onExited: () => void;\n    canInviteUsers: boolean;\n    focusOriginElement?: string;\n}\n\nconst TeamSettingsModal = ({onExited, canInviteUsers, focusOriginElement}: Props) => {\n    const [activeTab, setActiveTab] = useState('info');\n    const [show, setShow] = useState<boolean>(true);\n    const [hasChanges, setHasChanges] = useState<boolean>(false);\n    const [hasChangeTabError, setHasChangeTabError] = useState<boolean>(false);\n    const modalBodyRef = useRef<ModalBody>(null);\n    const {formatMessage} = useIntl();\n\n    const updateTab = useCallback((tab: string) => {\n        if (hasChanges) {\n            setHasChangeTabError(true);\n            return;\n        }\n        setActiveTab(tab);\n        setHasChanges(false);\n        setHasChangeTabError(false);\n    }, [hasChanges]);\n\n    const handleHide = useCallback(() => setShow(false), []);\n\n    const handleClose = useCallback(() => {\n        if (focusOriginElement) {\n            focusElement(focusOriginElement, true);\n        }\n        setActiveTab('info');\n        setHasChanges(false);\n        setHasChangeTabError(false);\n        onExited();\n    }, [onExited, focusOriginElement]);\n\n    const handleCollapse = useCallback(() => {\n        const el = ReactDOM.findDOMNode(modalBodyRef.current) as HTMLDivElement;\n        el?.closest('.modal-dialog')!.classList.remove('display--content');\n        setActiveTab('');\n    }, []);\n\n    const tabs = [\n        {name: 'info', uiName: formatMessage({id: 'team_settings_modal.infoTab', defaultMessage: 'Info'}), icon: 'icon icon-information-outline', iconTitle: formatMessage({id: 'generic_icons.info', defaultMessage: 'Info Icon'})},\n    ];\n    if (canInviteUsers) {\n        tabs.push({name: 'access', uiName: formatMessage({id: 'team_settings_modal.accessTab', defaultMessage: 'Access'}), icon: 'icon icon-account-multiple-outline', iconTitle: formatMessage({id: 'generic_icons.member', defaultMessage: 'Member Icon'})});\n    }\n\n    return (\n        <Modal\n            dialogClassName='a11y__modal settings-modal'\n            show={show}\n            onHide={handleHide}\n            onExited={handleClose}\n            role='none'\n            aria-labelledby='teamSettingsModalLabel'\n            id='teamSettingsModal'\n        >\n            <Modal.Header\n                id='teamSettingsModalLabel'\n                closeButton={true}\n            >\n                <Modal.Title\n                    componentClass='h2'\n                    className='modal-header__title'\n                >\n                    {formatMessage({id: 'team_settings_modal.title', defaultMessage: 'Team Settings'})}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body ref={modalBodyRef}>\n                <div className='settings-table'>\n                    <div className='settings-links'>\n                        <React.Suspense fallback={null}>\n                            <SettingsSidebar\n                                tabs={tabs}\n                                activeTab={activeTab}\n                                updateTab={updateTab}\n                            />\n                        </React.Suspense>\n                    </div>\n                    <div className='settings-content minimize-settings'>\n                        <TeamSettings\n                            activeTab={activeTab}\n                            hasChanges={hasChanges}\n                            setHasChanges={setHasChanges}\n                            hasChangeTabError={hasChangeTabError}\n                            setHasChangeTabError={setHasChangeTabError}\n                            closeModal={handleHide}\n                            collapseModal={handleCollapse}\n                        />\n                    </div>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default TeamSettingsModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport TeamSettingsModal from './team_settings_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const teamId = getCurrentTeamId(state);\n    const canInviteUsers = haveITeamPermission(state, teamId, Permissions.INVITE_USER);\n    const modalId = ModalIdentifiers.TEAM_SETTINGS;\n    return {\n        show: isModalOpen(state, modalId),\n        canInviteUsers,\n    };\n}\n\nexport default connect(mapStateToProps)(TeamSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function EditIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='icon-pencil-outline'\n            title={formatMessage({id: 'generic_icons.edit', defaultMessage: 'Edit Icon'})}\n        />\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {AlertCircleOutlineIcon} from '@mattermost/compass-icons/components';\n\nimport './save_changes_panel.scss';\n\nexport type SaveChangesPanelState = 'editing' | 'saved' | 'error' | undefined;\n\nconst CLOSE_TIMEOUT = 1200;\n\ntype Props = {\n    handleSubmit: () => void;\n    handleCancel: () => void;\n    handleClose: () => void;\n    tabChangeError?: boolean;\n    state: SaveChangesPanelState;\n    customErrorMessage?: string;\n    saveButtonText?: React.ReactNode;\n    cancelButtonText?: React.ReactNode;\n}\nfunction SaveChangesPanel({\n    handleSubmit,\n    handleCancel,\n    handleClose,\n    tabChangeError = false,\n    state = 'editing',\n    customErrorMessage,\n    saveButtonText,\n    cancelButtonText,\n}: Props) {\n    const panelClassName = classNames('SaveChangesPanel', {error: tabChangeError || state === 'error'}, {saved: state === 'saved'});\n    const messageClassName = classNames('SaveChangesPanel__message', {error: tabChangeError || state === 'error'}, {saved: state === 'saved'});\n    const cancelButtonClassName = classNames('SaveChangesPanel__cancel-btn', {error: tabChangeError || state === 'error'}, {saved: state === 'saved'});\n    const saveButtonClassName = classNames('SaveChangesPanel__save-btn', {error: tabChangeError || state === 'error'}, {saved: state === 'saved'});\n\n    useEffect(() => {\n        let timeoutId: NodeJS.Timeout;\n        if (state === 'saved') {\n            timeoutId = setTimeout(() => {\n                handleClose();\n            }, CLOSE_TIMEOUT);\n        }\n\n        return () => clearTimeout(timeoutId);\n    }, [handleClose, state]);\n\n    const generateMessage = () => {\n        if (customErrorMessage && (tabChangeError || state === 'error')) {\n            return customErrorMessage;\n        }\n\n        if (tabChangeError || state === 'editing') {\n            return (\n                <FormattedMessage\n                    id='saveChangesPanel.message'\n                    defaultMessage='You have unsaved changes'\n                />\n            );\n        }\n\n        if (state === 'error') {\n            return (\n                <FormattedMessage\n                    id='saveChangesPanel.error'\n                    defaultMessage='There was an error saving your settings'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='saveChangesPanel.saved'\n                defaultMessage='Settings saved'\n            />\n        );\n    };\n\n    const generateControlButtons = () => {\n        if (state === 'saved') {\n            return (\n                <div className='SaveChangesPanel__btn-ctr'>\n                    <button\n                        id='panelCloseButton'\n                        data-testid='panelCloseButton'\n                        type='button'\n                        className='btn btn-icon btn-sm'\n                        onClick={handleClose}\n                    >\n                        <i\n                            className='icon icon-close'\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        const saveButtonDisabled = tabChangeError || state === 'error';\n\n        return (\n            <div className='SaveChangesPanel__btn-ctr'>\n                <button\n                    data-testid='SaveChangesPanel__cancel-btn'\n                    className={cancelButtonClassName}\n                    onClick={handleCancel}\n                >\n                    {cancelButtonText || (\n                        <FormattedMessage\n                            id='saveChangesPanel.cancel'\n                            defaultMessage='Undo'\n                        />\n                    )}\n                </button>\n                <button\n                    data-testid='SaveChangesPanel__save-btn'\n                    className={saveButtonClassName}\n                    onClick={handleSubmit}\n                    disabled={saveButtonDisabled}\n                >\n                    {saveButtonText || (\n                        <FormattedMessage\n                            id='saveChangesPanel.save'\n                            defaultMessage='Save'\n                        />\n                    )}\n                </button>\n            </div>\n        );\n    };\n\n    return (\n        <div className={panelClassName}>\n            <p className={messageClassName}>\n                <AlertCircleOutlineIcon\n                    size={18}\n                    color={'currentcolor'}\n                />\n                {generateMessage()}\n            </p>\n            {generateControlButtons()}\n        </div>\n    );\n}\nexport default SaveChangesPanel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChannelBookmarksState} from '@mattermost/types/channel_bookmarks';\nimport type {GlobalState} from '@mattermost/types/store';\n\nconst EMPTY_BOOKMARKS = {};\n\nexport const getChannelBookmarks = (state: GlobalState, channelId: string): ChannelBookmarksState['byChannelId'][string] => {\n    const bookmarks = state.entities.channelBookmarks.byChannelId[channelId];\n\n    if (!bookmarks) {\n        return EMPTY_BOOKMARKS;\n    }\n\n    return bookmarks;\n};\n\nexport const getChannelBookmark = (state: GlobalState, channelId: string, bookmarkId: string) => {\n    return getChannelBookmarks(state, channelId)[bookmarkId];\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    isCollapsedThreadsEnabled,\n} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {makeGetDraftsCount} from 'selectors/drafts';\n\nimport type {SidebarSize} from 'components/resizable_sidebar/constants';\n\nimport type {GlobalState} from 'types/store';\nimport type {StaticPage} from 'types/store/lhs';\n\nexport function getIsLhsOpen(state: GlobalState): boolean {\n    return state.views.lhs.isOpen;\n}\n\nexport function getLhsSize(state: GlobalState): SidebarSize {\n    return state.views.lhs.size;\n}\n\nexport function getCurrentStaticPageId(state: GlobalState): string {\n    return state.views.lhs.currentStaticPageId;\n}\n\nexport const getDraftsCount = makeGetDraftsCount();\n\nexport const getVisibleStaticPages = createSelector(\n    'getVisibleSidebarStaticPages',\n    isCollapsedThreadsEnabled,\n    getDraftsCount,\n    (collapsedThreadsEnabled, draftsCount) => {\n        const staticPages: StaticPage[] = [];\n\n        if (collapsedThreadsEnabled) {\n            staticPages.push({\n                id: 'threads',\n                isVisible: true,\n            });\n        }\n\n        staticPages.push({\n            id: 'drafts',\n            isVisible: draftsCount > 0,\n        });\n\n        return staticPages.filter((item) => item.isVisible);\n    },\n);\n"],"names":["deleteBookmark","channelId","id","dispatch","getState","state","connectionId","getConnectionId","async","bookmark","getChannelBookmark","Client4","deleteChannelBookmark","type","ChannelBookmarkTypes","BOOKMARK_DELETED","data","error","Actions","createBookmark","createdBookmark","createChannelBookmark","RECEIVED_BOOKMARK","editBookmark","patch","updated","deleted","updateChannelBookmark","reorderBookmark","newOrder","bookmarks","updateChannelBookmarkSortOrder","RECEIVED_BOOKMARKS","fetchChannelBookmarks","getChannelBookmarks","forceLogoutIfNecessary","logError","setUnreadFilterEnabled","enabled","ActionTypes","SET_UNREAD_FILTER_ENABLED","setDraggingState","SIDEBAR_DRAGGING_SET_STATE","stopDragging","SIDEBAR_DRAGGING_STOP","createCategory","teamId","displayName","channelIds","multiSelectedChannelIds","views","channelSidebar","forEach","indexOf","multiSelectChannelAdd","result","createCategoryRedux","ADD_NEW_CATEGORY_ID","addChannelsInSidebar","categoryId","moveChannelsInSidebar","targetIndex","draggableChannelId","setManualSorting","arguments","length","undefined","categories","getCategoriesForCurrentTeam","displayedChannels","getDisplayedChannels","channelsToMove","targetCategory","find","category","filter","selectedChannel","channel","isDMGM","General","DM_CHANNEL","GM_CHANNEL","CategoryTypes","CUSTOM","FAVORITES","DIRECT_MESSAGES","displayedChannelIds","map","sort","a","b","newIndex","getCategory","filteredChannelIds","makeGetChannelIdsForCategory","removedChannelsAboveInsert","index","shiftedIndex","channel_ids","updatedChannelIds","insertMultipleWithoutDuplicates","previousChannelId","sourceIndex","Math","max","adjustTargetIndexForMove","moveChannelsToCategory","clearChannelSelection","MULTISELECT_CHANNEL_CLEAR","currentChannel","getCurrentChannelId","MULTISELECT_CHANNEL","MULTISELECT_CHANNEL_ADD","multiSelectChannelTo","lastSelected","lastSelectedChannel","allChannelsIdsInOrder","getChannelsInCategoryOrder","indexOfNew","indexOfLast","start","min","end","inBetween","slice","MULTISELECT_CHANNEL_TO","SearchableChannelList","React","getDerivedStateFromProps","props","isSearch","page","constructor","super","_defineProperty","e","target","isEnterKeyPressed","isKeyPressed","Constants","KeyCodes","ENTER","shiftKey","ctrlKey","altKey","classList","contains","click","stopPropagation","this","setState","joiningChannel","handleJoin","isMemberOfChannel","closeModal","ModalIdentifiers","MORE_CHANNELS","_this$props$channelsM","ariaLabel","concat","display_name","purpose","toLowerCase","channelTypeIcon","isArchivedChannel","ArchiveOutlineIcon","size","isPrivateChannel","LockOutlineIcon","GlobeIcon","memberCount","channelsMemberCount","membershipIndicator","intl","formatMessage","defaultMessage","CheckIcon","FormattedMessage","channelPurposeContainerAriaLabel","messages","channelPurpose","channelPurposeContainer","className","AccountOutlineIcon","name","joinViewChannelButtonClass","classNames","joinViewChannelButton","onClick","disabled","Boolean","tabIndex","LoadingWrapper","loading","text","joiningButton","sharedChannelIcon","shared","SharedChannelIndicator","withTooltip","key","role","values","channelName","_this$channelListScro","preventDefault","nextDisabled","nextTimeoutId","setTimeout","nextPage","channelListScroll","current","scrollTo","top","_this$channelListScro2","search","channelSearchValue","filterType","changeFilter","currentTarget","value","doSearch","rememberHideJoinedChannelsChecked","hideJoinedChannelsPreference","tagName","Filter","Archived","Private","Public","componentDidMount","UserAgent","focus","document","addEventListener","onKeyDown","componentWillUnmount","removeEventListener","myChannelMemberships","render","channels","listContent","nextButton","previousButton","LoadingScreen","noMore","MagnifyingGlassSVG","getEmptyStateMessage","noResultsText","pageStart","channelsPerPage","pageEnd","channelsToDisplay","createChannelRow","previousPage","input","QuickInput","ref","placeholder","onInput","handleChange","clearable","onClear","handleClear","checkIcon","color","channelDropdownItems","Menu","filterChange","All","leadingElement","GlobeCheckedIcon","labels","trailingElements","canShowArchivedChannels","push","menuButton","getFilterLabel","ChevronDownIcon","channelDropdown","children","menu","item","hideJoinedButtonClass","checked","hideJoinedPreferenceCheckbox","handleChecked","CheckboxCheckedIcon","channelCountLabel","channelCount","count","dropDownContainer","_pt","isRequired","defineMessages","injectIntl","BrowseChannels","handleExit","closeEditRHS","actions","openModal","modalId","NEW_CHANNEL_MODAL","dialogType","NewChannelModal","rhsOpen","rhsState","RHSStates","EDIT_HISTORY","closeRightHandSide","force","searchedChannels","serverError","getChannels","then","getChannelsMemberCount","done","_result","currentUserId","teamName","joinChannel","message","getHistory","getRelativeChannelURL","term","clearTimeout","searchTimeoutId","onChange","searching","searchTerm","window","searchAllChannels","team_ids","nonAdminSearch","include_deleted","channelIDsForMemberCount","setSearchResults","team_id","ignoredErr","c","PRIVATE_CHANNEL","OPEN_CHANNEL","delete_at","shouldHideJoinedChannels","getChannelsWithoutJoined","setGlobalItem","StoragePrefixes","HIDE_JOINED_CHANNELS","toString","channelList","archivedChannels","privateChannels","allChannels","localeCompare","allChannelsWithoutJoined","publicChannelsWithoutJoined","archivedChannelsWithoutJoined","privateChannelsWithoutJoined","filterOptions","loadComplete","promises","CHANNELS_CHUNK_SIZE","getArchivedChannels","Promise","all","results","flatMap","channelsRequestStarted","serverErrorState","activeChannels","getActiveChannels","createNewChannelButton","icon","buttonClassName","TeamPermissionGate","permissions","Permissions","CREATE_PUBLIC_CHANNEL","handleNewChannel","localizeMessage","body","handleShowJoinedChannelsPreference","title","GenericModal","onExited","compassDesign","modalHeaderText","headerButton","autoCloseOnConfirmButton","enforceFocus","bodyPadding","getChannelsWithoutArchived","createSelector","getChannelsInCurrentTeam","getArchivedOtherChannels","getPrivateChannelsSelector","connect","team","getCurrentTeam","getGlobalItem","makeGetGlobalItem","getCurrentUserId","getCurrentTeamId","requests","status","RequestStatus","STARTED","getConfig","ExperimentalViewArchivedChannels","getMyChannelMemberships","getRhsState","getIsRhsOpen","getChannelsMemberCountSelector","bindActionCreators","MAX_BOOKMARKS_PER_CHANNEL","BOOKMARK_PERMISSION","ADD_BOOKMARK_PUBLIC_CHANNEL","EDIT_BOOKMARK_PUBLIC_CHANNEL","DELETE_BOOKMARK_PUBLIC_CHANNEL","ORDER_BOOKMARK_PUBLIC_CHANNEL","ADD_BOOKMARK_PRIVATE_CHANNEL","EDIT_BOOKMARK_PRIVATE_CHANNEL","DELETE_BOOKMARK_PRIVATE_CHANNEL","ORDER_BOOKMARK_PRIVATE_CHANNEL","useChannelBookmarkPermission","action","useSelector","getHaveIChannelBookmarkPermission","getChannel","myMembership","getMyChannelMember","channel_id","permission","haveIChannelPermission","useCanUploadFiles","canUploadFiles","useCanGetPublicLink","isPublicLinksEnabled","getIsChannelBookmarksEnabled","getFeatureFlagValue","license","getLicense","IsLicensed","useChannelBookmarks","useDispatch","order","useMemo","Object","keys","sort_order","tempOrder","setTempOrder","useState","useEffect","emojis","reduce","_ref","emoji","trimmedEmojiName","loadCustomEmojisIfNeeded","reorder","prevOrder","nextOrder","insertWithoutDuplicates","ChannelMoveToSubMenu","useIntl","getAllChannels","currentTeam","currentCategory","getCategoryInTeamWithChannel","handleMoveToCategory","event","trackEvent","handleMoveToNewCategory","EDIT_CATEGORY","EditCategoryModal","dialogProps","channelIdsToAdd","createSubmenuItemsForCategoryArray","CHANNELS","selectedCategory","StarOutlineIcon","FolderOutlineIcon","FolderMoveOutlineIcon","filterCategoriesBasedOnChannelType","inHeaderDropdown","ChevronRightIcon","menuId","menuAriaLabel","isSubmenuOneOfSelectedChannels","includes","every","getMoveToCategorySubmenuItems","memo","categoryName","isProcessing","timeoutId","renameCategory","currentTeamId","initialCategoryName","editButtonText","helpText","getText","confirmButtonText","handleEnterKeyPress","handleConfirm","handleCancel","isConfirmDisabled","inputComponent","MaxLengthInput","autoFocus","maxLength","LeaveTeamModal","show","handleSubmit","handleHide","leaveTeam","toggleSideBarRightMenu","handleKeyPress","currentUser","numOfPrivateChannels","numOfPublicChannels","modalMessage","UserUtils","roles","num_of_public_channels","num_of_private_channels","strong","chunks","Modal","dialogClassName","onHide","Header","closeButton","Title","componentClass","Body","Footer","getNumOfPrivateChannels","getMyChannels","getNumOfPublicChannels","getCurrentUser","toggleSideBarRightMenuAction","DEFAULT_NUM_PER_PAGE","ListModal","onPageChange","prevPage","loadItems","items","totalCount","numPerPage","renderRows","position","renderRow","paginationRange","startCount","endCount","titleText","titleBarButtonText","titleBarButtonOnClick","href","htmlFor","searchPlaceholderText","onSearchInput","total","onPrev","onNext","SearchShortcut","variant","controlKey","isMac","shortcutKeyVariant","ShortcutKeyVariant","Contrast","ShortcutKey","isDesktopApp","propTypes","CreateNewCategoryMenuItem","otherProps","_objectWithoutProperties","_excluded","handleCreateCategory","useCallback","assign","FolderPlusOutlineIcon","MarkAsReadConfirmModal","numChannels","header","confirm","MarkAsUnreadItem","handleViewCategory","DELETE_CATEGORY","MarkAsUnreadIcon","SidebarCategoryGenericMenu","isMenuOpen","setIsMenuOpen","menuOpen","class","DotsVerticalIcon","menuButtonTooltip","onToggle","isOpen","SidebarCategoryHeaderStatic","wrapEmojis","SidebarCategoryHeader","dragHandleProps","Reflect","deleteProperty","muted","dragging","isDragging","isCollapsed","isCollapsible","isDraggingOver","defaultProps","ChannelMentionBadge","unreadMentions","hasUrgent","badge","urgent","ChannelPencilIcon","hasDraft","draft","currentChannelId","trim","fileInfos","uploadsInProgress","ownProps","getPostDraft","DRAFT","SidebarChannelIcon","isDeleted","SidebarChannelMenu","channelLink","favoriteChannel","isFavorite","isMuted","isUnread","managePrivateChannelMembers","managePublicChannelMembers","readMultipleChannels","markMostRecentPostInChannelAsUnread","muteChannel","onMenuToggle","unfavoriteChannel","unmuteChannel","channelLeaveHandler","isLeaving","useRef","markAsReadUnreadMenuItem","handleMarkAsRead","handleMarkAsUnread","favoriteUnfavoriteMenuItem","handleUnfavoriteChannel","StarIcon","handleFavoriteChannel","muteUnmuteChannelMenuItem","muteChannelText","handleUnmuteChannel","BellOffOutlineIcon","handleMuteChannel","BellOutlineIcon","copyLinkMenuItem","handleCopyLink","copyToClipboard","LinkVariantIcon","addMembersMenuItem","handleAddMembers","CHANNEL_INVITE","ChannelInviteModal","AccountPlusOutlineIcon","leaveChannelMenuItem","DEFAULT_CHANNEL","leaveChannelText","handleLeaveChannel","ExitToAppIcon","isDestructive","ChannelMoveToSubmenu","mapDispatchToProps","member","MANAGE_PUBLIC_CHANNEL_MEMBERS","MANAGE_PRIVATE_CHANNEL_MEMBERS","isFavoriteChannel","isChannelMuted","getSiteURL","SidebarChannelLink","element","labelRef","showTooltip","offsetWidth","scrollWidth","label","ariaLabelPrefix","mark","Mark","ChannelLinkClicked","handleSelectChannel","defaultPrevented","button","cmdOrCtrlPressed","enableToolTipIfNeeded","componentDidUpdate","prevProps","isChannelSelected","link","firstChannelName","showChannelsTutorialStep","channelsTutorialTip","ChannelsAndDirectMessagesTour","labelElement","WithTooltip","customStatus","teammateId","CustomStatusEmoji","userID","spanStyle","height","emojiStyle","marginTop","marginBottom","opacity","isSharedChannel","content","Pluggable","pluggableName","handleMenuToggle","selected","Link","getAriaLabel","to","handleChannelClick","unsetEditingPost","getUnreadCount","makeGetChannelUnreadCount","unreadCount","config","enableTutorial","EnableTutorial","tutorialStep","getInt","TutorialTourName","ONBOARDING_TUTORIAL_STEP","channelTourTriggered","OnboardingTaskCategory","OnboardingTasksName","CHANNELS_TOUR","FINISHED","GenericTaskSteps","isOnboardingFlowEnabled","EnableOnboardingFlow","OnboardingTourSteps","CHANNELS_AND_DIRECT_MESSAGES","mentions","unreadMsgs","showUnread","getFirstChannelName","channelType","SidebarBaseChannel","currentTeamName","handleLeavePublicChannel","callback","leaveChannel","handleLeavePrivateChannel","LEAVE_PRIVATE_CHANNEL_MODAL","LeaveChannelModal","channelIcon","SidebarBaseChannelIcon","SidebarDirectChannel","teammate_id","Preferences","CATEGORY_DIRECT_CHANNEL_SHOW","savePreferences","user_id","leaveDirectChannel","active","redirectChannel","teammate","ProfilePicture","src","getProfilePictureUrl","last_picture_update","is_bot","wrapperClass","newStatusIcon","statusClass","displayname","username","getIcon","remote_id","getUser","getRedirectChannelNameForTeam","SidebarGroupChannel","membersCount","CATEGORY_GROUP_CHANNEL_SHOW","getMemberCount","makeGetGmChannelMemberCount","connector","makeGetChannel","isCurrentChannel","draggingState","getDraggingState","autoSortedCategoryIds","getAutoSortedCategoryIds","isCategoryCollapsed","isCategoryDragged","setChannelRef","isDraggable","channelIndex","isAutoSortedCategory","setShow","setRef","refMethod","handleAnimationStart","animationName","handleAnimationEnd","component","selectedCount","Draggable","draggableId","provided","snapshot","draggable","innerRef","collapsed","expanded","unread","selectedDragging","fadeOnDrop","isDropAnimating","draggingOver","has","noFloat","draggableProps","onAnimationStart","onAnimationEnd","initializeTeam","selectTeam","LocalStorageStore","setPreviousTeamId","getIsUserStatusesConfigEnabled","addVisibleUsersInCurrentChannelAndSelfToStatusPoll","customGroupEnabled","isCustomGroupsEnabled","LDAPGroups","groupsParams","filter_allow_reference","per_page","include_member_count","include_member_ids","include_archived","myGroupsParams","_objectSpread","filter_has_member","getGroupsByUserIdPaginated","getAllGroupsAssociatedToChannelsInTeam","group_constrained","getAllGroupsAssociatedToTeam","getGroups","USER_ID_PAIR_REGEXP","RegExp","onChannelByIdentifierEnter","match","history","path","identifier","params","teamObj","getTeamByName","channelPath","channelsByName","getChannelByName","moreChannelsByName","getOtherChannels","chan","status_code","test","isDirectChannelIdentifier","getPathFromIdentifier","getChannelsNameMapInTeam","getChannelDispatchResult","getChannelByNameAndTeamName","entities","myMembers","membership","getChannelMember","_channel","_channel2","user","prompt","teamMember","getMyTeamMember","scheme_admin","joinPromptResult","joinPrivateChannelPrompt","join","joinChannelDispatchResult","fetchChannelsAndMembers","handleChannelJoinError","goToDirectChannelByUserIds","replace","doChannelChange","goToChannelByChannelName","dispatchResult","goToDirectChannelByUserId","Utils","goToChannelByChannelId","groupId","url","handleError","markGroupChannelOpen","goToGroupChannelByGroupId","selectUserByUsername","getUserByUsername","directChannelDispatchRes","openDirectChannelToUserId","goToDirectChannelByUsername","email","selectUserByEmail","getUserByEmail","goToDirectChannelByEmail","userId","selectUser","GlobalActions","defaultChannel","scrollableContainerStyles","display","width","zIndex","overflow","margin","padding","scrollableWrapperStyle","flex","visibility","left","expandShrinkContainerStyles","scrollBarWidth","bottom","right","expandShrinkStyles","shrinkChildStyle","ItemMeasurer","PureComponent","_this","forceScrollCorrection","handleNewMeasurements","oldSize","itemId","node","_node","ownerDocument","defaultView","HTMLElement","newSize","ceil","offsetHeight","_positionScrollbarsRef","cancelAnimationFrame","requestAnimationFrame","_resizeSensorExpand","scrollTop","shrinkScrollDelta","_resizeSensorShrink","_measureItem","expandChildStyle","style","dir","onScroll","scrollingDiv","findDOMNode","isSafari","_measureItemAnimFrame","positionScrollBars","onUnmount","renderItems","DynamicVirtualizedList","itemOffsetMap","itemSizeMap","totalMeasuredSize","atBottom","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","scrollDelta","scrollHeight","localOlderPostsToRender","scrollBy","_outerRef","_scrollCorrectionInProgress","memoizeOne","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","clientHeight","scrolledToInitIndex","_listMetaData","offset","initScrollToIndex","scrollToItem","_keepScrollToBottom","_keepScrollPosition","canLoadMorePosts","prevHeight","prevOffset","itemData","itemStyleCache","_itemStyleCache","prototype","hasOwnProperty","call","getItemOffset","getItemSize","_correctedInstances","_mountingCorrections","i","prevSize","findIndex","_generateOffsetMeasurements","correctScrollToBottom","forceUpdate","delta","_getRangeToRender","prevState","deltaValue","_correctScroll","outerRef","innerRefWidth","clientWidth","direction","loaderId","visibleId","startIndex","stopIndex","itemCount","getItemMetadata","localOlderPostsToRenderStartIndex","localOlderPostsToRenderStopIndex","isItemInLocalPosts","isLoader","isVisible","_getItemStyle","createElement","_handleNewMeasurements","_onItemRowUnmount","scrollByValue","useAnimationFrame","_scrollByCorrection","align","offsetOfItem","getOffsetForIndexAndAlignment","scrollToFailed","_commitHook","getSnapshotBeforeUpdate","_","previousScrollTop","previousScrollHeight","prevScrollDirection","prevScrollOffset","prevScrollUpdateWasRequested","_callPropsCallbacks","_dataChange","_heightChange","_widthChange","postlistScrollHeight","scrollValue","_callOnItemsRendered","_callOnScroll","overscanCountForward","overscanCountBackward","scrollOffsetValue","getStartIndexForOffset","getStopIndexForStartIndex","overscanBackward","overscanForward","minValue","maxValue","initRangeToRender","innerTagName","outerTagName","innerListStyle","_onScrollVertical","_renderItems","_outerRefSetter","WebkitOverflowScrolling","overflowY","overflowAnchor","willChange","listMetaData","itemMetadata","estimatedTotalSize","maxOffset","minOffset","round","findNearestItem","high","low","CenterMessageLock","_cloudLimits$messages","openPricingModal","useOpenPricingModal","isAdminUser","isAdmin","cloudLimits","limitsLoaded","useGetLimits","oldestPostTime","getOldestPostTimeInChannel","timestamp","getNextDay","firstInaccessiblePostTime","notifyAdminBtnText","notifyAdmin","notifyRequestStatus","useNotifyAdmin","ctaText","required_feature","MattermostFeatures","UNLIMITED_MESSAGES","required_plan","LicenseSkus","Professional","trial_notification","dateFormat","month","day","Date","now","ONE_DAY_MS","year","titleValues","date","formatDate","limit","formatNumber","description","cta","NotifyStatus","AlreadyComplete","trackingLocation","EyeOffOutlineIcon","PrivateChannelIntroSvg","_props$width","_props$height","viewBox","fill","xmlns","xmlnsXlink","clipPath","d","stroke","strokeOpacity","strokeLinecap","cx","cy","r","transform","fillOpacity","strokeLinejoin","x","y","rx","PublicChannelIntroSvg","SvgComponent","AddMembersButton","totalUsers","usersLimit","pluginButtons","LoadingSpinner","inviteUsers","ADD_USER_TO_TEAM","INVITE_GUEST","LessThanMaxFreeUsers","MoreThanMaxFreeUsers","_ref2","ToggleModalButton","INVITATION","InvitationModal","focusOriginElement","_ref3","ADD_GROUPS_TO_CHANNEL","modal","AddGroupsToChannelModal","isPrivate","ChannelPermissionGate","PluggableIntroButtons","channelMember","buttons","buttonProps","_buttonProps$action","getMyChannelMembership","getChannelIntroPluginButtons","ChannelIntroMessage","_this$props$stats","stats","total_users_count","getTotalUsersStats","fullWidth","locale","channelProfiles","enableUserCreation","isReadOnly","teamIsGroupConstrained","creatorName","teammateName","isMobileView","centeredIntro","toggleFavorite","channelIntroId","pluggableButton","setHeaderButton","createSetHeaderButton","actionButtons","createFavoriteButton","UserProfile","createDMIntroMessage","profiles","channelMembership","currentUserProfile","v","pictures","profile","createNotificationPreferencesButton","getGMIntroMessageSpecificPart","createGMIntroMessage","teamInviteLink","MANAGE_PRIVATE_CHANNEL_PROPERTIES","MANAGE_PUBLIC_CHANNEL_PROPERTIES","INVITE_USER","ADD_GROUPS_TO_TEAM","AddGroupsToTeamModal","ChannelIntroTownSquareSvg","createDefaultIntroMessage","OFFTOPIC_CHANNEL","channelInviteButton","ChannelIntroPublicSvg","createOffTopicIntroMessage","uiName","memberMessage","channelIsArchived","FormattedDate","create_at","getMonthLong","createMessage","purposeMessage","creator","ChannelIntroPrivateSvg","createStandardIntroMessage","gmIntroMessages","NotificationLevel","ALL","DEFAULT","MENTION","NONE","userProfile","_membership$notify_pr","_userProfile$notify_p","channelNotifyProp","notify_props","desktop","userNotifyProp","notifyLevelToUse","EDIT_CHANNEL_HEADER","EditChannelHeaderModal","PencilOutlineIcon","classes","favoriteText","CHANNEL_NOTIFICATIONS","ChannelNotificationsModal","BellRingOutlineIcon","EnableUserCreation","getCurrentChannel","getMyCurrentChannelMembership","getDirectTeammate","creator_id","getTotalUsersStatsSelector","get","CATEGORY_DISPLAY_SETTINGS","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","CHANNEL_DISPLAY_MODE_FULL_SCREEN","getCurrentLocale","getProfilesInCurrentChannel","isCurrentChannelFavorite","getDisplayNameByUser","getIsMobileView","PostListRow","blockShortcutReactToLastPostForNonMessages","listId","emitShortcutReactToLastPostFrom","isIdNotPost","Locations","NO_WHERE","isLastPost","shortcutReactToLastPostEmittedFrom","shortcutReactToLastPostEmittedFromCenter","CENTER","previousListId","loadingOlderPosts","loadingNewerPosts","OLDER_MESSAGES_LOADER","NEWER_MESSAGES_LOADER","CHANNEL_INTRO_MESSAGE","LOAD_OLDER_MESSAGES_TRIGGER","LOAD_NEWER_MESSAGES_TRIGGER","PostListRowListIds","PostListUtils","DateSeparator","NewMessageSeparator","separatorId","newMessagesSeparatorActions","exceededLimitChannelId","loadOlderPosts","loadNewerPosts","shouldHideAnimation","hideAnimation","postProps","previousPostId","shouldHighlight","togglePostMenu","CombinedUserActivityPost","location","combinedId","PostComponent","post","getShortcutReactToLastPostEmittedFrom","usage","getUsage","limits","getCloudLimits","getCloudLimitsLoaded","getPost","plugins","components","NewMessagesSeparatorAction","getLimitedViews","ScrollToBottomIcon","enableBackground","ScrollToBottomArrows","isScrolling","innerWidth","scrolling","HintToast","onDismiss","handleDismiss","CloseIcon","ScrollToBottomToast","jumpToRecentsMessage","UnreadBelowIcon","TOAST_REL_RANGES","RelativeRanges","ToastWrapperClass","ESCAPE","showUnreadToast","hideUnreadToast","showNewMessagesToast","hideNewMessagesToast","showUnreadWithBottomStartToast","hideUnreadWithBottomStartToast","hideArchiveToast","showMessageHistoryToast","updateLastViewedBottomAt","onSearchHintDismiss","since","isToday","Timestamp","useTime","ranges","searchShortcut","focusedPostId","atLatestPost","scrollToNewMessage","changeUrlToRemountChannelView","_this$props$hideScrol","_this$props","scrollToLatestMessages","hideScrollToBottomToast","scrollToUnreadMessages","unreadCountInChannel","unreadScrollPosition","UNREAD_SCROLL_POSITION_START_FROM_NEWEST","newRecentMessagesCount","countNewMessages","rootPosts","isCollapsedThreadsEnabled","postListIds","channelMarkedAsUnread","initScrollOffsetFromBottom","lastViewedAt","latestPostTimeStamp","lastViewedBottom","isNewMessageLineReached","shouldStartFromBottomWhenUnread","mounted","toastPresent","handleShortcut","updateToastStatus","updateNewMessagesAtInChannel","prevPostsCount","presentPostsCount","getToastToRender","showSearchHintToast","showScrollToBottomToast","unreadToastProps","onClickMessage","showActions","Toast","newMessagesToastText","unreadWithBottomStartToastProps","jumpDirection","showNewMessagesToastOverrides","archiveToastProps","extraClasses","archiveToastText","toasts","onScrollToBottomToastDismiss","hideSearchHintToast","getSearchHintToastText","toastToRender","getNewMessagesIndex","newMessages","withRouter","countUnreadsBelow","getAllPosts","postIds","allPosts","Posts","POST_DELETED","root_id","getRootPosts","obj","preparePostIdsForPostList","makePreparePostIdsForPostList","isManuallyUnread","lastChannelViewTime","getUnreadScrollPositionPreference","getPostIdsInChannel","countCurrentChannelUnreadMessages","ToastWrapper","LatestPostReader","latestPostId","getLatestPostId","latestPost","usePostAriaLabel","postListStyle","virtListStyles","maxHeight","PostList","showSearchHintThreshold","getShowSearchHintThreshold","opened","dynamicListStyle","postMenuOpened","basePaddingClass","previousItemId","nextItemId","isDateLine","isStartOfNewMessages","getPreviousPostId","changeUnreadChunkTimeStamp","didUserScrollBackwards","didUserScrollForwards","isOffsetWithInRange","offsetFromBottom","getOffsetFromBottom","shouldLoadNewPosts","atOldestPost","scrollStopAction","fireAfter","SCROLL_DELAY","checkBottom","_this$listRef$current","postsRenderedRange","listRef","PostRequestTypes","AFTER_ID","showSearchHint","isSearchHintDismissed","updateScrollToBottomToastVisibility","screen","updateAtBottom","isAtBottom","isScrollToBottomDismissed","visibleTopItem","topPostId","updateFloatingTimestamp","newMessageLineIndex","onNewMessageLineReached","newMessagesSeparatorIndex","scrollToBottom","toggleShouldStartFromBottomWhenUnread","_this$listRef$current2","_this$listRef$current3","handleSearchHintDismiss","handleScrollToBottomToastDismiss","channelIntroMessage","initScrollCompleted","postListRef","DelayedAction","handleScrollStop","postIndex","postId","maxPostsForSlicing","handleWindowResize","EventEmitter","addListener","EventTypes","POST_LIST_SCROLL_TO_BOTTOM","postsAddedAtTop","channelHeaderAdded","_postListNode$parentE","postListNode","parentElement","_prevState","_this$listRef$current4","removeListener","newPostListIds","autoRetryEnable","nextState","FloatingTimestamp","AutoSizer","_ref4","renderToasts","markAndMeasureChannelSwitchEnd","fresh","PostListLoaded","channelSwitch","measureAndReport","Measure","ChannelSwitch","startMark","endMark","canFail","teamSwitch","TeamSwitch","TeamLinkClicked","shouldTrackPerformance","requestCount1","countRequestsBetween","duration","requestCount","requestCount2","clearMarks","isFirstLoad","isPrefetchingInProcess","loadPostsAround","loadUnreads","syncPostsInChannel","loadLatestPosts","markChannelAsRead","loadPosts","BEFORE_ID","autoRetriesCount","callLoadPosts","getOldestPostId","hasInaccessiblePosts","extraPagesLoaded","getPostsAfter","getPostsBefore","oldestPostId","getOldestVisiblePostId","getLatestVisiblePostId","actionsForPostList","postsOnLoad","VirtPostList","formattedPostIds","centered","posts","postsInChannel","memoizedGetLatestPostId","memoizeResult","getPostsChunkAroundPost","makeGetPostsChunkAroundPost","chunk","unreadChunkTimeStamp","channelViewState","channelPrefetchStatus","limitedViews","focusedPost","getUnreadPostsChunk","getRecentPostsChunkInChannel","recent","oldest","shouldHideNewMessageIndicator","isPostsChunkIncludingUnreadsPosts","indicateNewMessages","PostView","loaderForChangeOfPostsChunk","channelLoading","_ownProps$match","last_post_at","isChannelLoading","teamMemberships","_params$identifier","postid","getTeamMemberships","onClickRefresh","reload","InputLoading","updateWaitForLoader","showMessage","setShowMessage","timeout","ChannelHeader","makeAsyncComponent","lazy","FileUploadOverlay","ChannelBookmarks","AdvancedCreatePost","ChannelBanner","ChannelView","updatedState","deferredPostView","createDeferredPostView","goToLastViewedChannel","waitForLoader","channelViewRef","enableWebSocketEventScope","WebSocketClient","updateActiveChannel","viewArchivedChannels","createPost","deactivatedChannel","onClickCloseChannel","missingChannelRole","onUpdateInputShowLoader","DeferredPostView","overlayType","DropOverlayIdCenterChannel","isChannelBookmarksEnabled","deferComponentRender","enableOnboardingFlow","FeatureFlagWebSocketEventScope","_getMyChannelMembersh","split","some","getRoles","isMissingChannelRoles","isDeactivatedDirectChannel","isCloud","Cloud","teamUrl","getCurrentRelativeTeamUrl","isFirstAdmin","ChannelIdentifierRouter","replaceUrlTimeout","channelUrl","PERMALINK_FADEOUT","replaceUrlIfPermalink","MobileChannelHeader","GlobalThreads","Drafts","PermalinkView","PlaybookRunner","CenterChannel","returnTo","lastReturnTo","nextProps","pathname","getProfiles","lastChannelPath","lhsOpen","rhsMenuOpen","Switch","Route","ID_PATH_PATTERN","TEAM_NAME_PATH_PATTERN","IDENTIFIER_PATH_PATTERN","SCHEDULED_POST_URL_SUFFIX","Redirect","mapStateToProps","lastViewedType","getLastViewedTypeByTeamName","getLastViewedChannelNameByTeamName","previousTeamId","getPreviousTeamId","previousTeamLastViewedType","getPreviousTeamLastViewedType","PreviousViewedTypes","THREADS","getIsLhsOpen","getIsRhsMenuOpen","useLocation","useHistory","actionMap","open_invitation_modal","searchParams","URLSearchParams","delete","isFirstPreload","trackPreloadedChannels","prefetchQueueObj","_prefetchQueueObj$","_prefetchQueueObj$2","_prefetchQueueObj$3","channelIdsForTeam","getChannelIdsForCurrentTeam","numHigh","numMedium","numLow","numTotal","Priority","PrefetchLimits","prefetchQueue","unreadChannels","memberships","collapsedThreads","unreadChannelsCount","medium","unreadMax","mentionMax","mention_count_root","mention_count","mark_unread","queue","PQueue","concurrency","DataPrefetch","delay","unreadChannel","random","prefetchChannelPosts","prefetchRequestStatus","priority","hasOwn","priorityQueue","add","prefetchPosts","sidebarLoaded","loadProfilesForSidebar","prefetchTimeout","clear","prefetchData","isSidebarLoaded","lastUnreadChannel","getUnreadChannels","ResizableLhs","containerRef","ResizableDivider","globalCssVar","CssVarKeyForResizable","LHS","defaultWidth","DEFAULT_LHS_WIDTH","ResizeDirection","LEFT","SidebarTeamMenu","_props$currentTeam","havePermissionToCreateTeam","haveISystemPermission","CREATE_TEAM","havePermissionToManageTeam","haveICurrentTeamPermission","MANAGE_TEAM","havePermissionToAddUserToTeam","havePermissionToInviteGuest","isCloudLicense","isGuestAccessEnabled","EnableGuestAccounts","isTeamGroupConstrained","isLicensedForLDAPGroups","experimentalPrimaryTeam","ExperimentalPrimaryTeam","joinableTeams","getJoinableTeamIds","haveMoreJoinableTeams","canJoinAnotherTeam","tooltipText","InvitePeopleMenuItem","AddGroupsToTeamMenuItem","TeamSettingsMenuItem","ManageViewMembersMenuItem","ManageGroupsMenuItem","teamID","LeaveTeamMenuItem","JoinAnotherTeamMenuItem","CreateTeamMenuItem","LearnAboutTeamsMenuItem","PluginMenuItems","handleClick","AccountMultiplePlusOutlineIcon","TEAM_SETTINGS","TeamSettingsModal","SettingsOutlineIcon","havePermissionToRemoveUserFromTeam","REMOVE_USER_FROM_TEAM","havePermissionToManageTeamRoles","MANAGE_TEAM_ROLES","TEAM_MEMBERS","TeamMembersModal","AccountMultipleOutlineIcon","MANAGE_TEAM_GROUPS","TeamGroupsManageModal","MonitorAccountIcon","LEAVE_TEAM","MessagePlusOutlineIcon","cloudSubscription","getCloudSubscription","subscriptionProduct","getSubscriptionProduct","isFreeTrial","is_free_trial","isStarterFree","sku","CloudProducts","STARTER","usageDeltas","useGetUsageDeltas","isTeamsLimitReached","teams","isTeamCreateRestricted","PlusIcon","RestrictedIndicatorForCreateTeam","RestrictedIndicator","feature","CREATE_MULTIPLE_TEAMS","minimumPlanRequiredForFeature","blocked","tooltipMessage","titleAdminPreTrial","messageAdminPreTrial","trialLength","FREEMIUM_TO_ENTERPRISE_TRIAL_LENGTH_DAYS","titleAdminPostTrial","messageAdminPostTrial","titleEndUser","messageEndUser","MATTERMOST_ACADEMY_TEAM_TRAINING_LINK","open","LightbulbOutlineIcon","pluginInMainMenu","getMainMenuPluginComponents","pluginMenuItems","plugin","SidebarHeader","canCreateChannel","canJoinPublicChannel","SidebarBrowseOrAddChannelMenu","onCreateNewChannelClick","showNewChannelModal","onBrowseChannelClick","showMoreChannelsModal","onOpenDirectMessageClick","handleOpenDirectMessagesModal","canCreateCustomGroups","onCreateNewUserGroupClick","showCreateUserGroupModal","unreadFilterEnabled","onCreateNewCategoryClick","showCreateCategoryModal","onInvitePeopleClick","invitePeopleModal","CHANNEL_MODE","QuickSwitchModal","switchBox","textbox","getTextbox","activeElement","focusTextbox","focusPostTextbox","querySelector","_this$props$onExited","focusElement","shouldShowLoadingSpinner","mode","joinChannelById","switchToChannel","MENTION_MORE_CHANNELS","hideOnSelect","suggestions","loadingPropPresent","pretext","matchedPretext","hasSuggestions","providers","channelProviders","help","modalSubheaderText","hideOnCancel","SuggestionBox","setSwitchBoxRef","onItemSelected","listComponent","SuggestionList","listPosition","completeOnTab","spellCheck","delayInputUpdate","openWhenEmpty","onSuggestionsReceived","handleSuggestionsReceived","forceSuggestionsWhenBlur","renderDividers","MENTION_UNREAD","MENTION_RECENT_CHANNELS","shouldSearchCompleteText","NoResultsIndicator","NoResultsVariant","Search","SwitchChannelProvider","disableTooltip","enableTooltip","shortcut","default","ShortcutKeys","ctrl","shift","mac","cmd","ChannelFilter","toggleUnreadFilter","Keyboard","U","handleUnreadFilterKeyPress","unreadsAriaLabel","getMyTeams","hasMultipleTeams","isUnreadFilterEnabled","ChannelNavigator","QUICK_SWITCH","M","L","K","toggleQuickSwitchModal","isQuickSwitcherOpen","handleQuickSwitchKeyPress","showUnreadsCategory","openQuickSwitcher","shouldShowUnreadsCategory","isModalOpen","DeleteCategoryModal","deleteCategory","confirmButtonClassName","category_name","cancel","paginationCount","paginationNext","paginationPrev","SidebarCategoryMenu","getUnreadsIdsForCategory","makeGetUnreadIdsForCategory","unreadsIds","muteUnmuteCategoryMenuItem","toggleCategoryMute","setCategoryMuted","deleteCategoryMenuItem","renameCategoryMenuItem","handleDeleteCategory","handleRenameCategory","TrashCanOutlineIcon","handleSortChannels","sorting","setCategorySorting","sortChannelsSelectedValue","sortChannelsIcon","FormatListBulletedIcon","CategorySorting","Alphabetical","SortAlphabeticalAscendingIcon","Recency","ClockOutlineIcon","sortChannelsMenuItem","Manual","markAsReadMenuItem","MarkAsReadMenuItem","SidebarCategorySortingMenu","selectedDmNumber","getVisibleDmGmLimit","handleSortDirectMessages","sortDirectMessagesIcon","sortDirectMessagesSelectedValue","sortDirectMessagesMenuItem","showMessagesCountSelectedValue","showMessagesCountMenuItem","DM_AND_GM_SHOW_COUNTS","dmGmShowCount","handlelimitVisibleDMsGMs","number","CATEGORY_SIDEBAR_SETTINGS","LIMIT_VISIBLE_DMS_GMS","openDirectMessageMenuItem","isAddChannelCtaDropdownOpen","addChannelCtaDropdown","AddChannelsCtaButton","touchedAddChannelsCtaButton","getBool","TOUCHED","Touched","ADD_CHANNELS_CTA","canCreatePublicChannel","haveICurrentChannelPermission","CREATE_PRIVATE_CHANNEL","JOIN_PUBLIC_CHANNELS","isAddChannelCtaOpen","openAddChannelsCtaOpen","ADD_CHANNEL_CTA_DROPDOWN_TOGGLE","setAddChannelCtaDropdown","buttonClass","addChannelsButton","btnCallback","storePreferencesAndTrackEvent","MenuWrapper","renderDropdownItems","joinPublicChannel","createChannel","ItemAction","Group","browseChannelsAction","InviteMembersButton","handleButtonClick","getAnalyticsCategory","SidebarCategory","_this$categoryTitleRe","categoryTitleRef","handleA11yKeyDown","a11yKeyDownRegistered","_this$categoryTitleRe2","handleCollapse","SidebarChannel","DraggingStateTypes","CATEGORY","setCategoryCollapsed","newDropBoxRef","remove","handleOpenMoreDirectChannelsModal","nativeEvent","CHANNEL","DM","isNewCategory","isDragDisabled","onTransitionEnd","removeAnimation","_this$categoryTitleRe3","_this$categoryTitleRe4","A11yCustomEventTypes","ACTIVATE","handleA11yActivateEvent","DEACTIVATE","handleA11yDeactivateEvent","_this$categoryTitleRe5","_this$categoryTitleRe6","categoryIndex","renderedChannels","renderChannel","categoryMenu","newLabel","addHelpLabel","KeyboardShortcutSequence","KEYBOARD_SHORTCUTS","navDMMenu","hideDescription","isInsideTooltip","categoryNames","disableInteractiveElementBlocking","inviteMembersButton","addChannelsCtaButton","dropDisabled","isDropDisabled","menuIsOpen","capture","DraggingStates","CAPTURE","Droppable","droppableId","droppableProvided","droppableSnapshot","droppableProps","renderNewDropBox","showPlaceholder","direct_messages","favorites","getChannelIdsForCategory","makeGetFilteredChannelIdsForCategory","DraftsLink","GlobalThreadsLink","UnreadChannelIndicator","UnreadChannels","renderView","renderThumbHorizontal","renderTrackVertical","renderThumbVertical","scrollbarStyles","SidebarList","staticPages","channelRefs","set","unreadChannelIds","spring","val","getCurrentValue","scrollbar","scrollToChannel","getFirstUnreadChannel","getLastUnreadChannel","scrollingToUnread","offsetTop","getScrollTop","getClientHeight","showTopUnread","scrollEnd","getDisplayedChannelIds","scrollToPosition","showBottomUnread","scrollAnimation","setCurrentValue","setAtRest","setEndValue","firstUnreadChannel","firstUnreadElement","lastUnreadElement","getFirstUnreadChannelFromChannelIdArray","reverse","switchToChannelById","switchToLhsStaticPage","metaKey","UP","DOWN","staticPageIds","getDisplayedStaticPageIds","allIds","curSelectedId","currentStaticPageId","curIndex","nextIndex","nextId","mod","navigateById","allChannelIds","unshift","hasUnreadThreads","findNextUnreadChannelId","nextChannelId","newCategoryIds","debounce","updateUnreadIndicators","before","droppable","querySelectorAll","draggingChannels","MIXED_CHANNELS","BEFORE","initial","onDragStart","DURING","onDragEnd","reason","destination","moveCategory","channelsListScrollTimeout","autoHide","Map","animate","SpringSystem","createSpring","setOvershootClampingEnabled","onSpringUpdate","handleScrollAnimationUpdate","navigateChannelShortcut","navigateUnreadChannelShortcut","scrollToTop","close","unreadsCategory","renderedCategories","renderCategory","DragDropContext","onBeforeDragStart","onBeforeCapture","above","below","scrollToFirstUnreadChannel","extraClass","scrollToLastUnreadChannel","onPointerLeave","hideChannelListScrollbar","onPointerOver","showChannelListScrollbar","Scrollbars","_getThreadCountsInCur","getThreadCountsInCurrentTeam","total_unread_threads","getUnreadChannelIds","getCurrentStaticPageId","getVisibleStaticPages","MobileSidebarHeader","MoreDirectChannels","CreateUserGroupsModal","KeyboardShortcutsModal","UserSettingsModal","Sidebar","FORWARD_SLASH","isKeyBoardShortcutModalOpen","KEYBOARD_SHORTCUTS_MODAL","A","USER_SETTINGS","isContentProductSettings","showDirectChannelsModal","USER_GROUPS_CREATE","hideMoreDirectChannelsModal","showMoreDirectChannelsModal","moreDirectChannelsModal","onModalDismissed","isExistingChannel","fetchMyCategories","handleClickClearChannelSelection","handleKeyDownEvent","canCreatePrivateChannel","renderModals","CREATE_CUSTOM_GROUP","PostsChannelResetWatcher","isCRTEnabled","loaded","resetReloadPostsInChannel","BadgeStatus","UnreadsStatusHandlerClass","unreadStatus","unreadMentionCount","basicUnreadMeta","DesktopApp","updateUnreadsAndMentions","siteName","currentTeammate","inGlobalThreads","inDrafts","inScheduledPosts","currentSiteName","mentionTitle","unreadTitle","isDynamicFaviconSupported","currentChannelName","prefix","badgeStatus","link16x16","link24x24","link32x32","link64x64","link96x96","getFavicon","ensureString","Mention","faviconMention16x16","faviconMention24x24","faviconMention32x32","faviconMention64x64","faviconMention96x96","Unread","faviconUnread16x16","faviconUnread24x24","faviconUnread32x32","faviconUnread64x64","faviconUnread96x96","faviconDefault16x16","faviconDefault24x24","faviconDefault32x32","faviconDefault64x64","faviconDefault96x96","updateTitle","oldBadgeStatus","getBadgeStatus","newBadgeStatus","updateFavicon","updateDesktopApp","None","SiteName","getUnreadStatus","matchPath","UnreadsStatusHandler","ProductNoticesModal","ResetStatusModal","MobileSidebarRight","BODY_CLASS_FOR_CHANNEL","ChannelController","enabledUserStatuses","_navigator$userAgentD","isMsBrowser","isInternetExplorer","isEdge","navigator","platform","userAgentData","bodyClass","getClassnamesForBody","cleanUpStatusAndProfileFetchingPoll","loadStatusesIntervalId","setInterval","STATUS_INTERVAL","clearInterval","CRTPostsChannelResetWatcher","QueryParamActionController","shouldRenderCenterChannel","BackstageController","makeAsyncPluggableComponent","_StyledPluggable","_styled","withConfig","gridArea","TeamController","_props$plugins","teamNameParam","useParams","initialChannelsLoaded","setInitialChannelsLoaded","setTeam","getTeamFromTeamList","teamsList","blurTime","lastTime","joinTeamOrRedirect","joinedOnFirstLoad","joinedTeam","joinTeam","_user$id","_user$roles","userRoles","setUserId","setUserRoles","useTelemetryIdentitySync","InitialLoadingScreen","stop","reactAppInitialized","fetchAllMyChannelMembers","fetchAllMyTeamsChannels","fetchAllChannels","disableWakeUpReconnectHandler","wakeUpIntervalId","currentTime","console","log","reconnect","handleFocus","isActive","markAsReadOnFocus","disableRefetchingOnBrowserFocus","handleBlur","unsetActiveChannelOnServer","handleKeydown","replyTextbox","postTextbox","getElementById","browserIsIosSafari","isIosSafari","iNoBounce","setTeamIdJoinedOnLoad","teamsListDependency","RESERVED_TEAM_NAMES","teamFromTeamNameParam","initTeamOrRedirect","mfaRequired","teamLoaded","route","pluggableId","_teamsList$find","teamInList","teamname","teamByNameResult","isSuccess","addUserToTeamResult","addUserToTeam","Error","NeedsTeamComponent","DisableRefetchingOnBrowserFocus","DisableWakeUpReconnectHandler","selectedThreadId","getSelectedThreadIdInCurrentTeam","selectedPostId","getSelectedPostId","checkIfMFARequired","showConfirmModal","member_count","pageNumber","getGroupsAssociatedToTeam","groups","totalGroupCount","listModal","unlinkGroupSyncable","SyncableType","Team","isTeamAdmin","patchGroupSyncable","getMyTeamMembers","groupsAvatar","alt","Nbsp","num","DropdownIcon","openLeft","setTeamMemberStatus","onClickRemoveGroup","titleButtonOnClick","ConfirmModal","onConfirm","handleDeleteConfirmed","onCancel","handleDeleteCanceled","TeamMembersDropdown","me","handleDemote","updateTeamMemberSchemeRoles","getTeamMember","getMyTeamUnreads","removeUserFromTeamAndGetStats","showDemoteModal","currentRoles","isGuest","isSystemAdmin","showMakeMember","showMakeAdmin","canRemoveFromTeam","makeDemoteModal","confirmButton","handleDemoteSubmit","handleDemoteCancel","openUp","menuRemove","handleRemoveFromTeam","menuMakeAdmin","handleMakeAdmin","menuMakeMember","handleMakeMember","getTeamStats","getChannelStats","updateUserActive","MemberListTeam","loadProfilesAndTeamMembers","getTeamMembers","DEFAULT_MAX_USERS_PER_TEAM","Teams","SORT_USERNAME_OPTION","exclude_deleted_users","setModalSearchTerm","PROFILE_CHUNK_SIZE","loadStatusesForProfilesList","loadTeamMembersForProfilesList","searchProfiles","membersLoaded","SEARCH_TIMEOUT_MILLISECONDS","teamMembersDropdown","canManageTeamMembers","teamMembers","users","actionUserProps","usersToDisplay","SearchableUserList","usersPerPage","totalTeamMembers","focusOnMount","haveITeamPermission","modalSearch","searchProfilesInCurrentTeam","getProfilesInCurrentTeam","getCurrentTeamStats","active_member_count","getMembersInCurrentTeam","onLoad","_this$props$currentTe","_this$props$currentTe2","teamDisplayName","handleInvitePeople","DropdownIndicator","styles","control","baseStyles","background","multiValue","borderRadius","alignItems","multiValueLabel","fontFamily","fontSize","fontWeight","lineHeight","letterSpacing","multiValueRemove","marginRight","handleNewSelection","isClearable","inputValue","setInputValue","handleTextEnter","handleKeyDown","selectValues","singleValue","CreatableSelect","isMulti","onInputChange","onBlur","AllowedDomainsSelect","allowedDomains","setAllowedDomains","setHasChanges","setSaveChangesPanelState","showAllowedDomains","setShowAllowedDomains","handleEnableAllowedDomains","updateAllowedDomains","domain","handleOnChangeDomains","allowedDomainsOptions","CheckboxSettingItem","inputFieldTitle","descriptionAboveContent","inputFieldData","inputFieldValue","SelectTextInput","translations","OpenInviteDescriptionError","InviteSectionInput","_team$invite_id","regenerateTeamInviteId","canInviteTeamMembers","inviteId","setInviteId","invite_id","inviteIdError","setInviteIdError","handleRegenerateInviteId","inviteSectionInput","Input","RefreshIcon","BaseSettingItem","OpenInvite","isGroupConstrained","allowOpenInvite","setAllowOpenInvite","groupConstrainedContent","msg","ExternalLink","generateAllowedDomainOptions","patchTeam","_team$allow_open_invi","collapseModal","hasChangeTabError","hasChanges","setHasChangeTabError","allowed_domains","allow_open_invite","saveChangesPanelState","handleAllowedDomainsSubmit","handleOpenInviteSubmit","updateOpenInvite","handleClose","_team$allow_open_invi2","collapseModalHandler","handleSaveChanges","allowedDomainSuccess","openInviteSuccess","ModalSection","SaveChangesPanel","tabChangeError","handleDescriptionChanges","clientError","updateDescription","descriptionSectionInput","containerClassName","MAX_TEAMDESCRIPTION_LENGTH","handleNameChanges","updateName","nameSectionInput","MAX_TEAMNAME_LENGTH","TeamPictureSection","file","onFileChange","onRemove","selectInput","image","setImage","orientationStyles","setOrientationStyles","teamImageSource","imageURLForTeam","handleInputFile","previewBlob","URL","createObjectURL","reader","FileReader","onload","orientation","FileUtils","readAsArrayBuffer","setPicture","teamPictureSection","teamImage","imageStyles","backgroundImage","backgroundSize","backgroundRepeat","charAt","toUpperCase","accept","ACCEPT_STATIC_IMAGE","EditIcon","ACCEPTED_TEAM_IMAGE_TYPES","Required","TeamNameRestrictions","MIN_TEAMNAME_LENGTH","TeamIconInvalidFileType","TeamIconTooLarge","TeamIconError","_config$MaxFileSize","maxFileSize","parseInt","MaxFileSize","getTeam","removeTeamIcon","setTeamIcon","_team$display_name2","setName","setDescription","teamIconFile","setTeamIconFile","setLoading","imageClientError","setImageClientError","nameClientError","setNameClientError","handleNameDescriptionSubmit","handleTeamIconSubmit","nameDescriptionSuccess","_team$display_name","handleTeamIconRemove","updateTeamIcon","files","handleCollapseModal","modalSectionContent","TeamNameSection","TeamDescriptionSection","TeamSettings","activeTab","InfoTab","AccessTab","SettingsSidebar","canInviteUsers","setActiveTab","modalBodyRef","updateTab","tab","el","ReactDOM","closest","tabs","iconTitle","fallback","customErrorMessage","saveButtonText","cancelButtonText","panelClassName","saved","messageClassName","cancelButtonClassName","saveButtonClassName","AlertCircleOutlineIcon","generateControlButtons","saveButtonDisabled","EMPTY_BOOKMARKS","channelBookmarks","byChannelId","bookmarkId","lhs","getDraftsCount","makeGetDraftsCount","collapsedThreadsEnabled","draftsCount"],"sourceRoot":""}