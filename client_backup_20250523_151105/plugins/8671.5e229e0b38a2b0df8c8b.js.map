{"version":3,"file":"8671.5e229e0b38a2b0df8c8b.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/widgets/icons/info_icon.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/channel_info_button/channel_info_button.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/channel_info_button/index.ts","webpack://mattermost-webapp/./src/components/notify_counts/notify_counts.tsx","webpack://mattermost-webapp/./src/components/notify_counts/index.ts","webpack://mattermost-webapp/./src/components/mobile_channel_header/collapse_lhs_button/collapse_lhs_button.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/collapse_lhs_button/index.ts","webpack://mattermost-webapp/./src/components/mobile_channel_header/collapse_rhs_button/collapse_rhs_button.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/collapse_rhs_button/index.ts","webpack://mattermost-webapp/./src/components/mobile_channel_header/show_search_button/show_search_button.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/show_search_button/index.ts","webpack://mattermost-webapp/./src/components/mobile_channel_header/unmute_channel_button/unmute_channel_button.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/unmute_channel_button/index.ts","webpack://mattermost-webapp/./src/components/mobile_channel_header/mobile_channel_header.tsx","webpack://mattermost-webapp/./src/components/mobile_channel_header/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/menu_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/search_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function InfoIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 22 22'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.info', defaultMessage: 'Info Icon'})}\n            >\n                <g\n                    stroke='none'\n                    strokeWidth='1'\n                    fill='inherit'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-388.000000, -18.000000)'\n                        fill='inherit'\n                    >\n                        <g>\n                            <g transform='translate(381.000000, 11.000000)'>\n                                <g transform='translate(7.000000, 7.000000)'>\n                                    <path d='M11,22 C4.92486775,22 0,17.0751322 0,11 C0,4.92486775 4.92486775,0 11,0 C17.0751322,0 22,4.92486775 22,11 C22,17.0751322 17.0751322,22 11,22 Z M11,20.7924685 C16.408231,20.7924685 20.7924685,16.408231 20.7924685,11 C20.7924685,5.59176898 16.408231,1.20753149 11,1.20753149 C5.59176898,1.20753149 1.20753149,5.59176898 1.20753149,11 C1.20753149,16.408231 5.59176898,20.7924685 11,20.7924685 Z M10.1572266,16.0625 L10.1572266,8.69335938 L11.3466797,8.69335938 L11.3466797,16.0625 L10.1572266,16.0625 Z M10.7519531,7.50390625 C10.3417969,7.50390625 10,7.16210938 10,6.75195312 C10,6.33496094 10.3417969,6 10.7519531,6 C11.1689453,6 11.5039062,6.33496094 11.5039062,6.75195312 C11.5039062,7.16210938 11.1689453,7.50390625 10.7519531,7.50390625 Z'/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport InfoIcon from 'components/widgets/icons/info_icon';\n\ntype Props = {\n    channel: Channel;\n    actions: {\n        showChannelInfo: (channelId: string) => void;\n    };\n};\n\nconst NavbarInfoButton: React.FunctionComponent<Props> = ({channel, actions}: Props): JSX.Element => {\n    const intl = useIntl();\n\n    return (\n        <button\n            className='navbar-toggle navbar-right__icon navbar-info-button pull-right'\n            aria-label={intl.formatMessage({id: 'accessibility.button.Info', defaultMessage: 'Info'})}\n            onClick={() => actions.showChannelInfo(channel.id)}\n        >\n            <InfoIcon\n                className='icon icon__info'\n                aria-hidden='true'\n            />\n        </button>\n    );\n};\n\nexport default NavbarInfoButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {showChannelInfo} from 'actions/views/rhs';\n\nimport ChannelInfoButton from './channel_info_button';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            showChannelInfo,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ChannelInfoButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {BasicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\n\nconst NotifyCounts = ({unreadMentionCount, isUnread}: BasicUnreadMeta) => {\n    if (unreadMentionCount) {\n        return <span className='badge badge-notify'>{unreadMentionCount}</span>;\n    } else if (isUnread) {\n        return <span className='badge badge-notify'>{'•'}</span>;\n    }\n    return null;\n};\n\nexport default React.memo(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUnreadStatusInCurrentTeam, basicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\n\nimport type {GlobalState} from 'types/store';\n\nimport NotifyCounts from './notify_counts';\n\nfunction mapStateToProps(state: GlobalState) {\n    return basicUnreadMeta(getUnreadStatusInCurrentTeam(state));\n}\n\nexport default connect(mapStateToProps)(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport NotifyCounts from 'components/notify_counts';\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\ntype Props = {\n    actions: {\n        toggleLhs: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    };\n}\n\nconst CollapseLhsButton: React.FunctionComponent<Props> = (props: Props) => (\n    <button\n        key='navbar-toggle-sidebar'\n        type='button'\n        className='navbar-toggle'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={props.actions.toggleLhs}\n    >\n        <span className='sr-only'>\n            <FormattedMessage\n                id='navbar.toggle2'\n                defaultMessage='Toggle sidebar'\n            />\n        </span>\n        <MenuIcon className='style--none icon icon__menu icon--sidebarHeaderTextColor'/>\n        <NotifyCounts/>\n    </button>\n);\n\nexport default CollapseLhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {toggle as toggleLhs} from 'actions/views/lhs';\n\nimport CollapseLhsButton from './collapse_lhs_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        toggleLhs,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseLhsButton);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\ntype Actions = {\n    toggleRhsMenu: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\ntype Props = {\n    actions: Actions;\n}\n\nconst CollapseRhsButton: React.FunctionComponent<Props> = (props: Props) => (\n    <button\n        key='navbar-toggle-menu'\n        type='button'\n        className='navbar-toggle navbar-right__icon menu-toggle pull-right'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={props.actions.toggleRhsMenu}\n    >\n        <span className='sr-only'>\n            <FormattedMessage\n                id='navbar.toggle3'\n                defaultMessage='Toggle right sidebar'\n            />\n        </span>\n        <MenuIcon/>\n    </button>\n);\n\nexport default CollapseRhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {toggleMenu as toggleRhsMenu} from 'actions/views/rhs';\n\nimport CollapseRhsButton from './collapse_rhs_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        toggleRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseRhsButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\ntype Actions = {\n    openRHSSearch: () => void;\n}\n\ntype Props = {\n    actions: Actions;\n}\n\nconst ShowSearchButton = ({actions}: Props) => {\n    const intl = useIntl();\n\n    const handleClick = () => {\n        actions.openRHSSearch();\n    };\n\n    return (\n        <button\n            type='button'\n            className='navbar-toggle navbar-right__icon navbar-search pull-right'\n            onClick={handleClick}\n            aria-label={intl.formatMessage({id: 'accessibility.button.Search', defaultMessage: 'Search'})}\n        >\n            <SearchIcon\n                className='icon icon__search'\n                aria-hidden='true'\n            />\n        </button>\n    );\n};\nexport default React.memo(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {openRHSSearch} from 'actions/views/rhs';\n\nimport ShowSearchButton from './show_search_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        openRHSSearch,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {ChannelNotifyProps} from '@mattermost/types/channels';\n\nimport {NotificationLevels} from 'utils/constants';\n\ntype Actions = {\n    updateChannelNotifyProps: (userId: string, channelId: string, props: Pick<ChannelNotifyProps, 'mark_unread'>) => void;\n};\n\ntype Props = {\n    user: { id: string };\n    channel: { id: string };\n    actions: Actions;\n};\n\nconst UnmuteChannelButton = ({user, channel, actions}: Props) => {\n    const handleClick = () => {\n        actions.updateChannelNotifyProps(user.id, channel.id, {mark_unread: NotificationLevels.ALL});\n    };\n\n    return (\n        <button\n            type='button'\n            className='navbar-toggle icon icon__mute'\n            onClick={handleClick}\n        >\n            <span className='fa fa-bell-slash-o icon'/>\n        </button>\n    );\n};\n\nexport default React.memo(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport UnmuteChannelButton from './unmute_channel_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport ChannelInfoButton from './channel_info_button';\nimport CollapseLhsButton from './collapse_lhs_button';\nimport CollapseRhsButton from './collapse_rhs_button';\nimport ShowSearchButton from './show_search_button';\nimport UnmuteChannelButton from './unmute_channel_button';\n\nimport ChannelHeaderMenu from '../channel_header_menu/channel_header_menu';\nimport MobileChannelHeaderPlugins from '../channel_header_menu/menu_items/mobile_channel_header_plugins';\n\ntype Props = {\n    channel?: Channel;\n\n    inGlobalThreads?: boolean;\n    inDrafts?: boolean;\n    isMobileView: boolean;\n    isMuted?: boolean;\n    isRHSOpen?: boolean;\n    user: UserProfile;\n    actions: {\n        closeLhs: () => void;\n        closeRhs: () => void;\n        closeRhsMenu: () => void;\n    };\n}\n\nexport default class MobileChannelHeader extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.querySelector('.inner-wrap')?.addEventListener('click', this.hideSidebars);\n    }\n\n    componentWillUnmount() {\n        document.querySelector('.inner-wrap')?.removeEventListener('click', this.hideSidebars);\n    }\n\n    hideSidebars = (e: Event) => {\n        if (this.props.isMobileView) {\n            if (this.props.isRHSOpen) {\n                this.props.actions.closeRhs();\n            }\n\n            const target = e.target as HTMLElement | undefined;\n\n            if (target && target.className !== 'navbar-toggle' && target.className !== 'icon-bar') {\n                this.props.actions.closeLhs();\n                this.props.actions.closeRhsMenu();\n            }\n        }\n    };\n\n    render() {\n        const {user, channel, isMuted, inGlobalThreads, inDrafts} = this.props;\n\n        let heading;\n        if (inGlobalThreads) {\n            heading = (\n                <FormattedMessage\n                    id='globalThreads.heading'\n                    defaultMessage='Followed threads'\n                />\n            );\n        } else if (inDrafts) {\n            heading = (\n                <FormattedMessage\n                    id='drafts.heading'\n                    defaultMessage='Drafts'\n                />\n            );\n        } else if (channel) {\n            heading = (\n                <>\n                    <ChannelHeaderMenu\n                        isMobile={true}\n                    />\n\n                    {isMuted && (\n                        <UnmuteChannelButton\n                            user={user}\n                            channel={channel}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        return (\n            <div className='row header'>\n                <div id='navbar_wrapper'>\n                    <nav\n                        id='navbar'\n                        className='navbar navbar-default navbar-fixed-top'\n                        role='navigation'\n                    >\n                        <div className='container-fluid theme'>\n                            <div className='navbar-header'>\n                                <CollapseLhsButton/>\n                                <div className={classNames('navbar-brand', {GlobalThreads___title: inGlobalThreads})}>\n                                    {heading}\n                                </div>\n                                <div className='spacer'/>\n                                {channel && (\n                                    <ChannelInfoButton\n                                        channel={channel}\n                                    />\n                                )}\n                                {channel && (\n                                    <MobileChannelHeaderPlugins\n                                        channel={channel}\n                                        isDropdown={false}\n                                    />\n                                )}\n                                <ShowSearchButton/>\n                                <CollapseRhsButton/>\n                            </div>\n                        </div>\n                    </nav>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Location} from 'history';\nimport {connect} from 'react-redux';\nimport {withRouter, matchPath} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {close as closeLhs} from 'actions/views/lhs';\nimport {\n    closeRightHandSide as closeRhs,\n    closeMenu as closeRhsMenu,\n} from 'actions/views/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport MobileChannelHeader from './mobile_channel_header';\n\nconst isCurrentChannelMuted = createSelector(\n    'isCurrentChannelMuted',\n    getMyCurrentChannelMembership,\n    (membership) => isChannelMuted(membership),\n);\n\ntype OwnProps = {\n    location: Location;\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isMobileView: getIsMobileView(state),\n    isMuted: isCurrentChannelMuted(state),\n    inGlobalThreads: Boolean(matchPath(ownProps.location.pathname, {path: '/:team/threads/:threadIdentifier?'})),\n    inDrafts: Boolean(matchPath(ownProps.location.pathname, {path: '/:team/drafts'})),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        closeLhs,\n        closeRhs,\n        closeRhsMenu,\n    }, dispatch),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MobileChannelHeader));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function MenuIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='16px'\n                height='10px'\n                viewBox='0 0 16 10'\n                version='1.1'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.menu', defaultMessage: 'Menu Icon'})}\n            >\n                <g\n                    stroke='none'\n                    strokeWidth='1'\n                    fill='inherit'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-188.000000, -38.000000)'\n                        fillRule='nonzero'\n                        fill='inherit'\n                    >\n                        <g>\n                            <g>\n                                <g transform='translate(188.000000, 38.000000)'>\n                                    <path d='M15.5,0 C15.776,0 16,0.224 16,0.5 L16,1.5 C16,1.776 15.776,2 15.5,2 L0.5,2 C0.224,2 0,1.776 0,1.5 L0,0.5 C0,0.224 0.224,0 0.5,0 L15.5,0 Z M15.5,4 C15.776,4 16,4.224 16,4.5 L16,5.5 C16,5.776 15.776,6 15.5,6 L0.5,6 C0.224,6 0,5.776 0,5.5 L0,4.5 C0,4.224 0.224,4 0.5,4 L15.5,4 Z M15.5,8 C15.776,8 16,8.224 16,8.5 L16,9.5 C16,9.776 15.776,10 15.5,10 L0.5,10 C0.224,10 0,9.776 0,9.5 L0,8.5 C0,8.224 0.224,8 0.5,8 L15.5,8 Z'/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function SearchIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='16px'\n                height='16px'\n                viewBox='0 0 17 17'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.search', defaultMessage: 'Search Icon'})}\n            >\n                <path d='M16.398 15.138L13.014 11.754C13.458 11.178 13.8 10.548 14.04 9.86399C14.28 9.14399 14.4 8.40599 14.4 7.64999C14.4 6.42599 14.094 5.29199 13.482 4.24799C12.882 3.22799 12.072 2.41799 11.052 1.81799C10.008 1.20599 8.874 0.899988 7.65 0.899988C6.426 0.899988 5.292 1.20599 4.248 1.81799C3.228 2.41799 2.418 3.22799 1.818 4.24799C1.206 5.29199 0.9 6.42599 0.9 7.64999C0.9 8.87399 1.206 10.008 1.818 11.052C2.418 12.072 3.228 12.882 4.248 13.482C5.292 14.094 6.426 14.4 7.65 14.4C8.406 14.4 9.138 14.274 9.846 14.022C10.53 13.794 11.16 13.458 11.736 13.014L15.138 16.398C15.306 16.566 15.516 16.65 15.768 16.65C16.02 16.65 16.23 16.56 16.398 16.38C16.566 16.212 16.65 16.008 16.65 15.768C16.65 15.528 16.566 15.318 16.398 15.138ZM2.7 7.64999C2.7 6.74999 2.922 5.92199 3.366 5.16599C3.81 4.40999 4.41 3.80999 5.166 3.36599C5.922 2.92199 6.75 2.69999 7.65 2.69999C8.55 2.69999 9.378 2.92199 10.134 3.36599C10.89 3.80999 11.49 4.40999 11.934 5.16599C12.378 5.92199 12.6 6.74999 12.6 7.64999C12.6 8.54999 12.378 9.37799 11.934 10.134C11.49 10.89 10.89 11.49 10.134 11.934C9.378 12.378 8.55 12.6 7.65 12.6C6.75 12.6 5.922 12.378 5.166 11.934C4.41 11.49 3.81 10.89 3.366 10.134C2.922 9.37799 2.7 8.54999 2.7 7.64999Z'/>\n            </svg>\n        </span>\n    );\n}\n"],"names":["InfoIcon","props","formatMessage","useIntl","React","width","height","viewBox","role","id","defaultMessage","stroke","strokeWidth","fill","fillRule","transform","d","NavbarInfoButton","_ref","channel","actions","intl","className","onClick","showChannelInfo","propTypes","_pt","isRequired","connect","dispatch","bindActionCreators","ChannelInfoButton","NotifyCounts","unreadMentionCount","isUnread","state","basicUnreadMeta","getUnreadStatusInCurrentTeam","CollapseLhsButton","key","type","toggleLhs","FormattedMessage","MenuIcon","CollapseRhsButton","toggleRhsMenu","ShowSearchButton","handleClick","openRHSSearch","SearchIcon","UnmuteChannelButton","user","updateChannelNotifyProps","mark_unread","NotificationLevels","ALL","MobileChannelHeader","constructor","arguments","_defineProperty","e","this","isMobileView","isRHSOpen","closeRhs","target","closeLhs","closeRhsMenu","componentDidMount","_document$querySelect","document","querySelector","addEventListener","hideSidebars","componentWillUnmount","_document$querySelect2","removeEventListener","render","isMuted","inGlobalThreads","inDrafts","heading","ChannelHeaderMenu","isMobile","classNames","GlobalThreads___title","MobileChannelHeaderPlugins","isDropdown","isCurrentChannelMuted","createSelector","getMyCurrentChannelMembership","membership","isChannelMuted","withRouter","mapStateToProps","ownProps","getCurrentUser","getCurrentChannel","getIsMobileView","Boolean","matchPath","location","pathname","path","version"],"sourceRoot":""}