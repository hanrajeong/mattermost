{"version":3,"file":"8508.56a0622bb99565f0f0c1.js","mappings":"orBAsCA,EAtBA,SAAoBA,GAChB,MAAM,GAACC,EAAE,UAAEC,EAAS,KAAEC,GAAiBH,EAARI,E,qWAAIC,CAAIL,EAAKM,GAE5C,OACIC,IAAAA,cAAA,OAAKC,UAAU,eACXD,IAAAA,cAAA,QAAAE,OAAAC,OAAA,GACQN,EAAI,CACRH,GAAIA,EACJ,aAAYC,EACZ,cAAaD,EACbU,KAAK,cAETJ,IAAAA,cAAA,SACIC,UAAU,OACVI,QAASX,GAETM,IAAAA,cAAA,YAAOJ,IAIvB,E,6hCCyBA,MAs3BA,EAh3BeU,IAAsC,IAAAC,EAAAC,EAAA,IAArC,kBAACC,GAA+BH,EAC5C,MAAMI,GAAOC,EAAAA,EAAAA,YACP,cAACC,GAAiBF,EAClBG,GAAWC,EAAAA,EAAAA,eACXC,GAAUC,EAAAA,EAAAA,eACV,OAACC,IAAUC,EAAAA,EAAAA,eAEXC,EAAS,IAAIC,gBAAgBH,GAC7BI,EAAuB,QAAlBd,EAAGY,EAAOG,IAAI,YAAI,IAAAf,EAAAA,EAAI,GAC3BgB,GAA2B,QAAnBf,EAAGW,EAAOG,IAAI,aAAK,IAAAd,EAAAA,EAAI,GAC/BgB,GAAOL,EAAOG,IAAI,KAClBG,GAAqCD,GAAOE,KAAKC,MAAMH,IAAQ,CAAC,GAC/DI,MAAOC,GAAaC,KAAMC,GAAgBC,kBAAmBC,IAAoBR,GAElFS,IAASC,EAAAA,EAAAA,aAAYC,EAAAA,KACrB,iBACFC,GAAgB,mBAChBC,GAAkB,WAClBC,GAAU,sBACVC,GAAqB,uBACrBC,GAAsB,uBACtBC,GAAsB,0BACtBC,GAAyB,uBACzBC,GAAsB,WACtBC,GAAU,WACVC,GAAU,oBACVC,GAAmB,mBACnBC,GAAkB,SAClBC,GAAQ,sBACRC,GAAqB,iBACrBC,GAAgB,kBAChBC,GAAiB,iBACjBC,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,mBACfC,GAAkB,kBAClBC,IACAxB,IACE,WAACyB,KAAcxB,EAAAA,EAAAA,aAAYyB,EAAAA,IAC3BC,GAAWC,SAAQ3B,EAAAA,EAAAA,aAAY4B,EAAAA,KAC/BC,IAAwB7B,EAAAA,EAAAA,aAAY8B,EAAAA,IACpCC,IAAa/B,EAAAA,EAAAA,cAAagC,GAAyB5C,IAAasC,KAAYxC,OAA4C+C,GAApCC,EAAAA,EAAAA,IAAcF,EAAO9C,EAAO,QAEhHiD,IAAaC,EAAAA,EAAAA,QAAyB,MACtCC,IAAYD,EAAAA,EAAAA,QAAyB,MACrCE,IAAgBF,EAAAA,EAAAA,QAAyB,MAEzCG,GAA4B,SAAff,GAEbgB,GAA4C,SAAvBrC,GACrBsC,GAA4B,SAAfrC,GACbsC,GAAwBF,IAAgD,SAA1BnC,GAC9CsC,GAAyBH,IAAiD,SAA3BlC,GAC/CsC,GAAyBJ,IAAiD,SAA3BjC,GAC/CsC,GAA4BL,IAAoD,SAA9BhC,GAClDsC,GAAyBN,IAAiD,SAA3B/B,GAC/CsC,GAA4B,SAAfrC,GACbsC,GAA4B,SAAfrC,GACbsC,GAA0C,SAAtB7B,GAEpB8B,KAAgB9D,IAAaF,GAZW,SAArBgB,IAYyCuC,IAAeD,KAE1E/C,GAAO0D,KAAYC,EAAAA,EAAAA,UAAS1D,SAAAA,GAAe,KAC3CC,GAAM0D,KAAWD,EAAAA,EAAAA,UAAS,KAC1BE,GAAUC,KAAeH,EAAAA,EAAAA,UAAS,KAClCI,GAASC,KAAcL,EAAAA,EAAAA,UAASzB,QAAQvC,MACxCsE,GAAWC,KAAgBP,EAAAA,EAAAA,WAAS,IACpCQ,GAAYC,KAAiBT,EAAAA,EAAAA,UAAS,KACtCU,GAAWC,KAAgBX,EAAAA,EAAAA,UAAS,KACpCY,GAAeC,KAAoBb,EAAAA,EAAAA,UAAS,KAC5Cc,GAAiBC,KAAsBf,EAAAA,EAAAA,WAAS,IAChDgB,GAAaC,KAAkBjB,EAAAA,EAAAA,UAAS,KACxCkB,GAAUC,KAAenB,EAAAA,EAAAA,UAASxD,SAAAA,GAAkB,KACpD4E,GAAaC,KAAkBrB,EAAAA,EAAAA,UAAkC,OACjEsB,GAAcC,KAAmBvB,EAAAA,EAAAA,WAAS,IAC1CwB,GAA+BC,KAAoCzB,EAAAA,EAAAA,WAAS,IAC5E0B,GAAeC,KAAoB3B,EAAAA,EAAAA,WAAS,GAE7C4B,IAAkBC,EAAAA,EAAAA,KAElBC,GAAuBvC,IAA0BE,IAA6BD,IAA0BE,IAA0BC,IAAcC,GAChJmC,GAAWxD,QAAQiC,IAAcE,IAAaE,IAAiBI,IAAeI,IAC9EY,GAAYzD,QAAQlC,IAASE,IAAQ2D,MAAc6B,KAAa3B,GAChE6B,IAAiBrF,EAAAA,EAAAA,aAAYsF,EAAAA,KAC5BC,MAAOC,KAAgBC,EAAAA,EAAAA,GAAgB,GAAIJ,GAAgB9G,IAE3DmH,GAAkBC,KAAuBvC,EAAAA,EAAAA,UAAS,IA8FnDwC,IAAgCC,EAAAA,EAAAA,cAAY,KACzCpD,KACDqD,EAAAA,EAAAA,IAAW,eAAgB,cAG/BlH,EAAQmH,QAAQ,GACjB,CAACtD,GAAY7D,IAEVoH,GAAsBC,IAIsB,IAC1CC,GALqB,gBAEzBC,EAAe,QACfC,GACyCH,EAGjB,+CAApBE,GACoB,0DAApBA,IACAD,EAAeE,GAGnB/B,GAAe6B,GAAgBzH,EAAc,CAAClB,GAAI,6CAA8C8I,eAAgB,iCAChH5C,IAAW,EAAM,EA0Bf6C,IAAmBT,EAAAA,EAAAA,cAAY,IACjChI,IAAAA,cAAC0I,EAAAA,EAAmB,CAChBzI,UAAU,6BACV0I,iBAAkB/H,EAAc,CAC5BlB,GAAI,oCACJ8I,eAAgB,6BAEpBI,kBAAkB,SAClBC,mBAAoBjI,EAAc,CAC9BlB,GAAI,+BACJ8I,eAAgB,cAGzB,IAEGM,GAAiBC,KAAS,KAC5BjC,GAAgBkC,OAAOC,WA1PH,KA0PoC,GACzD,KAEGC,GAAuBC,GACjBC,KACAC,EAAAA,EAAAA,QACAD,EAAME,iBAENxB,GAAoBqB,GACpBpI,EAAQwI,KAAK,gCAADC,OAAiCvI,IACjD,EAmER,IA/DAwI,EAAAA,EAAAA,YAAU,KACN5I,GAAS6I,EAAAA,EAAAA,IAAiB,UAC1BzB,EAAAA,EAAAA,IAAW,SAAU,yBAAwB0B,EAAAA,EAAA,IAAMC,EAAAA,EAAAA,QAA2BC,EAAAA,EAAAA,QAE9Ef,KAEAE,OAAOc,iBAAiB,SAAUhB,IAE9B7H,KACKM,IAAYF,IAAUwC,GA9DGkG,OAAO1I,EAAeE,KACxD,MAAOC,KAAMwI,EAAI,MAAEtC,SAAe7G,GAASoJ,EAAAA,EAAAA,IAAwB5I,EAAOE,IAEtEyI,EACAjJ,EAAQwI,KAAK,IAAMS,EAAKlI,KAAO,aAAH0H,OAAgBU,EAAAA,GAAUC,kBAC/CzC,GACPS,GAAoBT,EACxB,EAwDQ0C,CAA8B/I,EAAOE,IAC9BA,GAtDGwI,WAClB,MAAM,KAACvI,EAAI,MAAEkG,SAAe7G,GAASwJ,EAAAA,EAAAA,IAAkB9I,IAEnDC,GACAgF,GAAe,IACfE,GAAYlF,EAAKM,OACV4F,GACPS,GAAoBT,GAGxB9B,IAAW,EAAM,EA6CT0E,CAAc/I,IACPsC,KACHG,GAKAjD,EAAQwI,KAAK,MAEbgB,EAAAA,EAAAA,QAKL,KACHvB,OAAOwB,oBAAoB,SAAU1B,GAAe,IAEzD,KAEHW,EAAAA,EAAAA,YAAU,KACNgB,SAASC,MAAQ9J,EACb,CACIlB,GAAI,eACJ8I,eAAgB,+BAEpB,CAACmC,SAAU1H,IAAY,cAC1B,GACF,CAACrC,EAAeqC,MAEnBwG,EAAAA,EAAAA,YAAU,KACFhJ,GACAA,EAAkB,CACdmK,kBAAmB7C,GACnB8C,cAAehE,GAAe4B,UAAqBrE,GAE3D,GACD,CAAC3D,EAAmBsH,GAA+BlB,GAAc4B,GAAkBxH,KAEtFwI,EAAAA,EAAAA,YAAU,KACFxC,KACIlB,IAAczB,GAAWwG,QACzBxG,GAAWwG,QAAQC,QACZ9E,IAAazB,GAAUsG,QAC9BtG,GAAUsG,QAAQC,QACX5E,IAAiB1B,GAAcqG,SACtCrG,GAAcqG,QAAQC,QAE1B7D,IAAiB,GACrB,GACD,CAACnB,GAAYE,GAAWE,GAAec,KAEtCtB,GACA,OAAQ3F,IAAAA,cAACgL,EAAAA,EAAa,MAG1B,MAAMC,GAAwBA,KAC1B3E,IAAmB,EAAK,EAetB4E,GAAqBA,IACnB9F,GACO5B,GACHxD,IAAAA,cAAA,OAAKC,UAAU,wCACXD,IAAAA,cAACmL,EAAAA,EAAQ,CACL5C,QAAS/E,GACT4H,QAAS,CAACC,kBAAkB,MAGpC,KAIJrL,IAAAA,cAAA,KAAGC,UAAU,gCACRW,EAAc,CACXlB,GAAI,iCACJ8I,eAAgB,0EAM1B8C,GAAsBC,IAAmE,IAAjEC,QAASC,MAAO7J,IAA4C2J,EACtFjG,GAAS1D,GACT8J,KAEI3F,IACAC,GAAc,GAClB,EAGE2F,GAAqBC,IAAkE,IAAhEJ,QAASC,MAAO3J,IAA2C8J,EACpFpG,GAAQ1D,GACR4J,KAEIzF,IACAC,GAAa,GACjB,EAGE2F,GAA8BC,IAAsE,IAApEN,QAASC,MAAOhG,IAA+CqG,EACjGpG,GAAYD,GACZiG,KAEIvF,IACAC,GAAiB,GACrB,EAsCE2F,GAAoBhC,UACtB,MAAMiC,EAAc,IAAI5K,gBAAgBH,GAASK,IAAI,qBAE/CT,GAASoL,EAAAA,EAAAA,OAEX5K,IACA6K,EAAAA,EAAAA,IAAc7K,EAAOK,KAAKyK,UAAU,CAACjI,YAAY,KAGjD8H,EACAjL,EAAQwI,KAAKyC,GACNhI,GAKPjD,EAAQwI,KAAK,MAEbgB,EAAAA,EAAAA,KACJ,EAGJ,SAAS6B,GAA0BC,EAAqB5M,IACpDwI,EAAAA,EAAAA,IAAW,SAAUoE,EAAa5M,EACtC,CAIA,MAiEMiM,GAAeA,KACjB9E,GAAe,KAAK,EAGlB0F,GAAevC,UAMjB,GALAwC,EAAEjD,iBACF8C,GAA0B,wBAAwBxC,EAAAA,EAAAA,OAClD9D,IAAa,GACboB,IAAiB,GAzEDsF,MAAM,IAAAC,EAAAC,EAAAC,EAAAC,EACtB,IAAIC,GAAU,EAEd,MAAMC,EAAkC,QAArBL,EAAGnI,GAAWwG,eAAO,IAAA2B,OAAA,EAAlBA,EAAoBhB,MAAMsB,OAC1CC,EAAsC,CAACC,OAAQ,GAAIC,SAAS,GAE7DJ,GAIOK,EAAAA,EAAAA,IAAQL,KAChB9G,GAAcpF,EAAc,CAAClB,GAAI,mCAAoC8I,eAAgB,wCACrFwE,EAAgBC,OAAO1D,KAAK,CAAC6D,MAAO,QAASC,KAAM,kBACnDR,GAAU,IANV7G,GAAcpF,EAAc,CAAClB,GAAI,iCAAkC8I,eAAgB,4BACnFwE,EAAgBC,OAAO1D,KAAK,CAAC6D,MAAO,QAASC,KAAM,iBACnDR,GAAU,GAOd,MAAMS,EAAoC,QAApBZ,EAAGlI,GAAUsG,eAAO,IAAA4B,OAAA,EAAjBA,EAAmBjB,MAAMsB,OAAOQ,cAEzD,GAAID,EAAkB,CAClB,MAAME,GAAgBC,EAAAA,EAAAA,IAAgBH,GAEtC,GAAIE,EAAe,CACf,IAAIvH,EAAY,GAEZA,EADAuH,EAAc9N,KAAOgO,EAAAA,GAAiBC,cAC1B/M,EAAc,CAAClB,GAAI,iCAAkC8I,eAAgB,wDAErE5H,EACR,CACIlB,GAAI,uCACJ8I,eAAgB,iKAEpB,CACIoF,IAAK1D,EAAAA,GAAU2D,oBACfC,IAAK5D,EAAAA,GAAU6D,sBAI3Bf,EAAgBC,OAAO1D,KAAK,CAAC6D,MAAO,WAAYC,KAAMG,EAAc9N,GAAG6N,gBACvErH,GAAaD,GACb4G,GAAU,CACd,CACJ,MACI3G,GAAatF,EAAc,CAAClB,GAAI,iCAAkC8I,eAAgB,4BAClFwE,EAAgBC,OAAO1D,KAAK,CAAC6D,MAAO,WAAYC,KAAM,iBACtDR,GAAU,EAGd,MAAMmB,EAA+C,QAA/BrB,EAAwB,QAAxBC,EAAGnI,GAAcqG,eAAO,IAAA8B,OAAA,EAArBA,EAAuBnB,aAAK,IAAAkB,EAAAA,EAAI,IACnD,MAACjF,EAAK,kBAAEuG,IAAqBrG,EAAAA,EAAAA,GAAgBoG,EAAkBxG,GAAgB9G,GAcrF,OAZIgH,IACAtB,GAAiBsB,GACjBsF,EAAgBC,OAAS,IAAID,EAAgBC,UAAWgB,GACxDpB,GAAU,GAGVG,EAAgBC,OAAOiB,SACvBlB,EAAgBE,SAAU,GAG9Bd,GAA0B,gBAAiBY,GAEpCH,CAAO,EAaVL,GAAe,KAAA2B,EAAAC,EAAAC,EACfnI,GAAa,IACbF,GAAc,IACdI,GAAiB,IACjBI,GAAe,IACfV,IAAa,GAEb,MAAMwI,EAAO,CACT1M,MAAyB,QAApBuM,EAAE7J,GAAWwG,eAAO,IAAAqD,OAAA,EAAlBA,EAAoB1C,MAAMsB,OACjCwB,SAA2B,QAAnBH,EAAE5J,GAAUsG,eAAO,IAAAsD,OAAA,EAAjBA,EAAmB3C,MAAMsB,OAAOQ,cAC1C9H,SAA+B,QAAvB4I,EAAE5J,GAAcqG,eAAO,IAAAuD,OAAA,EAArBA,EAAuB5C,OAG/BO,EAAc,IAAI5K,gBAAgBH,GAASK,IAAI,gBAE/C,KAACE,EAAI,MAAEkG,SAAe7G,GAAS2N,EAAAA,EAAAA,IAAWF,EAAMjN,EAAOE,GAAUyK,IAEvE,GAAItE,EAaA,OAZAd,GAAe,CACX6H,KAAM,SACN/D,MAAQhD,EAAsBa,QAC9BmG,UAAWhD,KAEf5F,IAAa,QAGiB,4CAA1B4B,EAAMY,kBACNpC,GAAawB,EAAMa,SACnBrB,IAAiB,UAtKL6C,OAAOuE,EAAmB9M,MAClDyG,EAAAA,EAAAA,IAAW,SAAU,2BAA2B2B,EAAAA,EAAAA,OAE5C3H,KACAgG,EAAAA,EAAAA,IAAW,SAAU,wBAAFuB,OAA0BvH,IAAoB,CAACqM,KAAMA,EAAK5O,KAGjF,MAAMsM,EAAc,IAAI5K,gBAAgBH,GAASK,IAAI,gBAE/C,MAACoG,SAAe7G,GAAS8N,EAAAA,EAAAA,IAAUnN,EAAK9B,GAAI4O,EAAK7I,WAEvD,GAAIiC,EACA,GAA8B,0CAA1BA,EAAMY,gBAA6D,CACnE,IAAIsG,EAAY,8BAAgCC,mBAAmBP,EAAK1M,OAEpE6E,KACAmI,GAAa,aAAeC,mBAAmBpI,KAG/CuF,IACA4C,GAAa,gBAAkB5C,GAGnCjL,EAAQwI,KAAKqF,EACjB,MACIpI,GAAekB,EAAMa,SACrBzC,IAAa,cAMfiG,IAAmB,EA2If+C,CAAoBR,EAAM9M,GAC5BuF,IAzd8BgI,MACtC,IACIC,EAAAA,GAAQC,sBAAsB,CAACrN,SAAOsN,mBAAoB,uBAC9D,CAAE,MAAOxH,GAELyH,QAAQzH,MAAMA,EAClB,GAodQqH,EAER,MACIjJ,IAAa,EACjB,EAGEsJ,GAA4BA,IAAMrO,EAAQsO,QAAQ,KAgElDC,GAAeA,CAAC/C,EAAuDgD,KAC5DhD,EAAEf,OAAOC,OAItBW,GAA0B,eAAD5C,OAAgB+F,GAAU,EAwOvD,OACIvP,IAAAA,cAAA,OAAKC,UAAU,eACXD,IAAAA,cAAA,OAAKC,UAAU,uBAvOJuP,MACf,IAAK3K,KAA0BwC,GAC3B,OACIrH,IAAAA,cAACyP,EAAAA,EAAY,CACT/E,MAAO9J,EAAc,CAAClB,GAAI,wBAAyB8I,eAAgB,yDACnED,QAAS3H,EAAc,CAAClB,GAAI,2BAA4B8I,eAAgB,gEAKpF,IAAK3C,KAAcR,IAAgBkB,IAAerC,IAAa,CAC3D,MAAMwL,EAAcrK,GAChBzE,EAAc,CAAClB,GAAI,6CAA8C8I,eAAgB,2CAEjFjC,IACA3F,EAAc,CAAClB,GAAI,6CAA8C8I,eAAgB,gCAGrF,OACIxI,IAAAA,cAACyP,EAAAA,EAAY,CACT/E,MAAOgF,EACPnH,QAAS3H,EAAc,CAAClB,GAAI,+CAAgD8I,eAAgB,mEAC5FmH,aACI3P,IAAAA,cAAA,OAAKC,UAAU,wCACXD,IAAAA,cAAA,UACIC,UAAU,oCACV2P,QAASR,IAERxO,EAAc,CAAClB,GAAI,+BAAgC8I,eAAgB,wBAM5F,CAEA,GAAIX,GACA,OACI7H,IAAAA,cAAC6P,EAAAA,MAAK,CACFC,KAAM,gCACNC,OAAQA,IACJ/P,IAAAA,cAACgQ,EAAAA,EAAgB,CACb7G,KAAMtB,GACNoI,QAASlE,OAO7B,IAAImE,EAAmDrO,GAAc,CACjEzB,KAAM+P,EAAAA,GAAWC,KACjB3E,MAAO7K,EACH,CACIlB,GAAI,gCACJ8I,eAAgB,qDAEpB,CAACmC,SAAU1H,MAEf,KAOJ,OAJI8C,KACAmK,EAA2B,CAAC9P,KAAM+P,EAAAA,GAAWE,MAAO5E,MAAO1F,KAI3D/F,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAA,OACIC,UAAWqQ,IACP,sBACA,CACI,kBAAmBlL,GACnB,mBAAoBA,KAAsBiB,GAC1C,uBAAwBQ,MAI/BzB,KAAsBiB,GACnBrG,IAAAA,cAAA,OACIC,UAAWqQ,IAAW,qCACtBC,IAAI,cACJC,IAAKxB,EAAAA,GAAQyB,iBAAiB,KAC9BC,QAASzF,KAGbjL,IAAAA,cAAA,MAAIC,UAAU,6BACTW,EAAc,CAAClB,GAAI,8BAA+B8I,eAAgB,uBAG1E0C,MAELlL,IAAAA,cAAA,OAAKC,UAAU,uBACT4G,IAAgB4B,KAClBzI,IAAAA,cAAA,OAAKC,UAAWqQ,IAAW,mBAAoB,CAAC,kBAAmBlL,GAAmB,aAAckC,MAChGtH,IAAAA,cAAA,OACIC,UAAU,4BAEVD,IAAAA,cAAA,KAAGC,UAAU,0BA1Z7BiD,IAKOtC,GADNiE,IAAyBwC,GACL,CAAC3H,GAAI,2CAA4C8I,eAAgB,kDAGrE,CAAC9I,GAAI,kCAAmC8I,eAAgB,yBAqZxDpD,IAAqB8F,KACrBvE,IACG3G,IAAAA,cAAC2Q,EAAAA,EAAW,CACR1Q,UAAU,yBACVwO,KAAM9H,GAAY8H,KAClB/D,MAAO/D,GAAY+D,MACnBgE,UAAW/H,GAAY+H,YAG9B7J,IACG7E,IAAAA,cAAA,QAAMC,UAAU,yBACZD,IAAAA,cAAC4Q,EAAAA,EAAK,CACF,cAAY,oCACZC,IAAKvM,GACLxC,KAAK,QACL7B,UAAU,oCACVG,KAAK,OACL0Q,UAAWC,EAAAA,EAAKC,MAChBvF,MAAO7J,GACPqP,SAAU3F,GACV4F,YAAatQ,EAAc,CACvBlB,GAAI,mCACJ8I,eAAgB,kBAEpB2I,SAAUtL,IAAa/B,QAAQjC,IAC/BuP,WAAW,EACXC,cAAenB,EACfoB,OAAS/E,GAAM+C,GAAa/C,EAAG,WAEnCvM,IAAAA,cAAC4Q,EAAAA,EAAK,CACF,cAAY,mCACZC,IAAKrM,GACL1C,KAAK,OACL7B,UAAU,mCACVG,KAAK,OACL0Q,UAAWC,EAAAA,EAAKC,MAChBvF,MAAO3J,GACPmP,SAAUtF,GACVuF,YAAatQ,EAAc,CACvBlB,GAAI,mCACJ8I,eAAgB,sBAEpB2I,SAAUtL,GACVuL,UAAWtN,QAAQjC,IACnBwP,cACIpL,GAAY,CAAC7F,KAAM+P,EAAAA,GAAWE,MAAO5E,MAAOxF,IAAa,CACrD7F,KAAM+P,EAAAA,GAAWC,KACjB3E,MAAO7K,EAAc,CAAClB,GAAI,iCAAkC8I,eAAgB,+EAGpF8I,OAAS/E,GAAM+C,GAAa/C,EAAG,cAEnCvM,IAAAA,cAACuR,EAAAA,EAAa,CACV,cAAY,uCACZV,IAAKpM,GACLxE,UAAU,uCACVwL,MAAOhG,GACPqL,UAAWC,EAAAA,EAAKC,MAChBC,SAAUpF,GACVsF,SAAUtL,GACV2L,YAAY,EACZC,KAAM9J,GACND,MAAOvB,GACPmL,OAAS/E,GAAM+C,GAAa/C,EAAG,cAzO3DpF,KAAoBuK,EAAAA,EAA0BC,UAE1C3R,IAAAA,cAAC4R,EAAU,CACPlS,GAAG,yCACHC,UAAWiB,EAAc,CAAClB,GAAI,iCAAkC8I,eAAgB,wBAChF1G,KAAK,aACLmP,SAAUA,IAAMjK,IAAkCD,IAClDnH,KACIgB,EACI,CAAClB,GAAI,kCAAmC8I,eAAgB,qSACxD,CACIqJ,EAAIC,GACA9R,IAAAA,cAAC+R,EAAAA,EAAY,CACTC,SAAS,8BACT7I,KAAM8I,EAAAA,GAAoBC,SAEzBJ,GAGTK,GAAKL,GACD9R,IAAAA,cAAC+R,EAAAA,EAAY,CACTC,SAAS,8BACT7I,KAAM8I,EAAAA,GAAoBG,6BAEzBN,GAGTO,KAAOP,GACH9R,IAAAA,cAAA,QAAMC,UAAU,UAAU6R,KAI1CQ,QAASvL,KAKjB/G,IAAAA,cAAA,OAAKC,UAAU,cACXD,IAAAA,cAAA,QAAMC,UAAU,cACXW,EAAc,CAAClB,GAAI,yBAA0B8I,eAAgB,mHAElExI,IAAAA,cAAA,QAAMC,UAAU,QACXW,EACG,CAAClB,GAAI,wBAAyB8I,eAAgB,6BAC9C,CACI+J,KAAMN,EAAAA,GAAoBO,iBAC1BX,EAAIC,GACA9R,IAAAA,cAAC+R,EAAAA,EAAY,CACTC,SAAS,SACT7I,KAAM8I,EAAAA,GAAoBO,kBAEzBV,OAyLD9R,IAAAA,cAACyS,EAAAA,EAAU,CACPC,aAAa,4CACbC,OAAQ9M,GACRsL,UAAW5J,GACXqI,QAAStD,GACT9D,eAAgB5H,EAAc,CAAClB,GAAI,+BAAgC8I,eAAgB,mBACnFoK,cAAehS,EAAc,CAAClB,GAAI,+BAAgC8I,eAAgB,yBAI7F3D,IAAyBwC,IACtBrH,IAAAA,cAAA,OAAKC,UAAU,iCACXD,IAAAA,cAAA,QAAMC,UAAU,uCACXW,EAAc,CAAClB,GAAI,2BAA4B8I,eAAgB,gCAI3EnB,IACGrH,IAAAA,cAAA,OAAKC,UAAWqQ,IAAW,sCAAuC,CAACuC,QAAShO,MAztBvEiO,MAC7B,MAAMC,EAAkD,GAExD,IAAK1L,GACD,OAAO0L,EAGX,GAAIjO,GAAwB,CACxB,MAAMkO,EAAM,GAAHxJ,OAAMwF,EAAAA,GAAQiE,gBAAe,kBAAAzJ,OAAiBvI,GACvD8R,EAAqBxJ,KAAK,CACtB7J,GAAI,SACJsT,MACAE,KAAMlT,IAAAA,cAACmT,EAAAA,EAAe,MACtBC,MAAOjQ,IAAoBvC,EAAc,CAAClB,GAAI,eAAgB8I,eAAgB,WAC9E6K,MAAO,CAACC,MAAOlQ,GAAmBmQ,YAAanQ,IAC/CwM,QAAS1G,GAAoB8J,IAErC,CAEA,GAAItO,IAAcK,GAAwB,CACtC,MAAMiO,EAAM,GAAHxJ,OAAMwF,EAAAA,GAAQiE,gBAAe,kBAAAzJ,OAAiBvI,GACvD8R,EAAqBxJ,KAAK,CACtB7J,GAAI,SACJsT,MACAE,KAAMlT,IAAAA,cAACwT,EAAAA,EAAe,MACtBJ,MAAOxS,EAAc,CAAClB,GAAI,eAAgB8I,eAAgB,WAC1DoH,QAAS1G,GAAoB8J,IAErC,CAEA,GAAItO,IAAcM,GAA2B,CACzC,MAAMgO,EAAM,GAAHxJ,OAAMwF,EAAAA,GAAQiE,gBAAe,qBAAAzJ,OAAoBvI,GAC1D8R,EAAqBxJ,KAAK,CACtB7J,GAAI,YACJsT,MACAE,KAAMlT,IAAAA,cAACyT,EAAAA,EAAW,MAClBL,MAAOxS,EAAc,CAAClB,GAAI,kBAAmB8I,eAAgB,aAC7DoH,QAAS1G,GAAoB8J,IAErC,CAEA,GAAItO,IAAcO,GAAwB,CACtC,MAAM+N,EAAM,GAAHxJ,OAAMwF,EAAAA,GAAQiE,gBAAe,kBAAAzJ,OAAiBvI,GACvD8R,EAAqBxJ,KAAK,CACtB7J,GAAI,SACJsT,MACAE,KAAMlT,IAAAA,cAAC0T,EAAAA,EAAe,MACtBN,MAAO/P,IAAoBzC,EAAc,CAAClB,GAAI,eAAgB8I,eAAgB,YAC9E6K,MAAO,CAACC,MAAOhQ,GAAmBiQ,YAAajQ,IAC/CsM,QAAS1G,GAAoB8J,IAErC,CAEA,GAAItO,IAAcQ,GAAY,CAC1B,MAAMyO,EAAiB,IAAIvS,gBAAgBH,GAC3C0S,EAAeC,IAAI,QAAS1J,EAAAA,GAAU2J,aAEtCd,EAAqBxJ,KAAK,CACtB7J,GAAI,OACJsT,IAAK,GAAFxJ,OAAKwF,EAAAA,GAAQ8E,SAAQ,WAAAtK,OAAUmK,EAAeI,YACjDb,KAAMlT,IAAAA,cAACgU,EAAAA,EAAQ,MACfZ,MAAOpQ,IAAsBpC,EAAc,CAAClB,GAAI,cAAe8I,eAAgB,wBAC/EoH,QAASA,QAEjB,CAEA,GAAIlL,IAAcS,GAAY,CAC1B,MAAMwO,EAAiB,IAAIvS,gBAAgBH,GAC3C0S,EAAeC,IAAI,SAAU,UAE7B,MAAMZ,EAAM,GAAHxJ,OAAMwF,EAAAA,GAAQ8E,SAAQ,oBAAAtK,OAAmBmK,EAAeI,YACjEhB,EAAqBxJ,KAAK,CACtB7J,GAAI,OACJsT,MACAE,KAAMlT,IAAAA,cAACgU,EAAAA,EAAQ,MACfZ,MAAOrQ,IAAuBnC,EAAc,CAAClB,GAAI,aAAc8I,eAAgB,SAC/EoH,QAAS1G,GAAoB8J,IAErC,CAEA,OAAOD,CAAoB,EA0oBED,GAA2BmB,KAAKC,GAC7BlU,IAAAA,cAACmU,EAAAA,EAAmBjU,OAAAC,OAAA,CAChBiU,IAAKF,EAAOxU,GACZ2U,UAAWxP,QAAwBT,EAAY,UAC3C8P,OAKnBrP,KAA0B0B,IACvBvG,IAAAA,cAAA,KAAGC,UAAU,8BACTD,IAAAA,cAACsU,EAAAA,iBAAgB,CACb5U,GAAG,mBACH8I,eAAe,sOACf+L,OAAQ,CACJ5J,SAAU1H,GACVuR,eAAiB1C,GACb9R,IAAAA,cAAC+R,EAAAA,EAAY,CACT5I,KAAM1F,GACNuO,SAAS,uBAERF,GAGT2C,kBAAoB3C,GAChB9R,IAAAA,cAAC+R,EAAAA,EAAY,CACT5I,KAAMzF,GACNsO,SAAS,yBAERF,UAUtC,EAOEtC,IAEH,C,yGCp6BP,SAAS5H,EAAgBnC,EAAkB+B,EAAgC9G,GAC9E,IAAIgU,EAAUC,EAAexO,cAAczG,GAC3C,MAAMuO,EAAoB,GAC1B,IAAI2G,GAAQ,EACZ,MAAMC,EAAgBrN,EAAeqN,eAAiB3K,EAAAA,GAAU4K,oBA2ChE,IAAIpN,EAyBJ,OAlEIjC,EAASyI,OAAS2G,GAAiBpP,EAASyI,OAAShE,EAAAA,GAAU6K,uBAC/DH,GAAQ,EACR3G,EAAkB1E,KAAK,CAAC6D,MAAO,WAAYC,KAAM,kBAGjD7F,EAAewN,mBACVvP,EAASwP,MAAM,WAChBL,GAAQ,GAGZF,GAAW,YACXzG,EAAkB1E,KAAK,CAAC6D,MAAO,WAAYC,KAAM,eAGjD7F,EAAe0N,mBACVzP,EAASwP,MAAM,WAChBL,GAAQ,GAGZF,GAAW,YACXzG,EAAkB1E,KAAK,CAAC6D,MAAO,WAAYC,KAAM,eAGjD7F,EAAe2N,gBACV1P,EAASwP,MAAM,WAChBL,GAAQ,GAGZF,GAAW,SACXzG,EAAkB1E,KAAK,CAAC6D,MAAO,WAAYC,KAAM,YAGjD7F,EAAe4N,gBACV3P,EAASwP,MAAM,yCAChBL,GAAQ,GAGZF,GAAW,SACXzG,EAAkB1E,KAAK,CAAC6D,MAAO,WAAYC,KAAM,YAIhDuH,IACDlN,EAAQhH,EACJA,EAAKE,cACD,CACIlB,GAAIgV,EACJlM,eAAgB,wCAEpB,CACIoF,IAAKiH,EACL/G,IAAK5D,EAAAA,GAAU6K,sBAIvB/U,IAAAA,cAACsU,EAAAA,iBAAgB,CACb5U,GAAIgV,EACJlM,eAAe,uCACf+L,OAAQ,CACJ3G,IAAKiH,EACL/G,IAAK5D,EAAAA,GAAU6K,wBAMxB,CAACH,QAAOlN,QAAOuG,oBAC1B,CAEO,MAAM0G,GAAiBU,EAAAA,EAAAA,gBAAe,CACzClP,cAAe,CAACzG,GAAI,uCAAwC8I,eAAgB,sDAC5E8M,uBAAwB,CAAC5V,GAAI,gDAAiD8I,eAAgB,oFAC9F+M,6BAA8B,CAAC7V,GAAI,sDAAuD8I,eAAgB,gGAC1GgN,mCAAoC,CAAC9V,GAAI,4DAA6D8I,eAAgB,qHACtHiN,6BAA8B,CAAC/V,GAAI,sDAAuD8I,eAAgB,2GAC1GkN,gCAAiC,CAAChW,GAAI,yDAA0D8I,eAAgB,uGAChHmN,sCAAuC,CAACjW,GAAI,+DAAgE8I,eAAgB,oHAC5HoN,4CAA6C,CAAClW,GAAI,qEAAsE8I,eAAgB,wIACxIqN,sCAAuC,CAACnW,GAAI,+DAAgE8I,eAAgB,+HAC5HsN,oBAAqB,CAACpW,GAAI,6CAA8C8I,eAAgB,0EACxFuN,0BAA2B,CAACrW,GAAI,mDAAoD8I,eAAgB,iGACpGwN,oBAAqB,CAACtW,GAAI,6CAA8C8I,eAAgB,qFACxFyN,uBAAwB,CAACvW,GAAI,gDAAiD8I,eAAgB,oFAC9F0N,6BAA8B,CAACxW,GAAI,sDAAuD8I,eAAgB,iGAC1G2N,mCAAoC,CAACzW,GAAI,4DAA6D8I,eAAgB,qHACtH4N,6BAA8B,CAAC1W,GAAI,sDAAuD8I,eAAgB,6G","sources":["webpack://mattermost-webapp/./src/components/widgets/inputs/check/index.tsx","webpack://mattermost-webapp/./src/components/signup/signup.tsx","webpack://mattermost-webapp/./src/utils/password.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport './check.scss';\n\ntype Props = {\n    id: string;\n    ariaLabel: string;\n    name: string;\n    text: ReactNode;\n    onChange: () => void;\n    checked: boolean;\n}\n\nfunction CheckInput(props: Props) {\n    const {id, ariaLabel, text, ...rest} = props;\n\n    return (\n        <div className='check-input'>\n            <input\n                {...rest}\n                id={id}\n                aria-label={ariaLabel}\n                data-testid={id}\n                type='checkbox'\n            />\n            <label\n                className='text'\n                htmlFor={id}\n            >\n                <span>{text}</span>\n            </label>\n        </div>\n    );\n}\n\nexport default CheckInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport throttle from 'lodash/throttle';\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\nimport type {FocusEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {useLocation, useHistory, Route} from 'react-router-dom';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\nimport {createUser, loadMe} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getConfig, getLicense, getPasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getIsOnboardingFlowEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\nimport {removeGlobalItem, setGlobalItem} from 'actions/storage';\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {loginById} from 'actions/views/login';\nimport {getGlobalItem} from 'selectors/storage';\n\nimport AlertBanner from 'components/alert_banner';\nimport type {ModeType, AlertBannerProps} from 'components/alert_banner';\nimport useCWSAvailabilityCheck, {CSWAvailabilityCheckTypes} from 'components/common/hooks/useCWSAvailabilityCheck';\nimport DesktopAuthToken from 'components/desktop_auth_token';\nimport ExternalLink from 'components/external_link';\nimport ExternalLoginButton from 'components/external_login_button/external_login_button';\nimport type {ExternalLoginButtonType} from 'components/external_login_button/external_login_button';\nimport AlternateLinkLayout from 'components/header_footer_route/content_layouts/alternate_link';\nimport ColumnLayout from 'components/header_footer_route/content_layouts/column';\nimport type {CustomizeHeaderType} from 'components/header_footer_route/header_footer_route';\nimport LoadingScreen from 'components/loading_screen';\nimport Markdown from 'components/markdown';\nimport SaveButton from 'components/save_button';\nimport EntraIdIcon from 'components/widgets/icons/entra_id_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport LoginGitlabIcon from 'components/widgets/icons/login_gitlab_icon';\nimport LoginGoogleIcon from 'components/widgets/icons/login_google_icon';\nimport LoginOpenIDIcon from 'components/widgets/icons/login_openid_icon';\nimport CheckInput from 'components/widgets/inputs/check';\nimport Input, {SIZE} from 'components/widgets/inputs/input/input';\nimport type {CustomMessageInputType} from 'components/widgets/inputs/input/input';\nimport PasswordInput from 'components/widgets/inputs/password_input/password_input';\n\nimport {Constants, HostedCustomerLinks, ItemStatus, ValidationErrors} from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\nimport {isDesktopApp} from 'utils/user_agent';\nimport {isValidUsername, getRoleFromTrackFlow, getMediumFromTrackFlow} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport './signup.scss';\n\nconst MOBILE_SCREEN_WIDTH = 1200;\n\ntype SignupProps = {\n    onCustomizeHeader?: CustomizeHeaderType;\n}\n\nconst Signup = ({onCustomizeHeader}: SignupProps) => {\n    const intl = useIntl();\n    const {formatMessage} = intl;\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const {search} = useLocation();\n\n    const params = new URLSearchParams(search);\n    const token = params.get('t') ?? '';\n    const inviteId = params.get('id') ?? '';\n    const data = params.get('d');\n    const parsedData: Record<string, string> = data ? JSON.parse(data) : {};\n    const {email: parsedEmail, name: parsedTeamName, reminder_interval: reminderInterval} = parsedData;\n\n    const config = useSelector(getConfig);\n    const {\n        EnableOpenServer,\n        EnableUserCreation,\n        NoAccounts,\n        EnableSignUpWithEmail,\n        EnableSignUpWithGitLab,\n        EnableSignUpWithGoogle,\n        EnableSignUpWithOffice365,\n        EnableSignUpWithOpenId,\n        EnableLdap,\n        EnableSaml,\n        SamlLoginButtonText,\n        LdapLoginFieldName,\n        SiteName,\n        CustomDescriptionText,\n        GitLabButtonText,\n        GitLabButtonColor,\n        OpenIdButtonText,\n        OpenIdButtonColor,\n        EnableCustomBrand,\n        CustomBrandText,\n        TermsOfServiceLink,\n        PrivacyPolicyLink,\n    } = config;\n    const {IsLicensed} = useSelector(getLicense);\n    const loggedIn = Boolean(useSelector(getCurrentUserId));\n    const onboardingFlowEnabled = useSelector(getIsOnboardingFlowEnabled);\n    const usedBefore = useSelector((state: GlobalState) => (!inviteId && !loggedIn && token ? getGlobalItem(state, token, null) : undefined));\n\n    const emailInput = useRef<HTMLInputElement>(null);\n    const nameInput = useRef<HTMLInputElement>(null);\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const isLicensed = IsLicensed === 'true';\n    const enableOpenServer = EnableOpenServer === 'true';\n    const enableUserCreation = EnableUserCreation === 'true';\n    const noAccounts = NoAccounts === 'true';\n    const enableSignUpWithEmail = enableUserCreation && EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = enableUserCreation && EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = enableUserCreation && EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = enableUserCreation && EnableSignUpWithOffice365 === 'true';\n    const enableSignUpWithOpenId = enableUserCreation && EnableSignUpWithOpenId === 'true';\n    const enableLDAP = EnableLdap === 'true';\n    const enableSAML = EnableSaml === 'true';\n    const enableCustomBrand = EnableCustomBrand === 'true';\n\n    const noOpenServer = !inviteId && !token && !enableOpenServer && !noAccounts && !enableUserCreation;\n\n    const [email, setEmail] = useState(parsedEmail ?? '');\n    const [name, setName] = useState('');\n    const [password, setPassword] = useState('');\n    const [loading, setLoading] = useState(Boolean(inviteId));\n    const [isWaiting, setIsWaiting] = useState(false);\n    const [emailError, setEmailError] = useState('');\n    const [nameError, setNameError] = useState('');\n    const [passwordError, setPasswordError] = useState('');\n    const [brandImageError, setBrandImageError] = useState(false);\n    const [serverError, setServerError] = useState('');\n    const [teamName, setTeamName] = useState(parsedTeamName ?? '');\n    const [alertBanner, setAlertBanner] = useState<AlertBannerProps | null>(null);\n    const [isMobileView, setIsMobileView] = useState(false);\n    const [subscribeToSecurityNewsletter, setSubscribeToSecurityNewsletter] = useState(false);\n    const [submitClicked, setSubmitClicked] = useState(false);\n\n    const cwsAvailability = useCWSAvailabilityCheck();\n\n    const enableExternalSignup = enableSignUpWithGitLab || enableSignUpWithOffice365 || enableSignUpWithGoogle || enableSignUpWithOpenId || enableLDAP || enableSAML;\n    const hasError = Boolean(emailError || nameError || passwordError || serverError || alertBanner);\n    const canSubmit = Boolean(email && name && password) && !hasError && !loading;\n    const passwordConfig = useSelector(getPasswordConfig);\n    const {error: passwordInfo} = isValidPassword('', passwordConfig, intl);\n\n    const [desktopLoginLink, setDesktopLoginLink] = useState('');\n\n    const subscribeToSecurityNewsletterFunc = () => {\n        try {\n            Client4.subscribeToNewsletter({email, subscribed_content: 'security_newsletter'});\n        } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error(error);\n        }\n    };\n\n    const getExternalSignupOptions = () => {\n        const externalLoginOptions: ExternalLoginButtonType[] = [];\n\n        if (!enableExternalSignup) {\n            return externalLoginOptions;\n        }\n\n        if (enableSignUpWithGitLab) {\n            const url = `${Client4.getOAuthRoute()}/gitlab/signup${search}`;\n            externalLoginOptions.push({\n                id: 'gitlab',\n                url,\n                icon: <LoginGitlabIcon/>,\n                label: GitLabButtonText || formatMessage({id: 'login.gitlab', defaultMessage: 'GitLab'}),\n                style: {color: GitLabButtonColor, borderColor: GitLabButtonColor},\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithGoogle) {\n            const url = `${Client4.getOAuthRoute()}/google/signup${search}`;\n            externalLoginOptions.push({\n                id: 'google',\n                url,\n                icon: <LoginGoogleIcon/>,\n                label: formatMessage({id: 'login.google', defaultMessage: 'Google'}),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithOffice365) {\n            const url = `${Client4.getOAuthRoute()}/office365/signup${search}`;\n            externalLoginOptions.push({\n                id: 'office365',\n                url,\n                icon: <EntraIdIcon/>,\n                label: formatMessage({id: 'login.office365', defaultMessage: 'Entra ID'}),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithOpenId) {\n            const url = `${Client4.getOAuthRoute()}/openid/signup${search}`;\n            externalLoginOptions.push({\n                id: 'openid',\n                url,\n                icon: <LoginOpenIDIcon/>,\n                label: OpenIdButtonText || formatMessage({id: 'login.openid', defaultMessage: 'Open ID'}),\n                style: {color: OpenIdButtonColor, borderColor: OpenIdButtonColor},\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableLDAP) {\n            const newSearchParam = new URLSearchParams(search);\n            newSearchParam.set('extra', Constants.CREATE_LDAP);\n\n            externalLoginOptions.push({\n                id: 'ldap',\n                url: `${Client4.getUrl()}/login?${newSearchParam.toString()}`,\n                icon: <LockIcon/>,\n                label: LdapLoginFieldName || formatMessage({id: 'signup.ldap', defaultMessage: 'AD/LDAP Credentials'}),\n                onClick: () => {},\n            });\n        }\n\n        if (isLicensed && enableSAML) {\n            const newSearchParam = new URLSearchParams(search);\n            newSearchParam.set('action', 'signup');\n\n            const url = `${Client4.getUrl()}/login/sso/saml?${newSearchParam.toString()}`;\n            externalLoginOptions.push({\n                id: 'saml',\n                url,\n                icon: <LockIcon/>,\n                label: SamlLoginButtonText || formatMessage({id: 'login.saml', defaultMessage: 'SAML'}),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        return externalLoginOptions;\n    };\n\n    const handleHeaderBackButtonOnClick = useCallback(() => {\n        if (!noAccounts) {\n            trackEvent('signup_email', 'click_back');\n        }\n\n        history.goBack();\n    }, [noAccounts, history]);\n\n    const handleInvalidInvite = ({\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        server_error_id,\n        message,\n    }: {server_error_id: string; message: string}) => {\n        let errorMessage;\n\n        if (server_error_id === 'store.sql_user.save.max_accounts.app_error' ||\n            server_error_id === 'api.team.add_user_to_team_from_invite.guest.app_error') {\n            errorMessage = message;\n        }\n\n        setServerError(errorMessage || formatMessage({id: 'signup_user_completed.invalid_invite.title', defaultMessage: 'This invite link is invalid'}));\n        setLoading(false);\n    };\n\n    const handleAddUserToTeamFromInvite = async (token: string, inviteId: string) => {\n        const {data: team, error} = await dispatch(addUserToTeamFromInvite(token, inviteId));\n\n        if (team) {\n            history.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            handleInvalidInvite(error);\n        }\n    };\n\n    const getInviteInfo = async (inviteId: string) => {\n        const {data, error} = await dispatch(getTeamInviteInfo(inviteId));\n\n        if (data) {\n            setServerError('');\n            setTeamName(data.name);\n        } else if (error) {\n            handleInvalidInvite(error);\n        }\n\n        setLoading(false);\n    };\n\n    const getAlternateLink = useCallback(() => (\n        <AlternateLinkLayout\n            className='signup-body-alternate-link'\n            alternateMessage={formatMessage({\n                id: 'signup_user_completed.haveAccount',\n                defaultMessage: 'Already have an account?',\n            })}\n            alternateLinkPath='/login'\n            alternateLinkLabel={formatMessage({\n                id: 'signup_user_completed.signIn',\n                defaultMessage: 'Log in',\n            })}\n        />\n    ), []);\n\n    const onWindowResize = throttle(() => {\n        setIsMobileView(window.innerWidth < MOBILE_SCREEN_WIDTH);\n    }, 100);\n\n    const desktopExternalAuth = (href: string) => {\n        return (event: React.MouseEvent) => {\n            if (isDesktopApp()) {\n                event.preventDefault();\n\n                setDesktopLoginLink(href);\n                history.push(`/signup_user_complete/desktop${search}`);\n            }\n        };\n    };\n\n    useEffect(() => {\n        dispatch(removeGlobalItem('team'));\n        trackEvent('signup', 'signup_user_01_welcome', {...getRoleFromTrackFlow(), ...getMediumFromTrackFlow()});\n\n        onWindowResize();\n\n        window.addEventListener('resize', onWindowResize);\n\n        if (search) {\n            if ((inviteId || token) && loggedIn) {\n                handleAddUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                getInviteInfo(inviteId);\n            } else if (loggedIn) {\n                if (onboardingFlowEnabled) {\n                    // need info about whether admin or not,\n                    // and whether admin has already completed\n                    // first tiem onboarding. Instead of fetching and orchestrating that here,\n                    // let the default root component handle it.\n                    history.push('/');\n                } else {\n                    redirectUserToDefaultTeam();\n                }\n            }\n        }\n\n        return () => {\n            window.removeEventListener('resize', onWindowResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        document.title = formatMessage(\n            {\n                id: 'signup.title',\n                defaultMessage: 'Create Account | {siteName}',\n            },\n            {siteName: SiteName || 'Mattermost'},\n        );\n    }, [formatMessage, SiteName]);\n\n    useEffect(() => {\n        if (onCustomizeHeader) {\n            onCustomizeHeader({\n                onBackButtonClick: handleHeaderBackButtonOnClick,\n                alternateLink: isMobileView ? getAlternateLink() : undefined,\n            });\n        }\n    }, [onCustomizeHeader, handleHeaderBackButtonOnClick, isMobileView, getAlternateLink, search]);\n\n    useEffect(() => {\n        if (submitClicked) {\n            if (emailError && emailInput.current) {\n                emailInput.current.focus();\n            } else if (nameError && nameInput.current) {\n                nameInput.current.focus();\n            } else if (passwordError && passwordInput.current) {\n                passwordInput.current.focus();\n            }\n            setSubmitClicked(false);\n        }\n    }, [emailError, nameError, passwordError, submitClicked]);\n\n    if (loading) {\n        return (<LoadingScreen/>);\n    }\n\n    const handleBrandImageError = () => {\n        setBrandImageError(true);\n    };\n\n    const getCardTitle = () => {\n        if (CustomDescriptionText) {\n            return CustomDescriptionText;\n        }\n\n        if (!enableSignUpWithEmail && enableExternalSignup) {\n            return formatMessage({id: 'signup_user_completed.cardtitle.external', defaultMessage: 'Create your account with one of the following:'});\n        }\n\n        return formatMessage({id: 'signup_user_completed.cardtitle', defaultMessage: 'Create your account'});\n    };\n\n    const getMessageSubtitle = () => {\n        if (enableCustomBrand) {\n            return CustomBrandText ? (\n                <div className='signup-body-custom-branding-markdown'>\n                    <Markdown\n                        message={CustomBrandText}\n                        options={{mentionHighlight: false}}\n                    />\n                </div>\n            ) : null;\n        }\n\n        return (\n            <p className='signup-body-message-subtitle'>\n                {formatMessage({\n                    id: 'signup_user_completed.subtitle',\n                    defaultMessage: 'Create your Mattermost account to start collaborating with your team',\n                })}\n            </p>\n        );\n    };\n\n    const handleEmailOnChange = ({target: {value: email}}: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(email);\n        dismissAlert();\n\n        if (emailError) {\n            setEmailError('');\n        }\n    };\n\n    const handleNameOnChange = ({target: {value: name}}: React.ChangeEvent<HTMLInputElement>) => {\n        setName(name);\n        dismissAlert();\n\n        if (nameError) {\n            setNameError('');\n        }\n    };\n\n    const handlePasswordInputOnChange = ({target: {value: password}}: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(password);\n        dismissAlert();\n\n        if (passwordError) {\n            setPasswordError('');\n        }\n    };\n\n    const handleSignupSuccess = async (user: UserProfile, data: UserProfile) => {\n        trackEvent('signup', 'signup_user_02_complete', getRoleFromTrackFlow());\n\n        if (reminderInterval) {\n            trackEvent('signup', `signup_from_reminder_${reminderInterval}`, {user: user.id});\n        }\n\n        const redirectTo = (new URLSearchParams(search)).get('redirect_to');\n\n        const {error} = await dispatch(loginById(data.id, user.password));\n\n        if (error) {\n            if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                let verifyUrl = '/should_verify_email?email=' + encodeURIComponent(user.email);\n\n                if (teamName) {\n                    verifyUrl += '&teamname=' + encodeURIComponent(teamName);\n                }\n\n                if (redirectTo) {\n                    verifyUrl += '&redirect_to=' + redirectTo;\n                }\n\n                history.push(verifyUrl);\n            } else {\n                setServerError(error.message);\n                setIsWaiting(false);\n            }\n\n            return;\n        }\n\n        await postSignupSuccess();\n    };\n\n    const postSignupSuccess = async () => {\n        const redirectTo = (new URLSearchParams(search)).get('redirect_to');\n\n        await dispatch(loadMe());\n\n        if (token) {\n            setGlobalItem(token, JSON.stringify({usedBefore: true}));\n        }\n\n        if (redirectTo) {\n            history.push(redirectTo);\n        } else if (onboardingFlowEnabled) {\n            // need info about whether admin or not,\n            // and whether admin has already completed\n            // first tiem onboarding. Instead of fetching and orchestrating that here,\n            // let the default root component handle it.\n            history.push('/');\n        } else {\n            redirectUserToDefaultTeam();\n        }\n    };\n\n    function sendSignUpTelemetryEvents(telemetryId: string, props?: any) {\n        trackEvent('signup', telemetryId, props);\n    }\n\n    type TelemetryErrorList = {errors: Array<{field: string; rule: string}>; success: boolean};\n\n    const isUserValid = () => {\n        let isValid = true;\n\n        const providedEmail = emailInput.current?.value.trim();\n        const telemetryEvents: TelemetryErrorList = {errors: [], success: true};\n\n        if (!providedEmail) {\n            setEmailError(formatMessage({id: 'signup_user_completed.required', defaultMessage: 'This field is required'}));\n            telemetryEvents.errors.push({field: 'email', rule: 'not_provided'});\n            isValid = false;\n        } else if (!isEmail(providedEmail)) {\n            setEmailError(formatMessage({id: 'signup_user_completed.validEmail', defaultMessage: 'Please enter a valid email address'}));\n            telemetryEvents.errors.push({field: 'email', rule: 'invalid_email'});\n            isValid = false;\n        }\n\n        const providedUsername = nameInput.current?.value.trim().toLowerCase();\n\n        if (providedUsername) {\n            const usernameError = isValidUsername(providedUsername);\n\n            if (usernameError) {\n                let nameError = '';\n                if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                    nameError = formatMessage({id: 'signup_user_completed.reserved', defaultMessage: 'This username is reserved, please choose a new one.'});\n                } else {\n                    nameError = formatMessage(\n                        {\n                            id: 'signup_user_completed.usernameLength',\n                            defaultMessage: 'Usernames have to begin with a lowercase letter and be {min}-{max} characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.',\n                        },\n                        {\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        },\n                    );\n                }\n                telemetryEvents.errors.push({field: 'username', rule: usernameError.id.toLowerCase()});\n                setNameError(nameError);\n                isValid = false;\n            }\n        } else {\n            setNameError(formatMessage({id: 'signup_user_completed.required', defaultMessage: 'This field is required'}));\n            telemetryEvents.errors.push({field: 'username', rule: 'not_provided'});\n            isValid = false;\n        }\n\n        const providedPassword = passwordInput.current?.value ?? '';\n        const {error, telemetryErrorIds} = isValidPassword(providedPassword, passwordConfig, intl);\n\n        if (error) {\n            setPasswordError(error as string);\n            telemetryEvents.errors = [...telemetryEvents.errors, ...telemetryErrorIds];\n            isValid = false;\n        }\n\n        if (telemetryEvents.errors.length) {\n            telemetryEvents.success = false;\n        }\n\n        sendSignUpTelemetryEvents('validate_user', telemetryEvents);\n\n        return isValid;\n    };\n\n    const dismissAlert = () => {\n        setAlertBanner(null);\n    };\n\n    const handleSubmit = async (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n        sendSignUpTelemetryEvents('click_create_account', getRoleFromTrackFlow());\n        setIsWaiting(true);\n        setSubmitClicked(true);\n\n        if (isUserValid()) {\n            setNameError('');\n            setEmailError('');\n            setPasswordError('');\n            setServerError('');\n            setIsWaiting(true);\n\n            const user = {\n                email: emailInput.current?.value.trim(),\n                username: nameInput.current?.value.trim().toLowerCase(),\n                password: passwordInput.current?.value,\n            } as UserProfile;\n\n            const redirectTo = (new URLSearchParams(search)).get('redirect_to') as string;\n\n            const {data, error} = await dispatch(createUser(user, token, inviteId, redirectTo));\n\n            if (error) {\n                setAlertBanner({\n                    mode: 'danger' as ModeType,\n                    title: (error as ServerError).message,\n                    onDismiss: dismissAlert,\n                });\n                setIsWaiting(false);\n\n                // Special case for accessibility to show the error message when the username is already taken\n                if (error.server_error_id === 'app.user.save.username_exists.app_error') {\n                    setNameError(error.message);\n                    setSubmitClicked(true);\n                }\n                return;\n            }\n\n            await handleSignupSuccess(user, data!);\n            if (subscribeToSecurityNewsletter) {\n                subscribeToSecurityNewsletterFunc();\n            }\n        } else {\n            setIsWaiting(false);\n        }\n    };\n\n    const handleReturnButtonOnClick = () => history.replace('/');\n\n    const getNewsletterCheck = () => {\n        if (cwsAvailability === CSWAvailabilityCheckTypes.Available) {\n            return (\n                <CheckInput\n                    id='signup-body-card-form-check-newsletter'\n                    ariaLabel={formatMessage({id: 'newsletter_optin.checkmark.box', defaultMessage: 'newsletter checkbox'})}\n                    name='newsletter'\n                    onChange={() => setSubscribeToSecurityNewsletter(!subscribeToSecurityNewsletter)}\n                    text={\n                        formatMessage(\n                            {id: 'newsletter_optin.checkmark.text', defaultMessage: '<span>I would like to receive Mattermost security updates via newsletter.</span> By subscribing, I consent to receive emails from Mattermost with product updates, promotions, and company news. I have read the <a>Privacy Policy</a> and understand that I can <aa>unsubscribe</aa> at any time'},\n                            {\n                                a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                    <ExternalLink\n                                        location='signup-newsletter-checkmark'\n                                        href={HostedCustomerLinks.PRIVACY}\n                                    >\n                                        {chunks}\n                                    </ExternalLink>\n                                ),\n                                aa: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                    <ExternalLink\n                                        location='signup-newsletter-checkmark'\n                                        href={HostedCustomerLinks.NEWSLETTER_UNSUBSCRIBE_LINK}\n                                    >\n                                        {chunks}\n                                    </ExternalLink>\n                                ),\n                                span: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                    <span className='header'>{chunks}</span>\n                                ),\n                            },\n                        )}\n                    checked={subscribeToSecurityNewsletter}\n                />\n            );\n        }\n        return (\n            <div className='newsletter'>\n                <span className='interested'>\n                    {formatMessage({id: 'newsletter_optin.title', defaultMessage: 'Interested in receiving Mattermost security, product, promotions, and company updates updates via newsletter?'})}\n                </span>\n                <span className='link'>\n                    {formatMessage(\n                        {id: 'newsletter_optin.desc', defaultMessage: 'Sign up at <a>{link}</a>.'},\n                        {\n                            link: HostedCustomerLinks.SECURITY_UPDATES,\n                            a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                <ExternalLink\n                                    location='signup'\n                                    href={HostedCustomerLinks.SECURITY_UPDATES}\n                                >\n                                    {chunks}\n                                </ExternalLink>\n                            ),\n                        },\n                    )}\n                </span>\n            </div>\n        );\n    };\n\n    const handleOnBlur = (e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>, inputId: string) => {\n        const text = e.target.value;\n        if (!text) {\n            return;\n        }\n        sendSignUpTelemetryEvents(`typed_input_${inputId}`);\n    };\n\n    const getContent = () => {\n        if (!enableSignUpWithEmail && !enableExternalSignup) {\n            return (\n                <ColumnLayout\n                    title={formatMessage({id: 'login.noMethods.title', defaultMessage: 'This server doesn’t have any sign-in methods enabled'})}\n                    message={formatMessage({id: 'login.noMethods.subtitle', defaultMessage: 'Please contact your System Administrator to resolve this.'})}\n                />\n            );\n        }\n\n        if (!isWaiting && (noOpenServer || serverError || usedBefore)) {\n            const titleColumn = noOpenServer ? (\n                formatMessage({id: 'signup_user_completed.no_open_server.title', defaultMessage: 'This server doesn’t allow open signups'})\n            ) : (\n                serverError ||\n                formatMessage({id: 'signup_user_completed.invalid_invite.title', defaultMessage: 'This invite link is invalid'})\n            );\n\n            return (\n                <ColumnLayout\n                    title={titleColumn}\n                    message={formatMessage({id: 'signup_user_completed.invalid_invite.message', defaultMessage: 'Please speak with your Administrator to receive an invitation.'})}\n                    extraContent={(\n                        <div className='signup-body-content-button-container'>\n                            <button\n                                className='signup-body-content-button-return'\n                                onClick={handleReturnButtonOnClick}\n                            >\n                                {formatMessage({id: 'signup_user_completed.return', defaultMessage: 'Return to log in'})}\n                            </button>\n                        </div>\n                    )}\n                />\n            );\n        }\n\n        if (desktopLoginLink) {\n            return (\n                <Route\n                    path={'/signup_user_complete/desktop'}\n                    render={() => (\n                        <DesktopAuthToken\n                            href={desktopLoginLink}\n                            onLogin={postSignupSuccess}\n                        />\n                    )}\n                />\n            );\n        }\n\n        let emailCustomLabelForInput: CustomMessageInputType = parsedEmail ? {\n            type: ItemStatus.INFO,\n            value: formatMessage(\n                {\n                    id: 'signup_user_completed.emailIs',\n                    defaultMessage: \"You'll use this address to sign in to {siteName}.\",\n                },\n                {siteName: SiteName},\n            ),\n        } : null;\n\n        // error will have preference over info message\n        if (emailError) {\n            emailCustomLabelForInput = {type: ItemStatus.ERROR, value: emailError};\n        }\n\n        return (\n            <>\n                <div\n                    className={classNames(\n                        'signup-body-message',\n                        {\n                            'custom-branding': enableCustomBrand,\n                            'with-brand-image': enableCustomBrand && !brandImageError,\n                            'with-alternate-link': !isMobileView,\n                        },\n                    )}\n                >\n                    {enableCustomBrand && !brandImageError ? (\n                        <img\n                            className={classNames('signup-body-custom-branding-image')}\n                            alt='brand image'\n                            src={Client4.getBrandImageUrl('0')}\n                            onError={handleBrandImageError}\n                        />\n                    ) : (\n                        <h1 className='signup-body-message-title'>\n                            {formatMessage({id: 'signup_user_completed.title', defaultMessage: 'Let’s get started'})}\n                        </h1>\n                    )}\n                    {getMessageSubtitle()}\n                </div>\n                <div className='signup-body-action'>\n                    {!isMobileView && getAlternateLink()}\n                    <div className={classNames('signup-body-card', {'custom-branding': enableCustomBrand, 'with-error': hasError})}>\n                        <div\n                            className='signup-body-card-content'\n                        >\n                            <p className='signup-body-card-title'>\n                                {getCardTitle()}\n                            </p>\n                            {enableCustomBrand && getMessageSubtitle()}\n                            {alertBanner && (\n                                <AlertBanner\n                                    className='login-body-card-banner'\n                                    mode={alertBanner.mode}\n                                    title={alertBanner.title}\n                                    onDismiss={alertBanner.onDismiss}\n                                />\n                            )}\n                            {enableSignUpWithEmail && (\n                                <form className='signup-body-card-form'>\n                                    <Input\n                                        data-testid='signup-body-card-form-email-input'\n                                        ref={emailInput}\n                                        name='email'\n                                        className='signup-body-card-form-email-input'\n                                        type='text'\n                                        inputSize={SIZE.LARGE}\n                                        value={email}\n                                        onChange={handleEmailOnChange}\n                                        placeholder={formatMessage({\n                                            id: 'signup_user_completed.emailLabel',\n                                            defaultMessage: 'Email address',\n                                        })}\n                                        disabled={isWaiting || Boolean(parsedEmail)}\n                                        autoFocus={true}\n                                        customMessage={emailCustomLabelForInput}\n                                        onBlur={(e) => handleOnBlur(e, 'email')}\n                                    />\n                                    <Input\n                                        data-testid='signup-body-card-form-name-input'\n                                        ref={nameInput}\n                                        name='name'\n                                        className='signup-body-card-form-name-input'\n                                        type='text'\n                                        inputSize={SIZE.LARGE}\n                                        value={name}\n                                        onChange={handleNameOnChange}\n                                        placeholder={formatMessage({\n                                            id: 'signup_user_completed.chooseUser',\n                                            defaultMessage: 'Choose a Username',\n                                        })}\n                                        disabled={isWaiting}\n                                        autoFocus={Boolean(parsedEmail)}\n                                        customMessage={\n                                            nameError ? {type: ItemStatus.ERROR, value: nameError} : {\n                                                type: ItemStatus.INFO,\n                                                value: formatMessage({id: 'signup_user_completed.userHelp', defaultMessage: 'You can use lowercase letters, numbers, periods, dashes, and underscores.'}),\n                                            }\n                                        }\n                                        onBlur={(e) => handleOnBlur(e, 'username')}\n                                    />\n                                    <PasswordInput\n                                        data-testid='signup-body-card-form-password-input'\n                                        ref={passwordInput}\n                                        className='signup-body-card-form-password-input'\n                                        value={password}\n                                        inputSize={SIZE.LARGE}\n                                        onChange={handlePasswordInputOnChange}\n                                        disabled={isWaiting}\n                                        createMode={true}\n                                        info={passwordInfo as string}\n                                        error={passwordError}\n                                        onBlur={(e) => handleOnBlur(e, 'password')}\n                                    />\n                                    {getNewsletterCheck()}\n                                    <SaveButton\n                                        extraClasses='signup-body-card-form-button-submit large'\n                                        saving={isWaiting}\n                                        disabled={!canSubmit}\n                                        onClick={handleSubmit}\n                                        defaultMessage={formatMessage({id: 'signup_user_completed.create', defaultMessage: 'Create account'})}\n                                        savingMessage={formatMessage({id: 'signup_user_completed.saving', defaultMessage: 'Creating account…'})}\n                                    />\n                                </form>\n                            )}\n                            {enableSignUpWithEmail && enableExternalSignup && (\n                                <div className='signup-body-card-form-divider'>\n                                    <span className='signup-body-card-form-divider-label'>\n                                        {formatMessage({id: 'signup_user_completed.or', defaultMessage: 'or create an account with'})}\n                                    </span>\n                                </div>\n                            )}\n                            {enableExternalSignup && (\n                                <div className={classNames('signup-body-card-form-login-options', {column: !enableSignUpWithEmail})}>\n                                    {getExternalSignupOptions().map((option) => (\n                                        <ExternalLoginButton\n                                            key={option.id}\n                                            direction={enableSignUpWithEmail ? undefined : 'column'}\n                                            {...option}\n                                        />\n                                    ))}\n                                </div>\n                            )}\n                            {enableSignUpWithEmail && !serverError && (\n                                <p className='signup-body-card-agreement'>\n                                    <FormattedMessage\n                                        id='signup.agreement'\n                                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our <termsOfUseLink>Terms of Use</termsOfUseLink> and <privacyPolicyLink>Privacy Policy</privacyPolicyLink>.  If you do not agree, you cannot use {siteName}.'\n                                        values={{\n                                            siteName: SiteName,\n                                            termsOfUseLink: (chunks: string) => (\n                                                <ExternalLink\n                                                    href={TermsOfServiceLink as string}\n                                                    location='signup-terms-of-use'\n                                                >\n                                                    {chunks}\n                                                </ExternalLink>\n                                            ),\n                                            privacyPolicyLink: (chunks: string) => (\n                                                <ExternalLink\n                                                    href={PrivacyPolicyLink as string}\n                                                    location='signup-privacy-policy'\n                                                >\n                                                    {chunks}\n                                                </ExternalLink>\n                                            ),\n                                        }}\n                                    />\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <div className='signup-body'>\n            <div className='signup-body-content'>\n                {getContent()}\n            </div>\n        </div>\n    );\n};\n\nexport default Signup;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport Constants from 'utils/constants';\n\nexport function isValidPassword(password: string, passwordConfig: PasswordConfig, intl?: IntlShape) {\n    let errorId = passwordErrors.passwordError.id;\n    const telemetryErrorIds = [];\n    let valid = true;\n    const minimumLength = passwordConfig.minimumLength || Constants.MIN_PASSWORD_LENGTH;\n\n    if (password.length < minimumLength || password.length > Constants.MAX_PASSWORD_LENGTH) {\n        valid = false;\n        telemetryErrorIds.push({field: 'password', rule: 'error_length'});\n    }\n\n    if (passwordConfig.requireLowercase) {\n        if (!password.match(/[a-z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Lowercase';\n        telemetryErrorIds.push({field: 'password', rule: 'lowercase'});\n    }\n\n    if (passwordConfig.requireUppercase) {\n        if (!password.match(/[A-Z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Uppercase';\n        telemetryErrorIds.push({field: 'password', rule: 'uppercase'});\n    }\n\n    if (passwordConfig.requireNumber) {\n        if (!password.match(/[0-9]/)) {\n            valid = false;\n        }\n\n        errorId += 'Number';\n        telemetryErrorIds.push({field: 'password', rule: 'number'});\n    }\n\n    if (passwordConfig.requireSymbol) {\n        if (!password.match(/[ !\"\\\\#$%&'()*+,-./:;<=>?@[\\]^_`|~]/)) {\n            valid = false;\n        }\n\n        errorId += 'Symbol';\n        telemetryErrorIds.push({field: 'password', rule: 'symbol'});\n    }\n\n    let error;\n    if (!valid) {\n        error = intl ? (\n            intl.formatMessage(\n                {\n                    id: errorId,\n                    defaultMessage: 'Must be {min}-{max} characters long.',\n                },\n                {\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                },\n            )\n        ) : (\n            <FormattedMessage\n                id={errorId}\n                defaultMessage='Must be {min}-{max} characters long.'\n                values={{\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    return {valid, error, telemetryErrorIds};\n}\n\nexport const passwordErrors = defineMessages({\n    passwordError: {id: 'user.settings.security.passwordError', defaultMessage: 'Your password must be {min}-{max} characters long.'},\n    passwordErrorLowercase: {id: 'user.settings.security.passwordErrorLowercase', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters.'},\n    passwordErrorLowercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters and numbers.'},\n    passwordErrorLowercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters and special characters.'},\n    passwordErrorLowercaseUppercase: {id: 'user.settings.security.passwordErrorLowercaseUppercase', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters.'},\n    passwordErrorLowercaseUppercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, and numbers.'},\n    passwordErrorLowercaseUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseUppercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, and special characters.'},\n    passwordErrorNumber: {id: 'user.settings.security.passwordErrorNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include numbers.'},\n    passwordErrorNumberSymbol: {id: 'user.settings.security.passwordErrorNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include numbers and special characters.'},\n    passwordErrorSymbol: {id: 'user.settings.security.passwordErrorSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include special characters.'},\n    passwordErrorUppercase: {id: 'user.settings.security.passwordErrorUppercase', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters.'},\n    passwordErrorUppercaseNumber: {id: 'user.settings.security.passwordErrorUppercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, and numbers.'},\n    passwordErrorUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorUppercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, numbers, and special characters.'},\n    passwordErrorUppercaseSymbol: {id: 'user.settings.security.passwordErrorUppercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, and special characters.'},\n});\n"],"names":["props","id","ariaLabel","text","rest","_objectWithoutProperties","_excluded","React","className","Object","assign","type","htmlFor","_ref","_params$get","_params$get2","onCustomizeHeader","intl","useIntl","formatMessage","dispatch","useDispatch","history","useHistory","search","useLocation","params","URLSearchParams","token","get","inviteId","data","parsedData","JSON","parse","email","parsedEmail","name","parsedTeamName","reminder_interval","reminderInterval","config","useSelector","getConfig","EnableOpenServer","EnableUserCreation","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableSignUpWithOpenId","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","CustomDescriptionText","GitLabButtonText","GitLabButtonColor","OpenIdButtonText","OpenIdButtonColor","EnableCustomBrand","CustomBrandText","TermsOfServiceLink","PrivacyPolicyLink","IsLicensed","getLicense","loggedIn","Boolean","getCurrentUserId","onboardingFlowEnabled","getIsOnboardingFlowEnabled","usedBefore","state","undefined","getGlobalItem","emailInput","useRef","nameInput","passwordInput","isLicensed","enableUserCreation","noAccounts","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLDAP","enableSAML","enableCustomBrand","noOpenServer","setEmail","useState","setName","password","setPassword","loading","setLoading","isWaiting","setIsWaiting","emailError","setEmailError","nameError","setNameError","passwordError","setPasswordError","brandImageError","setBrandImageError","serverError","setServerError","teamName","setTeamName","alertBanner","setAlertBanner","isMobileView","setIsMobileView","subscribeToSecurityNewsletter","setSubscribeToSecurityNewsletter","submitClicked","setSubmitClicked","cwsAvailability","useCWSAvailabilityCheck","enableExternalSignup","hasError","canSubmit","passwordConfig","getPasswordConfig","error","passwordInfo","isValidPassword","desktopLoginLink","setDesktopLoginLink","handleHeaderBackButtonOnClick","useCallback","trackEvent","goBack","handleInvalidInvite","_ref2","errorMessage","server_error_id","message","defaultMessage","getAlternateLink","AlternateLinkLayout","alternateMessage","alternateLinkPath","alternateLinkLabel","onWindowResize","throttle","window","innerWidth","desktopExternalAuth","href","event","isDesktopApp","preventDefault","push","concat","useEffect","removeGlobalItem","_objectSpread","getRoleFromTrackFlow","getMediumFromTrackFlow","addEventListener","async","team","addUserToTeamFromInvite","Constants","DEFAULT_CHANNEL","handleAddUserToTeamFromInvite","getTeamInviteInfo","getInviteInfo","redirectUserToDefaultTeam","removeEventListener","document","title","siteName","onBackButtonClick","alternateLink","current","focus","LoadingScreen","handleBrandImageError","getMessageSubtitle","Markdown","options","mentionHighlight","handleEmailOnChange","_ref3","target","value","dismissAlert","handleNameOnChange","_ref4","handlePasswordInputOnChange","_ref5","postSignupSuccess","redirectTo","loadMe","setGlobalItem","stringify","sendSignUpTelemetryEvents","telemetryId","handleSubmit","e","isUserValid","_emailInput$current","_nameInput$current","_passwordInput$curren","_passwordInput$curren2","isValid","providedEmail","trim","telemetryEvents","errors","success","isEmail","field","rule","providedUsername","toLowerCase","usernameError","isValidUsername","ValidationErrors","RESERVED_NAME","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","telemetryErrorIds","length","_emailInput$current2","_nameInput$current2","_passwordInput$curren3","user","username","createUser","mode","onDismiss","loginById","verifyUrl","encodeURIComponent","handleSignupSuccess","subscribeToSecurityNewsletterFunc","Client4","subscribeToNewsletter","subscribed_content","console","handleReturnButtonOnClick","replace","handleOnBlur","inputId","getContent","ColumnLayout","titleColumn","extraContent","onClick","Route","path","render","DesktopAuthToken","onLogin","emailCustomLabelForInput","ItemStatus","INFO","ERROR","classNames","alt","src","getBrandImageUrl","onError","AlertBanner","Input","ref","inputSize","SIZE","LARGE","onChange","placeholder","disabled","autoFocus","customMessage","onBlur","PasswordInput","createMode","info","CSWAvailabilityCheckTypes","Available","CheckInput","a","chunks","ExternalLink","location","HostedCustomerLinks","PRIVACY","aa","NEWSLETTER_UNSUBSCRIBE_LINK","span","checked","link","SECURITY_UPDATES","SaveButton","extraClasses","saving","savingMessage","column","getExternalSignupOptions","externalLoginOptions","url","getOAuthRoute","icon","LoginGitlabIcon","label","style","color","borderColor","LoginGoogleIcon","EntraIdIcon","LoginOpenIDIcon","newSearchParam","set","CREATE_LDAP","getUrl","toString","LockIcon","map","option","ExternalLoginButton","key","direction","FormattedMessage","values","termsOfUseLink","privacyPolicyLink","errorId","passwordErrors","valid","minimumLength","MIN_PASSWORD_LENGTH","MAX_PASSWORD_LENGTH","requireLowercase","match","requireUppercase","requireNumber","requireSymbol","defineMessages","passwordErrorLowercase","passwordErrorLowercaseNumber","passwordErrorLowercaseNumberSymbol","passwordErrorLowercaseSymbol","passwordErrorLowercaseUppercase","passwordErrorLowercaseUppercaseNumber","passwordErrorLowercaseUppercaseNumberSymbol","passwordErrorLowercaseUppercaseSymbol","passwordErrorNumber","passwordErrorNumberSymbol","passwordErrorSymbol","passwordErrorUppercase","passwordErrorUppercaseNumber","passwordErrorUppercaseNumberSymbol","passwordErrorUppercaseSymbol"],"sourceRoot":""}