{"version":3,"file":"5977.bee37001f650e963ec46.js","mappings":"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","sources":["webpack://mattermost-webapp/./node_modules/react-select/creatable/dist/react-select-creatable.esm.js","webpack://mattermost-webapp/./node_modules/react-select/dist/useCreatable-84008237.esm.js","webpack://mattermost-webapp/./src/actions/views/mfa.js","webpack://mattermost-webapp/./src/components/settings_sidebar/settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/settings_sidebar/index.ts","webpack://mattermost-webapp/./src/components/setting_item_min.tsx","webpack://mattermost-webapp/./src/components/setting_item.tsx","webpack://mattermost-webapp/./src/components/setting_item_max.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/join_leave_section/join_leave_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/join_leave_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/advanced/performance_debugging_section/performance_debugging_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/performance_debugging_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/headers/setting_desktop_header.tsx","webpack://mattermost-webapp/./src/components/user_settings/headers/setting_mobile_header.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/user_settings_advanced.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/color_chooser/color_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/custom_theme_chooser/custom_theme_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/theme_thumbnail.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/premade_theme_chooser/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/user_settings_theme.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/manage_languages/manage_languages.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/manage_languages/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/manage_timezones/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_display.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/index.ts","webpack://mattermost-webapp/./src/components/setting_picture.tsx","webpack://mattermost-webapp/./src/components/user_settings/general/user_settings_general.tsx","webpack://mattermost-webapp/./src/components/user_settings/general/index.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_denied_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_never_granted_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_unsupported_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_desktop_denied_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_title_tag/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_notification_sounds_setting/index.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/utils/notify_props.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/email_notification_setting/index.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/manage_auto_responder/manage_auto_responder.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/send_test_notification_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/user_settings_notifications.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/index.ts","webpack://mattermost-webapp/./src/components/user_settings/plugin/plugin_action.tsx","webpack://mattermost-webapp/./src/utils/plugins/preferences.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/radio_option.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/radio.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/plugin_setting.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/index.tsx","webpack://mattermost-webapp/./src/components/access_history_modal/access_history_modal.tsx","webpack://mattermost-webapp/./src/components/access_history_modal/index.ts","webpack://mattermost-webapp/./src/components/activity_log_modal/components/device_icon.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/components/more_info.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/components/activity_log.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/activity_log_modal.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/mfa_section/mfa_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/mfa_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/user_access_token_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/user_settings_security.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/limit_visible_gms_dms/limit_visible_gms_dms.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/limit_visible_gms_dms/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/show_unreads_category/show_unreads_category.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/show_unreads_category/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/user_settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/index.ts","webpack://mattermost-webapp/./src/components/user_settings/index.tsx","webpack://mattermost-webapp/./src/components/widgets/smart_loader/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/modal/user_settings_modal.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_edit_icon.tsx"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { S as Select } from '../../dist/Select-aab027f3.esm.js';\nimport { u as useStateManager } from '../../dist/useStateManager-7e1e8489.esm.js';\nimport { u as useCreatable } from '../../dist/useCreatable-84008237.esm.js';\nexport { u as useCreatable } from '../../dist/useCreatable-84008237.esm.js';\nimport '@babel/runtime/helpers/objectSpread2';\nimport '@babel/runtime/helpers/classCallCheck';\nimport '@babel/runtime/helpers/createClass';\nimport '@babel/runtime/helpers/inherits';\nimport '@babel/runtime/helpers/createSuper';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../../dist/index-641ee5b8.esm.js';\nimport '@emotion/react';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/typeof';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport '@babel/runtime/helpers/defineProperty';\nimport 'react-dom';\nimport '@floating-ui/dom';\nimport 'use-isomorphic-layout-effect';\nimport 'memoize-one';\n\nvar CreatableSelect = /*#__PURE__*/forwardRef(function (props, ref) {\n  var creatableProps = useStateManager(props);\n  var selectProps = useCreatable(creatableProps);\n  return /*#__PURE__*/React.createElement(Select, _extends({\n    ref: ref\n  }, selectProps));\n});\nvar CreatableSelect$1 = CreatableSelect;\n\nexport { CreatableSelect$1 as default };\n","import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';\nimport _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport { useMemo, useCallback } from 'react';\nimport { H as cleanValue, D as valueTernary } from './index-641ee5b8.esm.js';\nimport { g as getOptionValue, b as getOptionLabel } from './Select-aab027f3.esm.js';\n\nvar _excluded = [\"allowCreateWhileLoading\", \"createOptionPosition\", \"formatCreateLabel\", \"isValidNewOption\", \"getNewOptionData\", \"onCreateOption\", \"options\", \"onChange\"];\nvar compareOption = function compareOption() {\n  var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var option = arguments.length > 1 ? arguments[1] : undefined;\n  var accessors = arguments.length > 2 ? arguments[2] : undefined;\n  var candidate = String(inputValue).toLowerCase();\n  var optionValue = String(accessors.getOptionValue(option)).toLowerCase();\n  var optionLabel = String(accessors.getOptionLabel(option)).toLowerCase();\n  return optionValue === candidate || optionLabel === candidate;\n};\nvar builtins = {\n  formatCreateLabel: function formatCreateLabel(inputValue) {\n    return \"Create \\\"\".concat(inputValue, \"\\\"\");\n  },\n  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions, accessors) {\n    return !(!inputValue || selectValue.some(function (option) {\n      return compareOption(inputValue, option, accessors);\n    }) || selectOptions.some(function (option) {\n      return compareOption(inputValue, option, accessors);\n    }));\n  },\n  getNewOptionData: function getNewOptionData(inputValue, optionLabel) {\n    return {\n      label: optionLabel,\n      value: inputValue,\n      __isNew__: true\n    };\n  }\n};\nfunction useCreatable(_ref) {\n  var _ref$allowCreateWhile = _ref.allowCreateWhileLoading,\n    allowCreateWhileLoading = _ref$allowCreateWhile === void 0 ? false : _ref$allowCreateWhile,\n    _ref$createOptionPosi = _ref.createOptionPosition,\n    createOptionPosition = _ref$createOptionPosi === void 0 ? 'last' : _ref$createOptionPosi,\n    _ref$formatCreateLabe = _ref.formatCreateLabel,\n    formatCreateLabel = _ref$formatCreateLabe === void 0 ? builtins.formatCreateLabel : _ref$formatCreateLabe,\n    _ref$isValidNewOption = _ref.isValidNewOption,\n    isValidNewOption = _ref$isValidNewOption === void 0 ? builtins.isValidNewOption : _ref$isValidNewOption,\n    _ref$getNewOptionData = _ref.getNewOptionData,\n    getNewOptionData = _ref$getNewOptionData === void 0 ? builtins.getNewOptionData : _ref$getNewOptionData,\n    onCreateOption = _ref.onCreateOption,\n    _ref$options = _ref.options,\n    propsOptions = _ref$options === void 0 ? [] : _ref$options,\n    propsOnChange = _ref.onChange,\n    restSelectProps = _objectWithoutProperties(_ref, _excluded);\n  var _restSelectProps$getO = restSelectProps.getOptionValue,\n    getOptionValue$1 = _restSelectProps$getO === void 0 ? getOptionValue : _restSelectProps$getO,\n    _restSelectProps$getO2 = restSelectProps.getOptionLabel,\n    getOptionLabel$1 = _restSelectProps$getO2 === void 0 ? getOptionLabel : _restSelectProps$getO2,\n    inputValue = restSelectProps.inputValue,\n    isLoading = restSelectProps.isLoading,\n    isMulti = restSelectProps.isMulti,\n    value = restSelectProps.value,\n    name = restSelectProps.name;\n  var newOption = useMemo(function () {\n    return isValidNewOption(inputValue, cleanValue(value), propsOptions, {\n      getOptionValue: getOptionValue$1,\n      getOptionLabel: getOptionLabel$1\n    }) ? getNewOptionData(inputValue, formatCreateLabel(inputValue)) : undefined;\n  }, [formatCreateLabel, getNewOptionData, getOptionLabel$1, getOptionValue$1, inputValue, isValidNewOption, propsOptions, value]);\n  var options = useMemo(function () {\n    return (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === 'first' ? [newOption].concat(_toConsumableArray(propsOptions)) : [].concat(_toConsumableArray(propsOptions), [newOption]) : propsOptions;\n  }, [allowCreateWhileLoading, createOptionPosition, isLoading, newOption, propsOptions]);\n  var onChange = useCallback(function (newValue, actionMeta) {\n    if (actionMeta.action !== 'select-option') {\n      return propsOnChange(newValue, actionMeta);\n    }\n    var valueArray = Array.isArray(newValue) ? newValue : [newValue];\n    if (valueArray[valueArray.length - 1] === newOption) {\n      if (onCreateOption) onCreateOption(inputValue);else {\n        var newOptionData = getNewOptionData(inputValue, inputValue);\n        var newActionMeta = {\n          action: 'create-option',\n          name: name,\n          option: newOptionData\n        };\n        propsOnChange(valueTernary(isMulti, [].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newOptionData), newActionMeta);\n      }\n      return;\n    }\n    propsOnChange(newValue, actionMeta);\n  }, [getNewOptionData, inputValue, isMulti, name, newOption, onCreateOption, propsOnChange, value]);\n  return _objectSpread(_objectSpread({}, restSelectProps), {}, {\n    options: options,\n    onChange: onChange\n  });\n}\n\nexport { useCreatable as u };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nexport type Tab = {\n    icon: string | {url: string};\n    iconTitle: string;\n    name: string;\n    uiName: string;\n    newGroup?: boolean;\n    display?: boolean; // Controls whether the tab is displayed, defaults to true\n}\n\nexport type Props = {\n    activeTab?: string;\n    tabs: Tab[];\n    pluginTabs?: Tab[];\n    updateTab: (name: string) => void;\n    isMobileView: boolean;\n};\n\nexport default class SettingsSidebar extends React.PureComponent<Props> {\n    buttonRefs: Map<string, RefObject<HTMLButtonElement>>;\n\n    constructor(props: Props) {\n        super(props);\n\n        // Initialize an empty Map for button refs\n        this.buttonRefs = new Map();\n\n        // Initialize refs for all tabs\n        this.initializeButtonRefs(props.tabs, props.pluginTabs);\n    }\n\n    // Initialize or update button refs for all tabs\n    private initializeButtonRefs(tabs: Tab[], pluginTabs?: Tab[]) {\n        // Clear existing refs if reinitializing\n        this.buttonRefs.clear();\n\n        // Create refs for all tabs, regardless of display status\n        tabs.forEach((tab) => {\n            this.buttonRefs.set(tab.name, React.createRef());\n        });\n\n        // Create refs for plugin tabs if they exist\n        if (pluginTabs?.length) {\n            pluginTabs.forEach((tab) => {\n                this.buttonRefs.set(tab.name, React.createRef());\n            });\n        }\n    }\n\n    // Update refs when props change\n    componentDidUpdate(prevProps: Props) {\n        // Check if tabs or pluginTabs have changed\n        if (prevProps.tabs !== this.props.tabs || prevProps.pluginTabs !== this.props.pluginTabs) {\n            this.initializeButtonRefs(this.props.tabs, this.props.pluginTabs);\n        }\n    }\n\n    // Get all visible tabs in the correct order\n    private getVisibleTabs(): Tab[] {\n        const visibleTabs = this.props.tabs.filter((tab) => tab.display !== false);\n        const visiblePluginTabs = this.props.pluginTabs?.filter((tab) => tab.display !== false) || [];\n        return [...visibleTabs, ...visiblePluginTabs];\n    }\n\n    public handleClick = (tab: Tab, e: React.MouseEvent) => {\n        e.preventDefault();\n        this.props.updateTab(tab.name);\n        (e.target as Element).closest('.settings-modal')?.classList.add('display--content');\n    };\n\n    public handleKeyUp = (tab: Tab, e: React.KeyboardEvent) => {\n        // Only handle UP and DOWN arrow keys\n        if (!isKeyPressed(e, Constants.KeyCodes.UP) && !isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n            return;\n        }\n\n        // Prevent default behavior\n        e.preventDefault();\n\n        // Get all visible tabs\n        const visibleTabs = this.getVisibleTabs();\n\n        // If no tabs are visible, do nothing\n        if (visibleTabs.length === 0) {\n            return;\n        }\n\n        // Find the current tab's position in the visible tabs\n        const currentIndex = visibleTabs.findIndex((t) => t.name === tab.name);\n\n        // If tab not found in visible tabs, do nothing\n        if (currentIndex === -1) {\n            return;\n        }\n\n        let nextIndex: number;\n\n        // Determine which tab to focus based on the key pressed\n        if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n            // UP arrow key - move to previous tab or wrap to last\n            nextIndex = currentIndex > 0 ? currentIndex - 1 : visibleTabs.length - 1;\n        } else {\n            // DOWN arrow key - move to next tab or wrap to first\n            nextIndex = currentIndex < visibleTabs.length - 1 ? currentIndex + 1 : 0;\n        }\n\n        // Get the target tab\n        const targetTab = visibleTabs[nextIndex];\n\n        // Update the active tab\n        this.props.updateTab(targetTab.name);\n\n        // Focus the target tab button directly\n        const targetButton = this.buttonRefs.get(targetTab.name)?.current;\n        if (targetButton) {\n            // Use direct focus instead of a11yFocus to ensure Cypress tests can detect the focus change\n            targetButton.focus();\n        }\n    };\n\n    private renderTab(tab: Tab) {\n        const key = `${tab.name}_li`;\n        const isActive = this.props.activeTab === tab.name;\n\n        let icon;\n        if (typeof tab.icon === 'string') {\n            icon = (\n                <i\n                    className={tab.icon}\n                    title={tab.iconTitle}\n                />\n            );\n        } else {\n            icon = (\n                <img\n                    src={tab.icon.url}\n                    alt={tab.iconTitle}\n                    className='icon'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment key={key}>\n                {tab.newGroup && <hr/>}\n                <button\n                    data-testid={`${tab.name}-tab-button`}\n                    ref={this.buttonRefs.get(tab.name)}\n                    id={`${tab.name}Button`}\n                    className={classNames('cursor--pointer style--none nav-pills__tab', {active: isActive})}\n                    onClick={this.handleClick.bind(null, tab)}\n                    onKeyUp={this.handleKeyUp.bind(null, tab)}\n                    aria-label={tab.uiName.toLowerCase()}\n                    role='tab'\n                    aria-selected={isActive}\n                    tabIndex={!isActive && !this.props.isMobileView ? -1 : 0}\n                    aria-controls={`${tab.name}Settings`}\n                >\n                    {icon}\n                    {tab.uiName}\n                </button>\n            </React.Fragment>\n        );\n    }\n\n    public render() {\n        // Filter regular tabs and plugin tabs separately for rendering\n        const visibleTabs = this.props.tabs.filter((tab) => tab.display !== false);\n\n        // Map regular tabs\n        const tabList = visibleTabs.map((tab) => this.renderTab(tab));\n\n        let pluginTabList: React.ReactNode;\n        if (this.props.pluginTabs?.length) {\n            const visiblePluginTabs = this.props.pluginTabs.filter((tab) => tab.display !== false);\n            if (visiblePluginTabs.length) {\n                pluginTabList = (\n                    <>\n                        <hr/>\n                        <div\n                            role='group'\n                            aria-labelledby='userSettingsModal.pluginPreferences.header'\n                        >\n                            <div\n                                key={'plugin preferences heading'}\n                                role='heading'\n                                className={'header'}\n                                aria-level={3}\n                                id='userSettingsModal_pluginPreferences_header'\n                            >\n                                <FormattedMessage\n                                    id={'userSettingsModal.pluginPreferences.header'}\n                                    defaultMessage={'PLUGIN PREFERENCES'}\n                                />\n                            </div>\n                            {visiblePluginTabs.map((tab) => this.renderTab(tab))}\n                        </div>\n                    </>\n                );\n            }\n        }\n\n        return (\n            <div\n                id='tabList'\n                className='nav nav-pills nav-stacked'\n                role='tablist'\n                aria-orientation='vertical'\n            >\n                <div role='group'>\n                    {tabList}\n                </div>\n                {pluginTabList}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport SettingsSidebar from './settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {type ReactNode, type MouseEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport EditIcon from 'components/widgets/icons/fa_edit_icon';\n\nimport {a11yFocus} from 'utils/utils';\n\ninterface Props {\n\n    /**\n     * Settings title\n     */\n    title: ReactNode;\n\n    /**\n     * Option to disable opening the setting\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Settings or tab section\n     */\n    section: string;\n\n    /**\n     * Function to update section\n     */\n    updateSection: (section: string) => void;\n\n    /**\n     * Settings description\n     */\n    describe?: ReactNode;\n\n    /**\n     * Replacement in place of edit button when the setting (in collapsed mode) is disabled\n     */\n    collapsedEditButtonWhenDisabled?: ReactNode;\n}\n\nexport default class SettingItemMin extends React.PureComponent<Props> {\n    private edit: HTMLButtonElement | null = null;\n\n    focus() {\n        a11yFocus(this.edit);\n    }\n\n    private getEdit = (node: HTMLButtonElement) => {\n        this.edit = node;\n    };\n\n    handleClick = (e: MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n        if (this.props.isDisabled) {\n            return;\n        }\n\n        e.preventDefault();\n        this.props.updateSection(this.props.section);\n    };\n\n    render() {\n        let editButtonComponent: ReactNode;\n\n        if (this.props.isDisabled) {\n            if (this.props.collapsedEditButtonWhenDisabled) {\n                editButtonComponent = this.props.collapsedEditButtonWhenDisabled;\n            } else {\n                editButtonComponent = null;\n            }\n        } else {\n            editButtonComponent = (\n                <button\n                    ref={this.getEdit}\n                    id={this.props.section + 'Edit'}\n                    className='color--link style--none section-min__edit'\n                    onClick={this.handleClick}\n                    aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    aria-expanded={false}\n                >\n                    <EditIcon/>\n                    <FormattedMessage\n                        id='setting_item_min.edit'\n                        defaultMessage='Edit'\n                    />\n                </button>\n            );\n        }\n\n        return (\n            <div\n                className={classNames('section-min', {isDisabled: this.props.isDisabled})}\n                onClick={this.handleClick}\n            >\n                <div\n                    className='secion-min__header'\n                >\n                    <h4\n                        id={this.props.section + 'Title'}\n                        className={classNames('section-min__title', {isDisabled: this.props.isDisabled})}\n                    >\n                        {this.props.title}\n                    </h4>\n                    {editButtonComponent}\n                </div>\n                <div\n                    id={this.props.section + 'Desc'}\n                    className={classNames('section-min__describe', {isDisabled: this.props.isDisabled})}\n                >\n                    {this.props.describe}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React, {useRef} from 'react';\n\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport useDidUpdate from './common/hooks/useDidUpdate';\n\ntype Props = {\n\n    /**\n     * Whether this setting item is currently open\n     */\n    active: boolean;\n\n    /**\n     * Whether all sections in the panel are currently closed\n     */\n    areAllSectionsInactive: boolean;\n\n    /**\n     * The identifier of this section\n     */\n    section: string;\n\n    /**\n     * The setting UI when it is maximized (open)\n     */\n    max?: ReactNode;\n\n    // Props to pass through for SettingItemMin\n    updateSection: (section: string) => void;\n    title?: ReactNode;\n    isDisabled?: boolean;\n    describe?: ReactNode;\n\n    /**\n     * Replacement in place of edit button when the setting (in collapsed mode) is disabled\n     */\n    collapsedEditButtonWhenDisabled?: ReactNode;\n}\n\nconst SettingItem = ({\n    active,\n    areAllSectionsInactive,\n    section,\n    max,\n    updateSection,\n    title,\n    isDisabled,\n    describe,\n    collapsedEditButtonWhenDisabled,\n}: Props) => {\n    const minRef = useRef<SettingItemMinComponent>(null);\n\n    useDidUpdate(() => {\n        // We want to bring back focus to the edit button when the section is opened and then closed along with all sections are closed\n\n        if (!active && areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    }, [active]);\n\n    if (active) {\n        return <>{max}</>;\n    }\n\n    return (\n        <SettingItemMin\n            ref={minRef}\n            title={title}\n            updateSection={updateSection}\n            describe={describe}\n            section={section}\n            isDisabled={isDisabled}\n            collapsedEditButtonWhenDisabled={collapsedEditButtonWhenDisabled}\n        />\n    );\n};\n\nexport default React.memo(SettingItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SaveButton from 'components/save_button';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {a11yFocus} from 'utils/utils';\n\ntype Props = {\n\n    // Array of inputs selection\n    inputs?: ReactNode;\n    containerStyle?: string;\n    serverError?: ReactNode;\n\n    /**\n     * Client error\n     */\n    clientError?: ReactNode;\n\n    /**\n     * Settings extra information\n     */\n    extraInfo?: ReactNode;\n\n    /**\n     * Info position\n     */\n    infoPosition?: string;\n\n    /**\n     * Settings or tab section\n     */\n    section: string;\n    updateSection?: (section: string) => void;\n    setting?: string;\n    submit?: ((setting?: string) => void) | null;\n    disableEnterSubmit?: boolean;\n    submitExtra?: ReactNode;\n    saving?: boolean;\n    title?: ReactNode;\n    extraContentBeforeSettingList?: ReactNode;\n    isFullWidth?: boolean;\n    cancelButtonText?: ReactNode;\n    shiftEnter?: boolean;\n    saveButtonText?: string;\n    saveButtonClassName?: string;\n}\nexport default class SettingItemMax extends React.PureComponent<Props> {\n    settingList: React.RefObject<HTMLDivElement>;\n\n    static defaultProps = {\n        infoPosition: 'bottom',\n        saving: false,\n        section: '',\n        containerStyle: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.settingList = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.settingList.current) {\n            const focusableElements: NodeListOf<HTMLElement> = this.settingList.current.querySelectorAll('.btn:not(.save-button):not(.btn-tertiary), input.form-control, input[type=\"radio\"][checked], input[type=\"checkbox\"], select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n            if (focusableElements.length > 0) {\n                a11yFocus(focusableElements[0]);\n            } else {\n                a11yFocus(this.settingList.current);\n            }\n        }\n\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e: KeyboardEvent) => {\n        const target = e.target as HTMLElement;\n        if (this.props.shiftEnter && isKeyPressed(e, Constants.KeyCodes.ENTER) && e.shiftKey) {\n            return;\n        }\n        if (this.props.disableEnterSubmit !== true &&\n            isKeyPressed(e, Constants.KeyCodes.ENTER) &&\n            this.props.submit &&\n            target.tagName !== 'SELECT' &&\n            target.parentElement &&\n            target.parentElement.className !== 'react-select__input' &&\n            !target.classList.contains('btn-tertiary') &&\n            this.settingList.current &&\n            this.settingList.current.contains(target)) {\n            this.handleSubmit(e);\n        }\n    };\n\n    handleSubmit = (e: React.MouseEvent | KeyboardEvent) => {\n        e.preventDefault();\n\n        if (this.props.setting && this.props.submit) {\n            this.props.submit(this.props.setting);\n        } else if (this.props.submit) {\n            this.props.submit();\n        }\n    };\n\n    handleUpdateSection = (e: React.MouseEvent) => {\n        if (this.props.updateSection) {\n            this.props.updateSection(this.props.section);\n        }\n        e.preventDefault();\n    };\n\n    render() {\n        let clientError = null;\n        if (this.props.clientError) {\n            clientError = (\n                <div className='form-group'>\n                    <label\n                        id='clientError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.clientError}\n                    </label>\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group'>\n                    <label\n                        id='serverError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.serverError}\n                    </label>\n                </div>\n            );\n        }\n\n        let extraInfo = null;\n        let hintClass = 'setting-list__hint';\n        if (this.props.infoPosition === 'top') {\n            hintClass = 'pb-3';\n        }\n\n        if (this.props.extraInfo) {\n            extraInfo = (\n                <div\n                    id='extraInfo'\n                    className={hintClass}\n                >\n                    {this.props.extraInfo}\n                </div>\n            );\n        }\n\n        let submit: JSX.Element | null = null;\n        if (this.props.submit) {\n            submit = (\n                <SaveButton\n                    defaultMessage={this.props.saveButtonText}\n                    saving={this.props.saving}\n                    disabled={this.props.saving}\n                    onClick={this.handleSubmit}\n                    btnClass={this.props.saveButtonClassName}\n                />\n            );\n        }\n\n        const inputs = this.props.inputs;\n\n        let title;\n        if (this.props.title) {\n            title = (\n                <h4\n                    id='settingTitle'\n                    className='col-sm-12 section-title'\n                >\n                    {this.props.title}\n                </h4>\n            );\n        }\n\n        let listContent = (\n            <div className='setting-list-item'>\n                {inputs}\n                {extraInfo}\n            </div>\n        );\n\n        if (this.props.infoPosition === 'top') {\n            listContent = (\n                <div>\n                    {extraInfo}\n                    {inputs}\n                </div>\n            );\n        }\n\n        let cancelButtonText;\n        if (this.props.cancelButtonText) {\n            cancelButtonText = this.props.cancelButtonText;\n        } else {\n            cancelButtonText = (\n                <FormattedMessage\n                    id='setting_item_max.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        return (\n            <section\n                className={`section-max form-horizontal ${this.props.containerStyle}`}\n            >\n                {title}\n                {this.props.extraContentBeforeSettingList}\n                <div\n                    className={classNames('sectionContent', {\n                        'col-sm-12': this.props.isFullWidth,\n                        'col-sm-10 col-sm-offset-2': !this.props.isFullWidth,\n                    })}\n                >\n                    <div\n                        tabIndex={-1}\n                        ref={this.settingList}\n                        className='setting-list'\n                    >\n                        {listContent}\n                        <div className='setting-list-item'>\n                            <hr/>\n                            {this.props.submitExtra}\n                            {serverError}\n                            {clientError}\n                            {submit}\n                            <button\n                                id={'cancelSetting'}\n                                className='btn btn-tertiary'\n                                onClick={this.handleUpdateSection}\n                            >\n                                {cancelButtonText}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\nimport {a11yFocus} from 'utils/utils';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    joinLeave: string;\n    onUpdateSection: (section?: string) => void;\n    renderOnOffLabel: (label: string) => ReactNode;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n}\n\ntype State = {\n    joinLeaveState: string;\n    isSaving?: boolean;\n    serverError?: string;\n}\n\nexport default class JoinLeaveSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n        a11yFocus(e.currentTarget);\n    };\n\n    public handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    };\n\n    public handleSubmit = (): void => {\n        const {actions, userId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: userId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(userId, [joinLeavePreference]);\n\n        onUpdateSection();\n    };\n\n    public render(): React.ReactNode {\n        const {joinLeaveState} = this.state;\n        if (this.props.active) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState!)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n                ref={this.minRef}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './join_leave_section';\nimport JoinLeaveSection from './join_leave_section';\n\nexport function mapStateToProps(state: GlobalState, props: OwnProps) {\n    const config = getConfig(state);\n    const enableJoinLeaveMessage = config.EnableJoinLeaveMessageByDefault === 'true';\n    const userPreference = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, Preferences.ADVANCED_FILTER_JOIN_LEAVE, enableJoinLeaveMessage.toString(), userPreference),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState, useRef, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n}\n\ntype Props = PropsFromRedux & OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    onUpdateSection: (section?: string) => void;\n};\n\nexport default function PerformanceDebuggingSection(props: Props) {\n    const minRef = useRef<SettingItemMinComponent>(null);\n    const prevActiveRef = useRef(false);\n\n    useEffect(() => {\n        if (prevActiveRef.current && !props.active && props.areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    });\n\n    useEffect(() => {\n        prevActiveRef.current = props.active;\n    }, [props.active]);\n\n    if (!props.performanceDebuggingEnabled) {\n        return null;\n    }\n\n    let settings;\n    if (props.active) {\n        settings = <PerformanceDebuggingSectionExpanded {...props}/>;\n    } else {\n        settings = (\n            <PerformanceDebuggingSectionCollapsed\n                {...props}\n                ref={minRef}\n            />\n        );\n    }\n\n    return (\n        <>\n            {settings}\n            <div className='divider-light'/>\n        </>\n    );\n}\n\nconst PerformanceDebuggingSectionCollapsed = React.forwardRef<SettingItemMinComponent, Props>((props, ref) => {\n    let settingsEnabled = 0;\n\n    if (props.disableClientPlugins) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTelemetry) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTypingMessages) {\n        settingsEnabled += 1;\n    }\n\n    let description;\n    if (settingsEnabled === 0) {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.noneEnabled'\n                defaultMessage='No settings enabled'\n            />\n        );\n    } else {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.settingsEnabled'\n                defaultMessage='{count, number} {count, plural, one {setting} other {settings}} enabled'\n                values={{count: settingsEnabled}}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            describe={description}\n            section={AdvancedSections.PERFORMANCE_DEBUGGING}\n            updateSection={props.onUpdateSection}\n            ref={ref}\n        />\n    );\n});\n\nfunction PerformanceDebuggingSectionExpanded(props: Props) {\n    const [disableClientPlugins, setDisableClientPlugins] = useState(props.disableClientPlugins);\n    const [disableTelemetry, setDisableTelemetry] = useState(props.disableTelemetry);\n    const [disableTypingMessages, setDisableTypingMessages] = useState(props.disableTypingMessages);\n\n    const handleSubmit = useCallback(() => {\n        if (!props.userId) {\n            return;\n        }\n\n        const preferences = [];\n\n        if (disableClientPlugins !== props.disableClientPlugins) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_CLIENT_PLUGINS,\n                value: disableClientPlugins.toString(),\n            });\n        }\n        if (disableTelemetry !== props.disableTelemetry) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TELEMETRY,\n                value: disableTelemetry.toString(),\n            });\n        }\n        if (disableTypingMessages !== props.disableTypingMessages) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TYPING_MESSAGES,\n                value: disableTypingMessages.toString(),\n            });\n        }\n\n        if (preferences.length !== 0 && props.userId) {\n            props.savePreferences(props.userId, preferences);\n        }\n\n        props.onUpdateSection('');\n    }, [\n        props.userId,\n        props.onUpdateSection,\n        props.savePreferences,\n        disableClientPlugins,\n        disableTelemetry,\n        disableTypingMessages,\n    ]);\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            inputs={[\n                <fieldset key='settings'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableClientPlugins}\n                                onChange={(e) => {\n                                    setDisableClientPlugins(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableClientPlugins'\n                                defaultMessage='Disable Client-side Plugins'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTelemetry}\n                                onChange={(e) => {\n                                    setDisableTelemetry(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTelemetry'\n                                defaultMessage='Disable telemetry events sent from the client'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTypingMessages}\n                                onChange={(e) => {\n                                    setDisableTypingMessages(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTypingMessages'\n                                defaultMessage='Disable \"User is typing...\" messages'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info1'\n                            defaultMessage=\"You may enable these settings temporarily to help isolate performance issues while debugging. We don't recommend leaving these settings enabled for an extended period of time as they can negatively impact your user experience.\"\n                        />\n                        <br/>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info2'\n                            defaultMessage='You may need to refresh the page before these settings take effect.'\n                        />\n                    </div>\n                </fieldset>,\n            ]}\n            submit={handleSubmit}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {isPerformanceDebuggingEnabled} from 'mattermost-redux/selectors/entities/general';\nimport {getBool, getUserPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './performance_debugging_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const userPreferences = props.adminMode && props.userId ? getUserPreferences(state, props.userId) : undefined;\n\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        disableClientPlugins: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_CLIENT_PLUGINS, undefined, userPreferences),\n        disableTelemetry: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TELEMETRY, undefined, userPreferences),\n        disableTypingMessages: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TYPING_MESSAGES, undefined, userPreferences),\n        performanceDebuggingEnabled: isPerformanceDebuggingEnabled(state),\n\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PerformanceDebuggingSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\n\nimport './setting_desktop_header.scss';\n\ninterface Props {\n    id?: string;\n    text: ReactNode;\n    info?: ReactNode;\n}\n\nexport default function SettingDesktopHeader(props: Props) {\n    return (\n        <div className='userSettingDesktopHeader'>\n            <h3\n                id={props.id}\n                className='tab-header'\n            >\n                {props.text}\n            </h3>\n            {props.info && <div className='userSettingDesktopHeaderInfo'>{props.info}</div>}\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    text: ReactNode;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\nconst SettingMobileHeader = ({\n    text,\n    closeModal,\n    collapseModal,\n}: Props) => {\n    const intl = useIntl();\n\n    return (\n        <div className='modal-header'>\n            <button\n                id='closeButton'\n                type='button'\n                className='close'\n                data-dismiss='modal'\n                onClick={closeModal}\n            >\n                <span aria-hidden='true'>{'×'}</span>\n            </button>\n            <h4 className='modal-title'>\n                <div className='modal-back'>\n                    <i\n                        className='fa fa-angle-left'\n                        aria-label={\n                            intl.formatMessage({\n                                id: 'generic_icons.collapse',\n                                defaultMessage: 'Collapse Icon',\n                            })\n                        }\n                        onClick={collapseModal}\n                    />\n                </div>\n                {text}\n            </h4>\n        </div>\n    );\n};\n\nexport default SettingMobileHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport Constants, {AdvancedSections, Preferences} from 'utils/constants';\nimport {isMac} from 'utils/user_agent';\nimport {a11yFocus} from 'utils/utils';\n\nimport JoinLeaveSection from './join_leave_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nimport type {PropsFromRedux} from './index';\n\ntype Settings = {\n    [key: string]: string | undefined;\n    send_on_ctrl_enter: Props['sendOnCtrlEnter'];\n    code_block_ctrl_enter: Props['codeBlockOnCtrlEnter'];\n    formatting: Props['formatting'];\n    join_leave: Props['joinLeave'];\n    sync_drafts: Props['syncDrafts'];\n};\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    user: UserProfile;\n    userPreferences?: PreferencesType;\n    updateSection: (section?: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nexport type Props = OwnProps & PropsFromRedux;\n\ntype State = {\n    settings: Settings;\n    isSaving: boolean;\n    showDeactivateAccountModal: boolean;\n    serverError: string;\n}\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): State => {\n        const settings: Settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n            sync_drafts: this.props.syncDrafts,\n            [Preferences.UNREAD_SCROLL_POSITION]: this.props.unreadScrollPosition,\n        };\n\n        const isSaving = false;\n\n        const showDeactivateAccountModal = false;\n\n        return {\n            settings,\n            isSaving,\n            showDeactivateAccountModal,\n            serverError: '',\n        };\n    };\n\n    updateSetting = (setting: string, value: string, e?: React.ChangeEvent): void => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState((prevState) => ({...prevState, ...settings}));\n        a11yFocus(e?.currentTarget as HTMLElement);\n    };\n\n    handleSubmit = async (settings: string[]): Promise<void> => {\n        if (!this.props.user) {\n            return;\n        }\n\n        const preferences: PreferenceType[] = [];\n        const {actions, user} = this.props;\n        const userId = user.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting]!,\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    };\n\n    handleDeactivateAccountSubmit = async (): Promise<void> => {\n        const userId = this.props.user.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleShowDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    };\n\n    handleHideDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    };\n\n    handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = defineMessages({\n            default: {\n                id: 'user.settings.advance.sendDesc',\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: 'user.settings.advance.sendDesc.mac',\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        });\n        const title = defineMessages({\n            default: {\n                id: 'user.settings.advance.sendTitle',\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: 'user.settings.advance.sendTitle.mac',\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        });\n        if (isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    };\n\n    renderOnOffLabel(enabled: string): JSX.Element {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderUnreadScrollPositionLabel(option?: string): JSX.Element {\n        if (option === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT) {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.startFromLeftOff'\n                    defaultMessage='Start me where I left off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.startFromNewest'\n                defaultMessage='Start me at the newest message'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel(): JSX.Element {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        const active = this.props.activeSection === 'formatting';\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, ['formatting'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderUnreadScrollPositionSection = () => {\n        const active = this.props.activeSection === Preferences.UNREAD_SCROLL_POSITION;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.unreadScrollPositionTitle'\n                            defaultMessage='Scroll position when viewing an unread channel'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='unreadScrollPositionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionTitle'\n                                    defaultMessage='Scroll position when viewing an unread channel'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromLeftOff'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromLeftOff'\n                                        defaultMessage='Start me where I left off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromNewest'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromNewest'\n                                        defaultMessage='Start me at the newest message'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionDesc'\n                                    defaultMessage='Choose your scroll position when you view an unread channel. Channels will always be marked as read when viewed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, [Preferences.UNREAD_SCROLL_POSITION])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.unreadScrollPositionTitle'\n                        defaultMessage='Scroll position when viewing an unread channel'\n                    />\n                }\n                describe={this.renderUnreadScrollPositionLabel(this.state.settings[Preferences.UNREAD_SCROLL_POSITION])}\n                section={Preferences.UNREAD_SCROLL_POSITION}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderSyncDraftsSection = () => {\n        const active = this.props.activeSection === AdvancedSections.SYNC_DRAFTS;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.syncDrafts.Title'\n                            defaultMessage='Allow message drafts to sync with the server'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='syncDraftsSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Title'\n                                    defaultMessage='Allow message drafts to sync with the server'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOn'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOff'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Desc'\n                                    defaultMessage='When enabled, message drafts are synced with the server so they can be accessed from any device. When disabled, message drafts are only saved locally on the device where they are composed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.SYNC_DRAFTS}\n                    submit={this.handleSubmit.bind(this, ['sync_drafts'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.syncDrafts.Title'\n                        defaultMessage='Allow message drafts to sync with the server'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.sync_drafts)}\n                section={AdvancedSections.SYNC_DRAFTS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderCtrlSendSection = () => {\n        const active = this.props.activeSection === 'advancedCtrlSend';\n        const serverError = this.state.serverError || null;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n        let max = null;\n        if (active) {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage {...ctrlSendTitle}/>\n                }\n                describe={this.renderCtrlEnterLabel()}\n                section={'advancedCtrlSend'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const ctrlSendSection = this.renderCtrlSendSection();\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let deactivateAccountSection: ReactNode = '';\n        let makeConfirmationModal: ReactNode = '';\n\n        if (this.props.user.auth_service === '' && this.props.enableUserDeactivation && !this.props.adminMode) {\n            const active = this.props.activeSection === 'deactivateAccount';\n            let max = null;\n            if (active) {\n                max = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        saveButtonClassName={'btn-danger'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n            deactivateAccountSection = (\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateAccountTitle'\n                            defaultMessage='Deactivate Account'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateDescShort'\n                            defaultMessage=\"Click 'Edit' to deactivate your account\"\n                        />\n                    }\n                    section={'deactivateAccount'}\n                    updateSection={this.handleUpdateSection}\n                    max={max}\n                />\n            );\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        const unreadScrollPositionSection = this.renderUnreadScrollPositionSection();\n        let unreadScrollPositionSectionDivider = null;\n        if (unreadScrollPositionSection) {\n            unreadScrollPositionSectionDivider = <div className='divider-light'/>;\n        }\n\n        let syncDraftsSection = null;\n        let syncDraftsSectionDivider = null;\n        if (this.props.syncedDraftsAreAllowed) {\n            syncDraftsSection = this.renderSyncDraftsSection();\n            if (syncDraftsSection) {\n                syncDraftsSectionDivider = <div className='divider-light'/>;\n            }\n        }\n\n        return (\n            <div\n                id='advancedSettings'\n                aria-labelledby='advancedButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        text={\n                            <FormattedMessage\n                                id='user.settings.advance.title'\n                                defaultMessage='Advanced Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        active={this.props.activeSection === AdvancedSections.JOIN_LEAVE}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                        adminMode={this.props.adminMode}\n                        userPreferences={this.props.userPreferences}\n                        userId={this.props.user.id}\n                    />\n                    <PerformanceDebuggingSection\n                        active={this.props.activeSection === AdvancedSections.PERFORMANCE_DEBUGGING}\n                        onUpdateSection={this.handleUpdateSection}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        adminMode={this.props.adminMode}\n                        userId={this.props.user.id}\n                    />\n                    {unreadScrollPositionSectionDivider}\n                    {unreadScrollPositionSection}\n                    {syncDraftsSectionDivider}\n                    {syncDraftsSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ConnectedProps} from 'react-redux';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {\n    get,\n    getUnreadScrollPositionPreference,\n    makeGetCategory, makeGetUserCategory,\n    syncedDraftsAreAllowed,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced';\nimport type {OwnProps} from './user_settings_advanced';\n\nconst getAdvancedSettingsCategory = makeGetCategory('getAdvancedSettingsCategory', Preferences.CATEGORY_ADVANCED_SETTINGS);\n\nfunction makeMapStateToProps() {\n    const getUserAdvancedSettingsCategory = makeGetUserCategory('getAdvancedSettingsCategory', Preferences.CATEGORY_ADVANCED_SETTINGS);\n\n    return (state: GlobalState, props: OwnProps) => {\n        const config = getConfig(state);\n\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n        const enableJoinLeaveMessage = config.EnableJoinLeaveMessageByDefault === 'true';\n\n        const userPreferences = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n        const advancedSettingsCategory = userPreferences ? getUserAdvancedSettingsCategory(state, props.user.id) : getAdvancedSettingsCategory(state);\n\n        return {\n            advancedSettingsCategory,\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false', userPreferences),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true', userPreferences),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true', userPreferences),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', enableJoinLeaveMessage.toString(), userPreferences),\n            syncDrafts: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'sync_drafts', 'true', userPreferences),\n            user: props.adminMode && props.user ? props.user : getCurrentUser(state),\n            unreadScrollPosition: getUnreadScrollPositionPreference(state, userPreferences),\n            enableUserDeactivation,\n            syncedDraftsAreAllowed: syncedDraftsAreAllowed(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <>\n            <label\n                className='custom-label'\n                htmlFor={`${props.id}-inputColorValue`}\n            >\n                {props.label}\n            </label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {createRef} from 'react';\nimport type {ChangeEvent, ClipboardEvent, MouseEvent, RefObject} from 'react';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape, MessageDescriptor} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport Constants from 'utils/constants';\n\nimport ColorChooser from '../color_chooser/color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages: Record<string, MessageDescriptor> = defineMessages({\n    sidebarBg: {\n        id: 'user.settings.custom_theme.sidebarBg',\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: 'user.settings.custom_theme.sidebarText',\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: 'user.settings.custom_theme.sidebarHeaderBg',\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarTeamBarBg: {\n        id: 'user.settings.custom_theme.sidebarTeamBarBg',\n        defaultMessage: 'Team Sidebar BG',\n    },\n    sidebarHeaderTextColor: {\n        id: 'user.settings.custom_theme.sidebarHeaderTextColor',\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: 'user.settings.custom_theme.sidebarUnreadText',\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: 'user.settings.custom_theme.sidebarTextHoverBg',\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: 'user.settings.custom_theme.sidebarTextActiveBorder',\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: 'user.settings.custom_theme.sidebarTextActiveColor',\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: 'user.settings.custom_theme.onlineIndicator',\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: 'user.settings.custom_theme.awayIndicator',\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: 'user.settings.custom_theme.dndIndicator',\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: 'user.settings.custom_theme.mentionBg',\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: 'user.settings.custom_theme.mentionColor',\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: 'user.settings.custom_theme.centerChannelBg',\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: 'user.settings.custom_theme.centerChannelColor',\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: 'user.settings.custom_theme.newMessageSeparator',\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: 'user.settings.custom_theme.linkColor',\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: 'user.settings.custom_theme.buttonBg',\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: 'user.settings.custom_theme.buttonColor',\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: 'user.settings.custom_theme.errorTextColor',\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: 'user.settings.custom_theme.mentionHighlightBg',\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: 'user.settings.custom_theme.mentionHighlightLink',\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: 'user.settings.custom_theme.codeTheme',\n        defaultMessage: 'Code Theme',\n    },\n});\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    intl: IntlShape;\n};\n\ntype State = {\n    copyTheme: string;\n};\n\nexport class CustomThemeChooser extends React.PureComponent<Props, State> {\n    textareaRef: RefObject<HTMLTextAreaElement>;\n    sidebarStylesHeaderRef: RefObject<HTMLButtonElement>;\n    centerChannelStylesHeaderRef: RefObject<HTMLButtonElement>;\n    linkAndButtonStylesHeaderRef: RefObject<HTMLButtonElement>;\n    sidebarStylesRef: RefObject<HTMLDivElement>;\n    centerChannelStylesRef: RefObject<HTMLDivElement>;\n    linkAndButtonStylesRef: RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n        this.textareaRef = createRef();\n        this.sidebarStylesHeaderRef = createRef();\n        this.centerChannelStylesHeaderRef = createRef();\n        this.linkAndButtonStylesHeaderRef = createRef();\n        this.sidebarStylesRef = createRef();\n        this.centerChannelStylesRef = createRef();\n        this.linkAndButtonStylesRef = createRef();\n\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n    handleColorChange = (settingId: string, color: string) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme: Theme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatibility\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    };\n\n    setCopyTheme(theme: Theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e: ClipboardEvent<HTMLTextAreaElement>) => {\n        let text = '';\n\n        if ((window as any).clipboardData && (window as any).clipboardData.getData) { // IE\n            text = (window as any).clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        theme = setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    };\n\n    onChangeHandle = (e: ChangeEvent<HTMLTextAreaElement>) => e.stopPropagation();\n\n    selectTheme = () => {\n        this.textareaRef.current?.focus();\n        this.textareaRef.current?.setSelectionRange(0, this.state.copyTheme.length);\n    };\n\n    toggleSidebarStyles = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        this.sidebarStylesHeaderRef.current?.classList.toggle('open');\n\n        const isAccordionOpen = this.sidebarStylesHeaderRef.current?.classList.contains('open');\n        this.sidebarStylesHeaderRef.current?.setAttribute('aria-expanded', `${isAccordionOpen}`);\n        this.toggleSection(this.sidebarStylesRef.current);\n    };\n\n    toggleCenterChannelStyles = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        this.centerChannelStylesHeaderRef.current?.classList.toggle('open');\n\n        const isAccordionOpen = this.centerChannelStylesHeaderRef.current?.classList.contains('open');\n        this.centerChannelStylesHeaderRef.current?.setAttribute('aria-expanded', `${isAccordionOpen}`);\n        this.toggleSection(this.centerChannelStylesRef.current);\n    };\n\n    toggleLinkAndButtonStyles = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        this.linkAndButtonStylesHeaderRef.current?.classList.toggle('open');\n\n        const isAccordionOpen = this.linkAndButtonStylesHeaderRef.current?.classList.contains('open');\n        this.linkAndButtonStylesHeaderRef.current?.setAttribute('aria-expanded', `${isAccordionOpen}`);\n        this.toggleSection(this.linkAndButtonStylesRef.current);\n    };\n\n    toggleSection(node: HTMLElement | null) {\n        if (!node) {\n            return;\n        }\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const theme: Theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    };\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    };\n\n    showCopySuccess = () => {\n        const copySuccess: HTMLElement | null = document.querySelector('.copy-theme-success');\n        if (copySuccess) {\n            copySuccess.style.display = 'inline-block';\n            setTimeout(() => {\n                copySuccess.style.display = 'none';\n            }, COPY_SUCCESS_INTERVAL);\n        }\n    };\n\n    render() {\n        const {intl, theme} = this.props;\n        const sidebarElements: JSX.Element[] = [];\n        const centerChannelElements: JSX.Element[] = [];\n        const linkAndButtonElements: JSX.Element[] = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions: JSX.Element[] = [];\n                let codeThemeURL = '';\n\n                element.themes?.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label\n                            className='custom-label'\n                            htmlFor='codeThemeSelect'\n                        >\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <WithTooltip\n                                title={\n                                    <div className='code-popover'>\n                                        <img\n                                            width='200'\n                                            alt={'code theme image'}\n                                            src={codeThemeURL}\n                                        />\n                                    </div>\n                                }\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </WithTooltip>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label\n                    className='custom-label'\n                    htmlFor='pasteBox'\n                >\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref={this.textareaRef}\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-tertiary'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div\n                id='customThemesSection'\n                className='appearance-section pt-2'\n                aria-labelledby='customThemes'\n            >\n                <div className='theme-elements row'>\n                    <h4 className='theme-elements__header'>\n                        <button\n                            ref={this.sidebarStylesHeaderRef}\n                            id='sidebarStylesAccordion'\n                            onClick={this.toggleSidebarStyles}\n                            aria-expanded={false}\n                            aria-controls='sidebarStylesSection'\n                            className='theme-elements__header'\n                        >\n                            <FormattedMessage\n                                id='user.settings.custom_theme.sidebarTitle'\n                                defaultMessage='Sidebar Styles'\n                            />\n                            <div className='header__icon'>\n                                <i\n                                    className='fa fa-plus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                                />\n                                <i\n                                    className='fa fa-minus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                />\n                            </div>\n                        </button>\n                    </h4>\n                    <div\n                        ref={this.sidebarStylesRef}\n                        id='sidebarStylesSection'\n                        aria-labelledby='sidebarStylesAccordion'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <h4 className='theme-elements__header'>\n                        <button\n                            ref={this.centerChannelStylesHeaderRef}\n                            id='centerChannelStylesAccordion'\n                            onClick={this.toggleCenterChannelStyles}\n                            aria-expanded={false}\n                            aria-controls='centerChannelStylesSection'\n                            className='theme-elements__header'\n                        >\n                            <FormattedMessage\n                                id='user.settings.custom_theme.centerChannelTitle'\n                                defaultMessage='Center Channel Styles'\n                            />\n                            <div className='header__icon'>\n                                <i\n                                    className='fa fa-plus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                                />\n                                <i\n                                    className='fa fa-minus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                />\n                            </div>\n                        </button>\n                    </h4>\n                    <div\n                        ref={this.centerChannelStylesRef}\n                        id='centerChannelStylesSection'\n                        className='theme-elements__body'\n                        aria-labelledby='centerChannelStylesAccordion'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <h4 className='theme-elements__header'>\n                        <button\n                            ref={this.linkAndButtonStylesHeaderRef}\n                            id='linkAndButtonsStylesAccordion'\n                            onClick={this.toggleLinkAndButtonStyles}\n                            aria-expanded={false}\n                            aria-controls='linkAndButtonsStylesSection'\n                            className='theme-elements__header'\n                        >\n                            <FormattedMessage\n                                id='user.settings.custom_theme.linkButtonTitle'\n                                defaultMessage='Link and Button Styles'\n                            />\n                            <div className='header__icon'>\n                                <i\n                                    className='fa fa-plus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                                />\n                                <i\n                                    className='fa fa-minus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                />\n                            </div>\n                        </button>\n                    </h4>\n                    <div\n                        id='linkAndButtonsStylesSection'\n                        ref={this.linkAndButtonStylesRef}\n                        className='theme-elements__body'\n                        aria-labelledby='linkAndButtonsStylesAccordion'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(CustomThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/jsx-max-props-per-line */\n\nimport React from 'react';\n\ntype ThemeThumbnailProps = {\n    themeName?: string;\n    themeKey: string;\n    sidebarBg: string;\n    sidebarText: string;\n    sidebarUnreadText: string;\n    onlineIndicator: string;\n    awayIndicator: string;\n    dndIndicator: string;\n    centerChannelColor: string;\n    centerChannelBg: string;\n    newMessageSeparator: string;\n    buttonBg: string;\n}\n\nfunction ThemeThumbnail({\n    themeName,\n    themeKey,\n    sidebarBg = '#174AB5',\n    sidebarText = '#86A1D9',\n    sidebarUnreadText = 'white',\n    onlineIndicator = '#3DB887',\n    awayIndicator = '#FFBC1F',\n    dndIndicator = '#D24B4E',\n    centerChannelColor = '#E0E1E3',\n    centerChannelBg = 'white',\n    newMessageSeparator = '#1C58D9',\n    buttonBg = '#15B7B7',\n}: ThemeThumbnailProps): JSX.Element {\n    return (\n        <svg width='112' height='86' viewBox='0 0 112 86' fill='none' xmlns='http://www.w3.org/2000/svg' aria-labelledby={`${themeKey}-theme-icon`} role='img'>\n            <title id={`${themeKey}-theme-icon`}>{`${themeName} theme icon`}</title>\n            <rect style={{fill: centerChannelBg}} x='0' y='0' width='112' height='86'/>\n            <g>\n                <rect style={{fill: centerChannelBg}} x='50' y='-1' width='63' height='88'/>\n                <g>\n                    <rect style={{fill: centerChannelColor}} x='55' y='75' width='52' height='6' rx='3'/>\n                    <rect style={{fill: centerChannelBg}} x='56' y='76' width='50' height='4' rx='2'/>\n                </g>\n                <rect style={{fill: buttonBg}} x='71' y='65' width='22' height='5' rx='2.5'/>\n                <rect style={{fill: newMessageSeparator}} x='50' y='32' width='62' height='1'/>\n                <g style={{fill: centerChannelColor}}>\n                    <rect x='55' y='5' width='52' height='4' rx='2'/>\n                    <rect x='55' y='14' width='52' height='4' rx='2'/>\n                    <rect x='55' y='23' width='52' height='4' rx='2'/>\n                    <rect x='55' y='38' width='52' height='4' rx='2'/>\n                    <rect x='55' y='47' width='52' height='4' rx='2'/>\n                    <rect x='55' y='56' width='52' height='4' rx='2'/>\n                </g>\n            </g>\n            <g>\n                <rect style={{fill: sidebarBg}} x='-1' y='-1' width='51' height='88'/>\n                <g style={{fill: sidebarText}}>\n                    <circle cx='7' cy='61' r='2'/>\n                    <circle cx='7' cy='70' r='2'/>\n                    <circle cx='7' cy='43' r='2'/>\n                    <circle cx='7' cy='34' r='2'/>\n                    <circle cx='7' cy='16' r='2'/>\n                    <circle cx='7' cy='7' r='2'/>\n                    <rect x='11' y='5' width='28' height='4' rx='2'/>\n                    <rect x='11' y='14' width='28' height='4' rx='2'/>\n                    <rect x='11' y='32' width='28' height='4' rx='2'/>\n                    <rect x='11' y='41' width='28' height='4' rx='2'/>\n                    <rect x='11' y='50' width='28' height='4' rx='2'/>\n                    <rect x='11' y='59' width='28' height='4' rx='2'/>\n                    <rect x='11' y='68' width='28' height='4' rx='2'/>\n                    <rect x='11' y='77' width='28' height='4' rx='2'/>\n                </g>\n                <circle style={{fill: dndIndicator}} cx='7' cy='79' r='2'/>\n                <circle style={{fill: awayIndicator}} cx='7' cy='52' r='2'/>\n                <circle style={{fill: onlineIndicator}} cx='7' cy='25' r='2'/>\n                <g style={{fill: sidebarUnreadText}}>\n                    <circle cx='43' cy='25' r='2'/>\n                    <rect x='11' y='23' width='28' height='4' rx='2'/>\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nexport default ThemeThumbnail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {Theme, ThemeKey} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity} from 'mattermost-redux/utils/theme_utils';\n\nimport {toTitleCase} from 'utils/utils';\n\nimport ThemeThumbnail from '../theme_thumbnail';\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    allowedThemes: string[];\n}\n\nconst PremadeThemeChooser = ({theme, updateTheme, allowedThemes = []}: Props) => {\n    const premadeThemes = [];\n    const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n    for (const k in Preferences.THEMES) {\n        if (Object.hasOwn(Preferences.THEMES, k)) {\n            if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                continue;\n            }\n\n            const premadeTheme: Theme = Object.assign({}, Preferences.THEMES[k as ThemeKey]);\n\n            let activeClass = '';\n            if (premadeTheme.type === theme.type) {\n                activeClass = 'active';\n            }\n\n            premadeThemes.push(\n                <div\n                    className='col-xs-6 col-sm-3 premade-themes'\n                    key={'premade-theme-key' + k}\n                >\n                    <button\n                        id={`premadeTheme${premadeTheme.type?.replace(' ', '')}`}\n                        className={`premadeThemeButton ${activeClass}`}\n                        onClick={() => updateTheme(premadeTheme)}\n                    >\n                        <label>\n                            <ThemeThumbnail\n                                themeKey={k}\n                                themeName={premadeTheme.type}\n                                sidebarBg={premadeTheme.sidebarBg}\n                                sidebarText={changeOpacity(premadeTheme.sidebarText, 0.48)}\n                                sidebarUnreadText={premadeTheme.sidebarUnreadText}\n                                onlineIndicator={premadeTheme.onlineIndicator}\n                                awayIndicator={premadeTheme.awayIndicator}\n                                dndIndicator={premadeTheme.dndIndicator}\n                                centerChannelColor={changeOpacity(premadeTheme.centerChannelColor, 0.16)}\n                                centerChannelBg={premadeTheme.centerChannelBg}\n                                newMessageSeparator={premadeTheme.newMessageSeparator}\n                                buttonBg={premadeTheme.buttonBg}\n                            />\n                            <div className='theme-label'>{toTitleCase(premadeTheme.type || '')}</div>\n                        </label>\n                    </button>\n                </div>,\n            );\n        }\n    }\n\n    return (\n        <div\n            id='premadeThemesSection'\n            className='row appearance-section'\n            aria-labelledby='standardThemes'\n        >\n            <div className='clearfix'>\n                {premadeThemes}\n            </div>\n        </div>\n    );\n};\n\nexport default PremadeThemeChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {Constants} from 'utils/constants';\nimport {applyTheme} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\nimport CustomThemeChooser from './custom_theme_chooser/custom_theme_chooser';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\ntype Props = {\n    currentTeamId: string;\n    theme: Theme;\n    selected: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    setRequireConfirm?: (requireConfirm: boolean) => void;\n    allowCustomThemes: boolean;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    actions: {\n        saveTheme: (teamId: string, theme: Theme) => void;\n        deleteTeamSpecificThemes: () => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n};\n\ntype State = {\n    isSaving: boolean;\n    type: string;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    serverError: string;\n    theme: Theme;\n};\n\nexport default class ThemeSetting extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n    originalTheme: Theme;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n            serverError: '',\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n        if (prevProps.selected && !this.props.selected && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props): State {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n            serverError: '',\n            isSaving: false,\n        };\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    submitTheme = async (): Promise<void> => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm?.(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme: Theme): void => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (Object.hasOwn(theme, field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm?.(themeChanged);\n\n        this.setState({theme});\n        applyTheme(theme);\n    };\n\n    updateType = (type: string): void => this.setState({type});\n\n    resetFields = (): void => {\n        const state = this.getStateFromProps();\n        state.serverError = '';\n        this.setState(state);\n\n        applyTheme(state.theme);\n\n        this.props.setRequireConfirm?.(false);\n    };\n\n    handleUpdateSection = (section: string): void => this.props.updateSection(section);\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        key='premadeCustom'\n                        className='user-settings__radio-group-inline'\n                    >\n                        <div className='radio radio-inline'>\n                            <label>\n                                <input\n                                    id='standardThemes'\n                                    type='radio'\n                                    name='theme'\n                                    checked={!displayCustom}\n                                    onChange={this.updateType.bind(this, 'premade')}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.display.theme.premadeThemes'\n                                    defaultMessage='Premade Themes'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio radio-inline'>\n                            <label>\n                                <input\n                                    id='customThemes'\n                                    type='radio'\n                                    name='theme'\n                                    checked={displayCustom}\n                                    onChange={this.updateType.bind(this, 'custom')}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.display.theme.customTheme'\n                                    defaultMessage='Custom Theme'\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(premade, custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <ExternalLink\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            location='user_settings_theme'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </ExternalLink>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    inputs={\n                        <fieldset>\n                            <legend className='hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.display.theme.title'\n                                    defaultMessage='Theme'\n                                />\n                            </legend>\n                            <div>\n                                {inputs}\n                            </div>\n                        </fieldset>\n                    }\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    isFullWidth={true}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\nimport {getTheme, getThemePreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {openModal} from 'actions/views/modals';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserSettingsTheme from './user_settings_theme';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        theme: getTheme(state),\n        applyToAllTeams: getThemePreferences(state).length <= 1,\n        showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {StylesConfig, OnChangeValue, AriaOnFocus, AriaOnChange} from 'react-select';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport type {Language} from 'i18n/i18n';\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n    patchUser: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    locale: string;\n    locales: Record<string, Language>;\n    updateSection: (section: string) => void;\n    actions: Actions;\n    adminMode?: boolean;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: props.locales[userLocale].value,\n            label: props.locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: OnChangeValue<SelectedOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        const action = this.props.adminMode ? this.props.actions.patchUser : this.props.actions.updateMe;\n        action(user).then((res) => {\n            if ('data' in res) {\n                this.setState({isSaving: false});\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        const {intl, locales} = this.props;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        } satisfies StylesConfig<SelectedOption, boolean>;\n\n        const onFocusMessage: AriaOnFocus<SelectedOption> = ({focused}) => {\n            return `option ${focused.label} focused`;\n        };\n\n        const onChangeMessage: AriaOnChange<SelectedOption, boolean> = (option) => {\n            return `option ${option.label} selected`;\n        };\n\n        const interfaceLanguageLabelAria = intl.formatMessage({id: 'user.settings.languages.dropdown.arialabel', defaultMessage: 'Dropdown selector to change the interface language'});\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    aria-label={interfaceLanguageLabelAria}\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                    htmlFor='displayLanguage'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        ariaLiveMessages={{\n                            onFocus: onFocusMessage,\n                            onChange: onChangeMessage,\n                        }}\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        isClearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                        aria-live='assertive'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote1'\n                        defaultMessage='Select which language Mattermost displays in the user interface.'\n                    />\n                    <p/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote2'\n                        defaultMessage='Would you like to help with translations? Join the <link>Mattermost Translation Server</link> to contribute.'\n                        values={{\n                            link: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='http://translate.mattermost.com'\n                                    location='manage_languages'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n                disableEnterSubmit={true}\n            />\n        );\n    }\n}\nexport default injectIntl(ManageLanguage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\n\nimport {getLanguages} from 'i18n/i18n';\n\nimport type {GlobalState} from 'types/store';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        locales: getLanguages(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, StylesConfig} from 'react-select';\nimport type {Timezone} from 'timezones.json';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getTimezoneLabel} from 'mattermost-redux/utils/timezone_utils';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {getBrowserTimezone} from 'utils/timezone';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n    patchUser: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: Timezone[];\n    timezoneLabel: string;\n    actions: Actions;\n    adminMode?: boolean;\n}\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    isSaving: boolean;\n    serverError?: string;\n    openMenu: boolean;\n    selectedOption: SelectedOption;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            isSaving: false,\n            openMenu: false,\n            selectedOption: {label: props.timezoneLabel, value: props.useAutomaticTimezone ? props.automaticTimezone : props.manualTimezone},\n        };\n    }\n\n    onChange = (selectedOption: OnChangeValue<SelectedOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                manualTimezone: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user} = this.props;\n        const {useAutomaticTimezone, automaticTimezone, manualTimezone} = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        const action = this.props.adminMode ? this.props.actions.patchUser : this.props.actions.updateMe;\n        action(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n        let timezoneLabel: string;\n        let selectedOptionValue: string;\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n            timezoneLabel = getTimezoneLabel(this.props.timezones, automaticTimezone);\n            selectedOptionValue = automaticTimezone;\n        } else {\n            timezoneLabel = getTimezoneLabel(this.props.timezones, getBrowserTimezone());\n            selectedOptionValue = getBrowserTimezone();\n            this.setState({\n                manualTimezone: getBrowserTimezone(),\n            });\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n            selectedOption: {label: timezoneLabel, value: selectedOptionValue},\n        });\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {useAutomaticTimezone} = this.state;\n\n        let index = 0;\n        let previousTimezone: Timezone;\n\n        const timeOptions = this.props.timezones.map((timeObject) => {\n            if (timeObject.utc[index] === previousTimezone?.utc[index]) {\n                index++;\n            } else {\n                // It's safe to use the first item since consecutive timezones\n                // don't have the same 'utc' array.\n                index = index === 0 ? index : 0;\n            }\n\n            previousTimezone = timeObject;\n\n            // Some more context on why different 'utc' items are used can be found here.\n            // https://github.com/mattermost/mattermost/pull/29290#issuecomment-2478492626\n            return {\n                value: timeObject.utc[index],\n                label: timeObject.text,\n            };\n        });\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        // These are passed to the 'key' prop and should all be unique.\n        const inputId = {\n            automaticTimezoneInput: 1,\n            manualTimezoneInput: 2,\n            message: 3,\n        };\n\n        const reactStyles = {\n\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n\n        } satisfies StylesConfig<SelectedOption, boolean>;\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div\n                className='checkbox'\n                key={inputId.automaticTimezoneInput}\n            >\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Automatic'\n                    />\n\n                </label>\n            </div>\n        );\n\n        const manualTimezoneInput = (\n            <div\n                className='pt-2'\n                key={inputId.manualTimezoneInput}\n            >\n                <ReactSelect\n                    className='react-select react-select-top'\n                    classNamePrefix='react-select'\n                    id='displayTimezone'\n                    menuPortalTarget={document.body}\n                    styles={reactStyles}\n                    options={timeOptions}\n                    isClearable={false}\n                    onChange={this.onChange}\n                    value={this.state.selectedOption}\n                    aria-labelledby='changeInterfaceTimezoneLabel'\n                    isDisabled={useAutomaticTimezone}\n                />\n                {serverError}\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        inputs.push(manualTimezoneInput);\n\n        inputs.push(\n            <div key={inputId.message}>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n                disableEnterSubmit={true}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\nimport timezones from 'timezones.json';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getCurrentTimezoneLabel} from 'mattermost-redux/selectors/entities/timezone';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\nfunction mapStateToProps(state: GlobalState) {\n    const timezoneLabel = getCurrentTimezoneLabel(state);\n    return {\n        timezones,\n        timezoneLabel,\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedMessage, defineMessage} from 'react-intl';\nimport type {Timezone} from 'timezones.json';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile, UserTimezone} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\n\nimport {getLanguageInfo} from 'i18n/i18n';\nimport type {Language} from 'i18n/i18n';\nimport Constants from 'utils/constants';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {a11yFocus} from 'utils/utils';\n\nimport ManageLanguages from './manage_languages';\nimport ManageTimezones from './manage_timezones';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        availabilityStatusOnPosts: props.availabilityStatusOnPosts,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        colorizeUsernames: props.colorizeUsernames,\n        collapseDisplay: props.collapseDisplay,\n        collapsedReplyThreads: props.collapsedReplyThreads,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n        lastActiveDisplay: props.lastActiveDisplay.toString(),\n        oneClickReactionsOnPosts: props.oneClickReactionsOnPosts,\n        clickToReply: props.clickToReply,\n    };\n}\n\ntype ChildOption = {\n    label: MessageDescriptor;\n    value: string;\n    display: string;\n    more: MessageDescriptor;\n};\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        label: MessageDescriptor;\n        more?: MessageDescriptor;\n    };\n    childOption?: ChildOption;\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: MessageDescriptor;\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: MessageDescriptor;\n    disabled?: boolean;\n    onSubmit?: () => void;\n}\n\nexport type OwnProps = {\n    user: UserProfile;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm?: () => void;\n    timezones: Timezone[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    locales: Record<string, Language>;\n    userLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    shouldAutoUpdateTimezone: boolean | string;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    collapsedReplyThreadsAllowUserPreference: boolean;\n    clickToReply: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    emojiPickerEnabled: boolean;\n    timezoneLabel: string;\n    lastActiveDisplay: boolean;\n    lastActiveTimeEnabled: boolean;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n        patchUser: (user: UserProfile) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    linkPreviewDisplay: string;\n    lastActiveDisplay: string;\n    oneClickReactionsOnPosts: string;\n    clickToReply: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, shouldAutoUpdateTimezone} = this.props;\n\n        if (shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    trackChangeIfNecessary(preference: PreferenceType, oldValue: any): void {\n        const props = {\n            field: 'display.' + preference.name,\n            value: preference.value,\n        };\n\n        if (preference.value !== oldValue) {\n            trackEvent('settings', 'user_settings_update', props);\n        }\n    }\n\n    submitLastActive = () => {\n        const {user, actions} = this.props;\n        const {lastActiveDisplay} = this.state;\n\n        const updatedUser = {\n            ...user,\n            props: {\n                ...user.props,\n                show_last_active: lastActiveDisplay,\n            },\n        };\n\n        const action = this.props.adminMode ? actions.patchUser : actions.updateMe;\n        action(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const availabilityStatusOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.AVAILABILITY_STATUS_ON_POSTS,\n            value: this.state.availabilityStatusOnPosts,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const colorizeUsernamesPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLORIZE_USERNAMES,\n            value: this.state.colorizeUsernames,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const collapsedReplyThreadsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSED_REPLY_THREADS,\n            value: this.state.collapsedReplyThreads,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n        const oneClickReactionsOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n            value: this.state.oneClickReactionsOnPosts,\n        };\n        const clickToReplyPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CLICK_TO_REPLY,\n            value: this.state.clickToReply,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapsedReplyThreadsPreference,\n            clickToReplyPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n            availabilityStatusOnPostsPreference,\n            oneClickReactionsOnPostsPreference,\n            colorizeUsernamesPreference,\n        ];\n\n        this.trackChangeIfNecessary(collapsedReplyThreadsPreference, this.props.collapsedReplyThreads);\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    };\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    };\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    };\n\n    handleAvailabilityStatusRadio = (availabilityStatusOnPosts: string) => {\n        this.setState({availabilityStatusOnPosts});\n    };\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleCollapseReplyThreadsRadio(collapsedReplyThreads: string) {\n        this.setState({collapsedReplyThreads});\n    }\n\n    handleLastActiveRadio(lastActiveDisplay: string) {\n        this.setState({lastActiveDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOneClickReactionsRadio = (oneClickReactionsOnPosts: string) => {\n        this.setState({oneClickReactionsOnPosts});\n    };\n\n    handleClickToReplyRadio = (clickToReply: string) => {\n        this.setState({clickToReply});\n    };\n\n    handleOnChange(e: React.ChangeEvent, display: {[key: string]: any}) {\n        this.setState({...display});\n        a11yFocus(e.currentTarget as HTMLElement);\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    };\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!deepEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    };\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n            onSubmit,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | (() => void) | null = onSubmit || this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.label.id}\n                defaultMessage={firstOption.radionButtonText.label.defaultMessage}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.more?.id) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.more.id}\n                        defaultMessage={firstOption.radionButtonText.more.defaultMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.label.id}\n                defaultMessage={secondOption.radionButtonText.label.defaultMessage}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.more?.id) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.more.id}\n                        defaultMessage={secondOption.radionButtonText.more.defaultMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.label.id}\n                    defaultMessage={thirdOption.radionButtonText.label.defaultMessage}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.defaultMessage}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.defaultMessage}\n            />\n        );\n\n        const active = this.props.activeSection === section;\n        let max = null;\n        if (active) {\n            const format = [false, false, false];\n            let childOptionToShow: ChildOption | undefined;\n            if (value === firstOption.value) {\n                format[0] = true;\n                childOptionToShow = firstOption.childOption;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n                childOptionToShow = secondOption.childOption;\n            } else {\n                format[2] = true;\n                if (thirdOption) {\n                    childOptionToShow = thirdOption.childOption;\n                }\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={(e) => this.handleOnChange(e, thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let childOptionSection;\n            if (childOptionToShow) {\n                const childDisplay = childOptionToShow.display;\n                childOptionSection = (\n                    <div className='checkbox'>\n                        <hr/>\n                        <label>\n                            <input\n                                id={name + 'childOption'}\n                                type='checkbox'\n                                name={childOptionToShow.label.id}\n                                checked={childOptionToShow.value === 'true'}\n                                onChange={(e) => {\n                                    this.handleOnChange(e, {[childDisplay]: e.target.checked ? 'true' : 'false'});\n                                }}\n                            />\n                            <FormattedMessage\n                                id={childOptionToShow.label.id}\n                                defaultMessage={childOptionToShow.label.defaultMessage}\n                            />\n                            {moreColon}\n                            <span className='font-weight--normal'>\n                                <FormattedMessage\n                                    id={childOptionToShow.more.id}\n                                    defaultMessage={childOptionToShow.more.defaultMessage}\n                                />\n                            </span>\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={(e) => this.handleOnChange(e, firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={(e) => this.handleOnChange(e, secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                    {childOptionSection}\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            max = (\n                <SettingItemMax\n                    title={messageTitle}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.updateSection}\n                />);\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                    max={max}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: defineMessage({\n                id: 'user.settings.display.collapseDisplay',\n                defaultMessage: 'Default Appearance of Image Previews',\n            }),\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.collapseOn',\n                        defaultMessage: 'Expanded',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.collapseOff',\n                        defaultMessage: 'Collapsed',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.collapseDesc',\n                defaultMessage: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            }),\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.linkPreviewDisplay',\n                    defaultMessage: 'Website Link Previews',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.linkPreviewOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.linkPreviewOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.linkPreviewDesc',\n                    defaultMessage: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                }),\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        let lastActiveSection = null;\n\n        if (this.props.lastActiveTimeEnabled) {\n            lastActiveSection = this.createSection({\n                section: 'lastactive',\n                display: 'lastActiveDisplay',\n                value: this.state.lastActiveDisplay,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.lastActiveDisplay',\n                    defaultMessage: 'Share last active time',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.lastActiveOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.lastActiveOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.lastActiveDesc',\n                    defaultMessage: 'When enabled, other users will see when you were last active.',\n                }),\n                onSubmit: this.submitLastActive,\n            });\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: defineMessage({\n                id: 'user.settings.display.clockDisplay',\n                defaultMessage: 'Clock Display',\n            }),\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.normalClock',\n                        defaultMessage: '12-hour clock (example: 4:00 PM)',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.militaryClock',\n                        defaultMessage: '24-hour clock (example: 16:00)',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.preferTime',\n                defaultMessage: 'Select how you prefer time displayed.',\n            }),\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: defineMessage({\n                id: 'user.settings.display.teammateNameDisplayTitle',\n                defaultMessage: 'Teammate Name Display',\n            }),\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayUsername',\n                        defaultMessage: 'Show username',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayNicknameFullname',\n                        defaultMessage: 'Show nickname if one exists, otherwise show first and last name',\n                    }),\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayFullname',\n                        defaultMessage: 'Show first and last name',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.teammateNameDisplayDescription',\n                defaultMessage: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            }),\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        const availabilityStatusOnPostsSection = this.createSection({\n            section: 'availabilityStatus',\n            display: 'availabilityStatusOnPosts',\n            value: this.state.availabilityStatusOnPosts,\n            defaultDisplay: 'true',\n            title: defineMessage({\n                id: 'user.settings.display.availabilityStatusOnPostsTitle',\n                defaultMessage: 'Show user availability on posts',\n            }),\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.on',\n                        defaultMessage: 'On',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.off',\n                        defaultMessage: 'Off',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.availabilityStatusOnPostsDescription',\n                defaultMessage: 'When enabled, online availability is displayed on profile images in the message list.',\n            }),\n        });\n\n        let timezoneSelection;\n        if (!this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            const active = this.props.activeSection === 'timezone';\n            let max = null;\n            if (active) {\n                max = (\n                    <ManageTimezones\n                        user={this.props.user}\n                        useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                        automaticTimezone={userTimezone.automaticTimezone}\n                        manualTimezone={userTimezone.manualTimezone}\n                        updateSection={this.updateSection}\n                        adminMode={this.props.adminMode}\n                    />\n                );\n            }\n            timezoneSelection = (\n                <div>\n                    <SettingItem\n                        active={active}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.timezone'\n                                defaultMessage='Timezone'\n                            />\n                        }\n                        describe={this.props.timezoneLabel}\n                        section={'timezone'}\n                        updateSection={this.updateSection}\n                        max={max}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: defineMessage({\n                id: 'user.settings.display.messageDisplayTitle',\n                defaultMessage: 'Message Display',\n            }),\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.messageDisplayClean',\n                        defaultMessage: 'Standard',\n                    }),\n                    more: defineMessage({\n                        id: 'user.settings.display.messageDisplayCleanDes',\n                        defaultMessage: 'Easy to scan and read.',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.messageDisplayCompact',\n                        defaultMessage: 'Compact',\n                    }),\n                    more: defineMessage({\n                        id: 'user.settings.display.messageDisplayCompactDes',\n                        defaultMessage: 'Fit as many messages on the screen as we can.',\n                    }),\n                },\n                childOption: {\n                    label: defineMessage({\n                        id: 'user.settings.display.colorize',\n                        defaultMessage: 'Colorize usernames',\n                    }),\n                    value: this.state.colorizeUsernames,\n                    display: 'colorizeUsernames',\n                    more: defineMessage({\n                        id: 'user.settings.display.colorizeDes',\n                        defaultMessage: 'Use colors to distinguish users in compact mode',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.messageDisplayDescription',\n                defaultMessage: 'Select how messages in a channel should be displayed.',\n            }),\n        });\n\n        let collapsedReplyThreads;\n\n        if (this.props.collapsedReplyThreadsAllowUserPreference) {\n            collapsedReplyThreads = this.createSection({\n                section: Preferences.COLLAPSED_REPLY_THREADS,\n                display: 'collapsedReplyThreads',\n                value: this.state.collapsedReplyThreads,\n                defaultDisplay: Preferences.COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT,\n                title: defineMessage({\n                    id: 'user.settings.display.collapsedReplyThreadsTitle',\n                    defaultMessage: 'Threaded Discussions',\n                }),\n                firstOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_ON,\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.collapsedReplyThreadsOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_OFF,\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.collapsedReplyThreadsOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.collapsedReplyThreadsDescription',\n                    defaultMessage: 'When enabled, reply messages are not shown in the channel and you\\'ll be notified about threads you\\'re following in the \"Threads\" view.',\n                }),\n            });\n        }\n\n        const clickToReply = this.createSection({\n            section: Preferences.CLICK_TO_REPLY,\n            display: 'clickToReply',\n            value: this.state.clickToReply,\n            defaultDisplay: 'true',\n            title: defineMessage({\n                id: 'user.settings.display.clickToReply',\n                defaultMessage: 'Click to open threads',\n            }),\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.on',\n                        defaultMessage: 'On',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.off',\n                        defaultMessage: 'Off',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.clickToReplyDescription',\n                defaultMessage: 'When enabled, click anywhere on a message to open the reply thread.',\n            }),\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: defineMessage({\n                id: 'user.settings.display.channelDisplayTitle',\n                defaultMessage: 'Channel Display',\n            }),\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.fullScreen',\n                        defaultMessage: 'Full width',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.fixedWidthCentered',\n                        defaultMessage: 'Fixed width, centered',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.channeldisplaymode',\n                defaultMessage: 'Select the width of the center channel.',\n            }),\n        });\n\n        let languagesSection;\n        const userLocale = this.props.userLocale;\n        const localeName = getLanguageInfo(userLocale).name;\n\n        languagesSection = (\n            <div>\n                <SettingItem\n                    active={this.props.activeSection === 'languages'}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.language'\n                            defaultMessage='Language'\n                        />\n                    }\n                    describe={localeName}\n                    section={'languages'}\n                    updateSection={this.updateSection}\n                    max={(\n                        <ManageLanguages\n                            user={this.props.user}\n                            locale={userLocale}\n                            updateSection={this.updateSection}\n                            adminMode={this.props.adminMode}\n                        />\n                    )}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n\n        if (Object.keys(this.props.locales).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection && !this.props.adminMode) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let oneClickReactionsOnPostsSection;\n        if (this.props.emojiPickerEnabled) {\n            oneClickReactionsOnPostsSection = this.createSection({\n                section: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n                display: 'oneClickReactionsOnPosts',\n                value: this.state.oneClickReactionsOnPosts,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.oneClickReactionsOnPostsTitle',\n                    defaultMessage: 'Quick reactions on messages',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.sidebar.on',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.sidebar.off',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.oneClickReactionsOnPostsDescription',\n                    defaultMessage: 'When enabled, you can react in one-click with recently used reactions when hovering over a message.',\n                }),\n            });\n        }\n\n        return (\n            <div\n                id='displaySettings'\n                aria-labelledby='displayButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        id='displaySettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.display.title'\n                                defaultMessage='Display Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {collapsedReplyThreads}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {availabilityStatusOnPostsSection}\n                    {lastActiveSection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {clickToReply}\n                    {channelDisplayModeSection}\n                    {oneClickReactionsOnPostsSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\nimport timezones from 'timezones.json';\n\nimport {CollapsedThreads} from '@mattermost/types/config';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    get,\n    isCollapsedThreadsAllowed,\n    getCollapsedThreadsPreference,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    generateCurrentTimezoneLabel,\n    getCurrentTimezoneFull,\n    getCurrentTimezoneLabel,\n    getTimezoneForUserProfile,\n} from 'mattermost-redux/selectors/entities/timezone';\nimport {getCurrentUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getLanguages, isLanguageAvailable} from 'i18n/i18n';\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './user_settings_display';\nimport UserSettingsDisplay from './user_settings_display';\n\nexport function makeMapStateToProps() {\n    return (state: GlobalState, props: OwnProps) => {\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userTimezone = props.adminMode ? getTimezoneForUserProfile(props.user) : getCurrentTimezoneFull(state);\n        const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n        const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n        const timezoneLabel = props.adminMode ? generateCurrentTimezoneLabel(getUserCurrentTimezone(userTimezone)) : getCurrentTimezoneLabel(state);\n        const allowCustomThemes = config.AllowCustomThemes === 'true';\n        const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n        const enableThemeSelection = config.EnableThemeSelection === 'true';\n        const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n        const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n        const emojiPickerEnabled = config.EnableEmojiPicker === 'true';\n        const lastActiveTimeEnabled = config.EnableLastActiveTime === 'true';\n        const userPreference = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n\n        let lastActiveDisplay = true;\n        const user = props.adminMode ? props.user : getUser(state, currentUserId);\n        if (user.props?.show_last_active === 'false') {\n            lastActiveDisplay = false;\n        }\n\n        let userLocale = props.user.locale;\n        if (!isLanguageAvailable(state, userLocale)) {\n            userLocale = config.DefaultClientLocale as string;\n        }\n\n        return {\n            lockTeammateNameDisplay,\n            allowCustomThemes,\n            configTeammateNameDisplay,\n            enableLinkPreviews,\n            locales: getLanguages(state),\n            userLocale,\n            enableThemeSelection,\n            timezones,\n            timezoneLabel,\n            userTimezone,\n            shouldAutoUpdateTimezone,\n            availabilityStatusOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.AVAILABILITY_STATUS_ON_POSTS, Preferences.AVAILABILITY_STATUS_ON_POSTS_DEFAULT, userPreference),\n            militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT, userPreference),\n            teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay, userPreference),\n            channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT, userPreference),\n            messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT, userPreference),\n            colorizeUsernames: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLORIZE_USERNAMES, Preferences.COLORIZE_USERNAMES_DEFAULT, userPreference),\n            collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT, userPreference),\n            collapsedReplyThreadsAllowUserPreference: isCollapsedThreadsAllowed(state) && getConfig(state).CollapsedThreads !== CollapsedThreads.ALWAYS_ON,\n            collapsedReplyThreads: getCollapsedThreadsPreference(state),\n            clickToReply: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CLICK_TO_REPLY, Preferences.CLICK_TO_REPLY_DEFAULT, userPreference),\n            linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT, userPreference),\n            oneClickReactionsOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.ONE_CLICK_REACTIONS_ENABLED, Preferences.ONE_CLICK_REACTIONS_ENABLED_DEFAULT, userPreference),\n            emojiPickerEnabled,\n            lastActiveDisplay,\n            lastActiveTimeEnabled,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            savePreferences,\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Component, createRef} from 'react';\nimport type {ChangeEvent, CSSProperties, MouseEvent, ReactNode, RefObject} from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\n\nimport FormError from 'components/form_error';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {Constants} from 'utils/constants';\nimport * as FileUtils from 'utils/file_utils';\nimport {localizeMessage} from 'utils/utils';\n\nimport WithTooltip from './with_tooltip';\n\ntype Props = {\n    clientError?: ReactNode;\n    serverError?: ReactNode;\n    src?: string | null;\n    defaultImageSrc?: string;\n    file?: File | null;\n    loadingPicture?: boolean;\n    submitActive?: boolean;\n    onRemove?: () => void;\n    onSetDefault?: (() => Promise<void>) | null;\n    onSubmit?: (() => void) | null;\n    title?: string;\n    onFileChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    updateSection?: (e: MouseEvent<HTMLButtonElement>) => void;\n    imageContext?: string;\n    maxFileSize?: number;\n    helpText?: ReactNode;\n}\n\ntype State = {\n    image: string | null;\n    removeSrc: boolean;\n    setDefaultSrc: boolean;\n    orientationStyles?: CSSProperties;\n}\n\nexport default class SettingPicture extends Component<Props, State> {\n    static defaultProps = {\n        imageContext: 'profile',\n    };\n    private readonly settingList: RefObject<HTMLDivElement>;\n    private readonly selectInput: RefObject<HTMLInputElement>;\n    private readonly confirmButton: RefObject<HTMLButtonElement>;\n    private previewBlob: string | null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.settingList = createRef();\n        this.selectInput = createRef();\n        this.confirmButton = createRef();\n        this.previewBlob = null;\n\n        this.state = {\n            image: null,\n            removeSrc: false,\n            setDefaultSrc: false,\n        };\n    }\n\n    focusFirstElement() {\n        this.settingList.current?.focus();\n    }\n\n    componentDidMount() {\n        this.focusFirstElement();\n\n        if (this.selectInput.current) {\n            this.selectInput.current.addEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.file && prevProps.file !== this.props.file) {\n            this.setPicture(this.props.file);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.previewBlob) {\n            URL.revokeObjectURL(this.previewBlob);\n        }\n\n        if (this.selectInput.current) {\n            this.selectInput.current.removeEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    handleCancel = (e: MouseEvent<HTMLButtonElement>) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.updateSection?.(e);\n    };\n\n    handleFileSelected = () => {\n        if (this.confirmButton.current) {\n            this.confirmButton.current.focus();\n        }\n    };\n\n    handleSave = (e: MouseEvent) => {\n        e.preventDefault();\n        if (this.props.loadingPicture) {\n            return;\n        }\n        if (this.state.removeSrc) {\n            this.props.onRemove?.();\n        } else if (this.state.setDefaultSrc) {\n            this.props.onSetDefault?.();\n        } else {\n            this.props.onSubmit?.();\n        }\n    };\n\n    handleRemoveSrc = (e: MouseEvent) => {\n        e.preventDefault();\n        this.setState({removeSrc: true});\n        this.focusFirstElement();\n    };\n\n    handleSetDefaultSrc = (e: MouseEvent) => {\n        e.preventDefault();\n        this.setState({setDefaultSrc: true});\n        this.focusFirstElement();\n    };\n\n    handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.onFileChange?.(e);\n    };\n\n    handleInputFile = () => {\n        if (this.selectInput.current) {\n            this.selectInput.current.value = '';\n            this.selectInput.current.click();\n        }\n    };\n\n    setPicture = (file: File) => {\n        if (file) {\n            this.previewBlob = URL.createObjectURL(file);\n\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target!.result! as ArrayBuffer);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    };\n\n    renderImg = () => {\n        const imageContext = this.props.imageContext;\n\n        if (this.props.file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + this.state.image + ')',\n                ...this.state.orientationStyles,\n            };\n\n            return (\n                <div className={`${imageContext}-img-preview`}>\n                    <div className='img-preview__image'>\n                        <div\n                            style={imageStyles}\n                            className={`${imageContext}-img-preview`}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.setDefaultSrc) {\n            return (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.defaultImageSrc}\n                />\n            );\n        }\n\n        if (this.props.src && !this.state.removeSrc) {\n            const imageElement = (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.src}\n                />\n            );\n            if (!this.props.onRemove && !this.props.onSetDefault) {\n                return imageElement;\n            }\n\n            let title;\n            let handler;\n            if (this.props.onRemove) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove'\n                        defaultMessage='Remove This Icon'\n                    />\n                );\n                handler = this.handleRemoveSrc;\n            } else if (this.props.onSetDefault) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove_profile_picture'\n                        defaultMessage='Remove Profile Picture'\n                    />\n                );\n                handler = this.handleSetDefaultSrc;\n            }\n\n            return (\n                <div className={`${imageContext}-img__container`}>\n                    <div\n                        className='img-preview__image'\n                        aria-hidden={true}\n                    >\n                        {imageElement}\n                    </div>\n                    <WithTooltip\n                        title={title ?? ''}\n                        disabled={!title}\n                    >\n                        <button\n                            data-testid='removeSettingPicture'\n                            className={`${imageContext}-img__remove`}\n                            onClick={handler}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                            <span className='sr-only'>{title}</span>\n                        </button>\n                    </WithTooltip>\n                </div>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const img = this.renderImg();\n\n        let confirmButtonClass = 'btn';\n        let disableSaveButtonFocus = false;\n        if (this.props.submitActive || this.state.removeSrc || this.state.setDefaultSrc) {\n            confirmButtonClass += ' btn-primary';\n        } else {\n            confirmButtonClass += ' btn-inactive disabled';\n            disableSaveButtonFocus = true;\n        }\n\n        let imgRender;\n        if (img) {\n            imgRender = (\n                <li\n                    className='setting-list-item'\n                    role='presentation'\n                >\n                    {img}\n                </li>\n            );\n        }\n\n        let buttonRender;\n        if (this.props.onSubmit) {\n            buttonRender = (\n                <span>\n                    <input\n                        data-testid='uploadPicture'\n                        ref={this.selectInput}\n                        className='hidden'\n                        accept={Constants.ACCEPT_STATIC_IMAGE}\n                        type='file'\n                        onChange={this.handleFileChange}\n                        disabled={this.props.loadingPicture}\n                        aria-hidden={true}\n                        tabIndex={-1}\n                    />\n                    <button\n                        data-testid='inputSettingPictureButton'\n                        className='btn btn-primary btn-file'\n                        disabled={this.props.loadingPicture}\n                        onClick={this.handleInputFile}\n                        aria-label={localizeMessage({id: 'setting_picture.select', defaultMessage: 'Select'})}\n                    >\n                        <FormattedMessage\n                            id='setting_picture.select'\n                            defaultMessage='Select'\n                        />\n                    </button>\n                    <button\n                        tabIndex={disableSaveButtonFocus ? -1 : 0}\n                        data-testid='saveSettingPicture'\n                        disabled={disableSaveButtonFocus}\n                        ref={this.confirmButton}\n                        className={confirmButtonClass}\n                        onClick={this.handleSave}\n                        aria-label={this.props.loadingPicture ? localizeMessage({id: 'setting_picture.uploading', defaultMessage: 'Uploading...'}) : localizeMessage({id: 'setting_picture.save', defaultMessage: 'Save'})}\n                    >\n                        <LoadingWrapper\n                            loading={this.props.loadingPicture}\n                            text={defineMessage({id: 'setting_picture.uploading', defaultMessage: 'Uploading...'})}\n                        >\n                            <FormattedMessage\n                                id='setting_picture.save'\n                                defaultMessage='Save'\n                            />\n                        </LoadingWrapper>\n                    </button>\n                </span>\n            );\n        }\n        return (\n            <section className='section-max form-horizontal'>\n                <h4 className='col-xs-12 section-title'>\n                    {this.props.title}\n                </h4>\n                <div className='col-sm-10 col-sm-offset-2'>\n                    <div\n                        className='setting-list'\n                        ref={this.settingList}\n                        tabIndex={-1}\n                        aria-label={this.props.title}\n                        aria-describedby='setting-picture__helptext'\n                    >\n                        {imgRender}\n                        <div\n                            id='setting-picture__helptext'\n                            className='setting-list-item pt-3'\n                        >\n                            {this.props.helpText}\n                        </div>\n                        <div\n                            className='setting-list-item'\n                        >\n                            <hr/>\n                            <FormError\n                                errors={[this.props.clientError, this.props.serverError]}\n                                type={'modal'}\n                            />\n                            {buttonRender}\n                            <button\n                                data-testid='cancelSettingPicture'\n                                className='btn btn-tertiary theme ml-2'\n                                onClick={this.handleCancel}\n                                aria-label={localizeMessage({id: 'setting_picture.cancel', defaultMessage: 'Cancel'})}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React, {PureComponent} from 'react';\nimport {defineMessage, defineMessages, FormattedDate, FormattedMessage, FormattedList, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, ActionMeta, StylesConfig} from 'react-select';\n\nimport type {UserPropertyField, PropertyFieldOption} from '@mattermost/types/properties';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {LogErrorOptions} from 'mattermost-redux/actions/errors';\nimport {LogErrorBarMode} from 'mattermost-redux/actions/errors';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingPicture from 'components/setting_picture';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\nimport {validHttpUrl} from 'utils/url';\nimport * as Utils from 'utils/utils';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: 'user.settings.general.usernameReserved',\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameGroupNameUniqueness: {\n        id: 'user.settings.general.usernameGroupNameUniqueness',\n        defaultMessage: 'This username conflicts with an existing group name.',\n    },\n    usernameRestrictions: {\n        id: 'user.settings.general.usernameRestrictions',\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: 'user.settings.general.validEmail',\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    validUrl: {\n        id: 'user.settings.general.validUrl',\n        defaultMessage: 'Please enter a valid url.',\n    },\n    emailMatch: {\n        id: 'user.settings.general.emailMatch',\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: 'user.settings.general.incorrectPassword',\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: 'user.settings.general.emptyPassword',\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: 'user.settings.general.validImage',\n        defaultMessage: 'Only BMP, JPG, JPEG, or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: 'user.settings.general.imageTooLarge',\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: 'user.settings.general.uploadImage',\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: 'user.settings.general.mobile.uploadImage',\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: 'user.settings.general.fullName',\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: 'user.settings.general.nickname',\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: 'user.settings.general.username',\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: 'user.settings.general.profilePicture',\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: 'user.settings.general.close',\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: 'user.settings.general.position',\n        defaultMessage: 'Position',\n    },\n});\n\nexport type SelectOption = {\n    value: string;\n    label: string;\n};\n\nconst selectStyles: StylesConfig<SelectOption, true> = {\n    valueContainer: (baseStyles) => ({\n        ...baseStyles,\n        height: 'auto',\n        minHeight: '38px',\n        flexWrap: 'wrap',\n        whiteSpace: 'normal',\n    }),\n    multiValue: (baseStyles) => ({\n        ...baseStyles,\n        margin: '2px',\n    }),\n    control: (baseStyles) => ({\n        ...baseStyles,\n        height: 'auto',\n        minHeight: '38px',\n    }),\n    multiValueLabel: (baseStyles) => ({\n        ...baseStyles,\n        padding: '2px 6px',\n    }),\n};\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    isMobileView: boolean;\n    maxFileSize: number;\n    customProfileAttributeFields: UserPropertyField[];\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, options?: LogErrorOptions) => void;\n        clearErrors: () => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n        sendVerificationEmail: (email: string) => Promise<ActionResult>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<ActionResult>;\n        getCustomProfileAttributeValues: (userID: string) => Promise<ActionResult<Record<string, string | string[]>>>;\n        saveCustomProfileAttribute: (userID: string, attributeID: string, attributeValue: string | string[]) => Promise<ActionResult<Record<string, string | string[]>>>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n    enableCustomProfileAttributes: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n    customAttributeValues: Record<string, string | string[]>;\n}\n\nexport class UserSettingsGeneralTab extends PureComponent<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.setupInitialState(props);\n    }\n\n    componentDidMount() {\n        if (this.props.enableCustomProfileAttributes && !this.props.user.custom_profile_attributes) {\n            this.props.actions.getCustomProfileAttributeValues(this.props.user.id);\n        }\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    };\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={defineMessage({id: 'user.settings.general.sending', defaultMessage: 'Sending'})}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    };\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    };\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    };\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    };\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    };\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, {errorBarMode: LogErrorBarMode.Always});\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.server_error_id === 'app.user.group_name_conflict') {\n                        serverError = formatMessage(holders.usernameGroupNameUniqueness);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    };\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    };\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    };\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    };\n\n    submitAttribute = async (settings: string[]) => {\n        const {formatMessage} = this.props.intl;\n\n        const attributeID = settings[0];\n        const attributeField = this.props.customProfileAttributeFields.find((field) => field.id === attributeID);\n        if (attributeField === undefined) {\n            return;\n        }\n        let attributeValue: string | string[] = this.state.customAttributeValues?.[attributeID];\n\n        if (typeof attributeValue === 'string' && attributeField.attrs && attributeField.attrs.value_type) {\n            if (attributeField.attrs.value_type === 'email') {\n                if (attributeValue !== '' && !isEmail(attributeValue)) {\n                    this.setState({clientError: formatMessage(holders.validEmail), emailError: '', serverError: ''});\n                    return;\n                }\n            }\n            if (attributeField.attrs.value_type === 'url') {\n                if (attributeValue !== '') {\n                    const validURL = validHttpUrl(attributeValue);\n                    if (!validURL) {\n                        this.setState({clientError: formatMessage(holders.validUrl), emailError: '', serverError: ''});\n                        return;\n                    }\n                    let validLink = validURL.toString();\n                    if (validLink.endsWith('/')) {\n                        validLink = validLink.slice(0, -1);\n                    }\n                    attributeValue = validLink;\n                }\n            }\n        }\n        if (attributeField.type === 'multiselect' && !attributeValue) {\n            attributeValue = [];\n        }\n        trackEvent('settings', 'user_settings_update', {field: 'customAttributeValues-' + attributeID});\n\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.saveCustomProfileAttribute(this.props.user.id, attributeID, attributeValue as string).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.setState({customAttributeValues: {...this.state.customAttributeValues, ...data}});\n                } else if (err) {\n                    const serverError = err.message;\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    };\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    };\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    };\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    };\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    };\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    };\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    };\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    };\n\n    updateSelectAttribute = (selectedOption: OnChangeValue<SelectOption, boolean>, action: ActionMeta<SelectOption>, fieldID: string) => {\n        const attributeValues = {...this.state.customAttributeValues};\n\n        if (!selectedOption) {\n            attributeValues[fieldID] = '';\n        } else if (Array.isArray(selectedOption)) {\n            // Handle multi-select\n            attributeValues[fieldID] = selectedOption.\n                filter((option): option is SelectOption =>\n                    Boolean(option && Object.hasOwn(option, 'value'))).\n                map((option) => option.value);\n        } else if ('value' in selectedOption) {\n            // Handle single select\n            attributeValues[fieldID] = selectedOption.value || '';\n        } else {\n            attributeValues[fieldID] = '';\n        }\n\n        this.setState({customAttributeValues: attributeValues});\n    };\n\n    updateAttribute = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const attributeValues = Object.assign({}, this.state.customAttributeValues);\n        const id = e.target.id.substring(e.target.id.indexOf('_') + 1);\n        attributeValues[id] = e.target.value;\n        this.setState({customAttributeValues: attributeValues});\n    };\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    };\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n            customAttributeValues: user.custom_profile_attributes || {},\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'email';\n        let max = null;\n        if (active) {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <span className='as-bs-label col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </span>\n                            <div className='col-sm-7'>\n                                <span className='as-bs-label control-label word-break--all text-left'>{this.state.originalEmail}</span>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label\n                                className='col-sm-5 control-label'\n                                htmlFor='primaryEmail'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label\n                                className='col-sm-5 control-label'\n                                htmlFor='confirmEmail'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label\n                                className='col-sm-5 control-label'\n                                htmlFor='currentPassword'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Entra ID. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (this.props.user.auth_service === '') {\n            describe = this.props.user.email;\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGitlab'\n                    defaultMessage='Login done through GitLab ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGoogle'\n                    defaultMessage='Login done through Google Apps ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginOffice365'\n                    defaultMessage='Login done through Entra ID ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginLdap'\n                    defaultMessage='Login done through AD/LDAP ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginSaml'\n                    defaultMessage='Login done through SAML ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.general.email'\n                        defaultMessage='Email'\n                    />\n                }\n                describe={describe}\n                section={'email'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createNameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'name';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='firstName'\n                        >\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='lastName'\n                        >\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n\n        if (user.first_name && user.last_name) {\n            describe = user.first_name + ' ' + user.last_name;\n        } else if (user.first_name) {\n            describe = user.first_name;\n        } else if (user.last_name) {\n            describe = user.last_name;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyName'\n                    defaultMessage=\"Click 'Edit' to add your full name\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyName'\n                        defaultMessage='Click to add your full name'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.fullName)}\n                describe={describe}\n                section={'name'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createNicknameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'nickname';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.nickname) {\n            describe = user.nickname;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyNickname'\n                    defaultMessage=\"Click 'Edit' to add a nickname\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyNickname'\n                        defaultMessage='Click to add a nickname'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.nickname)}\n                describe={describe}\n                section={'nickname'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createUsernameSection = () => {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'username';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.username)}\n                describe={this.props.user.username}\n                section={'username'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createPositionSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'position';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.position) {\n            describe = user.position;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyPosition'\n                    defaultMessage=\"Click 'Edit' to add your job title / position\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyPosition'\n                        defaultMessage='Click to add your job title / position'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.position)}\n                describe={describe}\n                section={'position'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createCustomAttributeSection = () => {\n        const {formatMessage} = this.props.intl;\n        if (this.props.customProfileAttributeFields == null) {\n            return <></>;\n        }\n\n        const attributeSections = this.props.customProfileAttributeFields.map((attribute) => {\n            const sectionName = 'customAttribute_' + attribute.id;\n            const active = this.props.activeSection === sectionName;\n            let max = null;\n\n            const getDisplayValue = (attributeValue: string | string[]) => {\n                if (!attributeValue || (!Array.isArray(attributeValue) && !attributeValue.length)) {\n                    return '';\n                }\n\n                if (attribute.type === 'select' || attribute.type === 'multiselect') {\n                    const attribOptions = attribute.attrs.options;\n                    if (!attribOptions) {\n                        return '';\n                    }\n                    if (Array.isArray(attributeValue)) {\n                        return attributeValue.map((value) => {\n                            const option = attribOptions.find((o) => o.id === value);\n                            if (option) {\n                                return {label: option?.name, value: option?.id};\n                            }\n                            return null;\n                        }).filter((value) => value != null);\n                    }\n\n                    // Handle single select\n                    const option = attribOptions.find((o) => o.id === attributeValue);\n                    if (option) {\n                        return {label: option?.name, value: option?.id};\n                    }\n                    return '';\n                }\n\n                return attributeValue as string;\n            };\n\n            if (active) {\n                const inputs = [];\n                let extraInfo: JSX.Element|string;\n                let submit = null;\n\n                if ((this.props.user.auth_service === Constants.LDAP_SERVICE && attribute.attrs?.ldap) ||\n                    (this.props.user.auth_service === Constants.SAML_SERVICE && attribute.attrs?.saml)) {\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.general.field_handled_externally'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </span>\n                    );\n                } else {\n                    let attributeLabel: JSX.Element | string = (\n                        attribute.name\n                    );\n                    if (this.props.isMobileView) {\n                        attributeLabel = '';\n                    }\n\n                    if (attribute.type === 'select' || attribute.type === 'multiselect') {\n                        const attribOptions: PropertyFieldOption[] = attribute.attrs!.options as PropertyFieldOption[];\n                        const opts = attribOptions.map((o) => {\n                            return {label: o.name, value: o.id} as SelectOption;\n                        });\n                        inputs.push(\n                            <ReactSelect\n                                isMulti={attribute.type === 'multiselect' ? true : undefined}\n                                key={sectionName}\n                                id={'customProfileAttribute_' + attribute.id}\n                                inputId={'customProfileAttribute_' + attribute.id + '_input'}\n                                className='react-select inlineSelect'\n                                classNamePrefix='react-select'\n                                options={opts}\n                                isClearable={true}\n                                isSearchable={false}\n                                isDisabled={false}\n                                placeholder={formatMessage({\n                                    id: 'user.settings.general.select',\n                                    defaultMessage: 'Select',\n                                })}\n                                components={{IndicatorSeparator: null}}\n                                styles={selectStyles}\n                                value={getDisplayValue(this.state.customAttributeValues[attribute.id]) as SelectOption}\n                                onChange={(v, a) => this.updateSelectAttribute(v, a, attribute.id)}\n                            />,\n                        );\n                    } else {\n                        const inputType = attribute.type as string;\n                        inputs.push(\n                            <div\n                                key={sectionName}\n                                className='form-group'\n                            >\n                                <label className='col-sm-5 control-label'>{attributeLabel}</label>\n                                <div className='col-sm-7'>\n                                    <input\n                                        id={sectionName}\n                                        autoFocus={true}\n                                        className='form-control'\n                                        type={inputType}\n                                        onChange={this.updateAttribute}\n                                        value={getDisplayValue(this.state.customAttributeValues[attribute.id]) as string}\n                                        maxLength={Constants.MAX_CUSTOM_ATTRIBUTE_LENGTH}\n                                        autoCapitalize='off'\n                                        onFocus={Utils.moveCursorToEnd}\n                                        aria-label={attribute.name}\n                                    />\n                                </div>\n                            </div>,\n                        );\n                    }\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.general.attributeExtra'\n                                defaultMessage='This will be shown in your profile popover.'\n                            />\n                        </span>\n                    );\n\n                    submit = this.submitAttribute.bind(this, [attribute.id]);\n                }\n\n                max = (\n                    <SettingItemMax\n                        key={'settingItemMax_' + attribute.id}\n                        title={attribute.name}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.sectionIsSaving}\n                        serverError={this.state.serverError}\n                        clientError={this.state.clientError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                );\n            }\n            let describe: JSX.Element|string = '';\n            if (this.props.user.custom_profile_attributes?.[attribute.id]) {\n                const attributeValue = getDisplayValue(this.props.user.custom_profile_attributes?.[attribute.id]);\n                if (attributeValue) {\n                    if (typeof attributeValue === 'string') {\n                        describe = attributeValue;\n                    } else if (Array.isArray(attributeValue) && attributeValue.length > 0) {\n                        describe = <FormattedList value={attributeValue.map((attrib) => attrib?.label || null)}/>;\n                    } else if (!Array.isArray(attributeValue) && Object.hasOwn(attributeValue, 'label')) {\n                        describe = attributeValue.label || '';\n                    }\n                }\n            }\n            if (!describe) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyAttribute'\n                        defaultMessage=\"Click 'Edit' to add your custom attribute\"\n                    />\n                );\n                if (this.props.isMobileView) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyAttribute'\n                            defaultMessage='Click to add your custom attribute'\n                        />\n                    );\n                }\n            }\n\n            return (\n                <div key={sectionName}>\n                    <SettingItem\n                        key={'settingItem_' + attribute.id}\n                        active={active}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        title={attribute.name}\n                        describe={describe}\n                        section={sectionName}\n                        updateSection={this.updateSection}\n                        max={max}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        });\n        return <>{attributeSections}</>;\n    };\n\n    createPictureSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'picture';\n        let max = null;\n\n        if (active) {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id='setting_picture.help.profile'\n                        defaultMessage='Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            max = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={(e: React.MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        }\n\n        let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n        if (this.props.isMobileView) {\n            minMessage = formatMessage(holders.uploadImageMobile);\n        }\n        if (user.last_picture_update > 0) {\n            minMessage = (\n                <FormattedMessage\n                    id='user.settings.general.imageUpdated'\n                    defaultMessage='Image last updated {date}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={new Date(user.last_picture_update)}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                    }}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.profilePicture)}\n                describe={minMessage}\n                section={'picture'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const nameSection = this.createNameSection();\n        const nicknameSection = this.createNicknameSection();\n        const usernameSection = this.createUsernameSection();\n        const positionSection = this.createPositionSection();\n        const emailSection = this.createEmailSection();\n        const customAttributeSection = this.createCustomAttributeSection();\n        const pictureSection = this.createPictureSection();\n\n        return (\n            <div\n                id='profileSettings'\n                aria-labelledby='profileButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        id='generalSettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.modal.profile'\n                                defaultMessage='Profile'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {customAttributeSection}\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n    saveCustomProfileAttribute,\n    getCustomProfileAttributeValues,\n} from 'mattermost-redux/actions/users';\nimport {getConfig, getCustomProfileAttributes, getFeatureFlagValue} from 'mattermost-redux/selectors/entities/general';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserSettingsGeneralTab from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const customProfileAttributeFields = getCustomProfileAttributes(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n    const enableCustomProfileAttributes = getFeatureFlagValue(state, 'CustomProfileAttributes') === 'true';\n\n    return {\n        isMobileView: getIsMobileView(state),\n        requireEmailVerification,\n        maxFileSize,\n        customProfileAttributeFields,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n        enableCustomProfileAttributes,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n            saveCustomProfileAttribute,\n            getCustomProfileAttributeValues,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nexport default function NotificationPermissionDeniedSectionNotice() {\n    const intl = useIntl();\n\n    const handleClick = useCallback(() => {\n        window.open('https://mattermost.com/pl/manage-notifications', '_blank', 'noopener,noreferrer');\n    }, []);\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.title',\n                    defaultMessage: 'Browser notification permission was denied',\n                })}\n                text={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.message',\n                    defaultMessage: 'You\\'re missing important message and call notifications from Mattermost. To start receiving notifications, please enable notifications for Mattermost in your browser settings.',\n                })}\n                tertiaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.button',\n                        defaultMessage: 'How to enable notifications',\n                    }),\n                    onClick: handleClick,\n                }}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nimport {requestNotificationPermission} from 'utils/notifications';\n\ntype Props = {\n    onCtaButtonClick: (permission: NotificationPermission) => void;\n}\n\nexport default function NotificationPermissionNeverGrantedSectionNotice(props: Props) {\n    const intl = useIntl();\n\n    const handleClick = useCallback(async () => {\n        const permission = await requestNotificationPermission();\n        if (permission) {\n            props.onCtaButtonClick(permission);\n        }\n    }, [props.onCtaButtonClick]);\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionNeverGranted.title',\n                    defaultMessage: 'Browser notifications are disabled',\n                })}\n                text={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionNeverGranted.message',\n                    defaultMessage: 'You\\'re missing important message and call notifications from Mattermost. Mattermost notifications are disabled by this browser.',\n                })}\n                primaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionNeverGranted.button',\n                        defaultMessage: 'Enable notifications',\n                    }),\n                    onClick: handleClick,\n                }}\n            />\n        </div>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nexport default function NotificationPermissionUnsupportedSectionNotice() {\n    const intl = useIntl();\n\n    const handleClick = useCallback(async () => {\n        window.open('https://mattermost.com/pl/pc-web-requirements', '_blank', 'noopener,noreferrer');\n    }, []);\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionUnsupported.title',\n                    defaultMessage: 'Browser notifications unsupported',\n                })}\n                text={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionUnsupported.message',\n                    defaultMessage: 'You\\'re missing important message and call notifications from Mattermost. To start receiving notifications, please update to a supported browser.',\n                })}\n                tertiaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionUnsupported.button',\n                        defaultMessage: 'Update your browser',\n                    }),\n                    onClick: handleClick,\n                }}\n            />\n        </div>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nimport {NotificationPermissionDenied} from 'utils/notifications';\n\ninterface Props {\n    requestDesktopNotificationPermission: () => Promise<NotificationPermission>;\n}\n\nexport default function NotificationPermissionDesktopDeniedSectionNotice(props: Props) {\n    const intl = useIntl();\n\n    const [checkedPermissionDenied, setCheckedPermissionDenied] = useState(false);\n\n    async function handleCheckPermissionButtonClick() {\n        const permission = await props.requestDesktopNotificationPermission();\n        if (permission === NotificationPermissionDenied) {\n            setCheckedPermissionDenied(true);\n        }\n    }\n\n    const handleInstructionButtonClick = useCallback(() => {\n        window.open('https://mattermost.com/pl/manage-notifications', '_blank', 'noopener,noreferrer');\n    }, []);\n\n    const title = checkedPermissionDenied ? intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.titleDenied',\n        defaultMessage: 'Desktop notifications permission was denied',\n    }) : intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.title',\n        defaultMessage: 'Desktop notifications permission required',\n    });\n\n    const text = checkedPermissionDenied ? intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.messageDenied',\n        defaultMessage: 'Notifications for this Mattermost server are blocked. To receive notifications, please enable them manually.',\n    }) : intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.message',\n        defaultMessage: \"You're missing important message and call notifications from Mattermost. To start receiving them, please enable them manually.\",\n    });\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={title}\n                text={text}\n                primaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.checkPermissionButton',\n                        defaultMessage: 'Check permission',\n                    }),\n                    onClick: handleCheckPermissionButtonClick,\n                    disabled: checkedPermissionDenied,\n                }}\n                tertiaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.instructionButton',\n                        defaultMessage: 'How to enable notifications',\n                    }),\n                    onClick: handleInstructionButtonClick,\n                }}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\n\nimport {useDesktopAppNotificationPermission} from 'components/common/hooks/use_desktop_notification_permission';\nimport NotificationPermissionDeniedNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_denied_section_notice';\nimport NotificationPermissionNeverGrantedNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_never_granted_section_notice';\nimport NotificationPermissionUnsupportedSectionNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_unsupported_section_notice';\n\nimport {getNotificationPermission, isNotificationAPISupported, NotificationPermissionDenied, NotificationPermissionNeverGranted} from 'utils/notifications';\n\nimport NotificationPermissionDesktopDeniedSectionNotice from './notification_permission_desktop_denied_section_notice';\n\nexport default function NotificationPermissionSectionNotice() {\n    const isNotificationSupported = isNotificationAPISupported();\n\n    const [notificationPermission, setNotificationPermission] = useState(getNotificationPermission());\n\n    const [desktopNotificationPermission, requestDesktopNotificationPermission] = useDesktopAppNotificationPermission();\n\n    function handleRequestNotificationClicked(permission: NotificationPermission) {\n        setNotificationPermission(permission);\n    }\n\n    if (!isNotificationSupported) {\n        return <NotificationPermissionUnsupportedSectionNotice/>;\n    }\n\n    if (desktopNotificationPermission === NotificationPermissionDenied) {\n        return <NotificationPermissionDesktopDeniedSectionNotice requestDesktopNotificationPermission={requestDesktopNotificationPermission}/>;\n    }\n\n    if (isNotificationSupported && notificationPermission === NotificationPermissionNeverGranted) {\n        return <NotificationPermissionNeverGrantedNotice onCtaButtonClick={handleRequestNotificationClicked}/>;\n    }\n\n    if (isNotificationSupported && notificationPermission === NotificationPermissionDenied) {\n        return <NotificationPermissionDeniedNotice/>;\n    }\n\n    return null;\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {useDesktopAppNotificationPermission} from 'components/common/hooks/use_desktop_notification_permission';\nimport Tag from 'components/widgets/tag/tag';\n\nimport {\n    getNotificationPermission,\n    isNotificationAPISupported,\n    NotificationPermissionDenied,\n    NotificationPermissionNeverGranted,\n} from 'utils/notifications';\n\nexport default function NotificationPermissionTitleTag() {\n    const {formatMessage} = useIntl();\n\n    const [desktopNotificationPermission] = useDesktopAppNotificationPermission();\n\n    if (!isNotificationAPISupported()) {\n        return (\n            <Tag\n                size='sm'\n                variant='danger'\n                icon='alert-outline'\n                text={formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.noPermissionIssueTag',\n                    defaultMessage: 'Not supported',\n                })}\n            />\n        );\n    }\n\n    if (\n        getNotificationPermission() === NotificationPermissionNeverGranted ||\n        getNotificationPermission() === NotificationPermissionDenied ||\n        desktopNotificationPermission === NotificationPermissionDenied\n    ) {\n        return (\n            <Tag\n                size='sm'\n                variant='dangerDim'\n                icon='alert-outline'\n                text={formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionIssueTag',\n                    defaultMessage: 'Permission required',\n                })}\n            />\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Fragment, useCallback, useEffect, useMemo, useRef, memo} from 'react';\nimport type {ChangeEvent, ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, Options} from 'react-select';\n\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport NotificationPermissionSectionNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice';\nimport NotificationPermissionTitleTag from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_title_tag';\n\nimport Constants, {NotificationLevels, UserSettingsNotificationSections} from 'utils/constants';\n\nimport type {Props as UserSettingsNotificationsProps} from '../user_settings_notifications';\n\nexport type SelectOption = {\n    label: ReactNode;\n    value: string;\n};\n\nexport type Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving: boolean;\n    error: string;\n    setParentState: (key: string, value: string | boolean) => void;\n    areAllSectionsInactive: boolean;\n    isCollapsedThreadsEnabled: boolean;\n    desktopActivity: UserNotifyProps['desktop'];\n    sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    desktopAndMobileSettingsDifferent: boolean;\n};\n\nfunction DesktopAndMobileNotificationSettings({\n    active,\n    updateSection,\n    onSubmit,\n    onCancel,\n    saving,\n    error,\n    setParentState,\n    areAllSectionsInactive,\n    isCollapsedThreadsEnabled,\n    desktopActivity,\n    sendPushNotifications,\n    pushActivity,\n    pushStatus,\n    desktopThreads,\n    pushThreads,\n    desktopAndMobileSettingsDifferent,\n}: Props) {\n    const editButtonRef = useRef<SettingItemMinComponent>(null);\n    const previousActiveRef = useRef(active);\n\n    // Focus back on the edit button, after this section was closed after it was opened\n    useEffect(() => {\n        if (previousActiveRef.current && !active && areAllSectionsInactive) {\n            editButtonRef.current?.focus();\n        }\n\n        previousActiveRef.current = active;\n    }, [active, areAllSectionsInactive]);\n\n    const handleChangeForSendDesktopNotificationsRadio = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        setParentState('desktopActivity', value);\n    }, [setParentState]);\n\n    const handleChangeForDesktopThreadsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        setParentState('desktopThreads', value);\n    }, [setParentState]);\n\n    const handleChangeForDifferentMobileNotificationsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked;\n        setParentState('desktopAndMobileSettingsDifferent', value);\n    }, [setParentState]);\n\n    const handleChangeForSendMobileNotificationsSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('pushActivity', selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const handleChangeForMobileThreadsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        setParentState('pushThreads', value);\n    }, [setParentState]);\n\n    const handleChangeForTriggerMobileNotificationsSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('pushStatus', selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const maximizedSettingsInputs = useMemo(() => {\n        const maximizedSettingInputs = [];\n\n        const sendDesktopNotificationsSection = (\n            <fieldset\n                id='sendDesktopNotificationsSection'\n                key='sendDesktopNotificationsSection'\n            >\n                <legend className='form-legend'>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.sendDesktopNotificationFor'\n                        defaultMessage='Send notifications for:'\n                    />\n                </legend>\n                {optionsOfSendNotifications.map((optionOfSendNotifications) => (\n                    <div\n                        key={optionOfSendNotifications.value}\n                        className='radio'\n                    >\n                        <label>\n                            <input\n                                type='radio'\n                                checked={desktopActivity === optionOfSendNotifications.value}\n                                value={optionOfSendNotifications.value}\n                                onChange={handleChangeForSendDesktopNotificationsRadio}\n                            />\n                            {optionOfSendNotifications.label}\n                        </label>\n                    </div>\n                ))}\n            </fieldset>\n        );\n        maximizedSettingInputs.push(sendDesktopNotificationsSection);\n\n        if (shouldShowDesktopThreadsSection(isCollapsedThreadsEnabled, desktopActivity)) {\n            const desktopThreadNotificationSection = (\n                <Fragment key='desktopThreadNotificationSection'>\n                    <br/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={desktopThreads === NotificationLevels.ALL}\n                                onChange={handleChangeForDesktopThreadsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.notifyForDesktopthreads'\n                                defaultMessage={'Notify me about replies to threads I\\'m following'}\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(desktopThreadNotificationSection);\n        }\n\n        if (sendPushNotifications) {\n            const differentMobileNotificationsSection = (\n                <Fragment key='differentMobileNotificationsSection'>\n                    <hr/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={desktopAndMobileSettingsDifferent}\n                                onChange={handleChangeForDifferentMobileNotificationsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.differentMobileNotificationsTitle'\n                                defaultMessage='Use different settings for my mobile devices'\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(differentMobileNotificationsSection);\n        }\n\n        if (shouldShowSendMobileNotificationsSection(sendPushNotifications, desktopAndMobileSettingsDifferent)) {\n            const sendMobileNotificationsSection = (\n                <React.Fragment key='sendMobileNotificationsSection'>\n                    <br/>\n                    <label\n                        id='sendMobileNotificationsLabel'\n                        htmlFor='sendMobileNotificationsSelectInput'\n                        className='singleSelectLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopAndMobile.sendMobileNotificationsFor'\n                            defaultMessage='Send mobile notifications for:'\n                        />\n                    </label>\n                    <ReactSelect\n                        inputId='sendMobileNotificationsSelectInput'\n                        aria-labelledby='sendMobileNotificationsLabel'\n                        className='react-select singleSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfSendNotifications}\n                        isClearable={false}\n                        isSearchable={false}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfSendMobileNotificationForSelect(pushActivity)}\n                        onChange={handleChangeForSendMobileNotificationsSelect}\n                    />\n                </React.Fragment>\n            );\n            maximizedSettingInputs.push(sendMobileNotificationsSection);\n        }\n\n        if (shouldShowMobileThreadsSection(sendPushNotifications, isCollapsedThreadsEnabled, desktopAndMobileSettingsDifferent, pushActivity)) {\n            const threadNotificationSection = (\n                <Fragment key='threadNotificationSection'>\n                    <br/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={pushThreads === NotificationLevels.ALL}\n                                onChange={handleChangeForMobileThreadsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.notifyForMobilethreads'\n                                defaultMessage={'Notify me on mobile about replies to threads I\\'m following'}\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(threadNotificationSection);\n        }\n\n        if (shouldShowTriggerMobileNotificationsSection(sendPushNotifications, desktopActivity, pushActivity, desktopAndMobileSettingsDifferent)) {\n            const triggerMobileNotificationsSection = (\n                <React.Fragment key='triggerMobileNotificationsSection'>\n                    <br/>\n                    <label\n                        id='pushMobileNotificationsLabel'\n                        htmlFor='pushMobileNotificationSelectInput'\n                        className='singleSelectLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopAndMobile.pushNotification'\n                            defaultMessage='Trigger mobile notifications when I am:'\n                        />\n                    </label>\n                    <ReactSelect\n                        inputId='pushMobileNotificationSelectInput'\n                        aria-labelledby='pushMobileNotificationsLabel'\n                        className='react-select singleSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfSendMobileNotificationsWhenSelect}\n                        isClearable={false}\n                        isSearchable={false}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfSendMobileNotificationWhenSelect(pushStatus)}\n                        onChange={handleChangeForTriggerMobileNotificationsSelect}\n                    />\n                </React.Fragment>\n            );\n            maximizedSettingInputs.push(triggerMobileNotificationsSection);\n        }\n\n        if (!sendPushNotifications) {\n            const disabledPushNotificationsSection = (\n                <>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.pushNotificationsDisabled'\n                        defaultMessage={'Mobile push notifications haven\\'t been enabled by your system administrator.'}\n                    />\n                </>\n            );\n            maximizedSettingInputs.push(disabledPushNotificationsSection);\n        }\n\n        return maximizedSettingInputs;\n    },\n    [\n        desktopActivity,\n        handleChangeForSendDesktopNotificationsRadio,\n        isCollapsedThreadsEnabled,\n        desktopThreads,\n        handleChangeForDesktopThreadsCheckbox,\n        sendPushNotifications,\n        desktopAndMobileSettingsDifferent,\n        handleChangeForDifferentMobileNotificationsCheckbox,\n        pushActivity,\n        handleChangeForSendMobileNotificationsSelect,\n        pushThreads,\n        handleChangeForMobileThreadsCheckbox,\n        pushStatus,\n        handleChangeForTriggerMobileNotificationsSelect,\n    ]);\n\n    function handleChangeForMaxSection(section: string) {\n        updateSection(section);\n    }\n\n    function handleChangeForMinSection(section: string) {\n        updateSection(section);\n        onCancel();\n    }\n\n    if (active) {\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id={'user.settings.notifications.desktopAndMobile.title'}\n                        defaultMessage='Desktop and mobile notifications'\n                    />\n                }\n                inputs={maximizedSettingsInputs}\n                submit={onSubmit}\n                saving={saving}\n                serverError={error}\n                updateSection={handleChangeForMaxSection}\n                extraContentBeforeSettingList={<NotificationPermissionSectionNotice/>}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            ref={editButtonRef}\n            title={\n                <>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.title'\n                        defaultMessage='Desktop and mobile notifications'\n                    />\n                    <NotificationPermissionTitleTag/>\n                </>\n            }\n            describe={getCollapsedText(desktopActivity, pushActivity)}\n            section={UserSettingsNotificationSections.DESKTOP_AND_MOBILE}\n            updateSection={handleChangeForMinSection}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nconst optionsOfSendNotifications = [\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.allNewMessages'\n                defaultMessage='All new messages'\n            />\n        ),\n        value: NotificationLevels.ALL,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.onlyMentions'\n                defaultMessage='Mentions, direct messages, and group messages'\n            />\n        ),\n        value: NotificationLevels.MENTION,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.nothing'\n                defaultMessage='Nothing'\n            />\n        ),\n        value: NotificationLevels.NONE,\n    },\n];\n\nexport function shouldShowDesktopThreadsSection(isCollapsedThreadsEnabled: boolean, desktopActivity: UserNotifyProps['desktop']) {\n    if (!isCollapsedThreadsEnabled) {\n        return false;\n    }\n\n    if (desktopActivity === NotificationLevels.ALL || desktopActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function shouldShowMobileThreadsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], isCollapsedThreadsEnabled: boolean, desktopAndMobileSettingsDifferent: boolean, pushActivity: UserNotifyProps['push']) {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (!isCollapsedThreadsEnabled) {\n        return false;\n    }\n\n    if (!desktopAndMobileSettingsDifferent) {\n        return false;\n    }\n\n    if (pushActivity === NotificationLevels.ALL || pushActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction shouldShowSendMobileNotificationsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], desktopAndMobileSettingsDifferent: boolean) {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (desktopAndMobileSettingsDifferent) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getValueOfSendMobileNotificationForSelect(pushActivity: UserNotifyProps['push']): OnChangeValue<SelectOption, boolean> {\n    if (!pushActivity) {\n        return optionsOfSendNotifications[1];\n    }\n\n    const option = optionsOfSendNotifications.find((option) => option.value === pushActivity);\n    if (!option) {\n        return optionsOfSendNotifications[1];\n    }\n\n    return option;\n}\n\nexport function shouldShowTriggerMobileNotificationsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], desktopActivity: UserNotifyProps['desktop'], pushActivity: UserNotifyProps['push'], desktopAndMobileSettingsDifferent: boolean): boolean {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (!desktopActivity || !pushActivity) {\n        return true;\n    }\n\n    if (!desktopAndMobileSettingsDifferent) {\n        if (desktopActivity === NotificationLevels.NONE) {\n            return false;\n        }\n        return true;\n    }\n\n    if (pushActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nconst optionsOfSendMobileNotificationsWhenSelect: Options<SelectOption> = [\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.online'\n                defaultMessage='Online, away, or offline'\n            />\n        ),\n        value: Constants.UserStatuses.ONLINE,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.away'\n                defaultMessage='Away or offline'\n            />\n        ),\n        value: Constants.UserStatuses.AWAY,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.offline'\n                defaultMessage='Offline'\n            />\n        ),\n        value: Constants.UserStatuses.OFFLINE,\n    },\n];\n\nexport function getValueOfSendMobileNotificationWhenSelect(pushStatus?: UserNotifyProps['push_status']): OnChangeValue<SelectOption, boolean> {\n    if (!pushStatus) {\n        return optionsOfSendMobileNotificationsWhenSelect[2];\n    }\n\n    const option = optionsOfSendMobileNotificationsWhenSelect.find((option) => option.value === pushStatus);\n    if (!option) {\n        return optionsOfSendMobileNotificationsWhenSelect[2];\n    }\n\n    return option;\n}\n\nfunction getCollapsedText(desktopActivity: UserNotifyProps['desktop'], pushActivity: UserNotifyProps['push']): ReactNode {\n    if (desktopActivity === NotificationLevels.ALL) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allForDesktopAndMobile'\n                    defaultMessage='All new messages'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allDesktopButMobileMentions'\n                    defaultMessage='All new messages on desktop; mentions, direct messages, and group messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allDesktopButMobileNone'\n                    defaultMessage='All new messages on desktop; never on mobile'\n                />\n            );\n        }\n    } else if (desktopActivity === NotificationLevels.MENTION) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsDesktopButMobileAll'\n                    defaultMessage='Mentions, direct messages, and group messages on desktop; all new messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsForDesktopAndMobile'\n                    defaultMessage='Mentions, direct messages, and group messages'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsForDesktopButMobileNone'\n                    defaultMessage='Mentions, direct messages, and group messages on desktop; never on mobile'\n                />\n            );\n        }\n    } else if (desktopActivity === NotificationLevels.NONE) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneDesktopButMobileAll'\n                    defaultMessage='Never on desktop; all new messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneDesktopButMobileMentions'\n                    defaultMessage='Never on desktop; mentions, direct messages, and group messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneForDesktopAndMobile'\n                    defaultMessage='Never'\n                />\n            );\n        }\n    }\n\n    return (\n        <FormattedMessage\n            id='user.settings.notifications.desktopAndMobile.noValidSettings'\n            defaultMessage='Configure desktop and mobile settings'\n        />\n    );\n}\n\nexport default memo(DesktopAndMobileNotificationSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChangeEvent, ReactNode} from 'react';\nimport React, {memo, useEffect, useRef, Fragment, useMemo, useCallback} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport type {OnChangeValue} from 'react-select';\nimport ReactSelect from 'react-select';\n\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {UserSettingsNotificationSections} from 'utils/constants';\nimport {\n    notificationSoundKeys,\n    stopTryNotificationRing,\n    tryNotificationSound,\n    tryNotificationRing,\n    getValueOfNotificationSoundsSelect,\n    getValueOfIncomingCallSoundsSelect,\n    optionsOfMessageNotificationSoundsSelect,\n    optionsOfIncomingCallSoundsSelect,\n    callNotificationSoundKeys,\n} from 'utils/notification_sounds';\n\nimport type {Props as UserSettingsNotificationsProps} from '../user_settings_notifications';\n\nexport type SelectOption = {\n    value: string;\n    label: ReactNode;\n};\n\nexport type Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving: boolean;\n    error: string;\n    setParentState: (key: string, value: string | boolean) => void;\n    areAllSectionsInactive: boolean;\n    desktopSound: UserNotifyProps['desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    isCallsRingingEnabled: UserSettingsNotificationsProps['isCallsRingingEnabled'];\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'];\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'];\n};\n\nfunction DesktopNotificationSoundsSettings({\n    active,\n    updateSection,\n    onSubmit,\n    onCancel,\n    saving,\n    error,\n    setParentState,\n    areAllSectionsInactive,\n    desktopSound,\n    desktopNotificationSound,\n    isCallsRingingEnabled,\n    callsDesktopSound,\n    callsNotificationSound,\n}: Props) {\n    const intl = useIntl();\n\n    const editButtonRef = useRef<SettingItemMinComponent>(null);\n    const previousActiveRef = useRef(active);\n\n    // Focus back on the edit button, after this section was closed after it was opened\n    useEffect(() => {\n        if (previousActiveRef.current && !active && areAllSectionsInactive) {\n            editButtonRef.current?.focus();\n        }\n\n        previousActiveRef.current = active;\n    }, [active, areAllSectionsInactive]);\n\n    const handleChangeForMessageNotificationSoundCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? 'true' : 'false';\n        setParentState('desktopSound', value);\n\n        if (value === 'false') {\n            stopTryNotificationRing();\n        }\n    }, [setParentState]);\n\n    const handleChangeForIncomginCallSoundCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? 'true' : 'false';\n        setParentState('callsDesktopSound', value);\n\n        if (value === 'false') {\n            stopTryNotificationRing();\n        }\n    }, [setParentState]);\n\n    const handleChangeForMessageNotificationSoundSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('desktopNotificationSound', selectedOption.value);\n            tryNotificationSound(selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const handleChangeForIncomingCallSoundSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('callsNotificationSound', selectedOption.value);\n            tryNotificationRing(selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const maximizedSettingInputs = useMemo(() => {\n        const maximizedSettingInputs = [];\n\n        const isMessageNotificationSoundChecked = desktopSound === 'true';\n        const messageSoundSection = (\n            <Fragment key='messageSoundSection'>\n                <div className='checkbox inlineCheckboxSelect'>\n                    <label>\n                        <input\n                            type='checkbox'\n                            checked={desktopSound === 'true'}\n                            onChange={handleChangeForMessageNotificationSoundCheckbox}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopNotificationSound.messageNotificationSound'\n                            defaultMessage='Message notification sound'\n                        />\n                    </label>\n                    <ReactSelect\n                        id='messageNotificationSoundSelect'\n                        inputId='messageNotificationSoundSelectInput'\n                        className='react-select inlineSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfMessageNotificationSoundsSelect}\n                        isClearable={false}\n                        isSearchable={false}\n                        isDisabled={!isMessageNotificationSoundChecked}\n                        placeholder={intl.formatMessage({\n                            id: 'user.settings.notifications.desktopNotificationSound.soundSelectPlaceholder',\n                            defaultMessage: 'Select a sound',\n                        })}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfNotificationSoundsSelect(desktopNotificationSound)}\n                        onChange={handleChangeForMessageNotificationSoundSelect}\n                    />\n                </div>\n            </Fragment>\n        );\n        maximizedSettingInputs.push(messageSoundSection);\n\n        if (isCallsRingingEnabled) {\n            const isIncomingCallSoundChecked = callsDesktopSound === 'true';\n            const callSoundSection = (\n                <Fragment key='callSoundSection'>\n                    <br/>\n                    <div className='checkbox inlineCheckboxSelect'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={isIncomingCallSoundChecked}\n                                onChange={handleChangeForIncomginCallSoundCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopNotificationSound.incomingCallSound'\n                                defaultMessage='Incoming call sound'\n                            />\n                        </label>\n                        <ReactSelect\n                            id='incomingCallSoundNotificationSelect'\n                            inputId='incomingCallSoundNotificationSelectInput'\n                            className='react-select inlineSelect'\n                            classNamePrefix='react-select'\n                            options={optionsOfIncomingCallSoundsSelect}\n                            isClearable={false}\n                            isSearchable={false}\n                            isDisabled={!isIncomingCallSoundChecked}\n                            components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                            placeholder={intl.formatMessage({\n                                id: 'user.settings.notifications.desktopNotificationSound.soundSelectPlaceholder',\n                                defaultMessage: 'Select a sound',\n                            })}\n                            value={getValueOfIncomingCallSoundsSelect(callsNotificationSound)}\n                            onChange={handleChangeForIncomingCallSoundSelect}\n                        />\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(callSoundSection);\n        }\n        return maximizedSettingInputs;\n    },\n    [\n        desktopSound,\n        handleChangeForMessageNotificationSoundCheckbox,\n        handleChangeForMessageNotificationSoundSelect,\n        desktopNotificationSound,\n        isCallsRingingEnabled,\n        callsDesktopSound,\n        handleChangeForIncomginCallSoundCheckbox,\n        callsNotificationSound,\n        handleChangeForIncomingCallSoundSelect,\n    ]);\n\n    function handleChangeForMaxSection(section: string) {\n        stopTryNotificationRing();\n        updateSection(section);\n    }\n\n    function handleChangeForMinSection(section: string) {\n        stopTryNotificationRing();\n        updateSection(section);\n        onCancel();\n    }\n\n    function handleSubmit() {\n        stopTryNotificationRing();\n        onSubmit();\n    }\n\n    if (active) {\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopNotificationSounds.title'\n                        defaultMessage='Desktop notification sounds'\n                    />\n                }\n                inputs={maximizedSettingInputs}\n                submit={handleSubmit}\n                saving={saving}\n                serverError={error}\n                updateSection={handleChangeForMaxSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            ref={editButtonRef}\n            title={\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSounds.title'\n                    defaultMessage='Desktop notification sounds'\n                />\n            }\n            describe={getCollapsedText(isCallsRingingEnabled, desktopSound, desktopNotificationSound, callsDesktopSound, callsNotificationSound)}\n            section={UserSettingsNotificationSections.DESKTOP_NOTIFICATION_SOUND}\n            updateSection={handleChangeForMinSection}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nfunction getCollapsedText(\n    isCallsRingingEnabled: UserSettingsNotificationsProps['isCallsRingingEnabled'],\n    desktopSound: UserNotifyProps['desktop_sound'],\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'],\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'],\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'],\n) {\n    const desktopNotificationSoundIsSelected = notificationSoundKeys.includes(desktopNotificationSound as string);\n    const callNotificationSoundIsSelected = callNotificationSoundKeys.includes(callsNotificationSound as string);\n\n    let hasCallsSound: boolean | null = null;\n    if (isCallsRingingEnabled && callNotificationSoundIsSelected) {\n        if (callsDesktopSound === 'true') {\n            hasCallsSound = true;\n        } else {\n            hasCallsSound = false;\n        }\n    }\n\n    let hasDesktopSound: boolean | null = null;\n    if (desktopNotificationSoundIsSelected) {\n        if (desktopSound === 'true') {\n            hasDesktopSound = true;\n        } else {\n            hasDesktopSound = false;\n        }\n    }\n\n    if (hasDesktopSound !== null && hasCallsSound !== null) {\n        if (hasDesktopSound && hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopAndCallsSound'\n                    defaultMessage='\"{desktopSound}\" for messages, \"{callsSound}\" for calls'\n                    values={{\n                        desktopSound: desktopNotificationSound,\n                        callsSound: callsNotificationSound,\n                    }}\n                />\n            );\n        } else if (!hasDesktopSound && hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.noDesktopAndhasCallsSound'\n                    defaultMessage='No sound for messages, \"{callsSound}\" for calls'\n                    values={{callsSound: callsNotificationSound}}\n                />\n            );\n        } else if (hasDesktopSound && !hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopAndNoCallsSound'\n                    defaultMessage='\"{desktopSound}\" for messages, no sound for calls'\n                    values={{desktopSound: desktopNotificationSound}}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.notifications.desktopNotificationSound.noDesktopAndNoCallsSound'\n                defaultMessage='No sound'\n            />\n        );\n    } else if (hasDesktopSound !== null && hasCallsSound === null) {\n        if (hasDesktopSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopSound'\n                    defaultMessage='\"{desktopSound}\" for messages'\n                    values={{desktopSound: desktopNotificationSound}}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.notifications.desktopNotificationSound.noDesktopSound'\n                defaultMessage='No sound'\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id='user.settings.notifications.desktopNotificationSound.noValidSound'\n            defaultMessage='Configure desktop notification sounds'\n        />\n    );\n}\n\nexport default memo(DesktopNotificationSoundsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Preferences} from '../constants';\nexport function getEmailInterval(enableEmailNotification: boolean, enableEmailBatching: boolean, emailIntervalPreference: number): number {\n    const {\n        INTERVAL_NEVER,\n        INTERVAL_IMMEDIATE,\n        INTERVAL_FIFTEEN_MINUTES,\n        INTERVAL_HOUR,\n    } = Preferences;\n\n    const validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    const validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    } else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n\n    return emailIntervalPreference;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferenceType} from '@mattermost/types/preferences';\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {Preferences, NotificationLevels} from 'utils/constants';\nimport {a11yFocus} from 'utils/utils';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving?: boolean;\n    error?: string;\n    setParentState: (key: string, value: any) => void;\n    areAllSectionsInactive: boolean;\n    isCollapsedThreadsEnabled: boolean;\n    enableEmail: boolean;\n    onChange: (enableEmail: UserNotifyProps['email']) => void;\n    threads: string;\n    currentUserId: string;\n    emailInterval: number;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    active: boolean;\n    emailInterval: number;\n    enableEmail: boolean;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    editButtonRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            active,\n        } = props;\n\n        this.state = {\n            active,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n\n        this.editButtonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            active,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (active && !prevState.active) {\n            return {\n                active,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            active !== prevState.active\n        ) {\n            return {\n                active,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.editButtonRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail: enableEmail === 'true',\n            newInterval,\n        });\n\n        a11yFocus(e.currentTarget);\n\n        this.props.onChange(enableEmail as UserNotifyProps['email']);\n    };\n\n    handleThreadsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('emailThreads', value);\n    };\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n        }\n\n        this.props.onSubmit();\n    };\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    };\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                if (this.props.enableEmailBatching) {\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.asSoonAsYouAreAwayForFiveMinutes'\n                            defaultMessage='As soon as you’re away for 5 minutes'\n                        />\n                    );\n                } else {\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.on'\n                            defaultMessage='On'\n                        />\n                    );\n                }\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = this.props.enableEmailBatching ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.off'\n                        defaultMessage='Off'\n                    />\n                );\n            }\n        } else {\n            description = this.props.enableEmailBatching ? (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            ) : (\n                <FormattedMessage\n                    id='user.settings.notifications.email.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                ref={this.editButtonRef}\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.emailNotifications'\n                        defaultMessage='Email notifications'\n                    />\n                }\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.notifications.emailNotifications'\n                            defaultMessage='Email notifications'\n                        />\n                    }\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    serverError={this.props.error}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let emailOptions = null;\n        let emailInfo = null;\n        let emailTitle = null;\n        if (this.props.enableEmailBatching) {\n            emailOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationImmediately'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.asSoonAsYouAreAwayForFiveMinutes'\n                                defaultMessage='As soon as you’re away for 5 minutes'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationNever'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_NEVER}\n                                data-enable-email={'false'}\n                                data-email-interval={Preferences.INTERVAL_NEVER}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            emailInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes. If you choose to receive notifications every 15 minutes or every hour, notifications during that period will be combined into a single email.'\n                />\n            );\n\n            emailTitle = ( // Renders only in case emails are batched\n                <legend className='form-legend'>\n                    <FormattedMessage\n                        id='user.settings.notifications.email.send'\n                        defaultMessage='Send email notifications'\n                    />\n                </legend>\n            );\n        } else {\n            emailOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationImmediately'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.on'\n                                defaultMessage='On'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationNever'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_NEVER}\n                                data-enable-email={'false'}\n                                data-email-interval={Preferences.INTERVAL_NEVER}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            emailInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailInfo'\n                    defaultMessage='When enabled, email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                />\n            );\n        }\n\n        let threadsNotificationSelection = null;\n        if (this.props.isCollapsedThreadsEnabled && this.props.enableEmail) {\n            threadsNotificationSelection = (\n                <React.Fragment key='userNotificationEmailThreadsOptions'>\n                    <hr/>\n                    <fieldset>\n                        <div className='checkbox single-checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.notifyForthreads'\n                                    defaultMessage={'Notify me about replies to threads I’m following'}\n                                />\n                            </label>\n                        </div>\n                    </fieldset>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.emailNotifications'\n                        defaultMessage='Email notifications'\n                    />\n                }\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        {emailTitle}\n                        {emailOptions}\n                        <div className='mt-3'>\n                            {emailInfo}\n                        </div>\n                    </fieldset>,\n                    threadsNotificationSelection,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                serverError={this.props.error}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.renderMaxSettingView();\n        }\n\n        return this.renderMinSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\n\nimport LocalizedPlaceholderTextarea from 'components/localized_placeholder_textarea';\nimport SettingItemMax from 'components/setting_item_max';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\ntype Props = {\n    autoResponderActive: boolean;\n    autoResponderMessage: string;\n    updateSection: (section: string) => void;\n    setParentState: (key: string, value: string | boolean) => void;\n    submit: () => void;\n    saving: boolean;\n    error?: string;\n}\n\nexport default class ManageAutoResponder extends React.PureComponent<Props> {\n    handleAutoResponderChecked = (e: ChangeEvent<HTMLInputElement>) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <LocalizedPlaceholderTextarea\n                        style={{resize: 'none', height: 'auto'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows={5}\n                        placeholder={defineMessage({id: 'user.settings.notifications.autoResponderPlaceholder', defaultMessage: 'Message'})}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic direct message replies'\n                    />\n                }\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {sendTestNotification} from 'actions/notification_actions';\n\nimport {useExternalLink} from 'components/common/hooks/use_external_link';\nimport SectionNotice from 'components/section_notice';\n\nconst sectionNoticeContainerStyle: React.CSSProperties = {marginTop: 20};\n\nconst TIME_TO_SENDING = 500;\nconst TIME_TO_SEND = 500;\nconst TIME_TO_IDLE = 3000;\n\ntype Props = {\n    adminMode?: boolean;\n};\n\ntype ButtonState = 'idle'|'sending'|'sent'|'error';\n\nconst SendTestNotificationNotice = ({\n    adminMode = false,\n}: Props) => {\n    const intl = useIntl();\n    const [buttonState, setButtonState] = useState<ButtonState>('idle');\n    const isSending = useRef(false);\n    const timeout = useRef<NodeJS.Timeout>();\n    const [externalLink] = useExternalLink('https://mattermost.com/pl/troubleshoot-notifications');\n\n    const onGoToNotificationDocumentation = useCallback(() => {\n        window.open(externalLink);\n    }, [externalLink]);\n\n    const onSendTestNotificationClick = useCallback(async () => {\n        if (isSending.current) {\n            return;\n        }\n        isSending.current = true;\n        let isShowingSending = false;\n        timeout.current = setTimeout(() => {\n            isShowingSending = true;\n            setButtonState('sending');\n        }, TIME_TO_SENDING);\n        const result = await sendTestNotification();\n        clearTimeout(timeout.current);\n        const setResult = () => {\n            if (result.status === 'OK') {\n                setButtonState('sent');\n            } else {\n                // We want to log this error into the console mainly\n                // for debugging reasons. We still use the 'error' level\n                // because it is an unexpected error.\n                // eslint-disable-next-line no-console\n                console.error(result);\n                setButtonState('error');\n            }\n            timeout.current = setTimeout(() => {\n                isSending.current = false;\n                setButtonState('idle');\n            }, TIME_TO_IDLE);\n        };\n\n        if (isShowingSending) {\n            timeout.current = setTimeout(setResult, TIME_TO_SEND);\n        } else {\n            setResult();\n        }\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(timeout.current);\n        };\n    }, []);\n\n    const primaryButton = useMemo(() => {\n        let text;\n        let icon;\n        let loading;\n        switch (buttonState) {\n        case 'idle':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.send', defaultMessage: 'Send a test notification'});\n            break;\n        case 'sending':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.sending', defaultMessage: 'Sending a test notification'});\n            loading = true;\n            break;\n        case 'sent':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.sent', defaultMessage: 'Test notification sent'});\n            icon = 'icon-check';\n            break;\n        case 'error':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.error', defaultMessage: 'Error sending test notification'});\n            icon = 'icon-alert-outline';\n        }\n        return {\n            onClick: onSendTestNotificationClick,\n            text,\n            leadingIcon: icon,\n            loading,\n        };\n    }, [buttonState, intl, onSendTestNotificationClick]);\n\n    const secondaryButton = useMemo(() => {\n        return {\n            onClick: onGoToNotificationDocumentation,\n            text: intl.formatMessage({id: 'user_settings.notifications.test_notification.go_to_docs', defaultMessage: 'Troubleshooting docs'}),\n            trailingIcon: 'icon-open-in-new',\n        };\n    }, [intl, onGoToNotificationDocumentation]);\n\n    if (adminMode) {\n        return null;\n    }\n\n    return (\n        <>\n            <div className='divider-light'/>\n            <div style={sectionNoticeContainerStyle}>\n                <SectionNotice\n                    text={intl.formatMessage({\n                        id: 'user_settings.notifications.test_notification.body',\n                        defaultMessage: 'Not receiving notifications? Start by sending a test notification to all your devices to check if they’re working as expected. If issues persist, explore ways to solve them with troubleshooting steps.',\n                    })}\n                    title={intl.formatMessage({id: 'user_settings.notifications.test_notification.title', defaultMessage: 'Troubleshooting notifications'})}\n                    primaryButton={primaryButton}\n                    tertiaryButton={secondaryButton}\n                    type='hint'\n                />\n            </div>\n        </>\n    );\n};\n\nexport default SendTestNotificationNotice;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport type {WrappedComponentProps} from 'react-intl';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {InputProps, OnChangeValue, StylesConfig} from 'react-select';\nimport {components} from 'react-select';\nimport CreatableReactSelect from 'react-select/creatable';\n\nimport {LightbulbOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserNotifyProps, UserProfile} from '@mattermost/types/users';\n\nimport {TrackPassiveKeywordsFeature, TrackPassiveKeywordsEvent} from 'mattermost-redux/constants/telemetry';\n\nimport {trackFeatureEvent} from 'actions/telemetry_actions.jsx';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport RestrictedIndicator from 'components/widgets/menu/menu_items/restricted_indicator';\n\nimport Constants, {NotificationLevels, MattermostFeatures, LicenseSkus, UserSettingsNotificationSections} from 'utils/constants';\nimport {notificationSoundKeys, stopTryNotificationRing} from 'utils/notification_sounds';\nimport {a11yFocus} from 'utils/utils';\n\nimport DesktopAndMobileNotificationSettings from './desktop_and_mobile_notification_setting';\nimport DesktopNotificationSoundsSettings from './desktop_notification_sounds_setting';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder/manage_auto_responder';\nimport SendTestNotificationNotice from './send_test_notification_notice';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nimport type {PropsFromRedux} from './index';\n\nconst WHITE_SPACE_REGEX = /\\s+/g;\nconst COMMA_REGEX = /,/g;\n\ntype MultiInputValue = {\n    label: string;\n    value: string;\n}\n\nexport type OwnProps = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\nexport type Props = PropsFromRedux & OwnProps & WrappedComponentProps;\n\ntype State = {\n    enableEmail: UserNotifyProps['email'];\n    desktopActivity: UserNotifyProps['desktop'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    emailThreads: UserNotifyProps['email_threads'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopSound: UserNotifyProps['desktop_sound'];\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'];\n    usernameKey: boolean;\n    isCustomKeysWithNotificationInputChecked: boolean;\n    customKeysWithNotification: MultiInputValue[];\n    customKeysWithNotificationInputValue: string;\n    customKeysWithHighlight: MultiInputValue[];\n    customKeysWithHighlightInputValue: string;\n    firstNameKey: boolean;\n    channelKey: boolean;\n    autoResponderActive: boolean;\n    autoResponderMessage: UserNotifyProps['auto_responder_message'];\n    notifyCommentsLevel: UserNotifyProps['comments'];\n    isSaving: boolean;\n    serverError: string;\n    desktopAndMobileSettingsDifferent: boolean;\n};\n\nfunction getDefaultStateFromProps(props: Props): State {\n    let desktop: UserNotifyProps['desktop'] = NotificationLevels.MENTION;\n    let desktopThreads: UserNotifyProps['desktop_threads'] = NotificationLevels.ALL;\n    let pushThreads: UserNotifyProps['push_threads'] = NotificationLevels.ALL;\n    let emailThreads: UserNotifyProps['email_threads'] = NotificationLevels.ALL;\n    let sound: UserNotifyProps['desktop_sound'] = 'true';\n    let callsSound: UserNotifyProps['calls_desktop_sound'] = 'true';\n    let desktopNotificationSound: UserNotifyProps['desktop_notification_sound'] = notificationSoundKeys[0] as UserNotifyProps['desktop_notification_sound'];\n    let callsNotificationSound: UserNotifyProps['calls_notification_sound'] = 'Calm';\n    let comments: UserNotifyProps['comments'] = 'never';\n    let enableEmail: UserNotifyProps['email'] = 'true';\n    let pushActivity: UserNotifyProps['push'] = NotificationLevels.MENTION;\n    let pushStatus: UserNotifyProps['push_status'] = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage: UserNotifyProps['auto_responder_message'] = props.intl.formatMessage({\n        id: 'user.settings.notifications.autoResponderDefault',\n        defaultMessage: 'Hello, I am out of office and unable to respond to messages.',\n    });\n    let desktopAndMobileSettingsDifferent = true;\n\n    if (props.user.notify_props) {\n        if (props.user.notify_props.desktop) {\n            desktop = props.user.notify_props.desktop;\n        }\n        if (props.user.notify_props.desktop_threads) {\n            desktopThreads = props.user.notify_props.desktop_threads;\n        }\n        if (props.user.notify_props.push_threads) {\n            pushThreads = props.user.notify_props.push_threads;\n        }\n        if (props.user.notify_props.email_threads) {\n            emailThreads = props.user.notify_props.email_threads;\n        }\n        if (props.user.notify_props.desktop_sound) {\n            sound = props.user.notify_props.desktop_sound;\n        }\n        if (props.user.notify_props.calls_desktop_sound) {\n            callsSound = props.user.notify_props.calls_desktop_sound;\n        }\n        if (props.user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = props.user.notify_props.desktop_notification_sound;\n        }\n        if (props.user.notify_props.calls_notification_sound) {\n            callsNotificationSound = props.user.notify_props.calls_notification_sound;\n        }\n        if (props.user.notify_props.comments) {\n            comments = props.user.notify_props.comments;\n        }\n        if (props.user.notify_props.email) {\n            enableEmail = props.user.notify_props.email;\n        }\n        if (props.user.notify_props.push) {\n            pushActivity = props.user.notify_props.push;\n        }\n        if (props.user.notify_props.push_status) {\n            pushStatus = props.user.notify_props.push_status;\n        }\n\n        if (props.user.notify_props.auto_responder_active) {\n            autoResponderActive = props.user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (props.user.notify_props.auto_responder_message) {\n            autoResponderMessage = props.user.notify_props.auto_responder_message;\n        }\n\n        if (props.user.notify_props.desktop && props.user.notify_props.push) {\n            desktopAndMobileSettingsDifferent = areDesktopAndMobileSettingsDifferent(props.user.notify_props.desktop, props.user.notify_props.push, props.user.notify_props?.desktop_threads, props.user.notify_props?.push_threads, props.isCollapsedThreadsEnabled);\n        }\n    }\n\n    let usernameKey = false;\n    let firstNameKey = false;\n    let channelKey = false;\n    let isCustomKeysWithNotificationInputChecked = false;\n    const customKeysWithNotification: MultiInputValue[] = [];\n    const customKeysWithHighlight: MultiInputValue[] = [];\n\n    if (props.user.notify_props) {\n        if (props.user.notify_props?.mention_keys?.length > 0) {\n            const mentionKeys = props.user.notify_props.mention_keys.split(',').filter((key) => key.length > 0);\n            mentionKeys.forEach((mentionKey) => {\n                // Remove username(s) from list of keys\n                if (mentionKey !== props.user.username && mentionKey !== `@${props.user.username}`) {\n                    customKeysWithNotification.push({\n                        label: mentionKey,\n                        value: mentionKey,\n                    });\n                }\n            });\n\n            // Check if username is in list of keys, if so, set the checkbox to true\n            usernameKey = mentionKeys.includes(props.user.username);\n\n            // Check if there are any keys in the list, if so, set the checkbox of custom keys to true\n            isCustomKeysWithNotificationInputChecked = customKeysWithNotification.length > 0;\n        }\n\n        if (props.user.notify_props?.highlight_keys?.length > 0) {\n            const highlightKeys = props.user.notify_props.highlight_keys.split(',').filter((key) => key.length > 0);\n            highlightKeys.forEach((highlightKey) => {\n                customKeysWithHighlight.push({\n                    label: highlightKey,\n                    value: highlightKey,\n                });\n            });\n        }\n\n        firstNameKey = props.user.notify_props?.first_name === 'true';\n        channelKey = props.user.notify_props?.channel === 'true';\n    }\n\n    return {\n        desktopActivity: desktop,\n        desktopThreads,\n        pushThreads,\n        emailThreads,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        callsDesktopSound: callsSound,\n        desktopNotificationSound,\n        callsNotificationSound,\n        usernameKey,\n        customKeysWithNotification,\n        isCustomKeysWithNotificationInputChecked,\n        customKeysWithNotificationInputValue: '',\n        customKeysWithHighlight,\n        customKeysWithHighlightInputValue: '',\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n        serverError: '',\n        desktopAndMobileSettingsDifferent,\n    };\n}\n\nconst Input = (props: InputProps<MultiInputValue, true>) => {\n    const ariaProps = {\n        'aria-labelledby': 'settingTitle',\n        'aria-describedby': 'extraInfo',\n    };\n\n    return (\n        <components.Input\n            {...props}\n            {...ariaProps}\n        />);\n};\n\nclass NotificationsTab extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        activeSection: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = getDefaultStateFromProps(props);\n    }\n\n    handleSubmit = async () => {\n        const data: UserNotifyProps = {...this.props.user.notify_props};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.calls_desktop_sound = this.state.callsDesktopSound;\n        data.desktop_notification_sound = this.state.desktopNotificationSound;\n        data.calls_notification_sound = this.state.callsNotificationSound;\n        data.desktop = this.state.desktopActivity;\n        data.desktop_threads = this.state.desktopThreads;\n        data.email_threads = this.state.emailThreads;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive ? 'true' : 'false';\n        data.auto_responder_message = this.state.autoResponderMessage;\n        data.first_name = this.state.firstNameKey ? 'true' : 'false';\n        data.channel = this.state.channelKey ? 'true' : 'false';\n\n        if (this.state.desktopAndMobileSettingsDifferent) {\n            data.push = this.state.pushActivity;\n            data.push_threads = this.state.pushThreads;\n        } else {\n            data.push = this.state.desktopActivity;\n            data.push_threads = this.state.desktopThreads;\n        }\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = this.props.intl.formatMessage({\n                id: 'user.settings.notifications.autoResponderDefault',\n                defaultMessage: 'Hello, I am out of office and unable to respond to messages.',\n            });\n        }\n\n        const mentionKeys: string[] = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n        if (this.state.isCustomKeysWithNotificationInputChecked && this.state.customKeysWithNotification.length > 0) {\n            this.state.customKeysWithNotification.forEach((key) => {\n                mentionKeys.push(key.value);\n            });\n        }\n        data.mention_keys = mentionKeys.join(',');\n\n        const highlightKeys: string[] = [];\n        if (this.state.customKeysWithHighlight.length > 0) {\n            this.state.customKeysWithHighlight.forEach((key) => {\n                highlightKeys.push(key.value);\n            });\n        }\n        data.highlight_keys = highlightKeys.join(',');\n        if (this.props.user.notify_props?.highlight_keys !== data.highlight_keys && data.highlight_keys.length > 0) {\n            trackFeatureEvent(TrackPassiveKeywordsFeature, TrackPassiveKeywordsEvent);\n        }\n\n        this.setState({isSaving: true});\n        stopTryNotificationRing();\n\n        let updatedUser: UserProfile | undefined;\n        let error;\n\n        if (this.props.adminMode) {\n            const payloadUser = {...this.props.user, notify_props: data};\n            const response = await this.props.patchUser(payloadUser);\n            updatedUser = response.data;\n            error = response.error;\n        } else {\n            const response = await this.props.updateMe({notify_props: data});\n            updatedUser = response.data;\n            error = response.error;\n        }\n\n        if (updatedUser) {\n            this.handleUpdateSection('');\n            this.setState(getDefaultStateFromProps(this.props));\n        } else if (error) {\n            this.setState({serverError: error.message, isSaving: false});\n        } else {\n            this.setState({serverError: '', isSaving: false});\n        }\n    };\n\n    handleCancel = (): void => {\n        this.setState(getDefaultStateFromProps(this.props));\n        stopTryNotificationRing();\n    };\n\n    handleUpdateSection = (section: string): void => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key: string, value: string | boolean): void => {\n        const data: {[key: string]: string | boolean } = {};\n        data[key] = value;\n        this.setState((prevState) => ({...prevState, ...data}));\n    };\n\n    handleNotifyCommentsRadio = (notifyCommentsLevel: UserNotifyProps['comments'], e?: React.ChangeEvent): void => {\n        this.setState({notifyCommentsLevel});\n        a11yFocus(e?.currentTarget as HTMLElement);\n    };\n\n    handleEmailRadio = (enableEmail: UserNotifyProps['email']): void => {\n        this.setState({enableEmail});\n    };\n\n    handleChangeForUsernameKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({usernameKey: checked});\n    };\n\n    handleChangeForFirstNameKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({firstNameKey: checked});\n    };\n\n    handleChangeForChannelKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({channelKey: checked});\n    };\n\n    handleChangeForCustomKeysWithNotificationCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({isCustomKeysWithNotificationInputChecked: checked});\n    };\n\n    handleChangeForCustomKeysWithNotificationInput = (values: OnChangeValue<{ value: string }, true>) => {\n        if (values && Array.isArray(values) && values.length > 0) {\n            // Check the custom keys input checkbox when atleast a single key is entered\n            if (this.state.isCustomKeysWithNotificationInputChecked === false) {\n                this.setState({\n                    isCustomKeysWithNotificationInputChecked: true,\n                });\n            }\n\n            const customKeysWithNotification = values.\n                map((value: MultiInputValue) => {\n                    // Remove all spaces from the value\n                    const formattedValue = value.value.trim().replace(WHITE_SPACE_REGEX, '');\n                    return {value: formattedValue, label: formattedValue};\n                }).\n                filter((value) => value.value.length > 0);\n            this.setState({customKeysWithNotification});\n        } else {\n            this.setState({\n                isCustomKeysWithNotificationInputChecked: false,\n                customKeysWithNotification: [],\n            });\n        }\n    };\n\n    updateCustomKeysWithNotificationWithInputValue = (newValue: string) => {\n        const customKeysWithNotification = [\n            ...this.state.customKeysWithNotification,\n            {\n                value: newValue,\n                label: newValue,\n            },\n        ];\n\n        this.setState({\n            customKeysWithNotification,\n            customKeysWithNotificationInputValue: '', // Clear the input field\n        });\n\n        if (!this.state.isCustomKeysWithNotificationInputChecked) {\n            this.setState({isCustomKeysWithNotificationInputChecked: true});\n        }\n    };\n\n    handleOnKeydownForCustomKeysWithNotificationInput = (event: React.KeyboardEvent) => {\n        if (event.key === Constants.KeyCodes.COMMA[0] || event.key === Constants.KeyCodes.TAB[0]) {\n            const unsavedCustomKeyWithNotification = this.state.customKeysWithNotificationInputValue?.trim()?.replace(WHITE_SPACE_REGEX, '')?.replace(COMMA_REGEX, '') ?? '';\n            if (unsavedCustomKeyWithNotification.length > 0) {\n                this.updateCustomKeysWithNotificationWithInputValue(unsavedCustomKeyWithNotification);\n            }\n        }\n    };\n\n    handleChangeForCustomKeysWithNotificationInputValue = (value: string) => {\n        // Check if input contains comma, if so, add the value to the list of custom keys\n        if (!value.includes(Constants.KeyCodes.COMMA[0])) {\n            const formattedValue = value.trim().replace(WHITE_SPACE_REGEX, '');\n            this.setState({customKeysWithNotificationInputValue: formattedValue});\n        }\n    };\n\n    handleBlurForCustomKeysWithNotificationInput = () => {\n        const unsavedCustomKeyWithNotification = this.state.customKeysWithNotificationInputValue?.trim()?.replace(WHITE_SPACE_REGEX, '')?.replace(COMMA_REGEX, '') ?? '';\n        if (unsavedCustomKeyWithNotification.length > 0) {\n            this.updateCustomKeysWithNotificationWithInputValue(unsavedCustomKeyWithNotification);\n        }\n    };\n\n    handleChangeForCustomKeysWithHighlightInput = (values: OnChangeValue<{ value: string }, true>) => {\n        if (values && Array.isArray(values) && values.length > 0) {\n            const customKeysWithHighlight = values.\n                map((value: MultiInputValue) => {\n                    const formattedValue = value.value.trim();\n                    return {value: formattedValue, label: formattedValue};\n                }).\n                filter((value) => value.value.length > 0);\n            this.setState({customKeysWithHighlight});\n        } else {\n            this.setState({\n                customKeysWithHighlight: [],\n            });\n        }\n    };\n\n    handleChangeForCustomKeysWithHighlightInputValue = (value: string) => {\n        if (!value.includes(Constants.KeyCodes.COMMA[0])) {\n            this.setState({customKeysWithHighlightInputValue: value});\n        }\n    };\n\n    updateCustomKeysWithHighlightWithInputValue = (newValue: State['customKeysWithHighlightInputValue']) => {\n        const unsavedCustomKeyWithHighlight = newValue?.trim()?.replace(COMMA_REGEX, '') ?? '';\n\n        if (unsavedCustomKeyWithHighlight.length > 0) {\n            const customKeysWithHighlight = [\n                ...this.state.customKeysWithHighlight,\n                {\n                    value: unsavedCustomKeyWithHighlight,\n                    label: unsavedCustomKeyWithHighlight,\n                },\n            ];\n\n            this.setState({\n                customKeysWithHighlight,\n                customKeysWithHighlightInputValue: '',\n            });\n        }\n    };\n\n    handleBlurForCustomKeysWithHighlightInput = () => {\n        this.updateCustomKeysWithHighlightWithInputValue(this.state.customKeysWithHighlightInputValue);\n    };\n\n    handleOnKeydownForCustomKeysWithHighlightInput = (event: React.KeyboardEvent) => {\n        if (event.key === Constants.KeyCodes.COMMA[0] || event.key === Constants.KeyCodes.TAB[0]) {\n            this.updateCustomKeysWithHighlightWithInputValue(this.state.customKeysWithHighlightInputValue);\n        }\n    };\n\n    handleCloseSettingsModal = () => {\n        this.props.closeModal();\n    };\n\n    createKeywordsWithNotificationSection = () => {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n        const isSectionExpanded = this.props.activeSection === UserSettingsNotificationSections.KEYWORDS_MENTIONS;\n\n        let expandedSection = null;\n        if (isSectionExpanded) {\n            const inputs = [];\n\n            if (user.first_name) {\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={this.handleChangeForFirstNameKeyCheckbox}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case-sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={this.handleChangeForUsernameKeyCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={this.handleChangeForChannelKeyCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div\n                    key='userNotificationCustomOption'\n                    className='customKeywordsWithNotificationSubsection'\n                >\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                type='checkbox'\n                                checked={this.state.isCustomKeysWithNotificationInputChecked}\n                                onChange={this.handleChangeForCustomKeysWithNotificationCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveCustomWords'\n                                defaultMessage='Other non case-sensitive words, press Tab or use commas to separate keywords:'\n                            />\n                        </label>\n                    </div>\n                    <CreatableReactSelect\n                        inputId='notificationTriggerCustomText'\n                        autoFocus={true}\n                        isClearable={false}\n                        isMulti={true}\n                        styles={customKeywordsSelectorStyles}\n                        placeholder=''\n                        components={{\n                            DropdownIndicator: () => null,\n                            Menu: () => null,\n                            MenuList: () => null,\n                            Input,\n                        }}\n                        onChange={this.handleChangeForCustomKeysWithNotificationInput}\n                        value={this.state.customKeysWithNotification}\n                        inputValue={this.state.customKeysWithNotificationInputValue}\n                        onInputChange={this.handleChangeForCustomKeysWithNotificationInputValue}\n                        onBlur={this.handleBlurForCustomKeysWithNotificationInput}\n                        onKeyDown={this.handleOnKeydownForCustomKeysWithNotificationInput}\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.keywordsWithNotification.extraInfo'\n                    defaultMessage='Notifications are triggered when someone sends a message that includes your username (\"@{username}\") or any of the options selected above.'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n            );\n\n            expandedSection = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                    inputs={\n                        <fieldset>\n                            <legend className='hidden-label'>\n                                {this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                            </legend>\n                            <div>\n                                {inputs}\n                            </div>\n                        </fieldset>\n                    }\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const selectedMentionKeys = ['@' + user.username];\n        if (this.state.firstNameKey) {\n            selectedMentionKeys.push(user.first_name);\n        }\n        if (this.state.usernameKey) {\n            selectedMentionKeys.push(user.username);\n        }\n        if (this.state.channelKey) {\n            selectedMentionKeys.push('@channel');\n            selectedMentionKeys.push('@all');\n            selectedMentionKeys.push('@here');\n        }\n        if (this.state.customKeysWithNotification.length > 0) {\n            const customKeysWithNotificationStringArray = this.state.customKeysWithNotification.map((key) => key.value);\n            selectedMentionKeys.push(...customKeysWithNotificationStringArray);\n        }\n        const collapsedDescription = selectedMentionKeys.filter((key) => key.trim().length !== 0).map((key) => `\"${key}\"`).join(', ');\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                section={UserSettingsNotificationSections.KEYWORDS_MENTIONS}\n                active={isSectionExpanded}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                describe={collapsedDescription}\n                updateSection={this.handleUpdateSection}\n                max={expandedSection}\n            />);\n    };\n\n    createKeywordsWithHighlightSection = () => {\n        const isSectionExpanded = this.props.activeSection === UserSettingsNotificationSections.KEYWORDS_HIGHLIGHT;\n\n        let expandedSection = null;\n        if (isSectionExpanded) {\n            const inputs = [(\n                <div\n                    key='userNotificationHighlightOption'\n                    className='customKeywordsWithNotificationSubsection'\n                >\n                    <label htmlFor='mentionKeysWithHighlightInput'>\n                        <FormattedMessage\n                            id='user.settings.notifications.keywordsWithHighlight.inputTitle'\n                            defaultMessage='Enter non case-sensitive keywords, press Tab or use commas to separate them:'\n                        />\n                    </label>\n                    <CreatableReactSelect\n                        inputId='mentionKeysWithHighlightInput'\n                        autoFocus={true}\n                        isClearable={false}\n                        isMulti={true}\n                        styles={customKeywordsSelectorStyles}\n                        placeholder=''\n                        components={{\n                            DropdownIndicator: () => null,\n                            Menu: () => null,\n                            MenuList: () => null,\n                        }}\n                        aria-labelledby='mentionKeysWithHighlightInput'\n                        onChange={this.handleChangeForCustomKeysWithHighlightInput}\n                        value={this.state.customKeysWithHighlight}\n                        inputValue={this.state.customKeysWithHighlightInputValue}\n                        onInputChange={this.handleChangeForCustomKeysWithHighlightInputValue}\n                        onBlur={this.handleBlurForCustomKeysWithHighlightInput}\n                        onKeyDown={this.handleOnKeydownForCustomKeysWithHighlightInput}\n                    />\n                </div>\n            )];\n\n            const extraInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.keywordsWithHighlight.extraInfo'\n                    defaultMessage='These keywords will be shown to you with a highlight when anyone sends a message that includes them.'\n                />\n            );\n\n            expandedSection = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.title', defaultMessage: 'Keywords that get highlighted (without notifications)'})}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let collapsedDescription = this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.none', defaultMessage: 'None'});\n        if (!this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady && this.state.customKeysWithHighlight.length > 0) {\n            const customKeysWithHighlightStringArray = this.state.customKeysWithHighlight.map((key) => key.value);\n            collapsedDescription = customKeysWithHighlightStringArray.map((key) => `\"${key}\"`).join(', ');\n        }\n\n        const collapsedEditButtonWhenDisabled = (\n            <RestrictedIndicator\n                blocked={this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady}\n                feature={MattermostFeatures.HIGHLIGHT_WITHOUT_NOTIFICATION}\n                minimumPlanRequiredForFeature={LicenseSkus.Professional}\n                tooltipTitle={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.disabledTooltipTitle',\n                    defaultMessage: 'Professional feature',\n                })}\n                tooltipMessageBlocked={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.disabledTooltipMessage',\n                    defaultMessage:\n                    'This feature is available on the Professional plan',\n                })}\n                titleAdminPreTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleAdminPreTrial',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageAdminPreTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageAdminPreTrial',\n                    defaultMessage: 'Get the ability to passively highlight keywords that you care about. Upgrade to Professional plan to unlock this feature.',\n                })}\n                titleAdminPostTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleAdminPostTrial',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageAdminPostTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageAdminPostTrial',\n                    defaultMessage: 'Get the ability to passively highlight keywords that you care about. Upgrade to Professional plan to unlock this feature.',\n                },\n                )}\n                titleEndUser={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleEndUser',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageEndUser={this.props.intl.formatMessage(\n                    {\n                        id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageEndUser',\n                        defaultMessage: 'Get the ability to passively highlight keywords that you care about.{br}{br}Request your admin to upgrade to Mattermost Professional to access this feature.',\n                    },\n                    {\n                        br: <br/>,\n                    },\n                )}\n                ctaExtraContent={\n                    <FormattedMessage\n                        id='user.settings.notifications.keywordsWithHighlight.professional'\n                        defaultMessage='Professional'\n                    />\n                }\n                clickCallback={this.handleCloseSettingsModal}\n            />\n        );\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.title', defaultMessage: 'Keywords that get highlighted (without notifications)'})}\n                section={UserSettingsNotificationSections.KEYWORDS_HIGHLIGHT}\n                active={isSectionExpanded}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                describe={collapsedDescription}\n                updateSection={this.handleUpdateSection}\n                max={expandedSection}\n                isDisabled={this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady}\n                collapsedEditButtonWhenDisabled={collapsedEditButtonWhenDisabled}\n            />);\n    };\n\n    createCommentsSection = () => {\n        const serverError = this.state.serverError;\n\n        let max = null;\n        if (this.props.activeSection === UserSettingsNotificationSections.REPLY_NOTIFCATIONS) {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage\n                            id='user.settings.notifications.comments'\n                            defaultMessage='Reply notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.comments', defaultMessage: 'Reply notifications'})}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element;\n        if (this.state.notifyCommentsLevel === 'never') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsNever'\n                    defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                />\n            );\n        } else if (this.state.notifyCommentsLevel === 'root') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsRoot'\n                    defaultMessage='Trigger notifications on messages in threads that I start'\n                />\n            );\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsAny'\n                    defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.comments', defaultMessage: 'Reply notifications'})}\n                active={this.props.activeSection === UserSettingsNotificationSections.REPLY_NOTIFCATIONS}\n                describe={describe}\n                section={UserSettingsNotificationSections.REPLY_NOTIFCATIONS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n                areAllSectionsInactive={this.props.activeSection === ''}\n            />\n        );\n    };\n\n    createAutoResponderSection = () => {\n        const describe = this.state.autoResponderActive ? (\n            <FormattedMessage\n                id='user.settings.notifications.autoResponderEnabled'\n                defaultMessage='Enabled'\n            />\n        ) : (\n            <FormattedMessage\n                id='user.settings.notifications.autoResponderDisabled'\n                defaultMessage='Disabled'\n            />\n        );\n\n        return (\n            <SettingItem\n                active={this.props.activeSection === UserSettingsNotificationSections.AUTO_RESPONDER}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic direct message replies'\n                    />\n                }\n                describe={describe}\n                section={UserSettingsNotificationSections.AUTO_RESPONDER}\n                updateSection={this.handleUpdateSection}\n                max={(\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage || ''}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                )}\n            />\n        );\n    };\n\n    render() {\n        const keywordsWithNotificationSection = this.createKeywordsWithNotificationSection();\n        const keywordsWithHighlightSection = this.createKeywordsWithHighlightSection();\n        const commentsSection = this.createCommentsSection();\n        const autoResponderSection = this.createAutoResponderSection();\n\n        const areAllSectionsInactive = this.props.activeSection === '';\n\n        return (\n            <div\n                id='notificationsSettings'\n                aria-labelledby='notificationsButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification settings'\n                        />\n                    }\n                />\n                <div\n                    className='user-settings'\n                >\n                    <SettingDesktopHeader\n                        id='notificationSettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.notifications.header'\n                                defaultMessage='Notifications'\n                            />\n                        }\n                        info={\n                            <FormattedMessage\n                                id='user.settings.notifications.learnMore'\n                                defaultMessage='<a>Learn more about notifications</a>'\n                                values={{\n                                    a: (chunks: string) => ((\n                                        <ExternalLink\n                                            location='user_settings_notifications'\n                                            href='https://mattermost.com/pl/about-notifications'\n                                            className='btn btn-link'\n                                        >\n                                            <LightbulbOutlineIcon className='circular-border'/>\n                                            <span>{chunks}</span>\n                                        </ExternalLink>\n                                    )),\n                                }}\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    <DesktopAndMobileNotificationSettings\n                        active={this.props.activeSection === UserSettingsNotificationSections.DESKTOP_AND_MOBILE}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        desktopActivity={this.state.desktopActivity}\n                        pushActivity={this.state.pushActivity}\n                        sendPushNotifications={this.props.sendPushNotifications}\n                        pushStatus={this.state.pushStatus}\n                        desktopThreads={this.state.desktopThreads}\n                        pushThreads={this.state.pushThreads}\n                        desktopAndMobileSettingsDifferent={this.state.desktopAndMobileSettingsDifferent}\n                    />\n                    <div className='divider-light'/>\n                    <DesktopNotificationSoundsSettings\n                        active={this.props.activeSection === UserSettingsNotificationSections.DESKTOP_NOTIFICATION_SOUND}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        desktopSound={this.state.desktopSound}\n                        desktopNotificationSound={this.state.desktopNotificationSound}\n                        isCallsRingingEnabled={this.props.isCallsRingingEnabled}\n                        callsDesktopSound={this.state.callsDesktopSound}\n                        callsNotificationSound={this.state.callsNotificationSound}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        active={this.props.activeSection === UserSettingsNotificationSections.EMAIL}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onChange={this.handleEmailRadio}\n                        threads={this.state.emailThreads || ''}\n                    />\n                    <div className='divider-light'/>\n                    {keywordsWithNotificationSection}\n                    {(!this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady) && (\n                        <>\n                            <div className='divider-light'/>\n                            {keywordsWithHighlightSection}\n                        </>\n                    )}\n                    <div className='divider-light'/>\n                    {!this.props.isCollapsedThreadsEnabled && (\n                        <>\n                            <div className='divider-light'/>\n                            {commentsSection}\n                        </>\n                    )}\n                    {this.props.enableAutoResponder && (\n                        <>\n                            <div className='divider-light'/>\n                            {autoResponderSection}\n                        </>\n                    )}\n\n                    {/*  We placed the disabled items in the last */}\n                    {(this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady) && (\n                        <>\n                            <div className='divider-light'/>\n                            {keywordsWithHighlightSection}\n                        </>\n                    )}\n                    <SendTestNotificationNotice adminMode={this.props.adminMode}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst customKeywordsSelectorStyles = {\n    container: ((baseStyle) => ({\n        ...baseStyle,\n        marginBlockStart: '10px',\n    })),\n    control: ((baseStyles) => ({\n        ...baseStyles,\n        backgroundColor: 'var(--center-channel-bg)',\n        border: '1px solid rgba(var(--center-channel-color-rgb), 0.16);',\n        ':hover': {\n            borderColor: 'rgba(var(--center-channel-color-rgb), 0.48);',\n        },\n    })),\n    multiValue: ((baseStyles) => ({\n        ...baseStyles,\n        background: 'rgba(var(--center-channel-color-rgb), 0.08)',\n    })),\n    multiValueLabel: ((baseStyles) => ({\n        ...baseStyles,\n        color: 'var(--center-channel-color);',\n    })),\n    input: ((baseStyles) => ({\n        ...baseStyles,\n        color: 'var(--center-channel-color)',\n    })),\n    indicatorSeparator: ((indicatorSeperatorStyles) => ({\n        ...indicatorSeperatorStyles,\n        display: 'none',\n    })),\n    multiValueRemove: ((multiValueRemoveStyles) => ({\n        ...multiValueRemoveStyles,\n        cursor: 'pointer',\n        color: 'rgba(var(--center-channel-color-rgb),0.32);',\n        ':hover': {\n            backgroundColor: 'rgba(var(--center-channel-color-rgb), 0.16)',\n            color: 'rgba(var(--center-channel-color-rgb), 0.56);',\n        },\n    })),\n} satisfies StylesConfig<MultiInputValue, true>;\n\nconst validNotificationLevels = Object.values(NotificationLevels);\n\n/**\n * Check's if user's global notification settings for desktop and mobile are different\n */\nexport function areDesktopAndMobileSettingsDifferent(\n    desktopActivity: UserNotifyProps['desktop'],\n    pushActivity?: UserNotifyProps['push'],\n    desktopThreads?: UserNotifyProps['desktop_threads'],\n    pushThreads?: UserNotifyProps['push_threads'],\n    isCollapsedThreadsEnabled?: boolean,\n): boolean {\n    if (!desktopActivity || !pushActivity || !desktopThreads || !pushThreads) {\n        return true;\n    }\n\n    if (\n        !validNotificationLevels.includes(desktopActivity) ||\n        !validNotificationLevels.includes(pushActivity) ||\n        !validNotificationLevels.includes(desktopThreads) ||\n        !validNotificationLevels.includes(pushThreads)\n    ) {\n        return true;\n    }\n\n    if (desktopActivity === pushActivity) {\n        if (isCollapsedThreadsEnabled) {\n            if (desktopThreads === pushThreads) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    return true;\n}\n\nexport default injectIntl(NotificationsTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect, type ConnectedProps} from 'react-redux';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getSubscriptionProduct} from 'mattermost-redux/selectors/entities/cloud';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    isCollapsedThreadsEnabled,\n    isCollapsedThreadsEnabledForUser,\n} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {isCallsEnabled, isCallsRingingEnabledOnServer} from 'selectors/calls';\n\nimport {isEnterpriseOrCloudOrSKUStarterFree} from 'utils/license_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './user_settings_notifications';\nimport UserSettingsNotifications from './user_settings_notifications';\n\nconst mapStateToProps = (state: GlobalState, props: OwnProps) => {\n    // server config, related to server configuration, not the user\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    const license = getLicense(state);\n    const subscriptionProduct = getSubscriptionProduct(state);\n\n    const isEnterpriseReady = config.BuildEnterpriseReady === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n        isCollapsedThreadsEnabled: props.adminMode && props.userPreferences ? isCollapsedThreadsEnabledForUser(state, props.userPreferences) : isCollapsedThreadsEnabled(state),\n        isCallsRingingEnabled: isCallsEnabled(state, '0.17.0') && isCallsRingingEnabledOnServer(state),\n        isEnterpriseOrCloudOrSKUStarterFree: isEnterpriseOrCloudOrSKUStarterFree(license, subscriptionProduct, isEnterpriseReady),\n        isEnterpriseReady,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateMe,\n    patchUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ComponentProps} from 'react';\nimport React, {useMemo} from 'react';\n\nimport SectionNotice from 'components/section_notice';\n\nimport type {PluginConfigurationAction} from 'types/plugins/user_settings';\n\nimport './plugin_action.scss';\n\ntype Props = {\n    action?: PluginConfigurationAction;\n};\n\nconst PluginAction = ({\n    action,\n}: Props) => {\n    const props = useMemo<ComponentProps<typeof SectionNotice>>(() => {\n        return action ? {\n            text: action.text,\n            title: action.title,\n            primaryButton: {\n                onClick: action?.onClick,\n                text: action?.buttonText,\n            },\n        } : {\n            text: '',\n            title: '',\n        };\n    }, [action]);\n\n    if (!action) {\n        return null;\n    }\n\n    return (\n        <div className={'pluginActionContainer'}>\n            <SectionNotice {...props}/>\n        </div>\n    );\n};\n\nexport default PluginAction;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getPluginPreferenceKey(pluginId: string) {\n    return `pp_${pluginId}`.slice(0, 32);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\n\nimport Markdown from 'components/markdown';\n\nimport type {PluginConfigurationRadioSettingOption} from 'types/plugins/user_settings';\n\ntype Props = {\n    selectedValue: string;\n    name: string;\n    option: PluginConfigurationRadioSettingOption;\n    onSelected: (v: string) => void;\n}\n\nconst markdownOptions = {mentionHighlight: false};\n\nconst RadioOption = ({\n    selectedValue,\n    name,\n    option,\n    onSelected,\n}: Props) => {\n    const onChange = useCallback(() => onSelected(option.value), [option.value]);\n    return (\n        <div className={'radio'}>\n            <label >\n                <input\n                    type='radio'\n                    name={name}\n                    checked={selectedValue === option.value}\n                    onChange={onChange}\n                />\n                {option.text}\n            </label>\n            <br/>\n            {option.helpText && (\n                <Markdown\n                    message={option.helpText}\n                    options={markdownOptions}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default RadioOption;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport Markdown from 'components/markdown';\n\nimport {getPluginPreferenceKey} from 'utils/plugins/preferences';\n\nimport type {PluginConfigurationRadioSetting} from 'types/plugins/user_settings';\nimport type {GlobalState} from 'types/store';\n\nimport RadioOption from './radio_option';\n\ntype Props = {\n    setting: PluginConfigurationRadioSetting;\n    pluginId: string;\n    informChange: (name: string, value: string) => void;\n}\n\nconst RadioInput = ({\n    setting,\n    pluginId,\n    informChange,\n}: Props) => {\n    const preference = useSelector<GlobalState, string>((state: GlobalState) => getPreference(state, getPluginPreferenceKey(pluginId), setting.name, setting.default));\n    const [selectedValue, setSelectedValue] = useState(preference);\n\n    const onSelected = useCallback((value: string) => {\n        setSelectedValue(value);\n        informChange(setting.name, value);\n    }, [setting.name]);\n\n    return (\n        <fieldset key={setting.name}>\n            <legend className='form-legend hidden-label'>\n                {setting.title || setting.name}\n            </legend>\n            {setting.options.map((option) => (\n                <RadioOption\n                    key={option.value}\n                    name={setting.name}\n                    option={option}\n                    selectedValue={selectedValue}\n                    onSelected={onSelected}\n                />\n            ))}\n            {setting.helpText && (\n                <div className='mt-5'>\n                    <Markdown\n                        message={setting.helpText}\n                        options={{mentionHighlight: false}}\n                    />\n                </div>\n            )}\n        </fieldset>\n    );\n};\n\nexport default RadioInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport PluggableErrorBoundary from 'plugins/pluggable/error_boundary';\nimport {getPluginPreferenceKey} from 'utils/plugins/preferences';\n\nimport type {PluginConfigurationSection} from 'types/plugins/user_settings';\nimport type {GlobalState} from 'types/store';\n\nimport RadioInput from './radio';\n\ntype Props = {\n    pluginId: string;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    section: PluginConfigurationSection;\n}\n\nconst PluginSetting = ({\n    pluginId,\n    section,\n    activeSection,\n    updateSection,\n}: Props) => {\n    const dispatch = useDispatch();\n    const userId = useSelector(getCurrentUserId);\n    const preferenceMin = useSelector<GlobalState, string>((state: GlobalState) => getPreference(state, getPluginPreferenceKey(pluginId), section.settings[0].name, section.settings[0].default));\n    const toUpdate = useRef<{[name: string]: string}>({});\n\n    const minDescribe = useMemo(() => {\n        const setting = section.settings[0];\n        if (setting.type === 'radio') {\n            return setting.options.find((v) => v.value === preferenceMin)?.text;\n        }\n\n        return undefined;\n    }, [section, preferenceMin]);\n\n    const onSettingChanged = useCallback((name: string, value: string) => {\n        toUpdate.current[name] = value;\n    }, []);\n\n    const updateSetting = useCallback(async () => {\n        const preferences = [];\n        for (const key of Object.keys(toUpdate.current)) {\n            preferences.push({\n                user_id: userId,\n                category: getPluginPreferenceKey(pluginId),\n                name: key,\n                value: toUpdate.current[key],\n            });\n        }\n\n        if (preferences.length) {\n            // Save preferences does not offer any await strategy or error handling\n            // so I am leaving this as is for now. We probably should update save\n            // preferences and handle any kind of error or network delay here.\n            dispatch(savePreferences(userId, preferences));\n            section.onSubmit?.(toUpdate.current);\n        }\n\n        updateSection('');\n    }, [pluginId, dispatch, section.onSubmit]);\n\n    useEffect(() => {\n        if (activeSection !== section.title) {\n            toUpdate.current = {};\n        }\n    }, [activeSection, section.title]);\n\n    const inputs = [];\n    for (const setting of section.settings) {\n        if (setting.type === 'radio') {\n            inputs.push(\n                <RadioInput\n                    key={setting.name}\n                    setting={setting}\n                    informChange={onSettingChanged}\n                    pluginId={pluginId}\n                />);\n        } else if (setting.type === 'custom') {\n            const CustomComponent = setting.component;\n            const inputEl = (\n                <PluggableErrorBoundary\n                    key={setting.name}\n                    pluginId={pluginId}\n                >\n                    <CustomComponent informChange={onSettingChanged}/>\n                </PluggableErrorBoundary>\n            );\n            inputs.push(inputEl);\n        }\n    }\n\n    if (!inputs.length) {\n        return null;\n    }\n\n    if (section.title === activeSection) {\n        return (\n            <SettingItemMax\n                title={section.title}\n                inputs={inputs}\n                submit={updateSetting}\n                updateSection={updateSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            section={section.title}\n            title={section.title}\n            updateSection={updateSection}\n            describe={minDescribe}\n            isDisabled={section.disabled}\n        />\n    );\n};\n\nexport default PluginSetting;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport PluggableErrorBoundary from 'plugins/pluggable/error_boundary';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport PluginAction from './plugin_action';\nimport PluginSetting from './plugin_setting';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\ntype Props = {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    settings: PluginConfiguration;\n}\n\nconst PluginTab = ({\n    activeSection,\n    closeModal,\n    collapseModal,\n    settings,\n    updateSection,\n}: Props) => {\n    const intl = useIntl();\n\n    const headerText = intl.formatMessage(\n        {id: 'user.settings.plugins.title', defaultMessage: '{pluginName} Settings'},\n        {pluginName: settings.uiName},\n    );\n\n    return (\n        <div\n            id={`${settings.id}Settings`}\n            aria-labelledby={`${settings.id}Button`}\n            role='tabpanel'\n        >\n            <SettingMobileHeader\n                closeModal={closeModal}\n                collapseModal={collapseModal}\n                text={headerText}\n            />\n            <div className='user-settings'>\n                <SettingDesktopHeader text={headerText}/>\n                <PluginAction action={settings.action}/>\n                <div className='divider-dark first'/>\n                {settings.sections.map((v) => {\n                    let sectionEl;\n                    if ('component' in v) {\n                        const CustomComponent = v.component;\n                        sectionEl = (\n                            <PluggableErrorBoundary\n                                pluginId={settings.id}\n                            >\n                                <CustomComponent/>\n                            </PluggableErrorBoundary>\n                        );\n                    } else {\n                        sectionEl = (\n                            <PluginSetting\n                                pluginId={settings.id}\n                                activeSection={activeSection}\n                                section={v}\n                                updateSection={updateSection}\n                            />\n                        );\n                    }\n\n                    return (\n                        <React.Fragment key={v.title}>\n                            {sectionEl}\n                            <div className='divider-light'/>\n                        </React.Fragment>\n                    );\n                },\n                )}\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n};\n\nexport default PluginTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Audit} from '@mattermost/types/audits';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\nimport './access_history_modal.scss';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: Audit[];\n    currentUserId: string;\n}\n\nconst AccessHistoryModal = ({\n    actions: {\n        getUserAudits,\n    },\n    currentUserId,\n    onHide,\n    userAudits,\n}: Props) => {\n    const [show, setShow] = useState(true);\n\n    const onCloseClick = useCallback(() => {\n        setShow(false);\n    }, []);\n\n    useEffect(() => {\n        getUserAudits(currentUserId, 0, 200);\n    }, []);\n\n    let content;\n    if (userAudits.length === 0) {\n        content = (<LoadingScreen/>);\n    } else {\n        content = (\n            <AuditTable\n                audits={userAudits}\n                showIp={true}\n                showSession={true}\n            />\n        );\n    }\n\n    return (\n        <Modal\n            dialogClassName='a11y__modal modal--scroll access-history-modal'\n            show={show}\n            onHide={onCloseClick}\n            onExited={onHide}\n            bsSize='large'\n            role='none'\n            aria-labelledby='accessHistoryModalLabel'\n        >\n            <Modal.Header closeButton={true}>\n                <Modal.Title\n                    componentClass='h1'\n                    id='accessHistoryModalLabel'\n                >\n                    <FormattedMessage\n                        id='access_history.title'\n                        defaultMessage='Access History'\n                    />\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {content}\n            </Modal.Body>\n            <Modal.Footer className='modal-footer--invisible'>\n                <button\n                    id='closeModalButton'\n                    type='button'\n                    className='btn btn-tertiary'\n                >\n                    <FormattedMessage\n                        id='general_button.close'\n                        defaultMessage='Close'\n                    />\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.memo(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useIntl} from 'react-intl';\n\nimport {formatAsString} from 'utils/i18n';\n\ntype Props = {\n    devicePicture?: string;\n    deviceTitle: MessageDescriptor | string;\n}\n\nexport default function DeviceIcon(props: Props) {\n    const intl = useIntl();\n\n    return (\n        <i\n            className={props.devicePicture}\n            title={formatAsString(intl.formatMessage, props.deviceTitle)}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: Session;\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedDate, FormattedMessage, FormattedTime, defineMessages} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport DeviceIcon from './device_icon';\nimport MoreInfo from './more_info';\n\ntype Props = {\n\n    /**\n     * The index of this instance within the list\n     */\n    index: number;\n\n    /**\n     * The current locale of the user\n     */\n    locale: string;\n\n    /**\n     * The session that's to be displayed\n     */\n    currentSession: Session;\n\n    /**\n     * Function to revoke session\n     */\n    submitRevoke: (sessionId: string, event: React.MouseEvent) => void;\n};\n\ntype State = {\n    moreInfo: boolean;\n};\n\ntype MobileSessionInfo = {\n    devicePicture?: string;\n    deviceTitle?: MessageDescriptor;\n    devicePlatform?: JSX.Element;\n};\n\nexport default class ActivityLog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = (): void => {\n        this.setState({moreInfo: true});\n    };\n\n    submitRevoke = (e: React.MouseEvent): void => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    };\n\n    isMobileSession = (session: Session): boolean => {\n        return Boolean(session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android')));\n    };\n\n    mobileSessionInfo = (session: Session): MobileSessionInfo => {\n        let devicePlatform;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = messages.appleIcon;\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.iphoneNativeClassicApp'\n                    defaultMessage='iPhone Native Classic App'\n                />\n            );\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.iphoneNativeApp'\n                        defaultMessage='iPhone Native App'\n                    />\n                );\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = messages.androidIcon;\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.androidNativeClassicApp'\n                    defaultMessage='Android Native Classic App'\n                />\n            );\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.androidNativeApp'\n                        defaultMessage='Android Native App'\n                    />\n                );\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform,\n        };\n    };\n\n    render(): React.ReactNode {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture: string | undefined = '';\n        let deviceTitle: MessageDescriptor | string = '';\n\n        if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n            deviceTitle = sessionInfo.deviceTitle || deviceTitle;\n        } else {\n            if (currentSession.props.platform === 'Windows') {\n                devicePicture = 'fa fa-windows';\n                deviceTitle = messages.windowsIcon;\n            } else if (currentSession.props.platform === 'Macintosh' ||\n                currentSession.props.platform === 'iPhone') {\n                devicePicture = 'fa fa-apple';\n                deviceTitle = messages.appleIcon;\n            } else if (currentSession.props.platform === 'Linux') {\n                if (currentSession.props.os.indexOf('Android') >= 0) {\n                    devicePlatform = (\n                        <FormattedMessage\n                            id='activity_log_modal.android'\n                            defaultMessage='Android'\n                        />\n                    );\n                    devicePicture = 'fa fa-android';\n                    deviceTitle = messages.androidIcon;\n                } else {\n                    devicePicture = 'fa fa-linux';\n                    deviceTitle = messages.linuxIcon;\n                }\n            } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = messages.linuxIcon;\n            }\n\n            if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.desktop'\n                        defaultMessage='Native Desktop App'\n                    />\n                );\n            }\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <DeviceIcon\n                            devicePicture={devicePicture}\n                            deviceTitle={deviceTitle}\n                        />\n                        {devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    androidIcon: {\n        id: 'device_icons.android',\n        defaultMessage: 'Android Icon',\n    },\n    appleIcon: {\n        id: 'device_icons.apple',\n        defaultMessage: 'Apple Icon',\n    },\n    linuxIcon: {\n        id: 'device_icons.linux',\n        defaultMessage: 'Linux Icon',\n    },\n    windowsIcon: {\n        id: 'device_icons.windows',\n        defaultMessage: 'Windows Icon',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log';\n\nexport type Props = {\n\n    /**\n     * The current user id\n     */\n    currentUserId: string;\n\n    /**\n     * Current user's sessions\n     */\n    sessions: Session[];\n\n    /**\n     * Current user's locale\n     */\n    locale: string;\n\n    /**\n     * Function that's called when user closes the modal\n     */\n    onHide: () => void;\n\n    actions: {\n\n        /**\n         * Function to refresh sessions from server\n         */\n        getSessions: (userId: string) => void;\n\n        /**\n         * Function to revoke a particular session\n         */\n        revokeSession: (userId: string, sessionId: string) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class ActivityLogModal extends React.PureComponent<Props, State> {\n    static propTypes = {\n\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        const modalContent = (e.target as Element)?.closest('.modal-content');\n        modalContent?.classList.add('animation--highlight');\n        setTimeout(() => {\n            modalContent?.classList.remove('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    };\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    };\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        const activityList = this.props.sessions.reduce((array: JSX.Element[], currentSession, index) => {\n            if (currentSession.props.type === 'UserAccessToken') {\n                return array;\n            }\n\n            array.push(\n                <ActivityLog\n                    key={currentSession.id}\n                    index={index}\n                    locale={this.props.locale}\n                    currentSession={currentSession}\n                    submitRevoke={this.submitRevoke}\n                />,\n            );\n            return array;\n        }, []);\n\n        const content = <form role='form'>{activityList}</form>;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='none'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-tertiary'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport type {GlobalState} from 'types/store';\n\nimport ActivityLogModal from './activity_log_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        getHistory().push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            getHistory().push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\n\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {UserAccessToken, UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport ExternalLink from 'components/external_link';\nimport SaveButton from 'components/save_button';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport {Constants, DeveloperLinks} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport {isMobile} from 'utils/user_agent';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<ActionResult<UserAccessToken>>;\n        revokeUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        enableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        disableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: UserAccessToken | null;\n    tokenCreationState?: string;\n    tokenError?: React.ReactNode;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private minRef: React.RefObject<SettingItemMinComponent>;\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    };\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    };\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({\n                tokenError: (\n                    <FormattedMessage\n                        id='user.settings.tokens.nameRequired'\n                        defaultMessage='Please enter a description.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    };\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    };\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    };\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    };\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Keyboard.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    };\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <p>\n                        <FormattedMessage\n                            id='user.settings.tokens.confirmDelete.description'\n                            defaultMessage={'Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action.'}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='user.settings.tokens.confirmDelete.confirmation'\n                            defaultMessage={'Are you sure you want to delete the <b>{description}</b> token?'}\n                            values={{\n                                description: token.description,\n                                b: (chunks: string) => <b>{chunks}</b>,\n                            }}\n                        />\n                    </p>\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    };\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    };\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    };\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    };\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = (\n                <FormattedMessage\n                    id='user.settings.tokens.clickToEdit'\n                    defaultMessage=\"Click 'Edit' to manage your personal access tokens\"\n                />\n            );\n\n            return (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.tokens.title'\n                            defaultMessage='Personal Access Tokens'\n                        />\n                    }\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>. Create new tokens on your desktop.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label\n                            className='col-sm-auto control-label pr-3'\n                            htmlFor='newTokenDescription'\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                id='newTokenDescription'\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-tertiary'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.tokens.title'\n                            defaultMessage='Personal Access Tokens'\n                        />\n                    }\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    isFullWidth={true}\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport ExternalLink from 'components/external_link';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport ToggleModalButton from 'components/toggle_modal_button';\n\nimport icon50 from 'images/icon50x50.png';\nimport Constants from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    allowedToSwitchToEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: PasswordConfig;\n    militaryTime: boolean;\n    actions: Actions;\n    intl: IntlShape;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: this.props.intl.formatMessage({\n                    id: 'user.settings.security.currentPasswordError',\n                    defaultMessage: 'Please enter your current password.',\n                }),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: this.props.intl.formatMessage({\n                    id: 'user.settings.security.passwordMatchError',\n                    defaultMessage:\n                        'The new passwords you entered do not match.',\n                }),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        const inputs = [];\n        let submit;\n\n        const active = this.props.activeSection === SECTION_PASSWORD;\n        let max = null;\n        if (active) {\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='currentPassword'\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.currentPassword',\n                                    defaultMessage: 'Current Password',\n                                })}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='newPassword'\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.newPassword',\n                                    defaultMessage: 'New Password',\n                                })}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='confirmPassword'\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.retypePassword',\n                                    defaultMessage: 'Retype New Password',\n                                })}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Entra ID. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Entra ID'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        const active = this.props.activeSection === SECTION_SIGNIN;\n        let max = null;\n        if (active) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Entra ID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.allowedToSwitchToEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({\n                        id: 'user.settings.security.method',\n                        defaultMessage: 'Sign-in Method',\n                    })}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Entra ID'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OPENID_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.openid'\n                    defaultMessage='OpenID'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={this.props.intl.formatMessage({\n                    id: 'user.settings.security.method',\n                    defaultMessage: 'Sign-in Method',\n                })}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        const active = this.props.activeSection === SECTION_APPS;\n        let max = null;\n        if (active) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <ExternalLink\n                            href={app.homepage}\n                            location='user_settings_security'\n                        >\n                            {app.homepage}\n                        </ExternalLink>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    isFullWidth={true}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={this.props.intl.formatMessage({\n                    id: 'user.settings.security.oauthApps',\n                    defaultMessage: 'OAuth 2.0 Applications',\n                })}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOpenId ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.allowedToSwitchToEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div\n                id='securitySettings'\n                aria-labelledby='securityButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        text={\n                            <FormattedMessage\n                                id='user.settings.security.title'\n                                defaultMessage='Security Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        modalId='access_history'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={this.props.intl.formatMessage({\n                                id: 'user.settings.security.viewHistory.icon',\n                                defaultMessage: 'Access History Icon',\n                            })}\n                            aria-hidden='true'\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        modalId='activity_log'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={this.props.intl.formatMessage({\n                                id: 'user.settings.security.logoutActiveSessions.icon',\n                                defaultMessage: 'Active Sessions Icon',\n                            })}\n                            aria-hidden='true'\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getConfig, getPasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const allowedToSwitchToEmail = config.EnableSignUpWithEmail === 'true' && (config.EnableSignInWithEmail === 'true' || config.EnableSignInWithUsername === 'true');\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        allowedToSwitchToEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(state),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, StylesConfig} from 'react-select';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\ntype Limit = {\n    value: number;\n    label: string;\n};\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    dmGmLimit: number;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    limit: Limit;\n    isSaving: boolean;\n}\n\nconst limits: Limit[] = [\n    {value: 10, label: '10'},\n    {value: 15, label: '15'},\n    {value: 20, label: '20'},\n    {value: 40, label: '40'},\n];\n\nexport default class LimitVisibleGMsDMs extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            limit: {value: 20, label: '20'},\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    limit: limits.find((l) => l.value === props.dmGmLimit),\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        } else if (!props.active) {\n            return {\n                limit: limits.find((l) => l.value === props.dmGmLimit),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    handleChange = (selected: OnChangeValue<Limit, boolean>) => {\n        if (selected && 'value' in selected) {\n            this.setState({limit: selected});\n        }\n    };\n\n    handleSubmit = async () => {\n        if (!this.props.userId) {\n            return;\n        }\n\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.userId, [{\n            user_id: this.props.userId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: this.state.limit.value.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    };\n\n    renderDescription = () => {\n        return (\n            <span>{this.state.limit.label}</span>\n        );\n    };\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.limitVisibleGMsDMsTitle'\n                defaultMessage='Number of direct messages to show'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='limitVisibleGMsDMs'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <ReactSelect\n                            className='react-select'\n                            classNamePrefix='react-select'\n                            id='limitVisibleGMsDMs'\n                            options={limits}\n                            isClearable={false}\n                            onChange={this.handleChange}\n                            value={this.state.limit}\n                            isSearchable={false}\n                            menuPortalTarget={document.body}\n                            styles={reactStyles}\n                        />\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.limitVisibleGMsDMsDesc'\n                                defaultMessage='You can also change these settings in the direct messages sidebar menu.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nconst reactStyles = {\n    menuPortal: (provided) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n} satisfies StylesConfig<Limit, boolean>;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getVisibleDmGmLimit} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './limit_visible_gms_dms';\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const userPreferences = ownProps.adminMode && ownProps.userPreferences ? ownProps.userPreferences : undefined;\n    return {\n        userId: ownProps.adminMode ? ownProps.userId : getCurrentUserId(state),\n        dmGmLimit: getVisibleDmGmLimit(state, userPreferences),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LimitVisibleGMsDMs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {a11yFocus} from 'utils/utils';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    showUnreadsCategory: boolean;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    checked: boolean;\n    isSaving: boolean;\n}\n\nexport default class ShowUnreadsCategory extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            checked: false,\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    checked: props.showUnreadsCategory,\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checked: e.target.value === 'true',\n        });\n        a11yFocus(e.target);\n    };\n\n    handleSubmit = async () => {\n        if (!this.props.userId) {\n            // Only for type safety, won't actually happen\n            return;\n        }\n\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.userId, [{\n            user_id: this.props.userId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.SHOW_UNREAD_SECTION,\n            value: this.state.checked.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    };\n\n    renderDescription = () => {\n        if (this.props.showUnreadsCategory) {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.showUnreadsCategoryTitle'\n                defaultMessage='Group unread channels separately'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='showUnreadsCategory'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOn'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={this.state.checked}\n                                    onChange={() => this.setState({checked: true})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOff'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={!this.state.checked}\n                                    onChange={() => this.setState({checked: false})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.showUnreadsCategoryDesc'\n                                defaultMessage='When enabled, all unread channels and direct messages will be grouped together in the sidebar.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {\n    shouldShowUnreadsCategory,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './show_unreads_category';\nimport ShowUnreadsCategory from './show_unreads_category';\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const userPreferences = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        showUnreadsCategory: shouldShowUnreadsCategory(state, userPreferences),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowUnreadsCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\n\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\nimport ShowUnreadsCategory from './show_unreads_category';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nexport interface Props {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\nexport default function UserSettingsSidebar(props: Props): JSX.Element {\n    return (\n        <div\n            id='sidebarSettings'\n            aria-labelledby='sidebarButton'\n            role='tabpanel'\n        >\n            <SettingMobileHeader\n                closeModal={props.closeModal}\n                collapseModal={props.collapseModal}\n                text={\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                }\n            />\n            <div\n                id='sidebarTitle'\n                className='user-settings'\n            >\n                <SettingDesktopHeader\n                    text={\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    }\n                />\n\n                <div className='divider-dark first'/>\n                <ShowUnreadsCategory\n                    active={props.activeSection === 'showUnreadsCategory'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                    adminMode={props.adminMode}\n                    userId={props.userId}\n                    userPreferences={props.userPreferences}\n                />\n                <div className='divider-dark'/>\n                <LimitVisibleGMsDMs\n                    active={props.activeSection === 'limitVisibleGMsDMs'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                    adminMode={props.adminMode}\n                    userId={props.userId}\n                    userPreferences={props.userPreferences}\n                />\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nexport default UserSettingsSidebar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport PluginTab from './plugin';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection: string;\n    updateSection: (section?: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    pluginSettings: {[tabName: string]: PluginConfiguration};\n    userPreferences?: PreferencesType;\n    adminMode?: boolean;\n};\n\nexport default function UserSettings(props: Props) {\n    if (props.activeTab === 'profile') {\n        return (\n            <div>\n                <GeneralTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    updateTab={props.updateTab}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'security') {\n        return (\n            <div>\n                <SecurityTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    setRequireConfirm={props.setRequireConfirm}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'notifications') {\n        return (\n            <div>\n                <NotificationsTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'display') {\n        return (\n            <div>\n                <DisplayTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    setRequireConfirm={props.setRequireConfirm}\n                    adminMode={props.adminMode}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'sidebar') {\n        return (\n            <div>\n                <SidebarTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    userId={props.user.id}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'advanced') {\n        return (\n            <div>\n                <AdvancedTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    user={props.user}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab && props.pluginSettings[props.activeTab]) {\n        return (\n            <div>\n                <PluginTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    settings={props.pluginSettings[props.activeTab]}\n                />\n            </div>\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ReactNode, useEffect, useState} from 'react';\n\nconst DEFAULT_MIN_LOADER_DURATION = 1000;\n\ntype Props = {\n    loading: boolean;\n    children: ReactNode;\n    className?: string;\n    onLoaded: () => void;\n}\n\nconst SmartLoader = ({loading, children, className, onLoaded}: Props) => {\n    const [timeoutFinished, setTimeoutFinished] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeoutFinished(true);\n        }, DEFAULT_MIN_LOADER_DURATION);\n    }, []);\n\n    useEffect(() => {\n        if (!loading && timeoutFinished) {\n            onLoaded();\n        }\n    }, [loading, timeoutFinished, onLoaded]);\n\n    return loading || !timeoutFinished ? (\n        <div className={`SmartLoader ${className}`}>\n            {children}\n        </div>\n    ) : null;\n};\n\nexport default SmartLoader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingsSidebar from 'components/settings_sidebar';\nimport UserSettings from 'components/user_settings';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport SmartLoader from 'components/widgets/smart_loader';\n\nimport {focusElement} from 'utils/a11y_utils';\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {stopTryNotificationRing} from 'utils/notification_sounds';\nimport {isValidUrl} from 'utils/url';\nimport {getDisplayName} from 'utils/utils';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport './user_settings_modal.scss';\n\nexport type OwnProps = {\n    userID?: string;\n    adminMode?: boolean;\n    isContentProductSettings: boolean;\n    userPreferences?: PreferencesType;\n    activeTab?: string;\n}\n\nexport type Props = OwnProps & {\n    intl: IntlShape;\n    pluginSettings: {[pluginId: string]: PluginConfiguration};\n    user?: UserProfile;\n    onExited: () => void;\n    focusOriginElement?: string;\n    actions: {\n        sendVerificationEmail: (email: string) => Promise<ActionResult>;\n        getUserPreferences: (userID: string) => Promise<unknown>;\n        getUser: (userID: string) => Promise<unknown>;\n    };\n}\n\ntype State = {\n    active_tab?: string;\n    active_section: string;\n    showConfirmModal: boolean;\n    enforceFocus?: boolean;\n    show: boolean;\n    resendStatus: string;\n    loading: boolean;\n};\n\nclass UserSettingsModal extends React.PureComponent<Props, State> {\n    private requireConfirm: boolean;\n    private customConfirmAction: ((handleConfirm: () => void) => void) | null;\n    private afterConfirm: (() => void) | null;\n    private modalBodyRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active_tab: props.activeTab ?? (props.isContentProductSettings ? 'notifications' : 'profile'),\n            active_section: '',\n            showConfirmModal: false,\n            enforceFocus: true,\n            show: true,\n            resendStatus: '',\n            loading: false,\n        };\n\n        this.requireConfirm = false;\n\n        // Used when settings want to override the default confirm modal with their own\n        // If set by a child, it will be called in place of showing the regular confirm\n        // modal. It will be passed a function to call on modal confirm\n        this.customConfirmAction = null;\n        this.afterConfirm = null;\n\n        this.modalBodyRef = React.createRef();\n    }\n\n    handleResend = (email: string) => {\n        this.setState({resendStatus: 'sending'});\n\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n\n        if (this.props.adminMode && this.props.userID) {\n            this.setState({loading: true});\n\n            if (!this.props.userPreferences) {\n                this.props.actions.getUserPreferences(this.props.userID);\n            }\n            if (!this.props.user) {\n                this.props.actions.getUser(this.props.userID);\n            }\n        }\n\n        if (!this.props.adminMode) {\n            this.setState({loading: false});\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        if (this.state.active_tab !== prevState.active_tab) {\n            // Scroll to top if user changes tabs\n            if (this.modalBodyRef.current) {\n                const el = this.modalBodyRef.current as HTMLDivElement;\n                el.scrollTop = 0;\n            }\n        }\n    }\n\n    setLoadingFinished = () => {\n        this.setState({loading: false});\n    };\n\n    handleKeyDown = (e: KeyboardEvent) => {\n        // Ctrl+Shift+A (or Cmd+Shift+A) to close\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            e.preventDefault();\n            this.handleHide();\n        }\n    };\n\n    // Called when the close button is pressed on the main modal\n    handleHide = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(() => this.handleHide());\n            return;\n        }\n\n        // Cancel any ongoing notification sound, if any (from DesktopNotificationSettings)\n        stopTryNotificationRing();\n        this.setState({show: false});\n    };\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            active_tab: this.props.isContentProductSettings ? 'notifications' : 'profile',\n            active_section: '',\n        });\n        if (this.props.focusOriginElement) {\n            focusElement(this.props.focusOriginElement, true);\n        }\n        this.props.onExited();\n    };\n\n    // Called to hide the settings pane when on mobile\n    handleCollapse = () => {\n        const el = ReactDOM.findDOMNode(this.modalBodyRef.current) as HTMLDivElement;\n        el.closest('.modal-dialog')!.classList.remove('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    };\n\n    handleConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n        this.requireConfirm = false;\n        this.customConfirmAction = null;\n\n        if (this.afterConfirm) {\n            this.afterConfirm();\n            this.afterConfirm = null;\n        }\n    };\n\n    handleCancelConfirmation = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n        this.afterConfirm = null;\n    };\n\n    showConfirmModal = (afterConfirm: () => void) => {\n        if (afterConfirm) {\n            this.afterConfirm = afterConfirm;\n        }\n\n        if (this.customConfirmAction) {\n            this.customConfirmAction(this.handleConfirm);\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            enforceFocus: false,\n        });\n    };\n\n    // Called by settings tabs when their close button is pressed\n    closeModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.closeModal);\n        } else {\n            this.handleHide();\n        }\n    };\n\n    // Called by settings tabs when their back button is pressed\n    collapseModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.collapseModal);\n        } else {\n            this.handleCollapse();\n        }\n    };\n\n    updateTab = (tab?: string, skipConfirm?: boolean) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateTab(tab, true));\n        } else {\n            this.setState({\n                active_tab: tab,\n                active_section: '',\n            });\n        }\n    };\n\n    updateSection = (section?: string, skipConfirm?: boolean) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateSection(section, true));\n        } else {\n            this.setState({active_section: section ?? ''});\n        }\n    };\n\n    getUserSettingsTabs = () => {\n        const {formatMessage} = this.props.intl;\n        return [\n            {\n                name: 'notifications',\n                uiName: formatMessage({id: 'user.settings.modal.notifications', defaultMessage: 'Notifications'}),\n                icon: 'icon icon-bell-outline',\n                iconTitle: formatMessage({id: 'user.settings.notifications.icon', defaultMessage: 'Notification Settings Icon'}),\n            },\n            {\n                name: 'display',\n                uiName: formatMessage({id: 'user.settings.modal.display', defaultMessage: 'Display'}),\n                icon: 'icon icon-eye-outline',\n                iconTitle: formatMessage({id: 'user.settings.display.icon', defaultMessage: 'Display Settings Icon'}),\n            },\n            {\n                name: 'sidebar',\n                uiName: formatMessage({id: 'user.settings.modal.sidebar', defaultMessage: 'Sidebar'}),\n                icon: 'icon icon-dock-left',\n                iconTitle: formatMessage({id: 'user.settings.sidebar.icon', defaultMessage: 'Sidebar Settings Icon'}),\n            },\n            {\n                name: 'advanced',\n                uiName: formatMessage({id: 'user.settings.modal.advanced', defaultMessage: 'Advanced'}),\n                icon: 'icon icon-tune',\n                iconTitle: formatMessage({id: 'user.settings.advance.icon', defaultMessage: 'Advanced Settings Icon'}),\n            },\n        ];\n    };\n\n    getProfileSettingsTab = () => {\n        const {formatMessage} = this.props.intl;\n        return [\n            {\n                name: 'profile',\n                uiName: formatMessage({id: 'user.settings.modal.profile', defaultMessage: 'Profile'}),\n                icon: 'icon icon-settings-outline',\n                iconTitle: formatMessage({id: 'user.settings.profile.icon', defaultMessage: 'Profile Settings Icon'}),\n            },\n            {\n                name: 'security',\n                uiName: formatMessage({id: 'user.settings.modal.security', defaultMessage: 'Security'}),\n                icon: 'icon icon-lock-outline',\n                iconTitle: formatMessage({id: 'user.settings.security.icon', defaultMessage: 'Security Settings Icon'}),\n            },\n        ];\n    };\n\n    getPluginsSettingsTab = () => {\n        return Object.values(this.props.pluginSettings).map((v) => {\n            const useURL = v.icon && (isValidUrl(v.icon) || v.icon.startsWith('/'));\n            const className = v.icon ? `icon ${v.icon}` : 'icon icon-power-plug-outline';\n            return {\n                name: v.id,\n                uiName: v.uiName,\n                icon: useURL ? {url: v.icon!} : className,\n                iconTitle: v.uiName,\n            };\n        });\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        let modalTitle: string;\n        if (this.props.adminMode && this.props.user) {\n            modalTitle = formatMessage(\n                {id: 'userSettings.adminMode.modal_header', defaultMessage: \"{userDisplayName}'s Settings\"},\n                {userDisplayName: getDisplayName(this.props.user)},\n            );\n        } else if (this.props.isContentProductSettings) {\n            modalTitle = formatMessage({id: 'global_header.productSettings', defaultMessage: 'Settings'});\n        } else {\n            modalTitle = formatMessage({id: 'user.settings.modal.title', defaultMessage: 'Profile'});\n        }\n\n        const headerTitle = (\n            <div\n                className='UserSettingsModal__headerWrapper'\n                id='accountSettingsHeader'\n            >\n                <span\n                    id='accountSettingsModalLabel'\n                    className='modal-header__title'\n                >\n                    {modalTitle}\n                </span>\n                {this.props.adminMode && (\n                    <div className='adminModeBadge'>\n                        <FormattedMessage\n                            id='userSettings.adminMode.admin_mode_badge'\n                            defaultMessage='Admin Mode'\n                        />\n                    </div>\n                )}\n            </div>\n        );\n\n        return (\n            <GenericModal\n                id='accountSettingsModal'\n                className='a11y__modal settings-modal UserSettingsModal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                ariaLabel={modalTitle}\n                compassDesign={true}\n                enforceFocus={this.state.enforceFocus}\n                bodyPadding={false}\n                modalHeaderText={headerTitle}\n                modalLocation='top'\n                delayFocusTrap={true}\n            >\n                <div\n                    ref={this.modalBodyRef}\n                >\n                    {/* Admin Mode: wait for user + preferences */}\n                    {this.props.adminMode &&\n                        <SmartLoader\n                            loading={this.props.adminMode && (!this.props.userPreferences || !this.props.user)}\n                            className='loadingIndicator'\n                            onLoaded={this.setLoadingFinished}\n                        >\n                            <LoadingSpinner/>\n                        </SmartLoader>\n                    }\n\n                    {/* Show content only when not loading */}\n                    {!this.state.loading && this.props.user &&\n                        <>\n                            <div className='settings-table'>\n                                <div className='settings-links'>\n                                    <SettingsSidebar\n                                        tabs={this.props.isContentProductSettings ? this.getUserSettingsTabs() : this.getProfileSettingsTab()}\n                                        pluginTabs={this.props.isContentProductSettings ? this.getPluginsSettingsTab() : []}\n                                        activeTab={this.state.active_tab}\n                                        updateTab={this.updateTab}\n                                    />\n                                </div>\n                                <div className='settings-content minimize-settings'>\n                                    <UserSettings\n                                        activeTab={this.state.active_tab}\n                                        activeSection={this.state.active_section}\n                                        updateSection={this.updateSection}\n                                        updateTab={this.updateTab}\n                                        closeModal={this.closeModal}\n                                        collapseModal={this.collapseModal}\n                                        setRequireConfirm={(requireConfirm?: boolean, customConfirmAction?: () => () => void) => {\n                                            this.requireConfirm = requireConfirm || false;\n                                            this.customConfirmAction = customConfirmAction || null;\n                                        }}\n                                        pluginSettings={this.props.pluginSettings}\n                                        user={this.props.user}\n                                        adminMode={this.props.adminMode}\n                                        userPreferences={this.props.userPreferences}\n                                    />\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n\n                <ConfirmModal\n                    title={formatMessage({id: 'user.settings.modal.confirmTitle', defaultMessage: 'Discard Changes?'})}\n                    message={formatMessage({\n                        id: 'user.settings.modal.confirmMsg',\n                        defaultMessage: 'You have unsaved changes, are you sure you want to discard them?',\n                    })}\n                    confirmButtonText={formatMessage({\n                        id: 'user.settings.modal.confirmBtns',\n                        defaultMessage: 'Yes, Discard',\n                    })}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleConfirm}\n                    onCancel={this.handleCancelConfirmation}\n                />\n            </GenericModal>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function EditIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='icon-pencil-outline'\n            title={formatMessage({id: 'generic_icons.edit', defaultMessage: 'Edit Icon'})}\n        />\n    );\n}\n\n"],"names":["CreatableSelect$1","forwardRef","props","ref","creatableProps","u","selectProps","S","_excluded","compareOption","option","arguments","length","undefined","accessors","candidate","String","toLowerCase","optionValue","getOptionValue","optionLabel","getOptionLabel","builtins","formatCreateLabel","inputValue","concat","isValidNewOption","selectValue","selectOptions","some","getNewOptionData","label","value","__isNew__","useCreatable","_ref","_ref$allowCreateWhile","allowCreateWhileLoading","_ref$createOptionPosi","createOptionPosition","_ref$formatCreateLabe","_ref$isValidNewOption","_ref$getNewOptionData","onCreateOption","_ref$options","options","propsOptions","propsOnChange","onChange","restSelectProps","_restSelectProps$getO","getOptionValue$1","g","_restSelectProps$getO2","getOptionLabel$1","isLoading","isMulti","name","newOption","useMemo","useCallback","newValue","actionMeta","action","valueArray","Array","isArray","newOptionData","newActionMeta","activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","SettingsSidebar","React","constructor","super","_defineProperty","tab","e","_closest","preventDefault","this","updateTab","target","closest","classList","add","_this$buttonRefs$get","isKeyPressed","Constants","KeyCodes","UP","DOWN","visibleTabs","getVisibleTabs","currentIndex","findIndex","t","nextIndex","targetTab","targetButton","buttonRefs","get","current","focus","Map","initializeButtonRefs","tabs","pluginTabs","clear","forEach","set","componentDidUpdate","prevProps","_this$props$pluginTab","filter","display","renderTab","key","isActive","activeTab","icon","className","title","iconTitle","src","url","alt","newGroup","id","classNames","active","onClick","handleClick","bind","onKeyUp","handleKeyUp","uiName","role","tabIndex","isMobileView","render","_this$props$pluginTab2","tabList","map","pluginTabList","visiblePluginTabs","FormattedMessage","defaultMessage","connect","state","getIsMobileView","SettingItemMin","node","edit","isDisabled","updateSection","section","a11yFocus","editButtonComponent","collapsedEditButtonWhenDisabled","getEdit","EditIcon","describe","_pt","isRequired","SettingItem","areAllSectionsInactive","max","minRef","useRef","useDidUpdate","_minRef$current","propTypes","SettingItemMax","shiftEnter","ENTER","shiftKey","disableEnterSubmit","submit","tagName","parentElement","contains","settingList","handleSubmit","setting","componentDidMount","focusableElements","querySelectorAll","document","addEventListener","onKeyDown","componentWillUnmount","removeEventListener","clientError","serverError","extraInfo","hintClass","infoPosition","SaveButton","saveButtonText","saving","disabled","btnClass","saveButtonClassName","inputs","cancelButtonText","listContent","containerStyle","extraContentBeforeSettingList","isFullWidth","submitExtra","handleUpdateSection","JoinLeaveSection","currentTarget","setState","joinLeaveState","joinLeave","onUpdateSection","actions","userId","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","user_id","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","focusEditButton","_this$minRef$current","type","AdvancedSections","JOIN_LEAVE","checked","handleOnChange","isSaving","renderOnOffLabel","enableJoinLeaveMessage","getConfig","EnableJoinLeaveMessageByDefault","userPreference","adminMode","userPreferences","toString","bindActionCreators","PerformanceDebuggingSection","prevActiveRef","useEffect","performanceDebuggingEnabled","settings","PerformanceDebuggingSectionExpanded","PerformanceDebuggingSectionCollapsed","Object","assign","description","settingsEnabled","disableClientPlugins","disableTelemetry","disableTypingMessages","values","count","PERFORMANCE_DEBUGGING","setDisableClientPlugins","useState","setDisableTelemetry","setDisableTypingMessages","preferences","push","CATEGORY_PERFORMANCE_DEBUGGING","NAME_DISABLE_CLIENT_PLUGINS","NAME_DISABLE_TELEMETRY","NAME_DISABLE_TYPING_MESSAGES","mapDispatchToProps","getUserPreferences","getBool","isPerformanceDebuggingEnabled","SettingDesktopHeader","text","info","SettingMobileHeader","closeModal","collapseModal","intl","useIntl","formatMessage","AdvancedSettingsDisplay","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","sync_drafts","syncDrafts","UNREAD_SCROLL_POSITION","unreadScrollPosition","showDeactivateAccountModal","prevState","_objectSpread","async","user","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","defineMessages","default","mac","isMac","ctrlSendTitle","ctrlSendDesc","activeSection","updateSetting","unread_scroll_position","UNREAD_SCROLL_POSITION_START_FROM_LEFT","UNREAD_SCROLL_POSITION_START_FROM_NEWEST","renderUnreadScrollPositionLabel","SYNC_DRAFTS","getCtrlSendText","ctrlSendActive","renderCtrlEnterLabel","enabled","ctrlEnter","codeBlockCtrlEnter","ctrlSendSection","renderCtrlSendSection","formattingSection","renderFormattingSection","formattingSectionDivider","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","ConfirmModal","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","unreadScrollPositionSection","renderUnreadScrollPositionSection","unreadScrollPositionSectionDivider","syncDraftsSection","syncDraftsSectionDivider","syncedDraftsAreAllowed","renderSyncDraftsSection","getAdvancedSettingsCategory","makeGetCategory","getUserAdvancedSettingsCategory","makeGetUserCategory","config","EnableUserDeactivation","advancedSettingsCategory","getCurrentUser","getUnreadScrollPositionPreference","ColorChooser","htmlFor","ColorInput","newColor","_props$onChange","call","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarTeamBarBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","color","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","window","clipboardData","getData","JSON","parse","err","setThemeDefaults","stringify","stopPropagation","_this$textareaRef$cur","_this$textareaRef$cur2","textareaRef","setSelectionRange","_this$sidebarStylesHe","_this$sidebarStylesHe2","_this$sidebarStylesHe3","sidebarStylesHeaderRef","toggle","isAccordionOpen","setAttribute","toggleSection","sidebarStylesRef","_this$centerChannelSt","_this$centerChannelSt2","_this$centerChannelSt3","centerChannelStylesHeaderRef","centerChannelStylesRef","_this$linkAndButtonSt","_this$linkAndButtonSt2","_this$linkAndButtonSt3","linkAndButtonStylesHeaderRef","linkAndButtonStylesRef","selectTheme","execCommand","showCopySuccess","copySuccess","querySelector","style","setTimeout","createRef","image","ontransitionend","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","_element$themes","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","defaultValue","onCodeThemeChange","WithTooltip","width","group","handleColorChange","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","injectIntl","ThemeThumbnail","themeName","themeKey","height","viewBox","fill","xmlns","x","y","rx","cx","cy","r","PremadeThemeChooser","allowedThemes","premadeThemes","hasAllowedThemes","trim","k","THEMES","hasOwn","_premadeTheme$type","indexOf","premadeTheme","activeClass","replace","changeOpacity","toTitleCase","AllowedThemes","split","ThemeSetting","_this$props$setRequir","_this$props","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","_this$props$setRequir2","_this$props2","themeChanged","field","applyTheme","_this$props$setRequir3","_this$props3","selected","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","displayCustom","custom","premade","themeUI","allowCustomThemes","updateType","ExternalLink","href","location","allTeamsCheckbox","submitTheme","getCurrentTeamId","getTheme","getThemePreferences","getMyTeamsCount","openModal","UserSettingsTheme","ManageLanguage","modalBody","ESCAPE","openMenu","remove","selectedOption","locale","submitUser","patchUser","updateMe","res","Error","userLocale","locales","reactSelectContainer","handleContainerKeyDown","keys","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","interfaceLanguageLabelAria","input","ReactSelect","classNamePrefix","ariaLiveMessages","onFocus","focused","menuIsOpen","menuPortalTarget","body","styles","isClearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","link","msg","changeLanguage","getLanguages","ManageLanguages","ManageTimezones","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","timezone","updatedUser","timezoneLabel","selectedOptionValue","getBrowserTimezone","getTimezoneLabel","timezones","previousTimezone","timeOptions","timeObject","_previousTimezone","utc","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","manualTimezoneInput","changeTimezone","getCurrentTimezoneLabel","getDisplayStateFromProps","militaryTime","teammateNameDisplay","availabilityStatusOnPosts","channelDisplayMode","messageDisplay","colorizeUsernames","collapseDisplay","collapsedReplyThreads","linkPreviewDisplay","lastActiveDisplay","oneClickReactionsOnPosts","clickToReply","UserSettingsDisplay","show_last_active","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","availabilityStatusOnPostsPreference","AVAILABILITY_STATUS_ON_POSTS","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","colorizeUsernamesPreference","COLORIZE_USERNAMES","collapseDisplayPreference","COLLAPSE_DISPLAY","collapsedReplyThreadsPreference","COLLAPSED_REPLY_THREADS","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","oneClickReactionsOnPostsPreference","ONE_CLICK_REACTIONS_ENABLED","clickToReplyPreference","CLICK_TO_REPLY","trackChangeIfNecessary","updateState","newState","deepEqual","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","shouldAutoUpdateTimezone","autoUpdateTimezone","preference","oldValue","trackEvent","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleCollapseReplyThreadsRadio","handleLastActiveRadio","handleLinkPreviewRadio","createSection","_firstOption$radionBu","_secondOption$radionB","firstOption","secondOption","thirdOption","onSubmit","firstMessage","radionButtonText","moreColon","firstMessageMore","more","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","childOptionToShow","childOption","firstDisplay","secondDisplay","thirdSection","childOptionSection","thirdDisplay","childDisplay","collapseSection","defaultDisplay","defineMessage","linkPreviewSection","enableLinkPreviews","lastActiveSection","lastActiveTimeEnabled","submitLastActive","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","availabilityStatusOnPostsSection","timezoneSelection","userTimezone","Boolean","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","collapsedReplyThreadsAllowUserPreference","COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT","COLLAPSED_REPLY_THREADS_ON","COLLAPSED_REPLY_THREADS_OFF","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","localeName","getLanguageInfo","themeSection","oneClickReactionsOnPostsSection","enableThemeSelection","emojiPickerEnabled","_user$props","getTimezoneForUserProfile","getCurrentTimezoneFull","automaticTimezoneNotSet","generateCurrentTimezoneLabel","getUserCurrentTimezone","AllowCustomThemes","EnableLinkPreviews","EnableThemeSelection","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","EnableEmojiPicker","EnableLastActiveTime","getUser","isLanguageAvailable","DefaultClientLocale","AVAILABILITY_STATUS_ON_POSTS_DEFAULT","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLORIZE_USERNAMES_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","isCollapsedThreadsAllowed","CollapsedThreads","ALWAYS_ON","getCollapsedThreadsPreference","CLICK_TO_REPLY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","ONE_CLICK_REACTIONS_ENABLED_DEFAULT","SettingPicture","Component","_this$props$updateSec","removeSrc","setDefaultSrc","confirmButton","_this$props$onRemove","loadingPicture","onRemove","_this$props$onSetDefa","onSetDefault","_this$props$onSubmit","_this$props4","focusFirstElement","_this$props$onFileCha","_this$props5","onFileChange","selectInput","click","file","previewBlob","URL","createObjectURL","reader","FileReader","onload","orientation","FileUtils","result","orientationStyles","readAsArrayBuffer","imageContext","imageStyles","backgroundImage","defaultImageSrc","_title","imageElement","handler","handleRemoveSrc","handleSetDefaultSrc","_this$settingList$cur","handleFileSelected","setPicture","revokeObjectURL","img","renderImg","imgRender","buttonRender","disableSaveButtonFocus","submitActive","accept","ACCEPT_STATIC_IMAGE","handleFileChange","handleInputFile","localizeMessage","handleSave","LoadingWrapper","loading","helpText","FormError","errors","handleCancel","holders","usernameReserved","usernameGroupNameUniqueness","usernameRestrictions","validEmail","validUrl","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","selectStyles","valueContainer","baseStyles","minHeight","flexWrap","whiteSpace","multiValue","margin","control","multiValueLabel","padding","UserSettingsGeneralTab","PureComponent","email","resendStatus","showSpinner","sendVerificationEmail","handleEmailResend","usernameError","Utils","errObj","ValidationErrors","RESERVED_NAME","min","MIN_USERNAME_LENGTH","MAX_USERNAME_LENGTH","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","_ref2","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","errorBarMode","LogErrorBarMode","Always","server_error_id","setDefaultProfileImage","pictureFile","AcceptedProfileImageTypes","includes","size","maxFileSize","uploadProfileImage","_ref3","setupInitialState","_this$state$customAtt","attributeID","attributeField","customProfileAttributeFields","find","attributeValue","customAttributeValues","attrs","value_type","validURL","validHttpUrl","validLink","endsWith","slice","saveCustomProfileAttribute","_ref4","files","fieldID","attributeValues","substring","LDAP_SERVICE","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","SAML_SERVICE","samlFirstNameAttributeSet","samlLastNameAttributeSet","OAUTH_SERVICES","autoFocus","updateFirstName","maxLength","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifClick","notifLink","notify","submitName","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","attributeSections","attribute","_this$props$user$cust","sectionName","getDisplayValue","attribOptions","o","_attribute$attrs","_attribute$attrs2","ldap","saml","attributeLabel","opts","inputId","isSearchable","placeholder","components","IndicatorSeparator","v","updateSelectAttribute","inputType","updateAttribute","MAX_CUSTOM_ATTRIBUTE_LENGTH","submitAttribute","custom_profile_attributes","_this$props$user$cust2","FormattedList","attrib","setDefault","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","date","FormattedDate","Date","day","month","year","enableCustomProfileAttributes","getCustomProfileAttributeValues","originalEmail","createEmailSection","emailVerificationEnabled","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","OPENID_SERVICE","nameSection","createNameSection","nicknameSection","createNicknameSection","usernameSection","createUsernameSection","positionSection","createPositionSection","emailSection","customAttributeSection","createCustomAttributeSection","pictureSection","createPictureSection","getCustomProfileAttributes","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","getFeatureFlagValue","NotificationPermissionDeniedSectionNotice","open","SectionNotice","tertiaryButton","NotificationPermissionNeverGrantedSectionNotice","permission","requestNotificationPermission","onCtaButtonClick","primaryButton","NotificationPermissionUnsupportedSectionNotice","NotificationPermissionDesktopDeniedSectionNotice","checkedPermissionDenied","setCheckedPermissionDenied","handleInstructionButtonClick","requestDesktopNotificationPermission","NotificationPermissionDenied","NotificationPermissionSectionNotice","isNotificationSupported","isNotificationAPISupported","notificationPermission","setNotificationPermission","getNotificationPermission","desktopNotificationPermission","useDesktopAppNotificationPermission","NotificationPermissionNeverGranted","NotificationPermissionNeverGrantedNotice","NotificationPermissionDeniedNotice","NotificationPermissionTitleTag","Tag","variant","DesktopAndMobileNotificationSettings","setParentState","isCollapsedThreadsEnabled","desktopActivity","sendPushNotifications","pushActivity","pushStatus","desktopThreads","pushThreads","desktopAndMobileSettingsDifferent","editButtonRef","previousActiveRef","_editButtonRef$curren","handleChangeForSendDesktopNotificationsRadio","event","handleChangeForDesktopThreadsCheckbox","NotificationLevels","ALL","MENTION","handleChangeForDifferentMobileNotificationsCheckbox","handleChangeForSendMobileNotificationsSelect","handleChangeForMobileThreadsCheckbox","handleChangeForTriggerMobileNotificationsSelect","maximizedSettingsInputs","maximizedSettingInputs","sendDesktopNotificationsSection","optionsOfSendNotifications","optionOfSendNotifications","NONE","shouldShowDesktopThreadsSection","desktopThreadNotificationSection","Fragment","differentMobileNotificationsSection","shouldShowSendMobileNotificationsSection","sendMobileNotificationsSection","NoIndicatorSeparatorComponent","getValueOfSendMobileNotificationForSelect","shouldShowMobileThreadsSection","threadNotificationSection","shouldShowTriggerMobileNotificationsSection","triggerMobileNotificationsSection","optionsOfSendMobileNotificationsWhenSelect","getValueOfSendMobileNotificationWhenSelect","disabledPushNotificationsSection","getCollapsedText","UserSettingsNotificationSections","DESKTOP_AND_MOBILE","ONLINE","AWAY","OFFLINE","memo","DesktopNotificationSoundsSettings","desktopSound","desktopNotificationSound","isCallsRingingEnabled","callsDesktopSound","callsNotificationSound","handleChangeForMessageNotificationSoundCheckbox","stopTryNotificationRing","handleChangeForIncomginCallSoundCheckbox","handleChangeForMessageNotificationSoundSelect","tryNotificationSound","handleChangeForIncomingCallSoundSelect","tryNotificationRing","isMessageNotificationSoundChecked","messageSoundSection","optionsOfMessageNotificationSoundsSelect","getValueOfNotificationSoundsSelect","isIncomingCallSoundChecked","callSoundSection","optionsOfIncomingCallSoundsSelect","getValueOfIncomingCallSoundsSelect","DESKTOP_NOTIFICATION_SOUND","desktopNotificationSoundIsSelected","notificationSoundKeys","callNotificationSoundIsSelected","callNotificationSoundKeys","hasCallsSound","hasDesktopSound","callsSound","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithoutEmailBatching","EmailNotificationSetting","enableEmail","getAttribute","newInterval","emailInterval","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","sendEmailNotifications","emailOptions","emailInfo","emailTitle","handleChange","threadsNotificationSelection","threads","handleThreadsOnChange","getDerivedStateFromProps","nextProps","_this$editButtonRef$c","renderMaxSettingView","renderMinSettingView","getPreference","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","LocalizedPlaceholderTextarea","resize","rows","onMessageChanged","sectionNoticeContainerStyle","marginTop","SendTestNotificationNotice","buttonState","setButtonState","isSending","timeout","externalLink","useExternalLink","onGoToNotificationDocumentation","onSendTestNotificationClick","isShowingSending","sendTestNotification","clearTimeout","setResult","status","console","leadingIcon","secondaryButton","trailingIcon","WHITE_SPACE_REGEX","COMMA_REGEX","getDefaultStateFromProps","desktop","emailThreads","sound","comments","_props$user$notify_pr","_props$user$notify_pr2","notify_props","desktop_threads","push_threads","email_threads","desktop_sound","calls_desktop_sound","desktop_notification_sound","calls_notification_sound","push_status","auto_responder_active","auto_responder_message","validNotificationLevels","areDesktopAndMobileSettingsDifferent","usernameKey","firstNameKey","channelKey","isCustomKeysWithNotificationInputChecked","customKeysWithNotification","customKeysWithHighlight","_props$user$notify_pr3","_props$user$notify_pr4","_props$user$notify_pr5","_props$user$notify_pr6","_props$user$notify_pr7","_props$user$notify_pr8","mention_keys","mentionKeys","mentionKey","highlight_keys","highlightKey","channel","customKeysWithNotificationInputValue","customKeysWithHighlightInputValue","notifyCommentsLevel","Input","NotificationsTab","_this$props$user$noti","join","highlightKeys","trackFeatureEvent","TrackPassiveKeywordsFeature","TrackPassiveKeywordsEvent","payloadUser","response","formattedValue","COMMA","TAB","_this$state$customKey","_this$state$customKey2","_this$state$customKey3","_this$state$customKey4","unsavedCustomKeyWithNotification","updateCustomKeysWithNotificationWithInputValue","_this$state$customKey5","_this$state$customKey6","_this$state$customKey7","_this$state$customKey8","_newValue$trim$replac","_newValue$trim","unsavedCustomKeyWithHighlight","updateCustomKeysWithHighlightWithInputValue","isSectionExpanded","KEYWORDS_MENTIONS","expandedSection","handleChangeForFirstNameKeyCheckbox","handleChangeForUsernameKeyCheckbox","handleChangeForChannelKeyCheckbox","handleChangeForCustomKeysWithNotificationCheckbox","CreatableReactSelect","customKeywordsSelectorStyles","DropdownIndicator","Menu","MenuList","handleChangeForCustomKeysWithNotificationInput","onInputChange","handleChangeForCustomKeysWithNotificationInputValue","onBlur","handleBlurForCustomKeysWithNotificationInput","handleOnKeydownForCustomKeysWithNotificationInput","selectedMentionKeys","customKeysWithNotificationStringArray","collapsedDescription","KEYWORDS_HIGHLIGHT","handleChangeForCustomKeysWithHighlightInput","handleChangeForCustomKeysWithHighlightInputValue","handleBlurForCustomKeysWithHighlightInput","handleOnKeydownForCustomKeysWithHighlightInput","isEnterpriseOrCloudOrSKUStarterFree","isEnterpriseReady","RestrictedIndicator","blocked","feature","MattermostFeatures","HIGHLIGHT_WITHOUT_NOTIFICATION","minimumPlanRequiredForFeature","LicenseSkus","Professional","tooltipTitle","tooltipMessageBlocked","titleAdminPreTrial","messageAdminPreTrial","titleAdminPostTrial","messageAdminPostTrial","titleEndUser","messageEndUser","br","ctaExtraContent","clickCallback","handleCloseSettingsModal","REPLY_NOTIFCATIONS","commentsActive","handleNotifyCommentsRadio","AUTO_RESPONDER","setStateValue","keywordsWithNotificationSection","createKeywordsWithNotificationSection","keywordsWithHighlightSection","createKeywordsWithHighlightSection","commentsSection","createCommentsSection","autoResponderSection","createAutoResponderSection","chunks","LightbulbOutlineIcon","EMAIL","handleEmailRadio","enableAutoResponder","container","baseStyle","marginBlockStart","backgroundColor","border","borderColor","background","indicatorSeparator","indicatorSeperatorStyles","multiValueRemove","multiValueRemoveStyles","cursor","mapStateToProps","SendPushNotifications","ExperimentalEnableAutomaticReplies","license","subscriptionProduct","getSubscriptionProduct","BuildEnterpriseReady","isCollapsedThreadsEnabledForUser","isCallsEnabled","isCallsRingingEnabledOnServer","UserSettingsNotifications","buttonText","getPluginPreferenceKey","pluginId","markdownOptions","mentionHighlight","RadioOption","selectedValue","onSelected","Markdown","RadioInput","informChange","useSelector","setSelectedValue","PluginSetting","useDispatch","preferenceMin","toUpdate","minDescribe","_setting$options$find","onSettingChanged","_section$onSubmit","CustomComponent","component","inputEl","PluggableErrorBoundary","PluginTab","headerText","pluginName","PluginAction","sections","sectionEl","AccessHistoryModal","getUserAudits","onHide","userAudits","setShow","onCloseClick","content","LoadingScreen","AuditTable","audits","showIp","showSession","Modal","dialogClassName","onExited","bsSize","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","DeviceIcon","devicePicture","formatAsString","deviceTitle","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","create_at","getMonthLong","time","FormattedTime","hour","minute","os","browser","ActivityLog","submitRevoke","session","device_id","devicePlatform","appleIcon","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","androidIcon","PUSH_NOTIFY_ANDROID_REACT_NATIVE","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","windowsIcon","linuxIcon","ActivityLogModal","altId","_e$target","modalContent","revokeSession","getSessions","onShow","activityList","sessions","reduce","array","getUserSessions","getCurrentLocale","MfaSection","getHistory","mfaEnforced","mfaActive","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","Keyboard","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","linkTokens","DeveloperLinks","PERSONAL_ACCESS_TOKENS","linkAPI","onKeyPress","saveTokenKeyPress","savingMessage","stopCreatingToken","WarningIcon","additionalClassName","startCreatingToken","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","isValidPassword","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","getMe","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGitLab","Link","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLdap","enableSaml","allowedToSwitchToEmail","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ToggleModalButton","modalId","dialogType","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","limits","LimitVisibleGMsDMs","limit","CATEGORY_SIDEBAR_SETTINGS","LIMIT_VISIBLE_DMS_GMS","dmGmLimit","getVisibleDmGmLimit","ShowUnreadsCategory","SHOW_UNREAD_SECTION","showUnreadsCategory","shouldShowUnreadsCategory","UserSettingsSidebar","UserSettings","GeneralTab","DisplayTab","SidebarTab","AdvancedTab","pluginSettings","SmartLoader","children","onLoaded","timeoutFinished","setTimeoutFinished","UserSettingsModal","_props$activeTab","cmdOrCtrlPressed","A","handleHide","requireConfirm","active_tab","isContentProductSettings","active_section","focusOriginElement","focusElement","ReactDOM","modalBodyRef","enforceFocus","customConfirmAction","afterConfirm","handleConfirm","handleCollapse","skipConfirm","useURL","isValidUrl","startsWith","userID","scrollTop","modalTitle","userDisplayName","getDisplayName","headerTitle","GenericModal","handleHidden","ariaLabel","compassDesign","bodyPadding","modalHeaderText","modalLocation","delayFocusTrap","setLoadingFinished","LoadingSpinner","getUserSettingsTabs","getProfileSettingsTab","getPluginsSettingsTab","handleCancelConfirmation"],"sourceRoot":""}