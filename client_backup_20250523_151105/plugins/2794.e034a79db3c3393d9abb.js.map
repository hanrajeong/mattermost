{"version":3,"file":"2794.e034a79db3c3393d9abb.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/drafts/draft_list/empty_draft_list_illustration.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_list/empty_draft_list.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/action.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/schedule_post_actions/delete_scheduled_post_modal.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/send_draft_modal.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/schedule_post_actions/scheduled_post_actions.tsx","webpack://mattermost-webapp/./src/components/drafts/placeholder_scheduled_post_title/placeholder_scheduled_posts_title.tsx","webpack://mattermost-webapp/./src/components/edit_scheduled_post/edit_post_footer.tsx","webpack://mattermost-webapp/./src/components/edit_scheduled_post/edit_post.tsx","webpack://mattermost-webapp/./src/components/edit_scheduled_post/index.ts","webpack://mattermost-webapp/./src/components/drafts/draft_actions/delete_draft_modal.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/draft_actions.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/index.ts","webpack://mattermost-webapp/./src/components/drafts/draft_title/draft_title.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_title/index.ts","webpack://mattermost-webapp/./src/components/drafts/panel/panel.tsx","webpack://mattermost-webapp/./src/components/drafts/panel/panel_body.tsx","webpack://mattermost-webapp/./src/components/drafts/utils.ts","webpack://mattermost-webapp/./src/components/drafts/draft_row.tsx","webpack://mattermost-webapp/./src/components/common/hooks/use_scroll_on_render.ts","webpack://mattermost-webapp/./src/components/drafts/draft_list/virtualized_draft_list.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_list/index.tsx","webpack://mattermost-webapp/./src/components/drafts/drafts_and_schedule_posts_page_header.tsx","webpack://mattermost-webapp/../node_modules/@mui/base/Badge/badgeClasses.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/omitEventHandlers.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/useSlotProps.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/resolveComponentProps.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/mergeSlotProps.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/extractEventHandlers.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/appendOwnerState.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/isHostComponent.js","webpack://mattermost-webapp/../node_modules/@mui/base/utils/ClassNameConfigurator.js","webpack://mattermost-webapp/../node_modules/@mui/base/Badge/Badge.js","webpack://mattermost-webapp/../node_modules/@mui/base/useBadge/useBadge.js","webpack://mattermost-webapp/../node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js","webpack://mattermost-webapp/./src/components/drafts/scheduled_post_list/empty_scheduled_post_list_illustration.tsx","webpack://mattermost-webapp/./src/components/drafts/scheduled_post_list/empty_scheduled_post_list.tsx","webpack://mattermost-webapp/./src/components/drafts/scheduled_post_list/non_virtualized_scheduled_post_list.tsx","webpack://mattermost-webapp/./src/components/drafts/scheduled_post_list/scheduled_post_error.tsx","webpack://mattermost-webapp/./src/components/drafts/scheduled_post_list/index.tsx","webpack://mattermost-webapp/./src/components/tabs/tab/index.tsx","webpack://mattermost-webapp/./src/components/tabs/tabs/index.tsx","webpack://mattermost-webapp/./src/components/drafts/drafts_and_schedule_posts_tabs.tsx","webpack://mattermost-webapp/./src/components/drafts/index.tsx","webpack://mattermost-webapp/./src/components/widgets/header/header.tsx","webpack://mattermost-webapp/./src/utils/http_utils.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default (\n    <svg\n        width='142'\n        height='80'\n        viewBox='0 0 142 80'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g clipPath='url(#clip0_4212_90546)'>\n            <rect\n                x='15.0059'\n                y='15'\n                width='112'\n                height='44'\n                rx='3'\n                fill='var(--button-bg)'\n                fillOpacity='0.12'\n            />\n            <path\n                d='M28.0059 34L28.0059 52L39.0059 52'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M28.0059 31L28.0059 26'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M28.0059 23L28.0059 21'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M54.6108 67.5638L41.0059 81V12C41.0059 10.8954 41.9013 10 43.0059 10H109.006C110.11 10 111.006 10.8954 111.006 12V64.9868C111.006 66.0914 110.11 66.9868 109.006 66.9868H56.0162C55.4901 66.9868 54.9851 67.1941 54.6108 67.5638Z'\n                fill='#28427B'\n            />\n            <path\n                d='M49.6108 62.5638L36.0059 76V7C36.0059 5.89543 36.9013 5 38.0059 5H104.006C105.11 5 106.006 5.89543 106.006 7V59.9868C106.006 61.0914 105.11 61.9868 104.006 61.9868H51.0162C50.4901 61.9868 49.9851 62.1941 49.6108 62.5638Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M49.2595 62.2081L36.5059 74.8035V7C36.5059 6.17157 37.1774 5.5 38.0059 5.5H104.006C104.834 5.5 105.506 6.17157 105.506 7V59.9868C105.506 60.8153 104.834 61.4868 104.006 61.4868H51.0162C50.3585 61.4868 49.7274 61.746 49.2595 62.2081Z'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n            />\n            <circle\n                cx='54.0059'\n                cy='24'\n                r='9'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M69.0059 20H85.0059'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46.0059 44H96.0059'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46.0059 51H68.0059'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M69.0059 26H94.0059'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46.0059 38H63.0059'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M67.0059 38H85.0059'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <rect\n                x='115.199'\n                y='45.0278'\n                width='12.4524'\n                height='6.22619'\n                transform='rotate(-135 115.199 45.0278)'\n                fill='var(--center-channel-bg)'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n            />\n            <path\n                d='M117.952 42.2764L109.147 33.4712L113.787 28.8319C114.568 28.0508 115.834 28.0508 116.615 28.8319L122.592 34.8086C123.373 35.5897 123.373 36.856 122.592 37.637L117.952 42.2764Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n            />\n            <path\n                d='M89.3356 70.8933L80.5305 62.0882L106.946 35.6727L115.751 44.4778L89.3356 70.8933Z'\n                fill='var(--center-channel-bg)'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M73.1016 78.8725L80.5309 62.0876L89.3361 70.8928L73.1016 78.8725Z'\n                fill='var(--center-channel-bg)'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinejoin='round'\n            />\n            <path\n                d='M78.3289 76.3964L75.4492 77.9756C74.5896 78.447 73.6355 77.5284 74.0739 76.6516L75.5773 73.6448L78.3289 76.3964Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.8'\n            />\n            <line\n                x1='82.8065'\n                y1='64.4976'\n                x2='109.377'\n                y2='37.9268'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n            />\n            <line\n                x1='86.6825'\n                y1='68.3725'\n                x2='113.253'\n                y2='41.8017'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0_4212_90546'>\n                <rect\n                    width='142'\n                    height='80'\n                    fill='var(--center-channel-bg)'\n                    transform='translate(0.00585938)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport NoResultsIndicator from 'components/no_results_indicator/no_results_indicator';\n\nimport EmptyDraftListIllustration from './empty_draft_list_illustration';\n\nexport default function EmptyDraftList() {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div className='DraftList Drafts__main'>\n            <NoResultsIndicator\n                expanded={true}\n                iconGraphic={EmptyDraftListIllustration}\n                title={formatMessage({\n                    id: 'drafts.empty.title',\n                    defaultMessage: 'No drafts at the moment',\n                })}\n                subtitle={formatMessage({\n                    id: 'drafts.empty.subtitle',\n                    defaultMessage: 'Any messages you’ve started will show here.',\n                })}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport './action.scss';\n\ntype Props = {\n    icon: string;\n    id: string;\n    name: string;\n    onClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    tooltipText: React.ReactElement | string;\n};\n\nfunction Action({\n    name,\n    icon,\n    onClick,\n    id,\n    tooltipText,\n}: Props) {\n    return (\n        <div className='DraftAction'>\n            <WithTooltip\n                title={tooltipText}\n            >\n                <button\n                    className={classNames(\n                        'DraftAction__button',\n                        {'DraftAction__button--delete': name === 'delete'},\n                    )}\n                    id={`draft_${icon}_${id}`}\n                    onClick={onClick}\n                    aria-label={name}\n                >\n                    <i\n                        className={classNames(\n                            'icon',\n                            icon,\n                        )}\n                    />\n                </button>\n            </WithTooltip>\n        </div>\n    );\n}\n\nexport default Action;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport noop from 'lodash/noop';\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\ntype Props = {\n    channelDisplayName?: string;\n    onConfirm: () => Promise<{error?: string}>;\n    onExited: () => void;\n}\n\nexport default function DeleteScheduledPostModal({\n    channelDisplayName,\n    onExited,\n    onConfirm,\n}: Props) {\n    const {formatMessage} = useIntl();\n    const [errorMessage, setErrorMessage] = useState<string>();\n\n    const title = formatMessage({\n        id: 'scheduled_post.delete_modal.title',\n        defaultMessage: 'Delete scheduled post',\n    });\n\n    const confirmButtonText = formatMessage({\n        id: 'drafts.confirm.delete.button',\n        defaultMessage: 'Yes, delete',\n    });\n\n    const handleOnConfirm = useCallback(async () => {\n        const response = await onConfirm();\n        if (response.error) {\n            setErrorMessage(response.error);\n        } else {\n            onExited();\n        }\n    }, [onConfirm, onExited]);\n\n    return (\n        <GenericModal\n            className='delete_scheduled_post_modal'\n            confirmButtonText={confirmButtonText}\n            handleCancel={noop}\n            handleConfirm={handleOnConfirm}\n            modalHeaderText={title}\n            onExited={onExited}\n            compassDesign={true}\n            isDeleteModal={true}\n            autoFocusConfirmButton={true}\n            autoCloseOnConfirmButton={false}\n            errorText={errorMessage}\n        >\n            {\n                channelDisplayName &&\n                <FormattedMessage\n                    id={'scheduled_post.delete_modal.body'}\n                    defaultMessage={'Are you sure you want to delete this scheduled post to <strong>{displayName}</strong>?'}\n                    values={{\n                        strong: (chunk: string) => <strong>{chunk}</strong>,\n                        displayName: channelDisplayName,\n                    }}\n                />\n            }\n\n            {\n                !channelDisplayName &&\n                <FormattedMessage\n                    id={'scheduled_post.delete_modal.body_no_channel'}\n                    defaultMessage={'Are you sure you want to delete this scheduled post?'}\n                />\n            }\n        </GenericModal>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\ntype Props = {\n    displayName: string;\n    onConfirm: () => void;\n    onExited: () => void;\n}\n\nfunction SendDraftModal({\n    displayName,\n    onConfirm,\n    onExited,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const title = formatMessage({\n        id: 'drafts.confirm.send.title',\n        defaultMessage: 'Send message now',\n    });\n\n    const confirmButtonText = formatMessage({\n        id: 'drafts.confirm.send.button',\n        defaultMessage: 'Yes, send now',\n    });\n\n    const message = (\n        <FormattedMessage\n            id={'drafts.confirm.send.text'}\n            defaultMessage={'Are you sure you want to send this message to <strong>{displayName}</strong>?'}\n            values={{\n                strong: (chunk: string) => <strong>{chunk}</strong>,\n                displayName,\n            }}\n        />\n    );\n\n    return (\n        <GenericModal\n            confirmButtonText={confirmButtonText}\n            handleCancel={() => {}}\n            handleConfirm={onConfirm}\n            modalHeaderText={title}\n            onExited={onExited}\n            compassDesign={true}\n        >\n            {message}\n        </GenericModal>\n    );\n}\n\nexport default SendDraftModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport moment from 'moment';\nimport React, {memo, useCallback, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\n\nimport {fetchMissingChannels} from 'mattermost-redux/actions/channels';\nimport {isDeactivatedDirectChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getCurrentTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ScheduledPostCustomTimeModal\n    from 'components/advanced_text_editor/send_button/scheduled_post_custom_time_modal/scheduled_post_custom_time_modal';\nimport Action from 'components/drafts/draft_actions/action';\nimport DeleteScheduledPostModal\n    from 'components/drafts/draft_actions/schedule_post_actions/delete_scheduled_post_modal';\nimport SendDraftModal from 'components/drafts/draft_actions/send_draft_modal';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport './style.scss';\nimport type {GlobalState} from 'types/store';\n\nconst deleteTooltipText = (\n    <FormattedMessage\n        id='scheduled_post.action.delete'\n        defaultMessage='Delete scheduled post'\n    />\n);\n\nconst editTooltipText = (\n    <FormattedMessage\n        id='scheduled_post.action.edit'\n        defaultMessage='Edit scheduled post'\n    />\n);\n\nconst rescheduleTooltipText = (\n    <FormattedMessage\n        id='scheduled_post.action.reschedule'\n        defaultMessage='Reschedule post'\n    />\n);\n\nconst sendNowTooltipText = (\n    <FormattedMessage\n        id='scheduled_post.action.send_now'\n        defaultMessage='Send now'\n    />\n);\n\nconst copyTextTooltipText = (\n    <FormattedMessage\n        id='scheduled_post.action.copy_text'\n        defaultMessage='Copy text'\n    />\n);\n\ntype Props = {\n    scheduledPost: ScheduledPost;\n    channel?: Channel;\n    onReschedule: (timestamp: number) => Promise<{error?: string}>;\n    onDelete: (scheduledPostId: string) => Promise<{error?: string}>;\n    onSend: (scheduledPostId: string) => void;\n    onEdit: () => void;\n    onCopyText: () => void;\n}\n\nfunction ScheduledPostActions({scheduledPost, channel, onReschedule, onDelete, onSend, onEdit, onCopyText}: Props) {\n    const dispatch = useDispatch();\n    const userTimezone = useSelector(getCurrentTimezone);\n    const myChannelsMemberships = useSelector((state: GlobalState) => getMyChannelMemberships(state));\n    const isAdmin = useSelector((state: GlobalState) => isCurrentUserSystemAdmin(state));\n\n    useEffect(() => {\n        // this ensures the DM is loaded in redux store and is available\n        // later when we check if the DM is with a deactivated user.\n        if (channel?.type === Constants.DM_CHANNEL) {\n            // fetchMissingChannels uses DataLoader which de-duplicates all requested data,\n            // so even if we have multiple scheduled  posts in a DM,\n            // the data loader ensured we fetch that DM only once.\n            dispatch(fetchMissingChannels([channel.id]));\n        }\n    }, [channel, dispatch]);\n\n    const handleReschedulePost = useCallback(() => {\n        const initialTime = moment.tz(scheduledPost.scheduled_at, userTimezone);\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.SCHEDULED_POST_CUSTOM_TIME_MODAL,\n            dialogType: ScheduledPostCustomTimeModal,\n            dialogProps: {\n                channelId: scheduledPost.channel_id,\n                onConfirm: onReschedule,\n                initialTime,\n            },\n        }));\n    }, [dispatch, onReschedule, scheduledPost.channel_id, scheduledPost.scheduled_at, userTimezone]);\n\n    const handleDelete = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.DELETE_DRAFT,\n            dialogType: DeleteScheduledPostModal,\n            dialogProps: {\n                channelDisplayName: channel?.display_name,\n                onConfirm: () => onDelete(scheduledPost.id),\n            },\n        }));\n    }, [channel, dispatch, onDelete, scheduledPost.id]);\n\n    const handleSend = useCallback(() => {\n        if (!channel) {\n            return;\n        }\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.SEND_DRAFT,\n            dialogType: SendDraftModal,\n            dialogProps: {\n                displayName: channel.display_name,\n                onConfirm: () => onSend(scheduledPost.id),\n            },\n        }));\n    }, [channel, dispatch, onSend, scheduledPost.id]);\n\n    const userChannelMember = Boolean(channel && myChannelsMemberships[channel.id]);\n    const isChannelArchived = Boolean(channel?.delete_at);\n\n    const showEditOption = !scheduledPost.error_code && userChannelMember && !isChannelArchived;\n    const isDeactivatedDM = useSelector((state: GlobalState) => isDeactivatedDirectChannel(state, scheduledPost.channel_id));\n    const showSendNowOption = (!scheduledPost.error_code || scheduledPost.error_code === 'unknown' || scheduledPost.error_code === 'unable_to_send') && channel && !isChannelArchived && !isDeactivatedDM && userChannelMember;\n    const showRescheduleOption = (!scheduledPost.error_code || scheduledPost.error_code === 'unknown' || scheduledPost.error_code === 'unable_to_send') && userChannelMember && !isChannelArchived;\n\n    return (\n        <div className='ScheduledPostActions'>\n            <Action\n                icon='icon-trash-can-outline'\n                id='delete'\n                name='delete'\n                tooltipText={deleteTooltipText}\n                onClick={handleDelete}\n            />\n\n            {\n                (isAdmin || showEditOption) &&\n                <Action\n                    icon='icon-pencil-outline'\n                    id='edit'\n                    name='edit'\n                    tooltipText={editTooltipText}\n                    onClick={onEdit}\n\n                />\n            }\n\n            <Action\n                icon='icon-content-copy'\n                id='copy_text'\n                name='copy_text'\n                tooltipText={copyTextTooltipText}\n                onClick={onCopyText}\n            />\n\n            {\n                (isAdmin || showRescheduleOption) &&\n                <Action\n                    icon='icon-clock-send-outline'\n                    id='reschedule'\n                    name='reschedule'\n                    tooltipText={rescheduleTooltipText}\n                    onClick={handleReschedulePost}\n                />\n            }\n\n            {\n                (isAdmin || showSendNowOption) &&\n                <Action\n                    icon='icon-send-outline'\n                    id='sendNow'\n                    name='sendNow'\n                    tooltipText={sendNowTooltipText}\n                    onClick={handleSend}\n                />\n            }\n        </div>\n    );\n}\n\nexport default memo(ScheduledPostActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport WithTooltip from 'components/with_tooltip';\n\ntype Props = {\n    type: 'channel' | 'thread';\n}\n\nexport default function PlaceholderScheduledPostsTitle({type}: Props) {\n    let title;\n\n    const icon = (\n        <i\n            className='icon icon-pencil-outline'\n        />\n    );\n\n    const tooltipText = (\n        <FormattedMessage\n            id='scheduled_posts.row_title_thread.placeholder_tooltip'\n            defaultMessage={'The channel either doesn’t exist or you do not have access to it.'}\n        />\n    );\n\n    if (type === 'thread') {\n        title = (\n            <FormattedMessage\n                id='scheduled_posts.row_title_thread.placeholder'\n                defaultMessage={'Thread to: {icon} No Destination'}\n                values={{\n                    icon,\n                }}\n            />\n        );\n    } else {\n        title = (\n            <FormattedMessage\n                id='scheduled_posts.row_title_channel.placeholder'\n                defaultMessage={'In: {icon} No Destination'}\n                values={{\n                    icon,\n                }}\n            />\n        );\n    }\n\n    return (\n        <WithTooltip\n            title={tooltipText}\n        >\n            <div>\n                {title}\n            </div>\n        </WithTooltip>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {isMac} from 'utils/user_agent';\n\nimport type {GlobalState} from 'types/store';\n\ntype Props = {\n    onSave: () => void;\n    onCancel: () => void;\n}\n\nconst EditPostFooter = ({onSave, onCancel}: Props) => {\n    const ctrlSend = useSelector((state: GlobalState) => getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'));\n    const ctrlSendKey = isMac() ? '⌘+' : 'CTRL+';\n\n    return (\n        <div className='post-body__footer'>\n            <button\n                onClick={onSave}\n                className='save'\n            >\n                <FormattedMessage\n                    id='edit_post.action_buttons.save'\n                    defaultMessage='Save'\n                />\n            </button>\n            <button\n                onClick={onCancel}\n                className='cancel'\n            >\n                <FormattedMessage\n                    id='edit_post.action_buttons.cancel'\n                    defaultMessage='Cancel'\n                />\n            </button>\n            <FormattedMessage\n                id='edit_post.helper_text'\n                defaultMessage='<strong>{key}ENTER</strong> to Save, <strong>ESC</strong> to Cancel'\n                values={{\n                    key: ctrlSend ? ctrlSendKey : '',\n                    strong: (x: string) => <strong>{x}</strong>,\n                }}\n            />\n        </div>\n    );\n};\n\nexport default memo(EditPostFooter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {EmoticonPlusOutlineIcon, InformationOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Emoji} from '@mattermost/types/emojis';\nimport type {Post} from '@mattermost/types/posts';\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\nimport {scheduledPostToPost} from '@mattermost/types/schedule_post';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getEmojiName} from 'mattermost-redux/utils/emoji_utils';\n\nimport {openModal} from 'actions/views/modals';\nimport {getConnectionId} from 'selectors/general';\n\nimport DeletePostModal from 'components/delete_post_modal';\nimport DeleteScheduledPostModal from 'components/drafts/draft_actions/schedule_post_actions/delete_scheduled_post_modal';\nimport useEmojiPicker from 'components/emoji_picker/use_emoji_picker';\nimport Textbox from 'components/textbox';\nimport type {TextboxClass, TextboxElement} from 'components/textbox';\n\nimport {AppEvents, Constants, ModalIdentifiers, StoragePrefixes} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport type {ApplyMarkdownOptions} from 'utils/markdown/apply_markdown';\nimport {applyMarkdown} from 'utils/markdown/apply_markdown';\nimport {\n    formatGithubCodePaste,\n    formatMarkdownMessage,\n    getHtmlTable,\n    hasHtmlLink,\n    isGitHubCodeBlock,\n} from 'utils/paste';\nimport {postMessageOnKeyPress, splitMessageBasedOnCaretPosition} from 'utils/post_utils';\nimport {allAtMentions} from 'utils/text_formatting';\nimport * as Utils from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\nimport type {PostDraft} from 'types/store/draft';\n\nimport EditPostFooter from './edit_post_footer';\n\nimport './style.scss';\n\nexport type Actions = {\n    addMessageIntoHistory: (message: string) => void;\n    editPost: (input: Partial<Post>) => Promise<Post>;\n    setDraft: (name: string, value: PostDraft | null) => void;\n    unsetEditingPost: () => void;\n    scrollPostListToBottom: () => void;\n    runMessageWillBeUpdatedHooks: (newPost: Partial<Post>, oldPost: Post) => Promise<ActionResult>;\n    updateScheduledPost: (scheduledPost: ScheduledPost, connectionId: string) => Promise<ActionResult>;\n}\n\nexport type Props = {\n    canEditPost?: boolean;\n    canDeletePost?: boolean;\n    readOnlyChannel?: boolean;\n    teamId: string;\n    channelId: string;\n    codeBlockOnCtrlEnter: boolean;\n    ctrlSend: boolean;\n    draft: PostDraft;\n    config: {\n        EnableEmojiPicker?: string;\n        EnableGifPicker?: string;\n    };\n    maxPostSize: number;\n    useChannelMentions: boolean;\n    editingPost: {\n        post: Post | null;\n        postId?: string;\n        refocusId?: string;\n        title?: string;\n        isRHS?: boolean;\n    };\n    isRHSOpened: boolean;\n    isEditHistoryShowing: boolean;\n    actions: Actions;\n    scheduledPost?: ScheduledPost;\n    afterSave?: () => void;\n    onCancel?: () => void;\n    onDeleteScheduledPost?: () => Promise<{error?: string}>;\n};\n\nexport type State = {\n    editText: string;\n    selectionRange: {start: number; end: number};\n    postError: React.ReactNode;\n    errorClass: string | null;\n    showEmojiPicker: boolean;\n    renderScrollbar: boolean;\n    scrollbarWidth: number;\n    prevShowState: boolean;\n};\n\nconst {KeyCodes} = Constants;\n\nconst EditPost = ({editingPost, actions, canEditPost, config, channelId, draft, scheduledPost, afterSave, onCancel, onDeleteScheduledPost, ...rest}: Props): JSX.Element | null => {\n    const connectionId = useSelector(getConnectionId);\n    const channel = useSelector((state: GlobalState) => getChannel(state, channelId));\n\n    const dispatch = useDispatch();\n\n    const [editText, setEditText] = useState<string>(\n        draft.message || editingPost?.post?.message_source || editingPost?.post?.message || scheduledPost?.message || '',\n    );\n    const [selectionRange, setSelectionRange] = useState<State['selectionRange']>({start: editText.length, end: editText.length});\n    const caretPosition = useRef<number>(editText.length);\n    const [postError, setPostError] = useState<React.ReactNode | null>(null);\n    const [errorClass, setErrorClass] = useState<string>('');\n    const [showEmojiPicker, setShowEmojiPicker] = useState<boolean>(false);\n    const [renderScrollbar, setRenderScrollbar] = useState<boolean>(false);\n    const [showMentionHelper, setShowMentionHelper] = useState<boolean>(false);\n\n    const textboxRef = useRef<TextboxClass>(null);\n    const wrapperRef = useRef<HTMLDivElement>(null);\n\n    // using a ref here makes sure that the unmounting callback (saveDraft) is fired with the correct value.\n    // If we would just use the editText value from the state it would be a stale since it is encapsuled in the\n    // function closure on initial render\n    const draftRef = useRef<PostDraft>(draft);\n    const saveDraftFrame = useRef<number|null>();\n\n    const id = scheduledPost ? scheduledPost.id : editingPost.postId;\n    const draftStorageId = `${StoragePrefixes.EDIT_DRAFT}${id}`;\n\n    const {formatMessage} = useIntl();\n\n    const saveDraft = useCallback(() => {\n        // to be run on unmount and only when there is an active saveDraftFrame timer\n        if (saveDraftFrame.current && editingPost.postId) {\n            actions.setDraft(draftStorageId, draftRef.current);\n            clearTimeout(saveDraftFrame.current);\n            saveDraftFrame.current = null;\n        }\n    }, [actions, draftStorageId, editingPost.postId]);\n\n    useEffect(() => saveDraft, [saveDraft]);\n\n    useEffect(() => {\n        if (saveDraftFrame.current) {\n            clearTimeout(saveDraftFrame.current);\n        }\n\n        saveDraftFrame.current = window.setTimeout(() => {\n            actions.setDraft(draftStorageId, draftRef.current);\n        }, Constants.SAVE_DRAFT_TIMEOUT);\n\n        if (!scheduledPost) {\n            const isMentions = allAtMentions(editText).length > 0;\n            setShowMentionHelper(isMentions);\n        }\n    }, [actions, draftStorageId, editText, scheduledPost]);\n\n    useEffect(() => {\n        const focusTextBox = () => textboxRef?.current?.focus();\n\n        document.addEventListener(AppEvents.FOCUS_EDIT_TEXTBOX, focusTextBox);\n        return () => document.removeEventListener(AppEvents.FOCUS_EDIT_TEXTBOX, focusTextBox);\n    }, []);\n\n    useEffect(() => {\n        if (selectionRange.start === selectionRange.end) {\n            Utils.setCaretPosition(textboxRef.current?.getInputBox(), selectionRange.start);\n        } else {\n            Utils.setSelectionRange(textboxRef.current?.getInputBox(), selectionRange.start, selectionRange.end);\n        }\n    }, [selectionRange]);\n\n    // just a helper so it's not always needed to update with setting both properties to the same value\n    const setSelectionRangeByCaretPosition = (position: number) => setSelectionRange({start: position, end: position});\n\n    const handleBlur = (e: React.FocusEvent<TextboxElement, Element>) => {\n        const target = e.target as HTMLTextAreaElement;\n        caretPosition.current = target.selectionEnd;\n    };\n\n    const handlePaste = useCallback((e: ClipboardEvent) => {\n        const {clipboardData, target} = e;\n        if (\n            !clipboardData ||\n            !clipboardData.items ||\n            !canEditPost ||\n            (target as HTMLTextAreaElement).id !== 'edit_textbox'\n        ) {\n            return;\n        }\n\n        const hasLinks = hasHtmlLink(clipboardData);\n        const table = getHtmlTable(clipboardData);\n        if (!table && !hasLinks) {\n            return;\n        }\n\n        e.preventDefault();\n\n        let message = editText;\n        let newCaretPosition = selectionRange.start;\n\n        if (table && isGitHubCodeBlock(table.className)) {\n            const {formattedMessage, formattedCodeBlock} = formatGithubCodePaste({selectionStart: (target as any).selectionStart, selectionEnd: (target as any).selectionEnd, message, clipboardData});\n            message = formattedMessage;\n            newCaretPosition = selectionRange.start + formattedCodeBlock.length;\n        } else {\n            message = formatMarkdownMessage(clipboardData, editText.trim(), newCaretPosition).formattedMessage;\n            newCaretPosition = message.length - (editText.length - newCaretPosition);\n        }\n\n        setEditText(message);\n        setSelectionRangeByCaretPosition(newCaretPosition);\n    }, [canEditPost, selectionRange, editText]);\n\n    const isSaveDisabled = () => {\n        const {post} = editingPost;\n        const hasAttachments = post && post.file_ids && post.file_ids.length > 0;\n\n        if (hasAttachments) {\n            return !canEditPost;\n        }\n\n        if (editText.trim() !== '') {\n            return !canEditPost;\n        }\n\n        return !rest.canDeletePost;\n    };\n\n    const applyHotkeyMarkdown = (params: ApplyMarkdownOptions) => {\n        if (params.selectionStart === null || params.selectionEnd === null) {\n            return;\n        }\n\n        const res = applyMarkdown(params);\n\n        setEditText(res.message);\n        setSelectionRange({start: res.selectionStart, end: res.selectionEnd});\n    };\n\n    const handleRefocusAndExit = (refocusId: string|null) => {\n        if (refocusId) {\n            const element = document.getElementById(refocusId);\n            element?.focus();\n        }\n\n        actions.unsetEditingPost();\n    };\n\n    const handleAutomatedRefocusAndExit = () => {\n        draftRef.current = {\n            ...draftRef.current,\n            message: '',\n        };\n        handleRefocusAndExit(editingPost.refocusId || null);\n    };\n\n    const handleEdit = async () => {\n        if (scheduledPost) {\n            await handleEditScheduledPost();\n            return;\n        }\n\n        if (!editingPost.post || isSaveDisabled()) {\n            return;\n        }\n\n        let updatedPost = {\n            message: editText,\n            id: editingPost.postId,\n            channel_id: editingPost.post.channel_id,\n        };\n\n        const hookResult = await actions.runMessageWillBeUpdatedHooks(updatedPost, editingPost.post);\n        if (hookResult.error && hookResult.error.message) {\n            setPostError(<>{hookResult.error.message}</>);\n            return;\n        }\n\n        updatedPost = hookResult.data;\n\n        if (postError) {\n            setErrorClass('animation--highlight');\n            setTimeout(() => setErrorClass(''), Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        if (updatedPost.message === (editingPost.post?.message_source || editingPost.post?.message)) {\n            handleAutomatedRefocusAndExit();\n            return;\n        }\n\n        const hasAttachment = Boolean(\n            editingPost.post?.file_ids && editingPost.post?.file_ids.length > 0,\n        );\n        if (updatedPost.message.trim().length === 0 && !hasAttachment) {\n            handleRefocusAndExit(null);\n\n            const deletePostModalData = {\n                modalId: ModalIdentifiers.DELETE_POST,\n                dialogType: DeletePostModal,\n                dialogProps: {\n                    post: editingPost.post,\n                    isRHS: editingPost.isRHS,\n                },\n            };\n\n            dispatch(openModal(deletePostModalData));\n            return;\n        }\n\n        await actions.editPost(updatedPost as Post);\n\n        handleAutomatedRefocusAndExit();\n        afterSave?.();\n    };\n\n    const handleCancel = useCallback(() => {\n        onCancel?.();\n        handleAutomatedRefocusAndExit();\n    }, [onCancel, handleAutomatedRefocusAndExit]);\n\n    const handleEditScheduledPost = useCallback(async () => {\n        if (!scheduledPost || isSaveDisabled() || !channel || !onDeleteScheduledPost) {\n            return;\n        }\n\n        const post = scheduledPostToPost(scheduledPost);\n\n        let updatedPost = {\n            message: editText,\n            id: scheduledPost.id,\n            channel_id: scheduledPost?.channel_id,\n        };\n\n        const hookResult = await actions.runMessageWillBeUpdatedHooks(updatedPost, post);\n        if (hookResult.error && hookResult.error.message) {\n            setPostError(<>{hookResult.error.message}</>);\n            return;\n        }\n\n        updatedPost = hookResult.data;\n\n        if (postError) {\n            setErrorClass('animation--highlight');\n            setTimeout(() => setErrorClass(''), Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        if (updatedPost.message === post.message) {\n            handleAutomatedRefocusAndExit();\n            return;\n        }\n\n        const hasAttachment = Boolean(\n            scheduledPost.file_ids && scheduledPost.file_ids.length > 0,\n        );\n        if (updatedPost.message.trim().length === 0 && !hasAttachment) {\n            handleRefocusAndExit(null);\n\n            const deleteScheduledPostModalData = {\n                modalId: ModalIdentifiers.DELETE_DRAFT,\n                dialogType: DeleteScheduledPostModal,\n                dialogProps: {\n                    channelDisplayName: channel.display_name,\n                    onConfirm: onDeleteScheduledPost,\n                },\n            };\n\n            dispatch(openModal(deleteScheduledPostModalData));\n            return;\n        }\n\n        const updatedScheduledPost = {\n            ...scheduledPost,\n            message: updatedPost.message,\n        };\n\n        const response = await actions.updateScheduledPost(updatedScheduledPost, connectionId);\n        if (response.error) {\n            setPostError(response.error.message);\n        } else {\n            handleAutomatedRefocusAndExit();\n            afterSave?.();\n        }\n    }, [\n        actions,\n        connectionId,\n        editText,\n        handleAutomatedRefocusAndExit,\n        handleRefocusAndExit,\n        isSaveDisabled,\n        postError,\n        scheduledPost,\n        afterSave,\n        channel,\n        onDeleteScheduledPost,\n    ]);\n\n    const handleEditKeyPress = (e: React.KeyboardEvent) => {\n        const {ctrlSend, codeBlockOnCtrlEnter} = rest;\n        const inputBox = textboxRef.current?.getInputBox();\n\n        const {allowSending, ignoreKeyPress} = postMessageOnKeyPress(\n            e,\n            editText,\n            ctrlSend,\n            codeBlockOnCtrlEnter,\n            Date.now(),\n            0,\n            inputBox.selectionStart,\n        );\n\n        if (ignoreKeyPress) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        if (allowSending && textboxRef.current) {\n            e.preventDefault();\n            textboxRef.current.blur();\n            handleEdit();\n        }\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<TextboxElement>) => {\n        const {ctrlSend, codeBlockOnCtrlEnter} = rest;\n\n        const ctrlOrMetaKeyPressed = e.ctrlKey || e.metaKey;\n        const ctrlKeyCombo = Keyboard.cmdOrCtrlPressed(e) && !e.altKey && !e.shiftKey;\n        const ctrlAltCombo = Keyboard.cmdOrCtrlPressed(e, true) && e.altKey;\n        const ctrlEnterKeyCombo =\n            (ctrlSend || codeBlockOnCtrlEnter) &&\n            Keyboard.isKeyPressed(e, KeyCodes.ENTER) &&\n            ctrlOrMetaKeyPressed;\n        const markdownLinkKey = Keyboard.isKeyPressed(e, KeyCodes.K);\n        const ctrlShiftCombo = Keyboard.cmdOrCtrlPressed(e, true) && e.shiftKey;\n        const lastMessageReactionKeyCombo = ctrlShiftCombo && Keyboard.isKeyPressed(e, KeyCodes.BACK_SLASH);\n\n        // listen for line break key combo and insert new line character\n        if (Utils.isUnhandledLineBreakKeyCombo(e)) {\n            e.stopPropagation(); // perhaps this should happen in all of these cases? or perhaps Modal should not be listening?\n            setEditText(Utils.insertLineBreakFromKeyEvent(e.nativeEvent));\n        } else if (ctrlEnterKeyCombo) {\n            handleEdit();\n        } else if (Keyboard.isKeyPressed(e, KeyCodes.ESCAPE) && !showEmojiPicker) {\n            onCancel?.();\n            handleAutomatedRefocusAndExit();\n        } else if (ctrlAltCombo && markdownLinkKey) {\n            applyHotkeyMarkdown({\n                markdownMode: 'link',\n                selectionStart: e.currentTarget.selectionStart,\n                selectionEnd: e.currentTarget.selectionEnd,\n                message: e.currentTarget.value,\n            });\n        } else if (ctrlKeyCombo && Keyboard.isKeyPressed(e, KeyCodes.B)) {\n            applyHotkeyMarkdown({\n                markdownMode: 'bold',\n                selectionStart: e.currentTarget.selectionStart,\n                selectionEnd: e.currentTarget.selectionEnd,\n                message: e.currentTarget.value,\n            });\n        } else if (ctrlKeyCombo && Keyboard.isKeyPressed(e, KeyCodes.I)) {\n            applyHotkeyMarkdown({\n                markdownMode: 'italic',\n                selectionStart: e.currentTarget.selectionStart,\n                selectionEnd: e.currentTarget.selectionEnd,\n                message: e.currentTarget.value,\n            });\n        } else if (lastMessageReactionKeyCombo) {\n            // Stop document from handling the hotkey and opening the reaction\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    };\n\n    const handleChange = (e: React.ChangeEvent<TextboxElement>) => {\n        const message = e.target.value;\n\n        draftRef.current = {\n            ...draftRef.current,\n            message,\n        };\n\n        setEditText(message);\n    };\n\n    const handleHeightChange = (height: number, maxHeight: number) => setRenderScrollbar(height > maxHeight);\n\n    const handlePostError = (_postError: React.ReactNode) => {\n        if (_postError !== postError) {\n            setPostError(_postError);\n        }\n    };\n\n    const handleEmojiClick = (emoji?: Emoji) => {\n        if (!emoji) {\n            return;\n        }\n\n        const emojiAlias = getEmojiName(emoji);\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        let newMessage = `:${emojiAlias}: `;\n        let newCaretPosition = newMessage.length;\n\n        if (editText.length > 0) {\n            const {firstPiece, lastPiece} = splitMessageBasedOnCaretPosition(\n                caretPosition.current,\n                editText,\n            );\n\n            // check whether the first piece of the message is empty when cursor\n            // is placed at beginning of message and avoid adding an empty string at the beginning of the message\n            newMessage = firstPiece === '' ? `:${emojiAlias}: ${lastPiece}` : `${firstPiece} :${emojiAlias}: ${lastPiece}`;\n            newCaretPosition = firstPiece === '' ? `:${emojiAlias}: `.length : `${firstPiece} :${emojiAlias}: `.length;\n        }\n\n        draftRef.current = {\n            ...draftRef.current,\n            message: newMessage,\n        };\n\n        setEditText(newMessage);\n        setSelectionRangeByCaretPosition(newCaretPosition);\n        setShowEmojiPicker(false);\n        textboxRef.current?.focus();\n    };\n\n    const handleGifClick = (gif: string) => {\n        let newMessage = gif;\n\n        if (editText.length > 0) {\n            newMessage = (/\\s+$/).test(editText) ? `${editText}${gif}` : `${editText} ${gif}`;\n        }\n\n        draftRef.current = {\n            ...draftRef.current,\n            message: newMessage,\n        };\n\n        setEditText(newMessage);\n        setShowEmojiPicker(false);\n        textboxRef.current?.focus();\n    };\n\n    const toggleEmojiPicker = (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e?.stopPropagation();\n        setShowEmojiPicker(!showEmojiPicker);\n        if (showEmojiPicker) {\n            textboxRef.current?.focus();\n        }\n    };\n\n    const {\n        emojiPicker,\n        getReferenceProps,\n        setReference,\n    } = useEmojiPicker({\n        showEmojiPicker,\n        setShowEmojiPicker,\n\n        enableGifPicker: config.EnableGifPicker === 'true',\n        onGifClick: handleGifClick,\n        onEmojiClick: handleEmojiClick,\n    });\n\n    let emojiPickerControls = null;\n    if (config.EnableEmojiPicker === 'true') {\n        emojiPickerControls = (\n            <>\n                <button\n                    aria-label={formatMessage({id: 'emoji_picker.emojiPicker.button.ariaLabel', defaultMessage: 'select an emoji'})}\n                    id='editPostEmoji'\n                    ref={setReference}\n                    className='style--none post-action'\n                    onClick={toggleEmojiPicker}\n                    {...getReferenceProps()}\n                >\n                    <EmoticonPlusOutlineIcon\n                        size={18}\n                        color='currentColor'\n                    />\n                </button>\n                {emojiPicker}\n            </>\n        );\n    }\n\n    let rootId = '';\n    if (editingPost.post) {\n        rootId = editingPost.post.root_id || editingPost.post.id;\n    }\n\n    return (\n        <div\n            className={classNames('post--editing__wrapper', {\n                scroll: renderScrollbar,\n            })}\n            ref={wrapperRef}\n        >\n            <Textbox\n                tabIndex={0}\n                rootId={rootId}\n                onChange={handleChange}\n                onKeyPress={handleEditKeyPress}\n                onKeyDown={handleKeyDown}\n                onBlur={handleBlur}\n                onHeightChange={handleHeightChange}\n                handlePostError={handlePostError}\n                onPaste={handlePaste}\n                value={editText}\n                channelId={channelId}\n                emojiEnabled={config.EnableEmojiPicker === 'true'}\n                createMessage={formatMessage({id: 'edit_post.editPost', defaultMessage: 'Edit the post...'})}\n                supportsCommands={false}\n                suggestionListPosition='bottom'\n                id='edit_textbox'\n                ref={textboxRef}\n                characterLimit={rest.maxPostSize}\n                useChannelMentions={rest.useChannelMentions}\n            />\n            <div className='post-body__actions'>\n                {emojiPickerControls}\n            </div>\n            { showMentionHelper ? (\n                <div className='post-body__info'>\n                    <span className='post-body__info__icon'>\n                        <InformationOutlineIcon\n                            size={14}\n                            color='currentColor'\n                        />\n                    </span>\n                    <span>{\n                        formatMessage({\n                            id: 'edit_post.no_notification_trigger_on_mention',\n                            defaultMessage: \"Editing this message with an '@mention' will not notify the recipient.\",\n                        })\n                    }</span>\n                </div>) : null\n            }\n            <EditPostFooter\n                onSave={handleEdit}\n                onCancel={handleCancel}\n            />\n            {postError && (\n                <div className={classNames('edit-post-footer', {'has-error': postError})}>\n                    <label className={classNames('post-error', errorClass)}>{postError}</label>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default EditPost;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\n\nimport {addMessageIntoHistory} from 'mattermost-redux/actions/posts';\nimport {updateScheduledPost} from 'mattermost-redux/actions/scheduled_posts';\nimport {Preferences, Permissions} from 'mattermost-redux/constants';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {runMessageWillBeUpdatedHooks} from 'actions/hooks';\nimport {unsetEditingPost} from 'actions/post_actions';\nimport {setGlobalItem} from 'actions/storage';\nimport {scrollPostListToBottom} from 'actions/views/channel';\nimport {editPost} from 'actions/views/posts';\nimport {getEditingPostDetailsAndPost} from 'selectors/posts';\nimport {getIsRhsOpen, getPostDraft, getRhsState} from 'selectors/rhs';\n\nimport Constants, {RHSStates, StoragePrefixes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport EditPost from './edit_post';\n\ntype Props = {\n    scheduledPost?: ScheduledPost;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const config = getConfig(state);\n    const currentUserId = getCurrentUserId(state);\n\n    let editingPost;\n    let channelId: string;\n    let draft;\n    let isAuthor;\n\n    if (props.scheduledPost) {\n        editingPost = {post: null};\n        channelId = props.scheduledPost.channel_id;\n        draft = getPostDraft(state, StoragePrefixes.EDIT_DRAFT, props.scheduledPost.id);\n        isAuthor = true;\n    } else {\n        editingPost = getEditingPostDetailsAndPost(state);\n        channelId = editingPost.post.channel_id;\n        draft = getPostDraft(state, StoragePrefixes.EDIT_DRAFT, editingPost.postId);\n        isAuthor = editingPost?.post?.user_id === currentUserId;\n    }\n\n    const teamId = getCurrentTeamId(state);\n    const deletePermission = isAuthor ? Permissions.DELETE_POST : Permissions.DELETE_OTHERS_POSTS;\n    const editPermission = isAuthor ? Permissions.EDIT_POST : Permissions.EDIT_OTHERS_POSTS;\n\n    const channel = getChannel(state, channelId);\n    const useChannelMentions = haveIChannelPermission(state, teamId, channelId, Permissions.USE_CHANNEL_MENTIONS);\n\n    const canEdit = haveIChannelPermission(state, teamId, channelId, editPermission);\n\n    return {\n        canEditPost: canEdit,\n        canDeletePost: haveIChannelPermission(state, teamId, channelId, deletePermission),\n        codeBlockOnCtrlEnter: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', true),\n        ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n        draft,\n        config,\n        editingPost,\n        teamId,\n        channelId,\n        maxPostSize: parseInt(config.MaxPostSize || '0', 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n        readOnlyChannel: !isCurrentUserSystemAdmin(state) && channel?.name === Constants.DEFAULT_CHANNEL,\n        useChannelMentions,\n        isRHSOpened: getIsRhsOpen(state),\n        isEditHistoryShowing: getRhsState(state) === RHSStates.EDIT_HISTORY,\n        scheduledPost: props.scheduledPost,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            scrollPostListToBottom,\n            addMessageIntoHistory,\n            editPost,\n            setDraft: setGlobalItem,\n            unsetEditingPost,\n            runMessageWillBeUpdatedHooks,\n            updateScheduledPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport noop from 'lodash/noop';\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\ntype Props = {\n    displayName: string;\n    onConfirm: () => void;\n    onExited: () => void;\n}\n\nfunction DeleteDraftModal({\n    displayName,\n    onExited,\n    onConfirm,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const title = formatMessage({\n        id: 'drafts.confirm.delete.title',\n        defaultMessage: 'Delete draft',\n    });\n\n    const confirmButtonText = formatMessage({\n        id: 'drafts.confirm.delete.button',\n        defaultMessage: 'Yes, delete',\n    });\n\n    const message = (\n        <FormattedMessage\n            id={'drafts.confirm.delete.text'}\n            defaultMessage={'Are you sure you want to delete this draft to <strong>{displayName}</strong>?'}\n            values={{\n                strong: (chunk: string) => <strong>{chunk}</strong>,\n                displayName,\n            }}\n        />\n    );\n\n    return (\n        <GenericModal\n            confirmButtonText={confirmButtonText}\n            handleCancel={noop}\n            handleConfirm={onConfirm}\n            modalHeaderText={title}\n            onExited={onExited}\n            compassDesign={true}\n            isDeleteModal={true}\n            autoFocusConfirmButton={true}\n        >\n            {message}\n        </GenericModal>\n    );\n}\n\nexport default DeleteDraftModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ScheduledPostCustomTimeModal\n    from 'components/advanced_text_editor/send_button/scheduled_post_custom_time_modal/scheduled_post_custom_time_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport Action from './action';\nimport DeleteDraftModal from './delete_draft_modal';\nimport SendDraftModal from './send_draft_modal';\n\nconst scheduledDraft = (\n    <FormattedMessage\n        id='drafts.actions.scheduled'\n        defaultMessage='Schedule draft'\n    />\n);\n\ntype Props = {\n    displayName: string;\n    onDelete: () => void;\n    onEdit: () => void;\n    onSend: () => void;\n    canEdit: boolean;\n    canSend: boolean;\n    onSchedule: (timestamp: number) => Promise<{error?: string}>;\n    channelId: string;\n}\n\nfunction DraftActions({\n    displayName,\n    onDelete,\n    onEdit,\n    onSend,\n    canEdit,\n    canSend,\n    onSchedule,\n    channelId,\n}: Props) {\n    const dispatch = useDispatch();\n\n    const handleDelete = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.DELETE_DRAFT,\n            dialogType: DeleteDraftModal,\n            dialogProps: {\n                displayName,\n                onConfirm: onDelete,\n            },\n        }));\n    }, [dispatch, displayName, onDelete]);\n\n    const handleSend = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.SEND_DRAFT,\n            dialogType: SendDraftModal,\n            dialogProps: {\n                displayName,\n                onConfirm: onSend,\n            },\n        }));\n    }, [dispatch, displayName, onSend]);\n\n    const handleScheduleDraft = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.SCHEDULED_POST_CUSTOM_TIME_MODAL,\n            dialogType: ScheduledPostCustomTimeModal,\n            dialogProps: {\n                channelId,\n                onConfirm: onSchedule,\n            },\n        }));\n    }, [channelId, dispatch, onSchedule]);\n\n    return (\n        <>\n            <Action\n                icon='icon-trash-can-outline'\n                id='delete'\n                name='delete'\n                tooltipText={(\n                    <FormattedMessage\n                        id='drafts.actions.delete'\n                        defaultMessage='Delete draft'\n                    />\n                )}\n                onClick={handleDelete}\n            />\n            {canEdit && (\n                <Action\n                    icon='icon-pencil-outline'\n                    id='edit'\n                    name='edit'\n                    tooltipText={(\n                        <FormattedMessage\n                            id='drafts.actions.edit'\n                            defaultMessage='Edit draft'\n                        />\n                    )}\n                    onClick={onEdit}\n                />\n            )}\n\n            {\n                canSend &&\n                <Action\n                    icon='icon-clock-send-outline'\n                    id='reschedule'\n                    name='reschedule'\n                    tooltipText={scheduledDraft}\n                    onClick={handleScheduleDraft}\n                />\n            }\n\n            {canSend && (\n                <Action\n                    icon='icon-send-outline'\n                    id='send'\n                    name='send'\n                    tooltipText={(\n                        <FormattedMessage\n                            id='drafts.actions.send'\n                            defaultMessage='Send draft'\n                        />\n                    )}\n                    onClick={handleSend}\n                />\n            )}\n        </>\n    );\n}\n\nexport default memo(DraftActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport DraftActions from './draft_actions';\n\ntype OwnProps = {\n    channelDisplayName: Channel['display_name'];\n    channelType: Channel['type'];\n    channelName: Channel['name'];\n    userId: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const {channelDisplayName, userId, channelName, channelType} = ownProps;\n\n    let displayName = channelDisplayName;\n    let teammateId;\n    let teammate;\n\n    if (channelType === Constants.DM_CHANNEL) {\n        teammateId = getUserIdFromChannelName(userId, channelName);\n        teammate = getUser(state, teammateId);\n        displayName = displayUsername(teammate, getTeammateNameDisplaySetting(state));\n    }\n\n    return {\n        displayName,\n    };\n}\n\nexport default connect(mapStateToProps)(DraftActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {batchGetProfilesInChannel, getMissingProfilesByIds} from 'mattermost-redux/actions/users';\n\nimport Avatar from 'components/widgets/users/avatar';\n\nimport {Constants} from 'utils/constants';\nimport {imageURLForUser} from 'utils/utils';\n\nimport './draft_title.scss';\n\ntype Props = {\n    channel: Channel;\n    membersCount?: number;\n    selfDraft: boolean;\n    teammate?: UserProfile;\n    teammateId?: string;\n    type: 'channel' | 'thread';\n}\n\nfunction DraftTitle({\n    channel,\n    membersCount,\n    selfDraft,\n    teammate,\n    teammateId,\n    type,\n}: Props) {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!teammate?.id && teammateId) {\n            dispatch(getMissingProfilesByIds([teammateId]));\n        }\n    }, [teammate?.id, teammateId]);\n\n    useEffect(() => {\n        // if you have a scheduled post in a GM and you closed that GM,\n        // we don't fetch that GM's members by default. This causes the number of GM members\n        // in scheduled posts row header to show up as '0'. To fix this,\n        // we check if the channel is a GM and member count is 0 (could will at least be 1 as the current user\n        // is always a member) and if so, fetch the GM members.\n        // The action uses a data loader so it is safe to call do this for multiple\n        // scheduled posts for the same GM without causing any duplicate API calls.\n        if (channel.type === Constants.GM_CHANNEL && !membersCount) {\n            dispatch(batchGetProfilesInChannel(channel.id));\n        }\n    }, [channel.id, channel.type, dispatch, membersCount]);\n\n    let you = null;\n    let title = null;\n\n    if (selfDraft) {\n        you = (\n            <>\n                &nbsp;\n                <FormattedMessage\n                    id='drafts.draft_title.you'\n                    defaultMessage={'(you)'}\n                />\n            </>\n        );\n    }\n\n    let icon = <i className='icon icon-globe'/>;\n\n    if (channel.type === Constants.PRIVATE_CHANNEL) {\n        icon = <i className='icon icon-lock-outline'/>;\n    }\n\n    if (channel.type === Constants.DM_CHANNEL && teammate) {\n        icon = (\n            <Avatar\n                size='xs'\n                username={teammate.username}\n                url={imageURLForUser(teammate.id, teammate.last_picture_update)}\n                className='DraftTitle__avatar'\n            />\n        );\n    }\n\n    if (channel.type === Constants.GM_CHANNEL) {\n        icon = (\n            <div className='DraftTitle__group-icon'>\n                {membersCount}\n            </div>\n        );\n    }\n\n    if (type === 'thread') {\n        if (\n            channel.type !== Constants.GM_CHANNEL &&\n            channel.type !== Constants.DM_CHANNEL\n        ) {\n            title = (\n                <FormattedMessage\n                    id='drafts.draft_title.channel_thread'\n                    defaultMessage={'Thread in: {icon} <span>{channelName}</span>'}\n                    values={{\n                        icon,\n                        channelName: channel.display_name,\n                        span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                    }}\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='drafts.draft_title.direct_thread'\n                    defaultMessage={'Thread to: {icon} <span>{channelName}</span>'}\n                    values={{\n                        icon,\n                        channelName: channel.display_name,\n                        span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                    }}\n                />\n            );\n        }\n    } else if (\n        channel.type !== Constants.GM_CHANNEL &&\n        channel.type !== Constants.DM_CHANNEL\n    ) {\n        title = (\n            <FormattedMessage\n                id='drafts.draft_title.channel'\n                defaultMessage={'In: {icon} <span>{channelName}</span>'}\n                values={{\n                    icon,\n                    channelName: channel.display_name,\n                    span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                }}\n            />\n        );\n    } else {\n        title = (\n            <FormattedMessage\n                id='drafts.draft_title.direct_channel'\n                defaultMessage={'To: {icon} <span>{channelName}</span>'}\n                values={{\n                    icon,\n                    channelName: channel.display_name,\n                    span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                }}\n            />\n        );\n    }\n\n    return (\n        <>\n            {title}\n            {you}\n        </>\n    );\n}\n\nexport default memo(DraftTitle);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {makeGetGmChannelMemberCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport DraftTitle from './draft_title';\n\ntype OwnProps = {\n    channel: Channel;\n    userId: string;\n};\n\nfunction makeMapStateToProps() {\n    const getMemberCount = makeGetGmChannelMemberCount();\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const {channel, userId} = ownProps;\n\n        let teammateId;\n        let teammate;\n        let membersCount;\n\n        if (channel.type === Constants.GM_CHANNEL) {\n            membersCount = getMemberCount(state, channel);\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            teammateId = getUserIdFromChannelName(userId, channel.name);\n            teammate = getUser(state, teammateId);\n        }\n\n        return {\n            channel,\n            membersCount,\n            selfDraft: teammateId === userId,\n            teammate,\n            teammateId,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(DraftTitle);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo} from 'react';\n\nimport {makeIsEligibleForClick} from 'utils/utils';\n\nimport './panel.scss';\n\ntype Props = {\n    children: React.ReactNode;\n    onClick: () => void;\n    hasError: boolean;\n    innerRef?: React.Ref<HTMLDivElement>;\n    isHighlighted?: boolean;\n    style?: React.CSSProperties;\n    className?: string;\n    dataTestId?: string;\n    dataPostId?: string;\n    ariaLabel?: string;\n};\n\nconst isEligibleForClick = makeIsEligibleForClick('.hljs, code');\n\nfunction Panel({\n    children,\n    onClick,\n    hasError,\n    innerRef,\n    isHighlighted,\n    style,\n    className,\n    dataTestId,\n    dataPostId,\n    ariaLabel,\n}: Props) {\n    const handleOnClick = (e: React.MouseEvent<HTMLElement>) => {\n        if (isEligibleForClick(e)) {\n            onClick();\n        }\n    };\n\n    const handleOnKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n            onClick();\n        }\n    };\n\n    return (\n        <div\n            data-testid={dataTestId}\n            data-postid={dataPostId}\n            className={classNames(\n                'Panel',\n                {\n                    draftError: hasError,\n                    highlighted: isHighlighted,\n                },\n                className,\n            )}\n            style={style}\n            onClick={handleOnClick}\n            onKeyDown={handleOnKeyDown}\n            role='link'\n            tabIndex={0}\n            ref={innerRef}\n            aria-label={ariaLabel}\n        >\n            {children}\n        </div>\n    );\n}\n\nexport default memo(Panel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport type {PostPriorityMetadata} from '@mattermost/types/posts';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\n\nimport PriorityLabels from 'components/advanced_text_editor/priority_labels';\nimport FilePreview from 'components/file_preview';\nimport Markdown from 'components/markdown';\nimport ShowMore from 'components/post_view/show_more';\nimport ProfilePicture from 'components/profile_picture';\n\nimport {imageURLForUser, handleFormattedTextClick} from 'utils/utils';\n\nimport type {PostDraft} from 'types/store/draft';\n\nimport './panel_body.scss';\n\ntype Props = {\n    channelId?: string;\n    displayName: string;\n    fileInfos: PostDraft['fileInfos'];\n    message: string;\n    priority?: PostPriorityMetadata;\n    status: UserStatus['status'];\n    uploadsInProgress: PostDraft['uploadsInProgress'];\n    userId: UserProfile['id'];\n    username: UserProfile['username'];\n}\n\nconst OPTIONS = {\n    disableGroupHighlight: true,\n    mentionHighlight: false,\n};\n\nfunction PanelBody({\n    channelId,\n    displayName,\n    fileInfos,\n    message,\n    priority,\n    status,\n    uploadsInProgress,\n    userId,\n    username,\n}: Props) {\n    const currentRelativeTeamUrl = useSelector(getCurrentRelativeTeamUrl);\n\n    const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        handleFormattedTextClick(e, currentRelativeTeamUrl);\n    }, [currentRelativeTeamUrl]);\n\n    return (\n        <div className='DraftPanelBody post'>\n            <div className='DraftPanelBody__left post__img'>\n                <ProfilePicture\n                    status={status}\n                    channelId={channelId}\n                    username={username}\n                    userId={userId}\n                    size={'md'}\n                    src={imageURLForUser(userId)}\n                />\n            </div>\n            <div className='DraftPanelBody__post_body'>\n                <ShowMore\n                    text={message}\n                >\n                    <div\n                        onClick={handleClick}\n                        className='post__content'\n                    >\n                        <div className='DraftPanelBody__right'>\n                            <div className='post__header'>\n                                <strong>{displayName}</strong>\n                                {priority && (\n                                    <PriorityLabels\n                                        canRemove={false}\n                                        hasError={false}\n                                        persistentNotifications={priority.persistent_notifications}\n                                        priority={priority.priority}\n                                        requestedAck={priority.requested_ack}\n                                    />\n                                )}\n                            </div>\n                            <div className='post__body'>\n                                <Markdown\n                                    options={OPTIONS}\n                                    message={message}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </ShowMore>\n                {(fileInfos.length > 0 || uploadsInProgress?.length > 0) && (\n                    <FilePreview\n                        fileInfos={fileInfos}\n                        uploadsInProgress={uploadsInProgress}\n                    />\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default PanelBody;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {IntlShape} from 'react-intl';\nimport {defineMessages} from 'react-intl';\n\nimport type {ScheduledPostErrorCode} from '@mattermost/types/schedule_post';\n\nconst errorCodeToErrorMessage = defineMessages<ScheduledPostErrorCode>({\n    unknown: {\n        id: 'scheduled_post.error_code.unknown_error',\n        defaultMessage: 'Unknown Error',\n    },\n    channel_archived: {\n        id: 'scheduled_post.error_code.channel_archived',\n        defaultMessage: 'Channel Archived',\n    },\n    channel_not_found: {\n        id: 'scheduled_post.error_code.channel_removed',\n        defaultMessage: 'Channel Removed',\n    },\n    user_missing: {\n        id: 'scheduled_post.error_code.user_missing',\n        defaultMessage: 'User Deleted',\n    },\n    user_deleted: {\n        id: 'scheduled_post.error_code.user_deleted',\n        defaultMessage: 'User Deleted',\n    },\n    no_channel_permission: {\n        id: 'scheduled_post.error_code.no_channel_permission',\n        defaultMessage: 'Missing Permission',\n    },\n    no_channel_member: {\n        id: 'scheduled_post.error_code.no_channel_member',\n        defaultMessage: 'Not In Channel',\n    },\n    thread_deleted: {\n        id: 'scheduled_post.error_code.thread_deleted',\n        defaultMessage: 'Thread Deleted',\n    },\n    unable_to_send: {\n        id: 'scheduled_post.error_code.unable_to_send',\n        defaultMessage: 'Unable to Send',\n    },\n    invalid_post: {\n        id: 'scheduled_post.error_code.invalid_post',\n        defaultMessage: 'Invalid Post',\n    },\n});\n\nexport function getErrorStringFromCode(intl: IntlShape, errorCode: ScheduledPostErrorCode = 'unknown') {\n    const textDefinition = errorCodeToErrorMessage[errorCode] ?? errorCodeToErrorMessage.unknown;\n    return intl.formatMessage(textDefinition).toUpperCase();\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport noop from 'lodash/noop';\nimport React, {memo, useCallback, useMemo, useEffect, useState, useRef} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {getPost as getPostAction} from 'mattermost-redux/actions/posts';\nimport {deleteScheduledPost, updateScheduledPost} from 'mattermost-redux/actions/scheduled_posts';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {isDeactivatedDirectChannel, makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetThreadOrSynthetic} from 'mattermost-redux/selectors/entities/threads';\n\nimport type {SubmitPostReturnType} from 'actions/views/create_comment';\nimport {removeDraft} from 'actions/views/drafts';\nimport {selectPostById} from 'actions/views/rhs';\nimport {getConnectionId} from 'selectors/general';\nimport {getChannelURL} from 'selectors/urls';\n\nimport usePriority from 'components/advanced_text_editor/use_priority';\nimport useSubmit from 'components/advanced_text_editor/use_submit';\nimport {useScrollOnRender} from 'components/common/hooks/use_scroll_on_render';\nimport ScheduledPostActions from 'components/drafts/draft_actions/schedule_post_actions/scheduled_post_actions';\nimport PlaceholderScheduledPostsTitle\n    from 'components/drafts/placeholder_scheduled_post_title/placeholder_scheduled_posts_title';\nimport EditScheduledPost from 'components/edit_scheduled_post';\n\nimport Constants, {StoragePrefixes} from 'utils/constants';\nimport {copyToClipboard} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\nimport type {PostDraft} from 'types/store/draft';\nimport {scheduledPostToPostDraft} from 'types/store/draft';\n\nimport DraftActions from './draft_actions';\nimport DraftTitle from './draft_title';\nimport Panel from './panel/panel';\nimport PanelBody from './panel/panel_body';\nimport Header from './panel/panel_header';\nimport {getErrorStringFromCode} from './utils';\n\ntype Props = {\n    user: UserProfile;\n    status: UserStatus['status'];\n    displayName: string;\n    item: PostDraft | ScheduledPost;\n    isRemote?: boolean;\n    scrollIntoView?: boolean;\n    containerClassName?: string;\n    dataTestId?: string;\n    dataPostId?: string;\n}\n\nconst mockLastBlurAt = {current: 0};\n\nfunction DraftRow({\n    item,\n    user,\n    status,\n    displayName,\n    isRemote,\n    scrollIntoView,\n    containerClassName,\n}: Props) {\n    const [isEditing, setIsEditing] = useState(false);\n\n    const isScheduledPost = 'scheduled_at' in item;\n    const intl = useIntl();\n\n    const rootId = ('rootId' in item) ? item.rootId : item.root_id;\n    const channelId = ('channelId' in item) ? item.channelId : item.channel_id;\n\n    const [serverError, setServerError] = useState<(ServerError & { submittedMessage?: string }) | null>(null);\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const getChannelSelector = useMemo(() => makeGetChannel(), []);\n    const channel = useSelector((state: GlobalState) => getChannelSelector(state, channelId));\n\n    const getThreadOrSynthetic = useMemo(() => makeGetThreadOrSynthetic(), []);\n\n    const rootPostDeleted = useSelector((state: GlobalState) => {\n        if (!rootId) {\n            return false;\n        }\n        const rootPost = getPost(state, rootId);\n        return !rootPost || rootPost.delete_at > 0 || rootPost.state === 'DELETED';\n    });\n\n    const tooLong = useSelector((state: GlobalState) => {\n        const maxPostSize = parseInt(getConfig(state).MaxPostSize || '', 10) || Constants.DEFAULT_CHARACTER_LIMIT;\n        return item.message.length > maxPostSize;\n    });\n\n    const readOnly = !useSelector((state: GlobalState) => {\n        return channel ? haveIChannelPermission(state, channel.team_id, channel.id, Permissions.CREATE_POST) : false;\n    });\n\n    const connectionId = useSelector(getConnectionId);\n\n    const isChannelArchived = Boolean(channel?.delete_at);\n    const isDeactivatedDM = useSelector((state: GlobalState) => isDeactivatedDirectChannel(state, channelId));\n\n    let postError = '';\n\n    if (isScheduledPost) {\n        // This is applicable only for scheduled post.\n        if (item.error_code) {\n            postError = getErrorStringFromCode(intl, item.error_code);\n        } else if (isChannelArchived || isDeactivatedDM) {\n            postError = getErrorStringFromCode(intl, 'channel_archived');\n        }\n    } else if (rootPostDeleted) {\n        postError = intl.formatMessage({id: 'drafts.error.post_not_found', defaultMessage: 'Thread not found'});\n    } else if (tooLong) {\n        postError = intl.formatMessage({id: 'drafts.error.too_long', defaultMessage: 'Message too long'});\n    } else if (readOnly) {\n        postError = intl.formatMessage({id: 'drafts.error.read_only', defaultMessage: 'Channel is read only'});\n    }\n\n    const canSend = !postError;\n    const canEdit = !(rootPostDeleted || readOnly);\n\n    const channelUrl = useSelector((state: GlobalState) => {\n        if (!channel) {\n            return '';\n        }\n        const teamId = getCurrentTeamId(state);\n        return getChannelURL(state, channel, teamId);\n    });\n\n    const goToMessage = useCallback(async () => {\n        if (isEditing) {\n            return;\n        }\n\n        if (rootId) {\n            if (rootPostDeleted) {\n                return;\n            }\n            await dispatch(selectPostById(rootId));\n            return;\n        }\n        history.push(channelUrl);\n    }, [channelUrl, dispatch, history, rootId, rootPostDeleted, isEditing]);\n\n    const isBeingScheduled = useRef(false);\n    const isScheduledPostBeingSent = useRef(false);\n\n    const thread = useSelector((state: GlobalState) => {\n        if (!rootId) {\n            return undefined;\n        }\n        const post = getPost(state, rootId);\n        if (!post) {\n            return undefined;\n        }\n\n        return getThreadOrSynthetic(state, post);\n    });\n\n    const handleOnDelete = useCallback(() => {\n        let key = `${StoragePrefixes.DRAFT}${channelId}`;\n        if (rootId) {\n            key = `${StoragePrefixes.COMMENT_DRAFT}${rootId}`;\n        }\n        dispatch(removeDraft(key, channelId, rootId));\n    }, [dispatch, channelId, rootId]);\n\n    const afterSubmit = useCallback((response: SubmitPostReturnType) => {\n        // if draft was being scheduled, delete the draft after it's been scheduled\n        if (isBeingScheduled.current && response.created && !response.error) {\n            handleOnDelete();\n            isBeingScheduled.current = false;\n        }\n\n        // if scheduled posts was being sent, delete the scheduled post after it's been sent\n        if (isScheduledPostBeingSent.current && response.created && !response.error) {\n            const scheduledPost = item as ScheduledPost;\n            dispatch(deleteScheduledPost(scheduledPost.user_id, scheduledPost.id, connectionId));\n            isScheduledPostBeingSent.current = false;\n        }\n    }, [connectionId, dispatch, handleOnDelete, item]);\n\n    // TODO LOL verify the types and handled it better\n    const {onSubmitCheck: prioritySubmitCheck} = usePriority(item as any, noop, noop, false);\n    const [handleOnSend] = useSubmit(\n        item as any,\n        postError,\n        channelId,\n        rootId,\n        serverError,\n        mockLastBlurAt,\n        noop,\n        setServerError,\n        noop,\n        noop,\n        prioritySubmitCheck,\n        goToMessage,\n        afterSubmit,\n        true,\n    );\n\n    const onScheduleDraft = useCallback(async (scheduledAt: number): Promise<{error?: string}> => {\n        isBeingScheduled.current = true;\n        await handleOnSend(item as PostDraft, {scheduled_at: scheduledAt});\n        return Promise.resolve({});\n    }, [item, handleOnSend]);\n\n    const draftActions = useMemo(() => {\n        if (!channel) {\n            return null;\n        }\n        return (\n            <DraftActions\n                channelDisplayName={channel.display_name}\n                channelName={channel.name}\n                channelType={channel.type}\n                channelId={channel.id}\n                userId={user.id}\n                onDelete={handleOnDelete}\n                onEdit={goToMessage}\n                onSend={handleOnSend}\n                canEdit={canEdit}\n                canSend={canSend}\n                onSchedule={onScheduleDraft}\n            />\n        );\n    }, [\n        canEdit,\n        canSend,\n        channel,\n        goToMessage,\n        handleOnDelete,\n        handleOnSend,\n        user.id,\n        onScheduleDraft,\n    ]);\n\n    const handleCancelEdit = useCallback(() => {\n        setIsEditing(false);\n    }, []);\n\n    const handleSchedulePostOnReschedule = useCallback(async (updatedScheduledAtTime: number) => {\n        handleCancelEdit();\n\n        const updatedScheduledPost: ScheduledPost = {\n            ...(item as ScheduledPost),\n            scheduled_at: updatedScheduledAtTime,\n        };\n\n        const result = await dispatch(updateScheduledPost(updatedScheduledPost, connectionId));\n        return {\n            error: result.error?.message,\n        };\n    }, [connectionId, dispatch, item, handleCancelEdit]);\n\n    const handleSchedulePostOnDelete = useCallback(async () => {\n        handleCancelEdit();\n\n        const scheduledPost = item as ScheduledPost;\n        const result = await dispatch(deleteScheduledPost(scheduledPost.user_id, scheduledPost.id, connectionId));\n        return {\n            error: result.error?.message,\n        };\n    }, [item, dispatch, connectionId, handleCancelEdit]);\n\n    const handleSchedulePostEdit = useCallback(() => {\n        setIsEditing((isEditing) => !isEditing);\n    }, []);\n\n    const handleCopyText = useCallback(() => {\n        copyToClipboard(item.message);\n    }, [item]);\n\n    const handleScheduledPostOnSend = useCallback(() => {\n        handleCancelEdit();\n\n        isScheduledPostBeingSent.current = true;\n        const postDraft = scheduledPostToPostDraft(item as ScheduledPost);\n        handleOnSend(postDraft, undefined, {keepDraft: true, ignorePostError: true});\n        return Promise.resolve({});\n    }, [handleOnSend, item, handleCancelEdit]);\n\n    const scheduledPostActions = useMemo(() => {\n        return (\n            <ScheduledPostActions\n                scheduledPost={item as ScheduledPost}\n                channel={channel}\n                onReschedule={handleSchedulePostOnReschedule}\n                onDelete={handleSchedulePostOnDelete}\n                onSend={handleScheduledPostOnSend}\n                onEdit={handleSchedulePostEdit}\n                onCopyText={handleCopyText}\n            />\n        );\n    }, [\n        channel,\n        handleSchedulePostOnDelete,\n        handleSchedulePostOnReschedule,\n        handleScheduledPostOnSend,\n        handleSchedulePostEdit,\n        handleCopyText,\n        item,\n    ]);\n\n    useEffect(() => {\n        if (rootId && !thread?.id) {\n            dispatch(getPostAction(rootId));\n        }\n    }, [thread?.id, rootId]);\n\n    const alertRef = useScrollOnRender();\n\n    if (!channel && !isScheduledPost) {\n        return null;\n    }\n\n    let timestamp: number;\n    let fileInfos: FileInfo[];\n    let uploadsInProgress: string[];\n    let actions: React.ReactNode;\n\n    if (isScheduledPost) {\n        timestamp = item.scheduled_at;\n        fileInfos = item.metadata?.files || [];\n        uploadsInProgress = [];\n        actions = scheduledPostActions;\n    } else {\n        timestamp = item.updateAt;\n        fileInfos = item.fileInfos;\n        uploadsInProgress = item.uploadsInProgress;\n        actions = draftActions;\n    }\n\n    let title: React.ReactNode;\n    if (channel) {\n        title = (\n            <DraftTitle\n                type={(rootId ? 'thread' : 'channel')}\n                channel={channel}\n                userId={user.id}\n            />\n        );\n    } else {\n        title = (\n            <PlaceholderScheduledPostsTitle\n                type={(rootId ? 'thread' : 'channel')}\n            />\n        );\n    }\n\n    const kind = isScheduledPost ? 'scheduledPost' : 'draft';\n\n    return (\n        <Panel\n            dataTestId={`${kind}View`}\n            dataPostId={(item as ScheduledPost).id}\n            onClick={goToMessage}\n            hasError={Boolean(postError)}\n            innerRef={scrollIntoView ? alertRef : undefined}\n            isHighlighted={scrollIntoView}\n            className={containerClassName}\n            ariaLabel={isScheduledPost ? intl.formatMessage({\n                id: 'drafts.draft_row.aria_label.scheduled_post',\n                defaultMessage: 'scheduled post in {channelName}',\n            }, {\n                channelName: channel?.display_name,\n            }) : intl.formatMessage({\n                id: 'drafts.draft_row.aria_label.draft',\n                defaultMessage: 'draft in {channelName}',\n            }, {\n                channelName: channel?.display_name,\n            })}\n        >\n            <Header\n                kind={kind}\n                actions={actions}\n                title={title}\n                timestamp={timestamp}\n                remote={isRemote || false}\n                error={postError || serverError?.message}\n            />\n            {isEditing && (\n                <EditScheduledPost\n                    scheduledPost={item as ScheduledPost}\n                    onCancel={handleCancelEdit}\n                    afterSave={handleCancelEdit}\n                    onDeleteScheduledPost={handleSchedulePostOnDelete}\n                />\n            )}\n            {!isEditing && (\n                <PanelBody\n                    channelId={channel?.id}\n                    displayName={displayName}\n                    fileInfos={fileInfos}\n                    message={item.message}\n                    status={status}\n                    priority={rootId ? undefined : item.metadata?.priority}\n                    uploadsInProgress={uploadsInProgress}\n                    userId={user.id}\n                    username={user.username}\n                />\n            )}\n        </Panel>\n    );\n}\n\nexport default memo(DraftRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\n// useScrollOnRender hook is used to scroll to the element when it is rendered\n// Attach the returned ref to the element you want to scroll to.\nexport function useScrollOnRender() {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        if (ref.current) {\n            ref.current.scrollIntoView({behavior: 'smooth'});\n        }\n    }, []);\n\n    return ref;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport type {CSSProperties} from 'react';\nimport React, {useMemo, useRef, useCallback, useEffect, memo} from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {VariableSizeList} from 'react-window';\n\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport type {Draft} from 'selectors/drafts';\n\nimport DraftRow from 'components/drafts/draft_row';\n\nconst OVERSCAN_ROW_COUNT = 6; // no. of rows\nconst ROW_HEIGHT_CHANGE_TOLERANCE = 4; // in px\n\nconst RESIZE_DEBOUNCE_TIME = 120; // in ms\n\ntype Props = {\n    drafts: Draft[];\n    currentUser: UserProfile;\n    userDisplayName: string;\n    userStatus: UserStatus['status'];\n    draftRemotes: Record<string, boolean>;\n}\n\nexport default function VirtualizedDraftList(props: Props) {\n    const listRef = useRef<VariableSizeList>(null);\n    const itemHeightCacheMap = useRef<Map<string, number>>(new Map());\n\n    // Function to set row height after measurement, we also reset the list after setting the height\n    const setRowHeight = useCallback((index: number, draftKey: string, size: number) => {\n        const currentItemHeight = itemHeightCacheMap.current.get(draftKey);\n\n        // If current height is not cached or if there is a significant difference, update the cache\n        // This prevents layout thrashing when the height variations are small\n        if (!currentItemHeight || (Math.abs(currentItemHeight - size) > ROW_HEIGHT_CHANGE_TOLERANCE)) {\n            itemHeightCacheMap.current.set(draftKey, size);\n\n            // Reset the list UI in response to the row height changing\n            if (listRef.current) {\n                listRef.current.resetAfterIndex(index);\n            }\n        }\n    }, []);\n\n    const getItemSize = useCallback((index: number) => {\n        const draftKey = index < props.drafts.length ? props.drafts[index].key : '';\n        return draftKey ? (itemHeightCacheMap.current.get(draftKey) || 0) : 0;\n    }, [props.drafts]);\n\n    const itemData = useMemo(() => ({\n        drafts: props.drafts,\n        userDisplayName: props.userDisplayName,\n        draftRemotes: props.draftRemotes,\n        currentUser: props.currentUser,\n        userStatus: props.userStatus,\n        setRowHeight,\n    }), [props.drafts, props.userDisplayName, props.draftRemotes, props.currentUser, props.userStatus, setRowHeight]);\n\n    return (\n        <div className='DraftList Drafts__main'>\n            <AutoSizer>\n                {({height, width}) => (\n                    <VariableSizeList\n                        ref={listRef}\n                        height={height}\n                        width={width}\n                        itemCount={props.drafts.length}\n                        itemSize={getItemSize}\n                        itemData={itemData}\n                        overscanCount={OVERSCAN_ROW_COUNT}\n                    >\n                        {Row}\n                    </VariableSizeList>\n                )}\n            </AutoSizer>\n        </div>\n    );\n}\n\ninterface RowProps {\n    index: number;\n    style: CSSProperties;\n    data: {\n        drafts: Draft[];\n        userDisplayName: string;\n        draftRemotes: Record<string, boolean>;\n        currentUser: UserProfile;\n        userStatus: string;\n        setRowHeight: (index: number, draftKey: string, size: number) => void;\n    };\n}\n\n// Row component for dynamic height measurement\n// This component is rendered for each visible draft item by react-window's virtualization\nfunction RowComponent({index, style, data: {drafts, userDisplayName, draftRemotes, currentUser, userStatus, setRowHeight}}: RowProps) {\n    const draft = drafts[index];\n\n    // Reference to the DOM element we'll measure\n    const rowRef = useRef<HTMLDivElement>(null);\n\n    // These refs store the current values for use in callbacks\n    // This prevents stale closures in the ResizeObserver callback\n    // and ensures event handlers always have the latest values\n    // we also update these refs whenever their source values change\n    const indexRef = useRef(index);\n    const draftKeyRef = useRef(draft.key);\n    const setRowHeightRef = useRef(setRowHeight);\n    useEffect(() => {\n        indexRef.current = index;\n        draftKeyRef.current = draft.key;\n        setRowHeightRef.current = setRowHeight;\n    }, [index, draft.key, setRowHeight]);\n\n    // This effect performs the initial height measurement on first render\n    // or whenever the draft content changes\n    useEffect(() => {\n        if (!rowRef.current) {\n            return undefined;\n        }\n\n        // Use requestAnimationFrame to measure after the browser has painted\n        const rafId = requestAnimationFrame(() => {\n            if (!rowRef.current) {\n                return;\n            }\n\n            const height = rowRef.current.getBoundingClientRect().height;\n\n            // Inform the virtualized list about this row's height\n            setRowHeight(index, draft.key, height);\n        });\n\n        return () => {\n            cancelAnimationFrame(rafId);\n        };\n    }, [draft, setRowHeight, index]);\n\n    // This effect sets up a ResizeObserver to track height changes on the row element\n    useEffect(() => {\n        if (!rowRef.current) {\n            return undefined;\n        }\n\n        // Flag to track whether we're still observing (prevents updates after unmount)\n        let isObservingResize = true;\n\n        // Create a debounced function to update height measurements\n        // This prevents excessive updates when height changes rapidly\n        const debouncedUpdateHeight = debounce((height: number) => {\n            if (!isObservingResize || !rowRef.current) {\n                return;\n            }\n\n            // Notify the parent list about this row's height\n            setRowHeightRef.current(\n                indexRef.current,\n                draftKeyRef.current,\n                height,\n            );\n        }, RESIZE_DEBOUNCE_TIME);\n\n        // This ResizeObserver API notifies us when the element's size changes\n        const resizeObserver = new ResizeObserver((resizeEntries) => {\n            if (!isObservingResize || !rowRef.current) {\n                return;\n            }\n\n            // Since we're observing a single row, we can safely assume that the first entry is the one we want\n            if (resizeEntries.length === 1 && resizeEntries[0].target === rowRef.current) {\n                const height = resizeEntries[0].borderBoxSize[0].blockSize;\n                debouncedUpdateHeight(height);\n            }\n        });\n\n        // Start observing size changes on the row element\n        resizeObserver.observe(rowRef.current);\n\n        return () => {\n            isObservingResize = false;\n            debouncedUpdateHeight.cancel();\n            resizeObserver.disconnect();\n        };\n    }, []);\n\n    return (\n        <div style={style}> {/* To avoid interference with virtualized list styles we are not using this div for height measurement */}\n            <div\n                ref={rowRef}\n                className={classNames('virtualizedVariableListRowWrapper', {\n                    firstRow: index === 0,\n                })}\n            >\n                <DraftRow\n                    key={draft.key}\n                    item={draft.value}\n                    displayName={userDisplayName}\n                    user={currentUser}\n                    status={userStatus}\n                    isRemote={draftRemotes?.[draft.key]}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst Row = memo(RowComponent);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {getDraftRemotes, type Draft} from 'selectors/drafts';\n\nimport EmptyDraftList from './empty_draft_list';\nimport VirtualizedDraftList from './virtualized_draft_list';\n\ntype Props = {\n    drafts: Draft[];\n    currentUser: UserProfile;\n    userDisplayName: string;\n    userStatus: UserStatus['status'];\n}\n\nexport default function DraftList(props: Props) {\n    const draftRemotes = useSelector(getDraftRemotes);\n\n    if (props.drafts.length === 0) {\n        return <EmptyDraftList/>;\n    }\n\n    return (\n        <VirtualizedDraftList\n            drafts={props.drafts}\n            currentUser={props.currentUser}\n            userDisplayName={props.userDisplayName}\n            userStatus={props.userStatus}\n            draftRemotes={draftRemotes}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Header from 'components/widgets/header';\n\ntype Props = {\n    children: ReactNode;\n}\n\nexport default function DraftsAndSchedulePostsPageHeader(props: Props) {\n    return (\n        <div\n            id='app-content'\n            className='Drafts app__content'\n        >\n            <Header\n                level={2}\n                className='Drafts__header'\n                heading={\n                    <FormattedMessage\n                        id='drafts.heading'\n                        defaultMessage='Drafts'\n                    />\n                }\n                subtitle={\n                    <FormattedMessage\n                        id='drafts.subtitle'\n                        defaultMessage=\"Any messages you've started will show here\"\n                    />\n                }\n            />\n            {props.children}\n        </div>\n    );\n}\n","import generateUtilityClasses from '../generateUtilityClasses';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getBadgeUtilityClass(slot) {\n  return generateUtilityClass('MuiBadge', slot);\n}\nconst badgeClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'invisible']);\nexport default badgeClasses;","/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nexport default function omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n      elementType,\n      externalSlotProps,\n      ownerState\n    } = parameters,\n    rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}","/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nexport default function resolveComponentProps(componentProps, ownerState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState);\n  }\n  return componentProps;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport clsx from 'clsx';\nimport extractEventHandlers from './extractEventHandlers';\nimport omitEventHandlers from './omitEventHandlers';\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nexport default function mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);\n    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);\n  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}","/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nexport default function extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport isHostComponent from './isHostComponent';\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nexport default function appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return _extends({}, otherProps, {\n    ownerState: _extends({}, otherProps.ownerState, ownerState)\n  });\n}","/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nexport default function isHostComponent(element) {\n  return typeof element === 'string';\n}","import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultContextValue = {\n  disableDefaultClasses: false\n};\nconst ClassNameConfiguratorContext = /*#__PURE__*/React.createContext(defaultContextValue);\n/**\n * @ignore - internal hook.\n *\n * Wraps the `generateUtilityClass` function and controls how the classes are generated.\n * Currently it only affects whether the classes are applied or not.\n *\n * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.\n */\nexport function useClassNamesOverride(generateUtilityClass) {\n  const {\n    disableDefaultClasses\n  } = React.useContext(ClassNameConfiguratorContext);\n  return slot => {\n    if (disableDefaultClasses) {\n      return '';\n    }\n    return generateUtilityClass(slot);\n  };\n}\n\n/**\n * Allows to configure the components within to not apply any built-in classes.\n */\nexport default function ClassNameConfigurator(props) {\n  const {\n    disableDefaultClasses,\n    children\n  } = props;\n  const contextValue = React.useMemo(() => ({\n    disableDefaultClasses: disableDefaultClasses != null ? disableDefaultClasses : false\n  }), [disableDefaultClasses]);\n  return /*#__PURE__*/_jsx(ClassNameConfiguratorContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"badgeContent\", \"component\", \"children\", \"invisible\", \"max\", \"slotProps\", \"slots\", \"showZero\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useBadge from '../useBadge';\nimport { getBadgeUtilityClass } from './badgeClasses';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    invisible\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getBadgeUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base/react-badge/components-api/#badge)\n */\nconst Badge = /*#__PURE__*/React.forwardRef(function Badge(props, ref) {\n  const {\n      component,\n      children,\n      max: maxProp = 99,\n      slotProps = {},\n      slots = {},\n      showZero = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    badgeContent,\n    max,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    max: maxProp\n  }));\n  const ownerState = _extends({}, props, {\n    badgeContent,\n    invisible,\n    max,\n    showZero\n  });\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || slots.root || 'span';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref\n    },\n    ownerState,\n    className: classes.root\n  });\n  const BadgeComponent = slots.badge || 'span';\n  const badgeProps = useSlotProps({\n    elementType: BadgeComponent,\n    externalSlotProps: slotProps.badge,\n    ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(BadgeComponent, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    badge: PropTypes.elementType,\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Badge;","import { usePreviousProps } from '@mui/utils';\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base/react-badge/#hook)\n *\n * API:\n *\n * - [useBadge API](https://mui.com/base/react-badge/hooks-api/#use-badge)\n */\nexport default function useBadge(parameters) {\n  const {\n    badgeContent: badgeContentProp,\n    invisible: invisibleProp = false,\n    max: maxProp = 99,\n    showZero = false\n  } = parameters;\n  const prevProps = usePreviousProps({\n    badgeContent: badgeContentProp,\n    max: maxProp\n  });\n  let invisible = invisibleProp;\n  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {\n    invisible = true;\n  }\n  const {\n    badgeContent,\n    max = maxProp\n  } = invisible ? prevProps : parameters;\n  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;\n  return {\n    badgeContent,\n    invisible,\n    max,\n    displayValue\n  };\n}","'use client';\n\nimport * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default (\n    <svg\n        width='142'\n        height='87'\n        viewBox='0 0 142 87'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g clipPath='url(#clip0_4212_90995)'>\n            <rect\n                x='15'\n                y='15'\n                width='112'\n                height='44'\n                rx='3'\n                fill='var(--button-bg)'\n                fillOpacity='0.12'\n            />\n            <path\n                d='M29.5 75L29.5 47L40 47'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n                strokeLinecap='round'\n            />\n            <path\n                d='M45 43H29.5V9.5L22.5 2.5'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 0 0 -1 20 5)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.48'\n            />\n            <circle\n                cx='2.5'\n                cy='2.5'\n                r='2.5'\n                transform='matrix(1 0 0 -1 27 78)'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.48'\n            />\n            <path\n                d='M127 22.5L117 22.5L117 49'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n                strokeLinecap='round'\n            />\n            <circle\n                cx='128.5'\n                cy='22.5'\n                r='2.5'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.48'\n            />\n            <path\n                d='M54.605 67.5638L41 81V12C41 10.8954 41.8954 10 43 10H109C110.105 10 111 10.8954 111 12V64.9868C111 66.0914 110.105 66.9868 109 66.9868H56.0103C55.4842 66.9868 54.9793 67.1941 54.605 67.5638Z'\n                fill='#28427B'\n            />\n            <path\n                d='M49.605 62.5638L36 76V7C36 5.89543 36.8954 5 38 5H104C105.105 5 106 5.89543 106 7V59.9868C106 61.0914 105.105 61.9868 104 61.9868H51.0103C50.4842 61.9868 49.9793 62.1941 49.605 62.5638Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M49.2536 62.2081L36.5 74.8035V7C36.5 6.17157 37.1716 5.5 38 5.5H104C104.828 5.5 105.5 6.17157 105.5 7V59.9868C105.5 60.8153 104.828 61.4868 104 61.4868H51.0103C50.3527 61.4868 49.7215 61.746 49.2536 62.2081Z'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n            />\n            <circle\n                cx='54'\n                cy='24'\n                r='9'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M69 20H85'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46 44H96'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46 51H68'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M69 26H94'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M46 38H63'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                d='M67 38H85'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.48'\n                strokeLinecap='round'\n            />\n            <path\n                opacity='0.32'\n                d='M114.218 87.29C106.772 87.1409 100.598 84.5917 95.6936 79.6423C90.7897 74.6929 88.2252 68.5281 88 61.1479C88.2213 53.7639 90.7859 47.5971 95.6936 42.6477C100.601 37.6983 106.776 35.1491 114.218 35C121.591 35.1529 127.73 37.7021 132.633 42.6477C137.537 47.5933 140.102 53.76 140.327 61.1479C140.098 68.5319 137.534 74.6967 132.633 79.6423C127.733 84.5879 121.595 87.1371 114.218 87.29Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M111.218 82.7899C103.897 82.6411 97.8524 80.1385 93.0488 75.2904C88.243 70.4399 85.7248 64.403 85.5002 57.1477C85.7211 49.8888 88.2392 43.8501 93.0487 38.9998C97.8561 34.1515 103.901 31.6489 111.218 31.5001C118.465 31.6526 124.474 34.1544 129.278 38.9998C134.084 43.8462 136.602 49.8848 136.827 57.1477C136.598 64.407 134.08 70.4439 129.278 75.2904C124.478 80.1356 118.469 82.6374 111.218 82.7899Z'\n                fill='var(--center-channel-bg)'\n                stroke='var(--center-channel-color)'\n            />\n            <path\n                d='M111.042 77C105.35 76.886 100.63 74.9359 96.8812 71.1498C93.1325 67.3636 91.1721 62.6478 91 57.0022C91.1692 51.3537 93.1296 46.6364 96.8812 42.8502C100.633 39.0641 105.353 37.114 111.042 37C116.678 37.1169 121.37 39.067 125.119 42.8502C128.867 46.6334 130.828 51.3508 131 57.0022C130.825 62.6507 128.865 67.3666 125.119 71.1498C121.373 74.933 116.681 76.8831 111.042 77Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M111.041 76.4999C105.475 76.3862 100.885 74.4827 97.2365 70.798C93.5858 67.1108 91.6718 62.5228 91.5002 57.0021C91.6689 51.4785 93.583 46.8892 97.2364 43.2022C100.888 39.5172 105.478 37.6138 111.041 37.5001C116.552 37.6167 121.114 39.5192 124.764 43.2022C128.414 46.8862 130.328 51.4754 130.5 57.0021C130.325 62.5259 128.411 67.1139 124.763 70.798C121.117 74.4807 116.555 76.3833 111.041 76.4999Z'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.32'\n            />\n            <path\n                d='M111 35.5V57L120.5 66.5'\n                stroke='var(--center-channel-color)'\n                strokeOpacity='0.8'\n                strokeLinejoin='round'\n            />\n            <circle\n                cx='111'\n                cy='57'\n                r='2'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.8'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0_4212_90995'>\n                <rect\n                    width='142'\n                    height='87'\n                    fill='white'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport NoResultsIndicator from 'components/no_results_indicator';\n\nimport NoScheduledPostsIllustration from './empty_scheduled_post_list_illustration';\n\nexport default function EmptyScheduledPostList() {\n    const {formatMessage} = useIntl();\n\n    return (\n        <NoResultsIndicator\n            expanded={true}\n            iconGraphic={NoScheduledPostsIllustration}\n            title={formatMessage({\n                id: 'Schedule_post.empty_state.title',\n                defaultMessage: 'No scheduled drafts at the moment',\n            })}\n            subtitle={formatMessage({\n                id: 'Schedule_post.empty_state.subtitle',\n                defaultMessage:\n                    'Schedule drafts to send messages at a later time. Any scheduled drafts will show up here and can be modified after being scheduled.',\n            })}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useRef} from 'react';\n\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport DraftRow from 'components/drafts/draft_row';\n\nimport {useQuery} from 'utils/http_utils';\n\ntype Props = {\n    scheduledPosts: ScheduledPost[];\n    currentUser: UserProfile;\n    userDisplayName: string;\n    userStatus: UserStatus['status'];\n}\n\nexport default function NonVirtualizedScheduledPostList(props: Props) {\n    const query = useQuery();\n    const targetId = query.get('target_id');\n    const targetScheduledPostId = useRef<string>();\n\n    return (\n        <>\n            {\n                props.scheduledPosts.map((scheduledPost, index) => {\n                    // find the first scheduled posst with the target and no error\n                    const isInTargetChannelOrThread = scheduledPost.channel_id === targetId || scheduledPost.root_id === targetId;\n                    const hasError = Boolean(scheduledPost.error_code);\n                    const scrollIntoView = !targetScheduledPostId.current && (isInTargetChannelOrThread && !hasError);\n                    if (scrollIntoView) {\n                        // if found, save the scheduled post's ID\n                        targetScheduledPostId.current = scheduledPost.id;\n                    }\n\n                    return (\n                        <DraftRow\n                            key={scheduledPost.id}\n                            item={scheduledPost}\n                            displayName={props.userDisplayName}\n                            status={props.userStatus}\n                            user={props.currentUser}\n                            scrollIntoView={targetScheduledPostId.current === scheduledPost.id} // scroll into view if this is the target scheduled post\n                            containerClassName={classNames('nonVirtualizedScheduledPostRow', {firstRow: index === 0})}\n                        />\n                    );\n                })\n            }\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AlertBanner from 'components/alert_banner';\n\nexport default function ScheduledPostError() {\n    return (\n        <AlertBanner\n            mode='danger'\n            className='scheduledPostListErrorIndicator'\n            message={\n                <FormattedMessage\n                    id='scheduled_post.panel.error_indicator.message'\n                    defaultMessage='One of your scheduled drafts cannot be sent.'\n                />\n            }\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {fetchMissingChannels} from 'mattermost-redux/actions/channels';\nimport {hasScheduledPostError} from 'mattermost-redux/selectors/entities/scheduled_posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport type {GlobalState} from 'types/store';\n\nimport EmptyScheduledPostList from './empty_scheduled_post_list';\nimport NonVirtualizedScheduledPostList from './non_virtualized_scheduled_post_list';\nimport ScheduledPostError from './scheduled_post_error';\n\nimport './scheduled_post_list.scss';\n\ntype Props = {\n    scheduledPosts: ScheduledPost[];\n    currentUser: UserProfile;\n    userDisplayName: string;\n    userStatus: UserStatus['status'];\n};\n\nexport default function ScheduledPostList(props: Props) {\n    const dispatch = useDispatch();\n\n    const currentTeamId = useSelector(getCurrentTeamId);\n\n    const scheduledPostsHasError = useSelector((state: GlobalState) => hasScheduledPostError(state, currentTeamId));\n\n    useEffect(() => {\n        if (props.scheduledPosts.length > 0) {\n            dispatch(fetchMissingChannels(props.scheduledPosts.map((post) => post.channel_id)));\n        }\n    }, [dispatch, props.scheduledPosts]);\n\n    if (props.scheduledPosts.length === 0) {\n        return (\n            <EmptyScheduledPostList/>\n        );\n    }\n\n    return (\n        <div className='ScheduledPostList nonVirtualizedScheduledPostList'>\n            {scheduledPostsHasError && (<ScheduledPostError/>)}\n\n            <NonVirtualizedScheduledPostList\n                scheduledPosts={props.scheduledPosts}\n                currentUser={props.currentUser}\n                userDisplayName={props.userDisplayName}\n                userStatus={props.userStatus}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tab as ReactBootstrapTab} from 'react-bootstrap';\n\ntype Props = {\n    children?: React.ReactNode;\n    eventKey?: any;\n    title?: React.ReactNode | undefined;\n    unmountOnExit?: boolean | undefined;\n    tabClassName?: string | undefined;\n    tabIndex?: number;\n}\n\nexport default function Tab({children, title, unmountOnExit, tabClassName, eventKey, tabIndex = -1}: Props) {\n    return (\n        <ReactBootstrapTab\n            eventKey={eventKey}\n            title={title}\n            unmountOnExit={unmountOnExit}\n            tabClassName={tabClassName}\n            tabIndex={tabIndex}\n        >\n            {children}\n        </ReactBootstrapTab>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Tabs as ReactBootstrapTabs} from 'react-bootstrap';\nimport type {SelectCallback} from 'react-bootstrap';\n\nimport './style.scss';\n\ntype Props = {\n    children?: React.ReactNode;\n    id?: string;\n    activeKey?: any;\n    mountOnEnter?: boolean;\n    unmountOnExit?: boolean;\n    onSelect?: SelectCallback;\n    className?: string;\n}\n\nexport default function Tabs({\n    children,\n    id,\n    activeKey,\n    unmountOnExit,\n    onSelect,\n    className,\n    mountOnEnter,\n}: Props) {\n    return (\n        <ReactBootstrapTabs\n            id={id}\n            activeKey={activeKey}\n            unmountOnExit={unmountOnExit}\n            onSelect={onSelect}\n            className={classNames('tabs', className)}\n            mountOnEnter={mountOnEnter}\n            autoFocus={true}\n        >\n            {children}\n        </ReactBootstrapTabs>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Badge} from '@mui/base';\nimport React, {useCallback, useMemo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\nimport {useHistory, useLocation} from 'react-router-dom';\n\nimport type {ScheduledPost} from '@mattermost/types/schedule_post';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {makeGetScheduledPostsByTeam} from 'mattermost-redux/selectors/entities/scheduled_posts';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {type Draft} from 'selectors/drafts';\n\nimport DraftList from 'components/drafts/draft_list';\nimport ScheduledPostList from 'components/drafts/scheduled_post_list';\nimport Tab from 'components/tabs/tab';\nimport Tabs from 'components/tabs/tabs';\n\nimport {DRAFT_URL_SUFFIX, SCHEDULED_POST_URL_SUFFIX} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nconst EMPTY_SCHEDULED_POSTS: ScheduledPost[] = [];\n\nconst TAB_KEYS = {\n    DRAFTS: 'drafts',\n    SCHEDULED_POSTS: 'scheduled_posts',\n};\n\ntype Props = {\n    drafts: Draft[];\n    currentUser: UserProfile;\n    userDisplayName: string;\n    userStatus: UserStatus['status'];\n}\n\nexport default function DraftsAndSchedulePostsTabs(props: Props) {\n    const history = useHistory();\n    const location = useLocation();\n    const isDraftsTab = location.pathname.includes(DRAFT_URL_SUFFIX);\n    const isScheduledPostsTab = location.pathname.includes(SCHEDULED_POST_URL_SUFFIX);\n\n    const currentTeam = useSelector(getCurrentTeam);\n    const currentTeamName = currentTeam?.name ?? '';\n    const currentTeamId = currentTeam?.id ?? '';\n\n    const getScheduledPostsByTeam = useMemo(() => makeGetScheduledPostsByTeam(), []);\n    const scheduledPosts = useSelector((state: GlobalState) => getScheduledPostsByTeam(state, currentTeamId, true));\n\n    const handleSwitchTabs = useCallback((key) => {\n        if (key === TAB_KEYS.DRAFTS) {\n            history.push(`/${currentTeamName}/drafts`);\n        } else if (key === TAB_KEYS.SCHEDULED_POSTS) {\n            history.push(`/${currentTeamName}/scheduled_posts`);\n        }\n    }, [history, currentTeamName]);\n\n    const scheduledPostsTabHeading = useMemo(() => {\n        return (\n            <div className='drafts_tab_title'>\n                <FormattedMessage\n                    id='schedule_post.tab.heading'\n                    defaultMessage='Scheduled'\n                />\n                {scheduledPosts?.length > 0 && (\n                    <Badge\n                        className='badge'\n                        badgeContent={scheduledPosts.length}\n                    />\n                )}\n            </div>\n        );\n    }, [scheduledPosts?.length]);\n\n    const draftTabHeading = useMemo(() => {\n        return (\n            <div className='drafts_tab_title'>\n                <FormattedMessage\n                    id='drafts.heading'\n                    defaultMessage='Drafts'\n                />\n                {props.drafts.length > 0 && (\n                    <Badge\n                        className='badge'\n                        badgeContent={props.drafts.length}\n                    />\n                )}\n            </div>\n        );\n    }, [props.drafts.length]);\n\n    const activeTab = useMemo(() => {\n        if (isDraftsTab) {\n            return TAB_KEYS.DRAFTS;\n        } else if (isScheduledPostsTab) {\n            return TAB_KEYS.SCHEDULED_POSTS;\n        }\n        return '';\n    }, [isDraftsTab, isScheduledPostsTab]);\n\n    return (\n        <Tabs\n            id='draft_tabs'\n            activeKey={activeTab}\n            mountOnEnter={true}\n            unmountOnExit={true}\n            onSelect={handleSwitchTabs}\n        >\n            <Tab\n                eventKey={TAB_KEYS.DRAFTS}\n                title={draftTabHeading}\n                unmountOnExit={true}\n                tabClassName='drafts_tab'\n                tabIndex={0}\n            >\n                <DraftList\n                    drafts={props.drafts}\n                    currentUser={props.currentUser}\n                    userDisplayName={props.userDisplayName}\n                    userStatus={props.userStatus}\n                />\n            </Tab>\n            <Tab\n                eventKey={TAB_KEYS.SCHEDULED_POSTS}\n                title={scheduledPostsTabHeading}\n                unmountOnExit={true}\n                tabClassName='drafts_tab'\n            >\n                <ScheduledPostList\n                    scheduledPosts={scheduledPosts || EMPTY_SCHEDULED_POSTS}\n                    currentUser={props.currentUser}\n                    userDisplayName={props.userDisplayName}\n                    userStatus={props.userStatus}\n                />\n            </Tab>\n        </Tabs>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/common';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {isScheduledPostsEnabled} from 'mattermost-redux/selectors/entities/scheduled_posts';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {selectLhsItem} from 'actions/views/lhs';\nimport {suppressRHS, unsuppressRHS} from 'actions/views/rhs';\nimport type {Draft} from 'selectors/drafts';\nimport {makeGetDrafts} from 'selectors/drafts';\n\nimport DraftList from 'components/drafts/draft_list';\n\nimport type {GlobalState} from 'types/store';\nimport {LhsItemType, LhsPage} from 'types/store/lhs';\n\nimport DraftsAndSchedulePostsPageHeader from './drafts_and_schedule_posts_page_header';\nimport DraftsAndSchedulePostsTabs from './drafts_and_schedule_posts_tabs';\n\nimport './drafts_and_schedule_posts.scss';\n\nconst EMPTY_DRAFTS: Draft[] = [];\n\nfunction Drafts() {\n    const dispatch = useDispatch();\n\n    const scheduledPostsEnabled = useSelector(isScheduledPostsEnabled);\n\n    // We would need to get drafts here early since its needed by the draft list component\n    const getDrafts = useMemo(() => makeGetDrafts(), []);\n    const drafts = useSelector(getDrafts);\n\n    const currentUser = useSelector(getCurrentUser);\n    const userStatus = useSelector((state: GlobalState) => getStatusForUserId(state, currentUser.id));\n\n    const teammateNameDisplaySetting = useSelector(getTeammateNameDisplaySetting);\n    const userDisplayName = useMemo(() => displayUsername(currentUser, teammateNameDisplaySetting), [currentUser, teammateNameDisplaySetting]);\n\n    // When Drafts component mounts, select Drafts in the LHS\n    // and suppress the RHS and restore RHS when component unmounts\n    useEffect(() => {\n        dispatch(selectLhsItem(LhsItemType.Page, LhsPage.Drafts));\n        dispatch(suppressRHS);\n\n        return () => {\n            dispatch(unsuppressRHS);\n        };\n    }, [dispatch]);\n\n    if (scheduledPostsEnabled) {\n        return (\n            <DraftsAndSchedulePostsPageHeader>\n                <DraftsAndSchedulePostsTabs\n                    drafts={drafts || EMPTY_DRAFTS}\n                    currentUser={currentUser}\n                    userDisplayName={userDisplayName}\n                    userStatus={userStatus}\n                />\n            </DraftsAndSchedulePostsPageHeader>\n        );\n    }\n\n    return (\n        <DraftsAndSchedulePostsPageHeader>\n            <DraftList\n                drafts={drafts || EMPTY_DRAFTS}\n                currentUser={currentUser}\n                userDisplayName={userDisplayName}\n                userStatus={userStatus}\n            />\n        </DraftsAndSchedulePostsPageHeader>\n    );\n}\n\nexport default memo(Drafts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {Fragment} from 'react';\nimport type {ReactNode, HTMLAttributes} from 'react';\n\nimport './header.scss';\n\ntype Props = {\n    heading: ReactNode;\n    level?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    subtitle?: ReactNode;\n    right?: ReactNode;\n};\n\ntype HeadingTag = keyof Pick<JSX.IntrinsicElements, 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>;\n\nconst Headings: Array<typeof Fragment | HeadingTag> = [Fragment, 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nconst Header = ({\n    level = 0,\n    heading,\n    subtitle,\n    right,\n    ...attrs\n}: Props & HTMLAttributes<HTMLElement>) => {\n    const H = Headings[level];\n    return (\n        <header\n            {...attrs}\n            className={classNames('Header', attrs.className)}\n        >\n            <div className='left'>\n                <H>{heading}</H>\n                {subtitle ? <p>{subtitle}</p> : null}\n            </div>\n            <div className='spacer'/>\n            {right}\n        </header>\n    );\n};\n\nexport default Header;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useMemo} from 'react';\nimport {useLocation} from 'react-router-dom';\n\nexport function useQuery() {\n    const {search} = useLocation();\n\n    const params = useMemo(() => {\n        return new URLSearchParams(search);\n    }, [search]);\n\n    return params;\n}\n"],"names":["React","width","height","viewBox","fill","xmlns","clipPath","x","y","rx","fillOpacity","d","stroke","strokeOpacity","strokeLinecap","strokeLinejoin","cx","cy","r","transform","x1","y1","x2","y2","id","EmptyDraftList","formatMessage","useIntl","className","NoResultsIndicator","expanded","iconGraphic","EmptyDraftListIllustration","title","defaultMessage","subtitle","Action","_ref","name","icon","onClick","tooltipText","WithTooltip","classNames","concat","propTypes","_pt","isRequired","DeleteScheduledPostModal","channelDisplayName","onExited","onConfirm","errorMessage","setErrorMessage","useState","confirmButtonText","handleOnConfirm","useCallback","async","response","error","GenericModal","handleCancel","noop","handleConfirm","modalHeaderText","compassDesign","isDeleteModal","autoFocusConfirmButton","autoCloseOnConfirmButton","errorText","FormattedMessage","values","strong","chunk","displayName","SendDraftModal","message","deleteTooltipText","editTooltipText","rescheduleTooltipText","sendNowTooltipText","copyTextTooltipText","ScheduledPostActions","scheduledPost","channel","onReschedule","onDelete","onSend","onEdit","onCopyText","dispatch","useDispatch","userTimezone","useSelector","getCurrentTimezone","myChannelsMemberships","state","getMyChannelMemberships","isAdmin","isCurrentUserSystemAdmin","useEffect","type","Constants","DM_CHANNEL","fetchMissingChannels","handleReschedulePost","initialTime","moment","scheduled_at","openModal","modalId","ModalIdentifiers","SCHEDULED_POST_CUSTOM_TIME_MODAL","dialogType","ScheduledPostCustomTimeModal","dialogProps","channelId","channel_id","handleDelete","DELETE_DRAFT","display_name","handleSend","SEND_DRAFT","userChannelMember","Boolean","isChannelArchived","delete_at","showEditOption","error_code","isDeactivatedDM","isDeactivatedDirectChannel","showSendNowOption","showRescheduleOption","memo","PlaceholderScheduledPostsTitle","EditPostFooter","onSave","onCancel","ctrlSend","getBool","Preferences","CATEGORY_ADVANCED_SETTINGS","ctrlSendKey","isMac","key","KeyCodes","EditPost","_editingPost$post","_editingPost$post2","editingPost","actions","canEditPost","config","draft","afterSave","onDeleteScheduledPost","rest","_objectWithoutProperties","_excluded","connectionId","getConnectionId","getChannel","editText","setEditText","post","message_source","selectionRange","setSelectionRange","start","length","end","caretPosition","useRef","postError","setPostError","errorClass","setErrorClass","showEmojiPicker","setShowEmojiPicker","renderScrollbar","setRenderScrollbar","showMentionHelper","setShowMentionHelper","textboxRef","wrapperRef","draftRef","saveDraftFrame","postId","draftStorageId","StoragePrefixes","EDIT_DRAFT","saveDraft","current","setDraft","clearTimeout","window","setTimeout","SAVE_DRAFT_TIMEOUT","isMentions","allAtMentions","focusTextBox","_textboxRef$current","focus","document","addEventListener","AppEvents","FOCUS_EDIT_TEXTBOX","removeEventListener","_textboxRef$current2","_textboxRef$current3","Utils","getInputBox","setSelectionRangeByCaretPosition","position","handlePaste","e","clipboardData","target","items","hasLinks","hasHtmlLink","table","getHtmlTable","preventDefault","newCaretPosition","isGitHubCodeBlock","formattedMessage","formattedCodeBlock","formatGithubCodePaste","selectionStart","selectionEnd","formatMarkdownMessage","trim","isSaveDisabled","file_ids","canDeletePost","applyHotkeyMarkdown","params","res","applyMarkdown","handleRefocusAndExit","refocusId","element","getElementById","unsetEditingPost","handleAutomatedRefocusAndExit","_objectSpread","handleEdit","_editingPost$post3","_editingPost$post4","_editingPost$post5","_editingPost$post6","handleEditScheduledPost","updatedPost","hookResult","runMessageWillBeUpdatedHooks","data","ANIMATION_TIMEOUT","hasAttachment","editPost","deletePostModalData","DELETE_POST","DeletePostModal","isRHS","scheduledPostToPost","deleteScheduledPostModalData","updatedScheduledPost","updateScheduledPost","emojiPicker","getReferenceProps","setReference","useEmojiPicker","enableGifPicker","EnableGifPicker","onGifClick","gif","_textboxRef$current6","newMessage","test","onEmojiClick","emoji","_textboxRef$current5","emojiAlias","getEmojiName","firstPiece","lastPiece","splitMessageBasedOnCaretPosition","emojiPickerControls","EnableEmojiPicker","Object","assign","ref","_textboxRef$current7","stopPropagation","EmoticonPlusOutlineIcon","size","color","rootId","root_id","scroll","Textbox","tabIndex","onChange","value","onKeyPress","_textboxRef$current4","codeBlockOnCtrlEnter","inputBox","allowSending","ignoreKeyPress","postMessageOnKeyPress","Date","now","blur","onKeyDown","ctrlOrMetaKeyPressed","ctrlKey","metaKey","ctrlKeyCombo","Keyboard","altKey","shiftKey","ctrlAltCombo","ctrlEnterKeyCombo","ENTER","markdownLinkKey","K","lastMessageReactionKeyCombo","BACK_SLASH","nativeEvent","ESCAPE","markdownMode","currentTarget","B","I","onBlur","onHeightChange","handleHeightChange","maxHeight","handlePostError","_postError","onPaste","emojiEnabled","createMessage","supportsCommands","suggestionListPosition","characterLimit","maxPostSize","useChannelMentions","InformationOutlineIcon","readOnlyChannel","teamId","isRHSOpened","isEditHistoryShowing","addMessageIntoHistory","scrollPostListToBottom","connect","props","getConfig","currentUserId","getCurrentUserId","isAuthor","_editingPost","getPostDraft","getEditingPostDetailsAndPost","user_id","getCurrentTeamId","deletePermission","Permissions","DELETE_OTHERS_POSTS","editPermission","EDIT_POST","EDIT_OTHERS_POSTS","haveIChannelPermission","USE_CHANNEL_MENTIONS","parseInt","MaxPostSize","DEFAULT_CHARACTER_LIMIT","DEFAULT_CHANNEL","getIsRhsOpen","getRhsState","RHSStates","EDIT_HISTORY","bindActionCreators","setGlobalItem","DeleteDraftModal","scheduledDraft","DraftActions","canEdit","canSend","onSchedule","handleScheduleDraft","ownProps","userId","channelName","channelType","teammateId","teammate","getUserIdFromChannelName","getUser","displayUsername","getTeammateNameDisplaySetting","DraftTitle","membersCount","selfDraft","getMissingProfilesByIds","GM_CHANNEL","batchGetProfilesInChannel","you","PRIVATE_CHANNEL","Avatar","username","url","imageURLForUser","last_picture_update","span","chunks","getMemberCount","makeGetGmChannelMemberCount","isEligibleForClick","makeIsEligibleForClick","Panel","children","hasError","innerRef","isHighlighted","style","dataTestId","dataPostId","ariaLabel","draftError","highlighted","role","OPTIONS","disableGroupHighlight","mentionHighlight","PanelBody","fileInfos","priority","status","uploadsInProgress","currentRelativeTeamUrl","getCurrentRelativeTeamUrl","handleClick","handleFormattedTextClick","ProfilePicture","src","ShowMore","text","PriorityLabels","canRemove","persistentNotifications","persistent_notifications","requestedAck","requested_ack","Markdown","options","FilePreview","errorCodeToErrorMessage","defineMessages","unknown","channel_archived","channel_not_found","user_missing","user_deleted","no_channel_permission","no_channel_member","thread_deleted","unable_to_send","invalid_post","getErrorStringFromCode","intl","_errorCodeToErrorMess","textDefinition","arguments","undefined","toUpperCase","mockLastBlurAt","DraftRow","_item$metadata2","item","user","isRemote","scrollIntoView","containerClassName","isEditing","setIsEditing","isScheduledPost","serverError","setServerError","history","useHistory","getChannelSelector","useMemo","makeGetChannel","getThreadOrSynthetic","makeGetThreadOrSynthetic","rootPostDeleted","rootPost","getPost","tooLong","readOnly","team_id","CREATE_POST","channelUrl","getChannelURL","goToMessage","selectPostById","push","isBeingScheduled","isScheduledPostBeingSent","thread","handleOnDelete","DRAFT","COMMENT_DRAFT","removeDraft","afterSubmit","created","deleteScheduledPost","onSubmitCheck","prioritySubmitCheck","usePriority","handleOnSend","useSubmit","onScheduleDraft","scheduledAt","Promise","resolve","draftActions","handleCancelEdit","handleSchedulePostOnReschedule","_result$error","updatedScheduledAtTime","handleSchedulePostOnDelete","_result$error2","handleSchedulePostEdit","handleCopyText","copyToClipboard","handleScheduledPostOnSend","postDraft","scheduledPostToPostDraft","keepDraft","ignorePostError","scheduledPostActions","getPostAction","alertRef","behavior","useScrollOnRender","timestamp","_item$metadata","metadata","files","updateAt","kind","Header","remote","EditScheduledPost","VirtualizedDraftList","listRef","itemHeightCacheMap","Map","setRowHeight","index","draftKey","currentItemHeight","get","Math","abs","set","resetAfterIndex","getItemSize","drafts","itemData","userDisplayName","draftRemotes","currentUser","userStatus","AutoSizer","VariableSizeList","itemCount","itemSize","overscanCount","Row","RowComponent","_ref2","rowRef","indexRef","draftKeyRef","setRowHeightRef","rafId","requestAnimationFrame","getBoundingClientRect","cancelAnimationFrame","isObservingResize","debouncedUpdateHeight","debounce","resizeObserver","ResizeObserver","resizeEntries","borderBoxSize","blockSize","observe","cancel","disconnect","firstRow","DraftList","getDraftRemotes","DraftsAndSchedulePostsPageHeader","level","heading","getBadgeUtilityClass","slot","generateUtilityClass","generateUtilityClasses","omitEventHandlers","object","result","keys","filter","prop","match","forEach","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","ownerState","resolvedComponentsProps","componentProps","resolveComponentProps","mergedProps","internalRef","getSlotProps","additionalProps","externalForwardedProps","joinedClasses","mergedStyle","eventHandlers","excludeKeys","includes","extractEventHandlers","componentsPropsWithoutEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","mergeSlotProps","useForkRef","otherProps","appendOwnerState","defaultContextValue","disableDefaultClasses","ClassNameConfiguratorContext","component","max","maxProp","slotProps","slots","showZero","other","badgeContent","displayValue","invisible","badgeContentProp","invisibleProp","prevProps","Number","useBadge","classes","root","badge","composeClasses","useClassNamesOverride","useUtilityClasses","Root","rootProps","BadgeComponent","badgeProps","opacity","EmptyScheduledPostList","NoScheduledPostsIllustration","NonVirtualizedScheduledPostList","targetId","useQuery","targetScheduledPostId","scheduledPosts","map","isInTargetChannelOrThread","ScheduledPostError","AlertBanner","mode","ScheduledPostList","currentTeamId","scheduledPostsHasError","hasScheduledPostError","Tab","unmountOnExit","tabClassName","eventKey","ReactBootstrapTab","Tabs","activeKey","onSelect","mountOnEnter","ReactBootstrapTabs","autoFocus","EMPTY_SCHEDULED_POSTS","TAB_KEYS","DraftsAndSchedulePostsTabs","_currentTeam$name","_currentTeam$id","location","useLocation","isDraftsTab","pathname","DRAFT_URL_SUFFIX","isScheduledPostsTab","SCHEDULED_POST_URL_SUFFIX","currentTeam","getCurrentTeam","currentTeamName","getScheduledPostsByTeam","makeGetScheduledPostsByTeam","handleSwitchTabs","scheduledPostsTabHeading","Badge","draftTabHeading","activeTab","EMPTY_DRAFTS","Drafts","scheduledPostsEnabled","isScheduledPostsEnabled","getDrafts","makeGetDrafts","getCurrentUser","getStatusForUserId","teammateNameDisplaySetting","selectLhsItem","LhsItemType","Page","LhsPage","suppressRHS","unsuppressRHS","Headings","Fragment","right","attrs","H","search","URLSearchParams"],"sourceRoot":""}