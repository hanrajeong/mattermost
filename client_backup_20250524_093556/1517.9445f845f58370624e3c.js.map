{"version":3,"file":"1517.9445f845f58370624e3c.js","mappings":"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","sources":["webpack://mattermost-webapp/./node_modules/@mattermost/compass-components/components/status-icon/StatusIcon.constants.js","webpack://mattermost-webapp/./node_modules/@mattermost/compass-components/components/status-icon/StatusIcon.root.js","webpack://mattermost-webapp/./node_modules/@mattermost/compass-components/components/status-icon/StatusIcon.js","webpack://mattermost-webapp/./node_modules/@mattermost/compass-components/components/status-icon/index.js","webpack://mattermost-webapp/./src/components/onboarding_tasklist/onboarding_tasklist_animations.tsx","webpack://mattermost-webapp/./src/components/onboarding_tasklist/onboarding_tasklist_completed.tsx","webpack://mattermost-webapp/./src/components/onboarding_tasklist/onboarding_tasklist_popover.tsx","webpack://mattermost-webapp/./src/components/onboarding_tasklist/onboarding_tasklist_task.tsx","webpack://mattermost-webapp/./src/components/onboarding_tasklist/onboarding_tasklist.tsx"],"sourcesContent":["const STATUSICON_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];\nconst DEFAULT_STATUSICON_SIZE = 'md';\nconst STATUSICON_STATUSES = ['online', 'away', 'dnd', 'offline'];\nconst DEFAULT_STATUSICON_STATUS = 'offline';\nconst STATUSICON_SIZE_MAP = {\n    xs: 10,\n    sm: 12,\n    md: 16,\n    lg: 20,\n    xl: 32,\n};\nconst STATUSICON_SIZE_LABELS = {\n    xs: 'x-small',\n    sm: 'small',\n    md: 'medium',\n    lg: 'large',\n    xl: 'x-large',\n};\nconst STATUSICON_STATUS_LABELS = {\n    online: 'online',\n    away: 'away',\n    dnd: 'do not disturb',\n    offline: 'offline',\n};\nexport { STATUSICON_SIZES, DEFAULT_STATUSICON_SIZE, STATUSICON_SIZE_MAP, STATUSICON_SIZE_LABELS, STATUSICON_STATUSES, DEFAULT_STATUSICON_STATUS, STATUSICON_STATUS_LABELS, };\n","import styled, { css } from 'styled-components';\nimport Icon from '../../foundations/icon';\nimport { Utils } from '../../shared';\nconst StatusIconRoot = styled(Icon).withConfig({\n    shouldForwardProp: (property, validator) => Utils.forceForwardProperty(property, ['glyph', 'size']) ||\n        (Utils.blockProperty(property) && validator(property)),\n})(({ theme, status, }) => css `\n        color: ${theme.badges[status]};\n    `);\nexport default StatusIconRoot;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport { DEFAULT_STATUSICON_SIZE, STATUSICON_SIZE_MAP } from './StatusIcon.constants';\nimport StatusIconRoot from './StatusIcon.root';\nconst StatusIcon = (_a) => {\n    var { status, size = DEFAULT_STATUSICON_SIZE } = _a, rest = __rest(_a, [\"status\", \"size\"]);\n    let glyph = 'circle-outline';\n    switch (status) {\n        case 'away':\n            glyph = 'clock';\n            break;\n        case 'dnd':\n            glyph = 'minus-circle';\n            break;\n        case 'online':\n            glyph = 'check-circle';\n            break;\n        case 'offline':\n        default:\n    }\n    const rootProperties = Object.assign({ status,\n        glyph, size: STATUSICON_SIZE_MAP[size] }, rest);\n    return React.createElement(StatusIconRoot, Object.assign({}, rootProperties));\n};\nexport default StatusIcon;\n","import StatusIcon from './StatusIcon';\nexport * from './StatusIcon.constants';\nexport * from './StatusIcon.props';\nexport * from './StatusIcon.types';\nexport default StatusIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport StatusIcon from '@mattermost/compass-components/components/status-icon'; // eslint-disable-line no-restricted-imports\n\nconst Animation = styled.div`\n    position: absolute;\n    z-index: 30;\n    flex-direction: column;\n    left: 15px;\n    bottom: 0;\n    display: none;\n\n    &.completed {\n        display: flex;\n    }\n\n    &:before {\n        content: '';\n        background-color: var(--denim-status-online);\n        opacity: 0;\n        border-radius: 50%;\n        width: 1rem;\n        bottom: 15%;\n        position: absolute;\n        height: 1rem;\n        margin-left: auto;\n        margin-right: auto;\n        left: 0;\n        right: 0;\n    }\n\n    .x1 {\n        opacity: 0;\n        animation-delay: 150ms;\n    }\n\n    .x2 {\n        transform: scale(0.6);\n        margin-left: 6px;\n        animation-delay: 250ms;\n        opacity: 0;\n    }\n    .x3 {\n        transform: scale(0.6);\n        margin-left: -6px;\n        animation-delay: 300ms;\n        opacity: 0;\n    }\n    .x4 {\n        transform: scale(0.2);\n        opacity: 0;\n    }\n\n    &.completed {\n        &:before {\n            animation: opacity 800ms ease-in-out, scale 800ms linear;\n        }\n        .x1, .x2, .x3, .x4 {\n            animation: opacity 900ms ease-in-out, moveUp 900ms linear;\n        }\n    }\n    @keyframes moveUp {\n        0% { \n            top: 0;\n        }\n        100% { \n            top: -50px;\n        }\n    }\n\n    @keyframes opacity {\n        0% { \n            opacity:0;\n        }\n        50% { \n            opacity: 1;\n        }\n        100% { \n            opacity: 0;\n        }\n    }\n\n    @keyframes scale {\n        0% { \n            transform: scale(0);\n        }\n        50% { \n            transform: scale(2);\n        }\n        100% { \n            transform: scale(4);\n        }\n    }\n\n`;\n\nexport const CompletedAnimation = (props: {completed: boolean}) => {\n    return (\n        <Animation className={props.completed ? 'completed' : ''}>\n            <StatusIcon\n                status={'online'}\n                className={'x1'}\n            />\n            <StatusIcon\n                status={'online'}\n                className={'x2'}\n            />\n            <StatusIcon\n                status={'online'}\n                className={'x3'}\n            />\n            <StatusIcon\n                status={'online'}\n                className={'x4'}\n            />\n        </Animation>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {CSSTransition} from 'react-transition-group';\nimport styled from 'styled-components';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getPrevTrialLicense} from 'mattermost-redux/actions/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport ExternalLink from 'components/external_link';\nimport StartTrialBtn from 'components/learn_more_trial_modal/start_trial_btn';\n\nimport completedImg from 'images/completed.svg';\nimport {AboutLinks, LicenseLinks} from 'utils/constants';\n\nconst CompletedWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 26px 24px 0 24px;\n    margin: auto;\n    text-align: center;\n    word-break: break-word;\n    width: 100%;\n    height: 500px;\n\n    &.fade-enter {\n        transform: scale(0);\n    }\n    &.fade-enter-active {\n        transform: scale(1);\n    }\n    &.fade-enter-done {\n        transform: scale(1);\n    }\n    &.fade-exit {\n        transform: scale(1);\n    }\n    &.fade-exit-active {\n        transform: scale(1);\n    }\n    &.fade-exit-done {\n        transform: scale(1);\n    }\n    .start-trial-btn, .got-it-button {\n        padding: 13px 20px;\n        background: var(--button-bg);\n        border-radius: 4px;\n        color: var(--sidebar-text);\n        border: none;\n        font-weight: bold;\n        margin-top: 15px;\n        min-height: 40px;\n        &:hover {\n            background: var(--button-bg) !important;\n            color: var(--sidebar-text) !important;\n        }\n    }\n\n    h2 {\n        font-size: 20px;\n        margin: 0 0 10px;\n        font-weight: 600;\n    }\n\n    .start-trial-text, .completed-subtitle {\n        font-size: 14px !important;\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        line-height: 20px;\n    }\n\n    .completed-subtitle {\n        margin-top: 5px;\n    }\n\n    .disclaimer, .download-apps {\n        width: 90%;\n        margin-top: 15px;\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        font-family: \"Open Sans\";\n        font-style: normal;\n        font-weight: normal;\n        line-height: 16px;\n    }\n\n    .disclaimer {\n        text-align: left;\n        margin-top: auto;\n        font-size: 11px;\n    }\n\n    .download-apps {\n        margin-top: 24px;\n        width: 200px;\n        font-size: 12px;\n    }\n\n    .style-link {\n        border: none;\n        background: none !important;\n        color: var(--button-bg) !important;\n    }\n\n    .no-thanks-link {\n        display: inline-block;\n        min-width: fit-content;\n        margin-top: 18px;\n        font-weight: 600;\n        font-size: 14px;\n        line-height: 20px;\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n`;\n\ninterface Props {\n    dismissAction: () => void;\n    isCurrentUserSystemAdmin: boolean;\n    isFirstAdmin: boolean;\n}\n\nconst Completed = (props: Props): JSX.Element => {\n    const {dismissAction} = props;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getPrevTrialLicense());\n    }, []);\n\n    const prevTrialLicense = useSelector((state: GlobalState) => state.entities.admin.prevTrialLicense);\n    const license = useSelector(getLicense);\n    const isPrevLicensed = prevTrialLicense?.IsLicensed;\n    const isCurrentLicensed = license?.IsLicensed;\n\n    // Cloud conditions\n    const isCloud = license?.Cloud === 'true';\n\n    // Show this CTA if the instance is currently not licensed and has never had a trial license loaded before\n    // also check that the user is a system admin (this after the onboarding task list is shown to all users)\n    const selfHostedTrialCondition = (isCurrentLicensed === 'false' && isPrevLicensed === 'false') &&\n        (props.isCurrentUserSystemAdmin || props.isFirstAdmin);\n\n    // if Cloud, don't show\n    const showStartTrialBtn = selfHostedTrialCondition && !isCloud;\n\n    return (\n        <>\n            <CSSTransition\n                in={true}\n                timeout={150}\n                classNames='fade'\n            >\n                <CompletedWrapper>\n                    <img\n                        src={completedImg}\n                        alt={'completed tasks image'}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id={'onboardingTask.checklist.completed_title'}\n                            defaultMessage='Well done. You’ve completed all of the tasks!'\n                        />\n                    </h2>\n                    <span className='completed-subtitle'>\n                        <FormattedMessage\n                            id={'onboardingTask.checklist.completed_subtitle'}\n                            defaultMessage='We hope Mattermost is more familiar now.'\n                        />\n                    </span>\n\n                    {showStartTrialBtn ? (\n                        <>\n                            <span className='start-trial-text'>\n                                <FormattedMessage\n                                    id='onboardingTask.checklist.higher_security_features'\n                                    defaultMessage='Interested in our higher-security features?'\n                                /> <br/>\n                                <FormattedMessage\n                                    id='onboardingTask.checklist.start_enterprise_now'\n                                    defaultMessage='Start your free Enterprise trial now!'\n                                />\n                            </span>\n                            <StartTrialBtn\n                                telemetryId='start_trial_from_onboarding_completed_task'\n                                onClick={dismissAction}\n                            />\n                            <button\n                                onClick={dismissAction}\n                                className={'no-thanks-link style-link'}\n                            >\n                                <FormattedMessage\n                                    id={'onboardingTask.checklist.no_thanks'}\n                                    defaultMessage='No, thanks'\n                                />\n                            </button>\n                        </>\n\n                    ) : (\n                        <button\n                            onClick={dismissAction}\n                            className='got-it-button'\n                        >\n                            <FormattedMessage\n                                id={'collapsed_reply_threads_modal.confirm'}\n                                defaultMessage='Got it'\n                            />\n                        </button>\n                    )}\n                    <div className='download-apps'>\n                        <span>\n                            <FormattedMessage\n                                id='onboardingTask.checklist.downloads'\n                                defaultMessage='Now that you’re all set up, <link>download our apps.</link>!'\n                                values={{\n                                    link: (msg: React.ReactNode) => (\n                                        <ExternalLink\n                                            location='onboarding_tasklist_completed'\n                                            href='https://mattermost.com/download#desktop'\n                                        >\n                                            {msg}\n                                        </ExternalLink>\n                                    ),\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {showStartTrialBtn && <div className='disclaimer'>\n                        <span>\n                            <FormattedMessage\n                                id='onboardingTask.checklist.disclaimer'\n                                defaultMessage='By clicking “Start trial”, I agree to the <linkEvaluation>Mattermost Software and Services License Agreement</linkEvaluation>, <linkPrivacy>privacy policy</linkPrivacy> and receiving product emails.'\n                                values={{\n                                    linkEvaluation: (msg: React.ReactNode) => (\n                                        <ExternalLink\n                                            href={LicenseLinks.SOFTWARE_SERVICES_LICENSE_AGREEMENT}\n                                            location='onboarding_tasklist_completed'\n                                        >\n                                            {msg}\n                                        </ExternalLink>\n                                    ),\n                                    linkPrivacy: (msg: React.ReactNode) => (\n                                        <ExternalLink\n                                            href={AboutLinks.PRIVACY_POLICY}\n                                            location='onboarding_tasklist_completed'\n                                        >\n                                            {msg}\n                                        </ExternalLink>\n                                    ),\n                                }}\n                            />\n                        </span>\n                    </div>}\n                </CompletedWrapper>\n            </CSSTransition>\n        </>\n    );\n};\n\nexport default Completed;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Placement} from '@floating-ui/react-dom';\nimport {useFloating, offset as floatingOffset, autoUpdate} from '@floating-ui/react-dom';\nimport React, {useLayoutEffect} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport styled from 'styled-components';\n\nconst Overlay = styled.div`\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    height: 100%;\n    min-height: 100%;\n    left: 0;\n    right: 0;\n    top: 0;\n    position: fixed;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    overscroll-behavior: contain;\n    pointer-events: auto;\n    -ms-scroll-chaining: none;\n    transition: 150ms;\n    transition-property: background-color;\n    transition-timing-function: ease-in-out;\n    z-index: 100;\n    &.fade-enter {\n        background-color: rgba(0, 0, 0, 0);\n    }\n    &.fade-enter-active {\n        background-color: rgba(0, 0, 0, 0.5);\n    }\n    &.fade-enter-done {\n        background-color: rgba(0, 0, 0, 0.5);\n    }\n    &.fade-exit {\n        background-color: rgba(0, 0, 0, 0.5);\n    }\n    &.fade-exit-active {\n        background-color: rgba(0, 0, 0, 0);\n    }\n    &.fade-exit-done {\n        background-color: rgba(0, 0, 0, 0);\n    }\n`;\n\ninterface TaskListPopoverProps {\n    trigger: HTMLButtonElement | null;\n    isVisible: boolean;\n    placement?: Placement;\n    offset?: [number, number];\n    children: React.ReactNode;\n    onClick: () => void;\n}\n\nexport const TaskListPopover = ({\n    trigger,\n    placement = 'top-start',\n    isVisible,\n    offset = [0, 5],\n    children,\n    onClick,\n}: TaskListPopoverProps): JSX.Element | null => {\n    const {x, y, strategy, refs: {setReference, setFloating}} = useFloating({\n        placement,\n        middleware: [floatingOffset({\n            mainAxis: offset[1],\n            crossAxis: offset[0],\n        })],\n        whileElementsMounted: autoUpdate,\n    });\n\n    useLayoutEffect(() => {\n        setReference(trigger);\n    }, [setReference, trigger]);\n\n    const style = {\n        container: {\n            position: strategy,\n            top: y ?? 0,\n            left: x ?? 0,\n            zIndex: isVisible ? 100 : -1,\n        },\n    };\n    return (\n        <>\n            <CSSTransition\n                timeout={150}\n                classNames='fade'\n                in={isVisible}\n                unmountOnExit={true}\n            >\n                <Overlay\n                    onClick={onClick}\n                    data-cy='onboarding-task-list-overlay'\n                />\n            </CSSTransition>\n            <div\n                ref={setFloating}\n                style={style.container}\n            >\n                {children}\n            </div>\n        </>\n    );\n};\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {CompletedAnimation} from './onboarding_tasklist_animations';\n\nexport interface TaskProps {\n    label: React.ReactElement;\n    icon?: React.ReactNode;\n    onClick?: () => void;\n    completedStatus: boolean;\n}\n\nconst StyledTask = styled.div`\n    display: flex;\n    background-color: var(--center-channel-bg);\n    cursor: pointer;\n    width: 100%;\n    padding: 8px 20px;\n    font-size: 14px;\n    align-items: flex-start;\n    color: var(--center-channel-color);\n    position: relative;\n\n    span {\n        div {\n            display: flex;\n            align-items: flex-start;\n            picture {\n                display: flex;\n                align-items: center;\n                margin-right: 10px;\n            }\n        }\n    }\n\n    &.completed {\n        color: var(--denim-status-online);\n\n        span {\n            span {\n                text-decoration: underline;\n                text-decoration-skip-ink: none;\n                text-underline-offset: -0.325em;\n            }\n        }\n    }\n\n    :hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n    }\n    :active {\n        background-color: rgba(var(--button-bg-rgb), 0.08);\n    }\n    :focus {\n        box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.32),\n            inset 0 0 0 2px blue;\n    }\n    transition: background 250ms ease-in-out, color 250ms ease-in-out,\n        box-shadow 250ms ease-in-out;\n`;\n\nexport const Task = (props: TaskProps): JSX.Element => {\n    const {label, completedStatus, onClick} = props;\n\n    const handleOnClick = () => {\n        if (onClick) {\n            onClick();\n        }\n    };\n\n    return (\n        <StyledTask\n            className={completedStatus ? 'completed' : ''}\n            onClick={handleOnClick}\n        >\n            {completedStatus && <CompletedAnimation completed={completedStatus}/>}\n            <span>{label}</span>\n        </StyledTask>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport styled, {css} from 'styled-components';\n\nimport {CloseIcon, PlaylistCheckIcon} from '@mattermost/compass-icons/components';\n\nimport {getPrevTrialLicense} from 'mattermost-redux/actions/admin';\nimport {getMyPreferences, savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {\n    getBool,\n    getMyPreferences as getMyPreferencesSelector,\n    getTheme,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {getShowTaskListBool} from 'selectors/onboarding';\n\nimport CompassThemeProvider from 'components/compass_theme_provider/compass_theme_provider';\nimport {useFirstAdminUser, useIsCurrentUserSystemAdmin} from 'components/global_header/hooks';\nimport {\n    useTasksListWithStatus,\n    OnboardingTaskCategory,\n    OnboardingTaskList,\n} from 'components/onboarding_tasks';\nimport {useHandleOnBoardingTaskTrigger} from 'components/onboarding_tasks/onboarding_tasks_manager';\n\nimport {Preferences, RecommendedNextStepsLegacy} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport {CompletedAnimation} from './onboarding_tasklist_animations';\nimport Completed from './onboarding_tasklist_completed';\nimport {TaskListPopover} from './onboarding_tasklist_popover';\nimport {Task} from './onboarding_tasklist_task';\n\nconst TaskItems = styled.div`\n    border-radius: var(--radius-m);\n    border: solid 1px rgba(var(--center-channel-color-rgb), 0.16);\n    background-color: var(--center-channel-bg);\n    width: 352px;\n    padding: 24px 0;\n    transform: scale(0);\n    opacity: 0;\n    box-shadow: var(--elevation-6);\n    transition: opacity 250ms ease-in-out 0ms, transform 250ms ease-in-out 0ms;\n    transform-origin: left bottom;\n    max-height: ${document.documentElement.clientHeight}px;\n    overflow-y: auto;\n    display: none;\n\n    &.open {\n        transform: scale(1);\n        opacity: 1;\n        display: block;\n    }\n\n    h1 {\n        font-size: 20px;\n        padding: 0 24px;\n        margin: 0;\n    }\n\n    p {\n        font-size: 12px;\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        padding: 4px 24px;\n    }\n\n    .link {\n        font-size: 12px;\n        color: var(--link-color);\n        padding: 12px 24px 0;\n        font-weight: bold;\n        cursor: pointer;\n        display: block;\n        :hover{\n          text-decoration: underline\n        }\n    }\n`;\n\nconst Button = styled.button<{open: boolean}>(({open}) => {\n    return css`\n        width: 36px;\n        height: 36px;\n        padding: 7px;\n        border-radius: var(--radius-full);\n        left: 15px;\n        bottom: 15px;\n        position: fixed;\n        z-index: 101;\n        display: flex;\n        align-items: center;\n        background: var(--center-channel-bg);\n        border: solid 1px rgba(var(--center-channel-color-rgb), 0.16);\n        box-shadow: var(--elevation-3);\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n\n        &:hover {\n            border-color: rgba(var(--center-channel-color-rgb), 0.24);\n            box-shadow: var(--elevation-4);\n            color: rgba(var(--center-channel-color-rgb), 0.75)\n        }\n\n        span {\n            width: 20px;\n            height: 16px;\n            background: var(--button-bg);\n            position: absolute;\n            display: ${open ? 'none' : 'block'};\n            border-radius: 12px;\n            color: var(--button-color);\n            font-weight: bold;\n            font-size: 11px;\n            line-height: 16px;\n            bottom: 22px;\n            left: 22px;\n        }\n    `;\n});\n\nconst OnBoardingTaskList = (): JSX.Element | null => {\n    const {formatMessage} = useIntl();\n    const hasPreferences = useSelector((state: GlobalState) => Object.keys(getMyPreferencesSelector(state)).length !== 0);\n\n    useEffect(() => {\n        dispatch(getPrevTrialLicense());\n        if (!hasPreferences) {\n            dispatch(getMyPreferences());\n        }\n    }, []);\n\n    const open = useSelector(((state: GlobalState) => getBool(state, OnboardingTaskCategory, OnboardingTaskList.ONBOARDING_TASK_LIST_OPEN)));\n    const [trigger, setTrigger] = useState<HTMLButtonElement | null>(null);\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(getCurrentUserId);\n    const handleTaskTrigger = useHandleOnBoardingTaskTrigger();\n    const tasksList = useTasksListWithStatus();\n    const [completedCount, setCompletedCount] = useState(tasksList.filter((task) => task.status).length);\n    const [showAnimation, setShowAnimation] = useState(false);\n    const itemsLeft = tasksList.length - completedCount;\n    const isCurrentUserSystemAdmin = useIsCurrentUserSystemAdmin();\n    const isFirstAdmin = useFirstAdminUser();\n    const isEnableOnboardingFlow = useSelector((state: GlobalState) => getConfig(state).EnableOnboardingFlow === 'true');\n    const [showTaskList, firstTimeOnboarding] = useSelector(\n        getShowTaskListBool,\n        (a, b) => a[0] === b[0] && a[1] === b[1],\n    );\n    const theme = useSelector(getTheme);\n\n    const startTask = (taskName: string) => {\n        toggleTaskList();\n        handleTaskTrigger(taskName);\n    };\n\n    const initOnboardingPrefs = async () => {\n        // save to preferences the show/open-task-list to true\n        // also save the recomendedNextSteps-hide to true to avoid asserting to true\n        // the logic to firstTimeOnboarding\n        await dispatch(savePreferences(currentUserId, [\n            {\n                category: OnboardingTaskCategory,\n                user_id: currentUserId,\n                name: OnboardingTaskList.ONBOARDING_TASK_LIST_SHOW,\n                value: 'true',\n            },\n            {\n                user_id: currentUserId,\n                category: OnboardingTaskCategory,\n                name: OnboardingTaskList.ONBOARDING_TASK_LIST_OPEN,\n                value: 'true',\n            },\n            {\n                user_id: currentUserId,\n                category: Preferences.RECOMMENDED_NEXT_STEPS,\n                name: RecommendedNextStepsLegacy.HIDE,\n                value: 'true',\n            },\n        ]));\n    };\n\n    useEffect(() => {\n        if (firstTimeOnboarding) {\n            initOnboardingPrefs();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (firstTimeOnboarding && showTaskList && isEnableOnboardingFlow) {\n            trackEvent(OnboardingTaskCategory, OnboardingTaskList.ONBOARDING_TASK_LIST_SHOW);\n        }\n    }, [firstTimeOnboarding, showTaskList, isEnableOnboardingFlow]);\n\n    // Done to show task done animation in closed state as well\n    useEffect(() => {\n        const newCCount = tasksList.filter((task) => task.status).length;\n        const show = localStorage.getItem(OnboardingTaskCategory);\n        if (show || ((completedCount + 1) === newCCount && !open)) {\n            setTimeout(() => {\n                setShowAnimation(true);\n                setCompletedCount(newCCount);\n            }, 100);\n            setTimeout(() => {\n                setShowAnimation(false);\n                setCompletedCount(newCCount);\n            }, 500);\n            localStorage.removeItem(OnboardingTaskCategory);\n        } else {\n            setCompletedCount(newCCount);\n        }\n    }, [tasksList, completedCount]);\n\n    const dismissChecklist = useCallback(() => {\n        const preferences = [{\n            user_id: currentUserId,\n            category: OnboardingTaskCategory,\n            name: OnboardingTaskList.ONBOARDING_TASK_LIST_SHOW,\n            value: 'false',\n        },\n        {\n            user_id: currentUserId,\n            category: OnboardingTaskCategory,\n            name: OnboardingTaskList.ONBOARDING_TASK_LIST_OPEN,\n            value: 'false',\n        }];\n        dispatch(savePreferences(currentUserId, preferences));\n        trackEvent(OnboardingTaskCategory, OnboardingTaskList.DECLINED_ONBOARDING_TASK_LIST);\n    }, [currentUserId]);\n\n    const toggleTaskList = useCallback(() => {\n        const preferences = [{\n            user_id: currentUserId,\n            category: OnboardingTaskCategory,\n            name: OnboardingTaskList.ONBOARDING_TASK_LIST_OPEN,\n            value: String(!open),\n        }];\n        dispatch(savePreferences(currentUserId, preferences));\n        trackEvent(OnboardingTaskCategory, open ? OnboardingTaskList.ONBOARDING_TASK_LIST_CLOSE : OnboardingTaskList.ONBOARDING_TASK_LIST_OPEN);\n    }, [open, currentUserId]);\n\n    if (!hasPreferences || !showTaskList || !isEnableOnboardingFlow) {\n        return null;\n    }\n\n    return (\n        <CompassThemeProvider theme={theme}>\n            <CompletedAnimation completed={showAnimation}/>\n            <Button\n                onClick={toggleTaskList}\n                ref={(element) => setTrigger(element)}\n                open={open}\n                data-cy='onboarding-task-list-action-button'\n                aria-label={formatMessage({id: 'onboardingTask.checklist.start_onboarding_process', defaultMessage: 'Start the onboarding process.'})}\n            >\n                {open ? <CloseIcon size={20}/> : <PlaylistCheckIcon size={20}/>}\n                {itemsLeft !== 0 && (<span>{itemsLeft}</span>)}\n            </Button>\n            <TaskListPopover\n                isVisible={open}\n                trigger={trigger}\n                onClick={toggleTaskList}\n            >\n                <TaskItems className={open ? 'open' : ''}>\n                    {completedCount === tasksList.length ? (\n                        <Completed\n                            dismissAction={dismissChecklist}\n                            isFirstAdmin={isFirstAdmin}\n                            isCurrentUserSystemAdmin={isCurrentUserSystemAdmin}\n                        />\n                    ) : (\n                        <>\n                            <h1>\n                                <FormattedMessage\n                                    id='next_steps_view.welcomeToMattermost'\n                                    defaultMessage='Welcome to Mattermost'\n                                />\n                            </h1>\n                            <p>\n                                <FormattedMessage\n                                    id='onboardingTask.checklist.main_subtitle'\n                                    defaultMessage=\"Let's get up and running.\"\n                                />\n                            </p>\n                            {tasksList.map((task) => (\n                                <Task\n                                    key={OnboardingTaskCategory + task.name}\n                                    label={task.label()}\n                                    onClick={() => {\n                                        startTask(task.name);\n                                    }}\n                                    completedStatus={task.status}\n                                />\n                            ))}\n                            <span\n                                className='link'\n                                onClick={dismissChecklist}\n                            >\n                                <FormattedMessage\n                                    id='onboardingTask.checklist.dismiss_link'\n                                    defaultMessage='No thanks, I’ll figure it out myself'\n                                />\n                            </span>\n                        </>\n                    )}\n                </TaskItems>\n            </TaskListPopover>\n        </CompassThemeProvider>\n    );\n};\n\nexport default OnBoardingTaskList;\n"],"names":["DEFAULT_STATUSICON_SIZE","STATUSICON_SIZE_MAP","xs","sm","md","lg","xl","withConfig","shouldForwardProp","property","validator","forceForwardProperty","blockProperty","theme","status","css","badges","_a","size","rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","glyph","rootProperties","assign","Animation","styled","displayName","CompletedAnimation","props","React","className","completed","StatusIcon","CompletedWrapper","Completed","dismissAction","dispatch","useDispatch","useEffect","getPrevTrialLicense","prevTrialLicense","useSelector","state","entities","admin","license","getLicense","isPrevLicensed","IsLicensed","isCurrentLicensed","isCloud","Cloud","showStartTrialBtn","isCurrentUserSystemAdmin","isFirstAdmin","CSSTransition","in","timeout","classNames","src","completedImg","alt","FormattedMessage","id","defaultMessage","StartTrialBtn","telemetryId","onClick","values","link","msg","ExternalLink","location","href","linkEvaluation","LicenseLinks","SOFTWARE_SERVICES_LICENSE_AGREEMENT","linkPrivacy","AboutLinks","PRIVACY_POLICY","propTypes","_pt","isRequired","Overlay","TaskListPopover","_ref","trigger","placement","isVisible","offset","children","x","y","strategy","refs","setReference","setFloating","useFloating","middleware","floatingOffset","mainAxis","crossAxis","whileElementsMounted","autoUpdate","useLayoutEffect","style","container","position","top","left","zIndex","unmountOnExit","ref","StyledTask","Task","label","completedStatus","handleOnClick","icon","TaskItems","document","documentElement","clientHeight","Button","open","OnBoardingTaskList","formatMessage","useIntl","hasPreferences","keys","getMyPreferencesSelector","getMyPreferences","getBool","OnboardingTaskCategory","OnboardingTaskList","ONBOARDING_TASK_LIST_OPEN","setTrigger","useState","currentUserId","getCurrentUserId","handleTaskTrigger","useHandleOnBoardingTaskTrigger","tasksList","useTasksListWithStatus","completedCount","setCompletedCount","filter","task","showAnimation","setShowAnimation","itemsLeft","useIsCurrentUserSystemAdmin","useFirstAdminUser","isEnableOnboardingFlow","getConfig","EnableOnboardingFlow","showTaskList","firstTimeOnboarding","getShowTaskListBool","a","b","getTheme","async","savePreferences","category","user_id","name","ONBOARDING_TASK_LIST_SHOW","value","Preferences","RECOMMENDED_NEXT_STEPS","RecommendedNextStepsLegacy","HIDE","initOnboardingPrefs","trackEvent","newCCount","localStorage","getItem","setTimeout","removeItem","dismissChecklist","useCallback","preferences","DECLINED_ONBOARDING_TASK_LIST","toggleTaskList","String","ONBOARDING_TASK_LIST_CLOSE","CompassThemeProvider","element","CloseIcon","PlaylistCheckIcon","map","key","taskName"],"sourceRoot":""}