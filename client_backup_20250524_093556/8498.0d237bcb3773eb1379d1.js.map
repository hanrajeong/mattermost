{"version":3,"file":"8498.0d237bcb3773eb1379d1.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/add_groups_to_channel_modal/add_groups_to_channel_modal.tsx","webpack://mattermost-webapp/./src/components/add_groups_to_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/add_groups_to_team_modal/add_groups_to_team_modal.tsx","webpack://mattermost-webapp/./src/components/add_groups_to_team_modal/index.ts","webpack://mattermost-webapp/./src/components/common/hooks/useGetUsageDeltas.ts","webpack://mattermost-webapp/./src/components/common/svg_images_components/magnifying_glass_svg.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/checkbox_checked_icon.tsx","webpack://mattermost-webapp/./src/types/actions.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport type {IntlShape} from 'react-intl';\nimport {injectIntl, FormattedMessage, defineMessage} from 'react-intl';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {Group, GroupSource, SyncablePatch} from '@mattermost/types/groups';\nimport {SyncableType} from '@mattermost/types/groups';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport MultiSelect from 'components/multiselect/multiselect';\nimport type {Value} from 'components/multiselect/multiselect';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport Constants from 'utils/constants';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\ntype GroupValue = (Group & Value);\n\nexport type Props = {\n    currentChannelName: string;\n    currentChannelId: string;\n    intl: IntlShape;\n    teamID: string;\n    searchTerm: string;\n    groups: Group[];\n    excludeGroups?: Group[];\n    includeGroups?: Group[];\n    onExited: () => void;\n    skipCommit?: boolean;\n    onAddCallback?: (groupIDs: string[]) => void;\n\n    actions: {\n        getGroupsNotAssociatedToChannel: (channelID: string, q?: string, page?: number, perPage?: number, filterParentTeamPermitted?: boolean, source?: GroupSource | string, onlySyncableSources?: boolean) => Promise<ActionResult>;\n        setModalSearchTerm: (term: string) => void;\n        linkGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType, patch: Partial<SyncablePatch>) => Promise<ActionResult>;\n        getAllGroupsAssociatedToChannel: (channelID: string, filterAllowReference: boolean, includeMemberCount: boolean) => Promise<ActionResult>;\n        getTeam: (teamId: string) => Promise<ActionResult>;\n        getAllGroupsAssociatedToTeam: (teamID: string, filterAllowReference: boolean, includeMemberCount: boolean) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    values: GroupValue[];\n    show: boolean;\n    search: boolean;\n    saving: boolean;\n    addError: string | null;\n    loadingGroups: boolean;\n}\n\nexport class AddGroupsToChannelModal extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n    private selectedItemRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n\n        this.selectedItemRef = React.createRef();\n    }\n\n    componentDidMount() {\n        Promise.all([\n            this.props.actions.getTeam(this.props.teamID),\n            this.props.actions.getAllGroupsAssociatedToTeam(this.props.teamID, false, true),\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, '', 0, GROUPS_PER_PAGE + 1, true, '', true),\n            this.props.actions.getAllGroupsAssociatedToChannel(this.props.currentChannelId, false, true),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.searchTerm !== prevProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = window.setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, searchTerm, undefined, undefined, true, '', true);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    };\n\n    handleResponse = (err?: ServerError) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    };\n\n    handleSubmit = async () => {\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        await Promise.all(groupIDs.map(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentChannelId, SyncableType.Channel, {auto_add: true});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        }));\n    };\n\n    addValue = (value: GroupValue) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v: Group) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    };\n\n    setGroupsLoadingState = (loadingState: boolean) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    };\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1, true, '', true).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    };\n\n    handleDelete = (values: GroupValue[]) => {\n        this.setState({values});\n    };\n\n    search = (term: string) => {\n        this.props.actions.setModalSearchTerm(term);\n    };\n\n    renderOption = (option: GroupValue, isSelected: boolean, onAdd: (value: GroupValue) => void, onMouseMove?: (value: GroupValue) => void) => {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? this.selectedItemRef : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => (onMouseMove ? onMouseMove(option) : undefined)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}{'\\u00A0-\\u00A0'}<span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <button\n                        className='more-modal__actions--round'\n                        aria-label='Add groups to channel'\n                    >\n                        <i className='icon icon-plus'/>\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    renderValue(props: { data: Partial<Value> }) {\n        return props.data.display_name;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = defineMessage({id: 'multiselect.add', defaultMessage: 'Add'});\n        const buttonSubmitLoadingText = defineMessage({id: 'multiselect.adding', defaultMessage: 'Adding...'});\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og: Group) => !this.props.excludeGroups!.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og: Group) => this.props.includeGroups!.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n        const groupsToShowValues = groupsToShow.map((group) => {\n            return {label: group.display_name, value: group.id, ...group};\n        });\n\n        return (\n            <Modal\n                id='addGroupsToChannelModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.props.onExited}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_groups_to_channel.title'\n                            defaultMessage='Add New Groups to {channelName} Channel'\n                            values={{\n                                channelName: (\n                                    <strong>{this.props.currentChannelName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToChannelKey'\n                        options={groupsToShowValues}\n                        optionRenderer={this.renderOption}\n                        intl={this.props.intl}\n                        selectedItemRef={this.selectedItemRef}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={defineMessage({id: 'multiselect.addGroupsPlaceholder', defaultMessage: 'Search and add groups'})}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(AddGroupsToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Group} from '@mattermost/types/groups';\n\nimport {getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';\nimport {getTeam} from 'mattermost-redux/actions/teams';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport type {GlobalState} from 'types/store';\n\nimport AddGroupsToChannelModal from './add_groups_to_channel_modal';\n\ntype OwnProps = {\n    channel: Channel;\n    skipCommit: boolean;\n    onAddCallback: (groupIDs: string[]) => void;\n    excludeGroups: Group[];\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const channel = ownProps.channel || getCurrentChannel(state) || {};\n\n    let groups = selectGroupsNotAssociatedToChannel(state, channel.id, channel.team_id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentChannelName: channel.display_name,\n        currentChannelId: channel.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n        teamID: channel.team_id,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToChannel,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToChannel,\n            getTeam,\n            getAllGroupsAssociatedToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport type {IntlShape} from 'react-intl';\nimport {injectIntl, FormattedMessage, defineMessage} from 'react-intl';\n\nimport type {Group, SyncablePatch, GroupSource} from '@mattermost/types/groups';\nimport {SyncableType} from '@mattermost/types/groups';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport Nbsp from 'components/html_entities/nbsp';\nimport MultiSelect from 'components/multiselect/multiselect';\nimport type {Value} from 'components/multiselect/multiselect';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport {focusElement} from 'utils/a11y_utils';\nimport Constants from 'utils/constants';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\ntype GroupValue = Value & {member_count?: number};\n\ntype Props = {\n    currentTeamName?: string;\n    currentTeamId: string;\n    intl: IntlShape;\n    searchTerm: string;\n    groups: Group[];\n    focusOriginElement?: string;\n\n    // used in tandem with 'skipCommit' to allow using this component without performing actual linking\n    excludeGroups?: Group[];\n    includeGroups?: Group[];\n    onExited: () => void;\n    skipCommit?: boolean;\n    onAddCallback?: (groupIDs: string[]) => void;\n    actions: Actions;\n}\n\nexport type Actions = {\n    getGroupsNotAssociatedToTeam: (teamID: string, q?: string, page?: number, perPage?: number, source?: GroupSource | string, onlySyncableSources?: boolean) => Promise<ActionResult>;\n    setModalSearchTerm: (term: string) => void;\n    linkGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType, patch: SyncablePatch) => Promise<ActionResult>;\n    getAllGroupsAssociatedToTeam: (teamID: string, filterAllowReference: boolean, includeMemberCount: boolean) => Promise<ActionResult>;\n};\n\ntype State = {\n    values: GroupValue[];\n    show: boolean;\n    search: boolean;\n    saving: boolean;\n    addError: null | string;\n    loadingGroups: boolean;\n}\n\nexport class AddGroupsToTeamModal extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n    private readonly selectedItemRef: RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n\n        this.selectedItemRef = React.createRef();\n    }\n\n    public componentDidMount() {\n        Promise.all([\n            this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, '', 0, GROUPS_PER_PAGE + 1, '', true),\n            this.props.actions.getAllGroupsAssociatedToTeam(this.props.currentTeamId, false, true),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (this.props.searchTerm !== prevProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = window.setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, searchTerm, 0, GROUPS_PER_PAGE + 1, '', true);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n        }\n    }\n\n    // public for tests\n    public handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    };\n\n    // public for tests\n    public handleExit = (): void => {\n        if (this.props.focusOriginElement) {\n            focusElement(this.props.focusOriginElement, true);\n        }\n        this.props.onExited();\n    };\n\n    // public for tests\n    public handleResponse = (err?: Error): void => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    };\n\n    // public for tests\n    public handleSubmit = async () => {\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        await Promise.all(groupIDs.map(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentTeamId, SyncableType.Team, {auto_add: true, scheme_admin: false});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        }));\n    };\n\n    // public for tests\n    public addValue = (value: GroupValue): void => {\n        const values = Object.assign<GroupValue[], GroupValue[]>([], this.state.values);\n        const userIds = values.map((v) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    };\n\n    private setGroupsLoadingState = (loadingState: boolean) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    };\n\n    // public for tests\n    public handlePageChange = (page: number, prevPage: number): void => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1, '', true).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    };\n\n    // public for tests\n    public handleDelete = (values: GroupValue[]): void => this.setState({values});\n\n    // public for tests\n    public search = (term: string): void => this.props.actions.setModalSearchTerm(term);\n\n    // public for tests\n    public renderOption = (option: GroupValue, isSelected: boolean, onAdd: (value: GroupValue) => void, onMouseMove: (value: GroupValue) => void): JSX.Element => {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? this.selectedItemRef : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}<Nbsp/>{'-'}<Nbsp/><span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <button\n                        className='more-modal__actions--round'\n                        aria-label='Add groups to team'\n                    >\n                        <i className='icon icon-plus'/>\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    // public for tests\n    public renderValue = (props: { data: Value }): string | undefined => props.data.display_name;\n\n    public render(): JSX.Element {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = defineMessage({id: 'multiselect.add', defaultMessage: 'Add'});\n        const buttonSubmitLoadingText = defineMessage({id: 'multiselect.adding', defaultMessage: 'Adding...'});\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (\n                <div className='has-error col-sm-12'>\n                    <label className='control-label font-weight--normal'>\n                        {this.state.addError}\n                    </label>\n                </div>\n            );\n        }\n\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og: Group) => !this.props.excludeGroups?.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og: Group) => this.props.includeGroups?.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n\n        const groupsOptionsToShow = groupsToShow.map((group) => {\n            return {...group, label: group.display_name, value: group.id};\n        });\n\n        return (\n            <Modal\n                id='addGroupsToTeamModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_groups_to_team.title'\n                            defaultMessage='Add New Groups to {teamName} Team'\n                            values={{\n                                teamName: (\n                                    <strong>{this.props.currentTeamName ?? ''}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToTeamKey'\n                        options={groupsOptionsToShow}\n                        optionRenderer={this.renderOption}\n                        intl={this.props.intl}\n                        selectedItemRef={this.selectedItemRef}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={defineMessage({id: 'multiselect.addGroupsPlaceholder', defaultMessage: 'Search and add groups'})}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(AddGroupsToTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Group} from '@mattermost/types/groups';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {getGroupsNotAssociatedToTeam, linkGroupSyncable, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';\nimport {getGroupsNotAssociatedToTeam as selectGroupsNotAssociatedToTeam} from 'mattermost-redux/selectors/entities/groups';\nimport {getCurrentTeam, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport type {GlobalState} from 'types/store';\n\nimport AddGroupsToTeamModal from './add_groups_to_team_modal';\n\ntype Props = {\n    team?: Team;\n    skipCommit?: boolean;\n    onAddCallback?: (groupIDs: string[]) => void;\n    excludeGroups?: Group[];\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const team = ownProps.team || getCurrentTeam(state);\n\n    let groups = selectGroupsNotAssociatedToTeam(state, team?.id || '');\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentTeamName: team?.display_name,\n        currentTeamId: team?.id ?? getCurrentTeamId(state),\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToTeam,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useMemo} from 'react';\n\nimport type {CloudUsage} from '@mattermost/types/cloud';\n\nimport useGetLimits from './useGetLimits';\nimport useGetUsage from './useGetUsage';\n\n// Returns an object of type CloudUsage with the values being the delta between the limit, and the actual usage of this installation.\n// A value < 0 means that they are NOT over the limit. A value > 0 means they've exceeded that limit\n// 2 teams used, minus 1 team limit = value > 0, limit exceeded\n// 10MB files used, minus 1000MB limit = value < 0, limit not exceeded.\n// etc.\n// withBackupValue will set the limit arbitrarily high in the event that the limit isn't set\nexport const withBackupValue = (maybeLimit: number | undefined, limitsLoaded: boolean) => (limitsLoaded ? (maybeLimit ?? Number.MAX_VALUE) : Number.MAX_VALUE);\n\nexport default function useGetUsageDeltas(): CloudUsage {\n    const usage = useGetUsage();\n    const [limits, limitsLoaded] = useGetLimits();\n\n    const usageDelta = useMemo(() => {\n        return (\n            {\n                files: {\n                    totalStorage: usage.files.totalStorage - withBackupValue(limits.files?.total_storage, limitsLoaded),\n                    totalStorageLoaded: usage.files.totalStorageLoaded,\n                },\n                messages: {\n                    history: usage.messages.history - withBackupValue(limits.messages?.history, limitsLoaded),\n                    historyLoaded: usage.messages.historyLoaded,\n                },\n                teams: {\n                    active: usage.teams.active - withBackupValue(limits.teams?.active, limitsLoaded),\n\n                    // cloudArchived doesn't count against usage, but we pass the value along for convenience\n                    cloudArchived: usage.teams.cloudArchived,\n                    teamsLoaded: usage.teams.teamsLoaded,\n                },\n            }\n        );\n    }, [usage, limits, limitsLoaded]);\n\n    return usageDelta;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {SVGProps} from 'react';\n\nconst SvgComponent = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        width={140}\n        height={141}\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        {...props}\n    >\n        <path\n            opacity={0.4}\n            d='M37.593 38.008c4.754-4.815 10.754-7.295 17.989-7.428 7.101.133 13.065 2.601 17.892 7.428 4.815 4.827 7.295 10.791 7.428 17.892-.133 7.235-2.601 13.223-7.428 17.99-4.827 4.754-10.791 7.27-17.892 7.512-7.235-.254-13.223-2.758-17.99-7.513-4.754-4.766-7.258-10.766-7.512-18 .254-7.102 2.758-13.066 7.513-17.881Z'\n            fill='#fff'\n        />\n        <path\n            d='M78.887 51.382c-2.151-6.992-6.225-12.225-12.226-15.69-6.001-3.465-12.57-4.376-19.701-2.743-3.9.995-7.297 2.717-10.22 5.162 3.269-3.567 7.415-6.037 12.428-7.416 7.13-1.633 13.732-.703 19.787 2.793s10.161 8.748 12.313 15.74c1.323 5.037 1.257 9.862-.21 14.47-1.454 4.614-4.066 8.49-7.84 11.611 2.833-3.087 4.783-6.713 5.844-10.894 1.05-4.187.991-8.522-.175-13.033Z'\n            fill='#000'\n            fillOpacity={0.4}\n        />\n        <path\n            d='M86.76 53.929c-.508-7.506-3.553-14.097-9.125-19.774-6.346-6.05-13.67-9.08-21.974-9.08-8.303 0-15.616 3.03-21.961 9.08-6.08 6.315-9.126 13.591-9.126 21.855 0 8.262 3.046 15.551 9.126 21.854 5.826 5.556 12.485 8.551 19.967 8.984 7.481.445 14.383-1.611 20.728-6.146l4.75 4.727 6.08-6.05-4.75-4.727c4.69-6.302 6.78-13.218 6.285-20.723Zm-13.126 19.87c-4.823 4.726-10.781 7.228-17.876 7.468-7.228-.252-13.21-2.742-17.973-7.469-4.75-4.727-7.252-10.692-7.506-17.885.254-7.06 2.756-12.99 7.506-17.789 4.75-4.787 10.745-7.252 17.973-7.385 7.095.133 13.053 2.586 17.876 7.385 4.81 4.8 7.288 10.73 7.421 17.79-.133 7.192-2.599 13.157-7.421 17.884Z'\n            fill='#BABEC9'\n        />\n        <path\n            d='M106.202 114.187c-1.567.449-2.728.291-3.482-.472L78.06 86.651c-.753-.762-1.064-1.743-.945-2.954.12-1.211.874-2.567 2.262-4.093 1.507-1.393 2.847-2.192 4.044-2.385 1.196-.194 2.165.157 2.92 1.053l26.921 24.957c.753.763.873 1.901.37 3.427-.502 1.525-1.447 3.051-2.823 4.577-1.496 1.526-3.039 2.506-4.607 2.954Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='m108.007 98.343-10.08 10.164-12.154-13.34 8.914-9.106 13.32 12.282Z'\n            fill='#7A5600'\n        />\n    </svg>\n);\n\nexport default SvgComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nconst CheckboxCheckedIcon = () => (\n    <svg\n        width='18px'\n        height='18px'\n        viewBox='0 0 18 18'\n    >\n        <g\n            id='Developer-Export'\n            stroke='none'\n            strokeWidth='1'\n            fillRule='evenodd'\n        >\n            <g\n                transform='translate(-285.000000, -933.000000)'\n                id='All-Team-Members'\n            >\n                <g transform='translate(245.000000, 698.000000)'>\n                    <g\n                        id='Channel-Administrators'\n                        transform='translate(0.000000, 106.000000)'\n                    >\n                        <g\n                            id='data-table/column-1'\n                            transform='translate(11.000000, 86.000000)'\n                        >\n                            <g\n                                id='row-checkbox---Public-Channels'\n                                transform='translate(12.000000, 35.000000)'\n                            >\n                                <g\n                                    id='Stacked-Group'\n                                    transform='translate(0.000000, 5.000000)'\n                                >\n                                    <g id='data-table/1st/row-checkbox-label-base'>\n                                        <g\n                                            id='check-on-copy-11'\n                                            transform='translate(14.000000, 0.000000)'\n                                        >\n                                            <path\n                                                d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                id='checkbox---checked'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\n\nexport default memo(CheckboxCheckedIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nexport type SuccessResult = {data: any}\n\nexport type ErrorResult = {error: any}\n\nexport function isSuccess(result: ActionResult): result is SuccessResult {\n    return 'data' in result && !isError(result);\n}\n\nexport function isError(result: ActionResult): result is ErrorResult {\n    return Boolean((result as ErrorResult).error);\n}\n\nexport type ModalData<ModalProps> = {\n    modalId: string;\n    dialogProps?: Omit<ModalProps, 'onHide' | 'onExited'> & {onHide?: () => void; onExited?: () => void};\n    dialogType: React.ElementType<ModalProps>;\n}\n"],"names":["AddGroupsToChannelModal","React","constructor","props","super","_defineProperty","this","actions","setModalSearchTerm","setState","show","err","addError","message","saving","async","groupIDs","state","values","map","v","id","length","skipCommit","onAddCallback","handleHide","Promise","all","error","linkGroupSyncable","groupID","currentChannelId","SyncableType","Channel","auto_add","handleResponse","value","Object","assign","userIds","indexOf","push","loadingState","loadingGroups","page","prevPage","setGroupsLoadingState","getGroupsNotAssociatedToChannel","searchTerm","GROUPS_PER_PAGE","then","term","option","isSelected","onAdd","onMouseMove","rowSelected","key","ref","selectedItemRef","className","onClick","undefined","src","groupsAvatar","alt","width","height","display_name","FormattedMessage","defaultMessage","num","member_count","searchTimeoutId","search","componentDidMount","getTeam","teamID","getAllGroupsAssociatedToTeam","getAllGroupsAssociatedToChannel","componentDidUpdate","prevProps","clearTimeout","window","setTimeout","Constants","SEARCH_TIMEOUT_MILLISECONDS","renderValue","data","render","numRemainingText","buttonSubmitText","defineMessage","buttonSubmitLoadingText","groupsToShow","groups","excludeGroups","hasGroup","og","find","g","filter","includeGroups","groupsToShowValues","group","_objectSpread","label","Modal","dialogClassName","onHide","onExited","Header","closeButton","Title","componentClass","channelName","currentChannelName","Body","MultiSelect","options","optionRenderer","renderOption","intl","valueRenderer","perPage","handlePageChange","handleInput","handleDelete","handleAdd","addValue","handleSubmit","maxValues","loading","placeholderText","_pt","isRequired","injectIntl","connect","ownProps","views","modalSearch","channel","getCurrentChannel","selectGroupsNotAssociatedToChannel","team_id","regex","RegExp","test","name","dispatch","bindActionCreators","AddGroupsToTeamModal","focusOriginElement","focusElement","currentTeamId","Team","scheme_admin","getGroupsNotAssociatedToTeam","Nbsp","_this$props$currentTe","_this$props$excludeGr","_this$props$includeGr","groupsOptionsToShow","handleExit","teamName","currentTeamName","_team$id","team","getCurrentTeam","selectGroupsNotAssociatedToTeam","getCurrentTeamId","withBackupValue","maybeLimit","limitsLoaded","Number","MAX_VALUE","useGetUsageDeltas","usage","useGetUsage","limits","useGetLimits","useMemo","_limits$files","_limits$messages","_limits$teams","files","totalStorage","total_storage","totalStorageLoaded","messages","history","historyLoaded","teams","active","cloudArchived","teamsLoaded","fill","xmlns","opacity","d","fillOpacity","CheckboxCheckedIcon","viewBox","stroke","strokeWidth","fillRule","transform","memo","isSuccess","result","isError","Boolean"],"sourceRoot":""}