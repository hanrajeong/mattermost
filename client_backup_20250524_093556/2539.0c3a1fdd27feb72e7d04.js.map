{"version":3,"file":"2539.0c3a1fdd27feb72e7d04.js","mappings":"qUA0BA,MAAMA,GAAiBC,EAAAA,EAAAA,MAIjBC,EACFC,IAAAA,cAAA,KACI,cAAY,oBACZC,UAAU,sDAIZC,EACFF,IAAAA,cAAA,KACI,cAAY,YACZC,UAAU,kDAIlB,SAASE,IACL,MAAMC,GAAWC,EAAAA,EAAAA,eAEXC,GAA8BC,EAAAA,EAAAA,SAAO,GAErCC,GAAgCC,EAAAA,EAAAA,aAAYC,EAAAA,IAC5CC,GAAaF,EAAAA,EAAAA,aAAYZ,GACzBe,GAASH,EAAAA,EAAAA,aAAYI,EAAAA,IACrBC,GAAyBL,EAAAA,EAAAA,cAAaM,IAAuBC,EAAAA,EAAAA,IAA6BD,EAAOH,GAAQ,KACzGK,GAAyBR,EAAAA,EAAAA,aAAYS,EAAAA,IAIrCC,EAFYR,EAAa,GAEEM,GADPH,EAAyB,EAG7CM,GAAyBX,EAAAA,EAAAA,cAAaM,IAAuBM,EAAAA,EAAAA,GAAsBN,EAAOH,MAE1F,IAACU,IAAOC,EAAAA,EAAAA,iBACRC,GAAkBD,EAAAA,EAAAA,eAAc,iBAChCE,GAA0BF,EAAAA,EAAAA,eAAc,UAAYG,EAAAA,IAEpDC,EAAaC,QAAQJ,GAAmBC,GAExCI,GAAkBC,EAAAA,EAAAA,cAAY,IAAMH,GAAY,CAACA,KAEvDI,EAAAA,EAAAA,YAAU,KACFvB,GACAJ,GAAS4B,EAAAA,EAAAA,IAAUpB,GACvB,GACD,CAACA,EAAQJ,EAA+BJ,KAE3C2B,EAAAA,EAAAA,YAAU,KACN,MAAME,GAAiB3B,EAA4B4B,QAE/CjB,GACAb,GAAS+B,EAAAA,EAAAA,IAAwBvB,EAAQqB,IAG7C3B,EAA4B4B,SAAU,CAAI,GAC3C,CAAC9B,EAAUa,EAAwBL,IAEtC,MAAMwB,EAAyBnB,GAA0BH,EAAyB,EAE5EuB,GAAcC,EAAAA,EAAAA,UAAQ,IAUpBtC,IAAAA,cAACuC,EAAAA,iBAAgB,CACbC,GAAG,qBACHC,eAAe,GACfC,OAAQ,CACJ/B,aACAgC,mBAAoB7B,EACpB8B,GAfQC,GACZlC,EAAa,GAAKG,EAAyB,EACnCd,IAAAA,cAAAA,IAAAA,SAAA,KAAEA,IAAAA,cAAA,WAAM6C,GAGb,SAcZ,CAAClC,EAAYG,IAEhB,OAAKK,GAAeQ,EAKhB3B,IAAAA,cAAA,MAAIC,UAAU,0DACVD,IAAAA,cAAA,MACIC,UAAU,iBACV6C,UAAW,EACXN,GAAG,yBAEHxC,IAAAA,cAAC+C,EAAAA,QAAO,CACJC,GAAE,GAAAC,OAAK3B,EAAG,WACVkB,GAAG,qBACHU,gBAAgB,SAChBC,UAAU,QACVlD,UAAU,2BACV6C,SAAU,EACVM,SAAUvB,GAEV7B,IAAAA,cAAA,KACI,cAAY,eACZC,UAAU,kCAEdD,IAAAA,cAAA,OAAKC,UAAU,mCACXD,IAAAA,cAAA,QAAMC,UAAU,8CACZD,IAAAA,cAACuC,EAAAA,iBAAgB,CACbC,GAAG,qBACHC,eAAe,aAI3BzC,IAAAA,cAACqD,EAAAA,EAAW,CACRC,MAAOjB,GAEPrC,IAAAA,cAAA,WAEQW,EAAa,GACbX,IAAAA,cAACuD,EAAAA,EAAmB,CAChBC,eAAgB7C,EAChB8C,KAAMvD,IAKVkC,GACApC,IAAAA,cAACuD,EAAAA,EAAmB,CAChBC,eAAgB1C,EAChB2C,KAAM1D,EACNE,UAAWyD,IAAW,qBAAsB,CAACC,WAAYvC,IACzDwC,UAAWxC,SAjDhC,IA0Df,CAEA,SAAeyC,EAAAA,EAAAA,MAAK1D,E","sources":["webpack://mattermost-webapp/./src/components/drafts/drafts_link/drafts_link.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useEffect, useMemo, useRef} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {NavLink, useRouteMatch} from 'react-router-dom';\n\nimport {fetchTeamScheduledPosts} from 'mattermost-redux/actions/scheduled_posts';\nimport {syncedDraftsAreAllowedAndEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    getScheduledPostsByTeamCount, hasScheduledPostError, isScheduledPostsEnabled,\n} from 'mattermost-redux/selectors/entities/scheduled_posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getDrafts} from 'actions/views/drafts';\nimport {makeGetDraftsCount} from 'selectors/drafts';\n\nimport ChannelMentionBadge from 'components/sidebar/sidebar_channel/channel_mention_badge';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {SCHEDULED_POST_URL_SUFFIX} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nconst getDraftsCount = makeGetDraftsCount();\n\nimport './drafts_link.scss';\n\nconst scheduleIcon = (\n    <i\n        data-testid='scheduledPostIcon'\n        className='icon icon-draft-indicator icon-clock-send-outline'\n    />\n);\n\nconst pencilIcon = (\n    <i\n        data-testid='draftIcon'\n        className='icon icon-draft-indicator icon-pencil-outline'\n    />\n);\n\nfunction DraftsLink() {\n    const dispatch = useDispatch();\n\n    const initialScheduledPostsLoaded = useRef(false);\n\n    const syncedDraftsAllowedAndEnabled = useSelector(syncedDraftsAreAllowedAndEnabled);\n    const draftCount = useSelector(getDraftsCount);\n    const teamId = useSelector(getCurrentTeamId);\n    const teamScheduledPostCount = useSelector((state: GlobalState) => getScheduledPostsByTeamCount(state, teamId, true));\n    const isScheduledPostEnabled = useSelector(isScheduledPostsEnabled);\n\n    const hasDrafts = draftCount > 0;\n    const hasScheduledPosts = teamScheduledPostCount > 0;\n    const itemsExist = hasDrafts || (isScheduledPostEnabled && hasScheduledPosts);\n\n    const scheduledPostsHasError = useSelector((state: GlobalState) => hasScheduledPostError(state, teamId));\n\n    const {url} = useRouteMatch();\n    const isDraftUrlMatch = useRouteMatch('/:team/drafts');\n    const isScheduledPostUrlMatch = useRouteMatch('/:team/' + SCHEDULED_POST_URL_SUFFIX);\n\n    const urlMatches = Boolean(isDraftUrlMatch || isScheduledPostUrlMatch);\n\n    const isNavLinkActive = useCallback(() => urlMatches, [urlMatches]);\n\n    useEffect(() => {\n        if (syncedDraftsAllowedAndEnabled) {\n            dispatch(getDrafts(teamId));\n        }\n    }, [teamId, syncedDraftsAllowedAndEnabled, dispatch]);\n\n    useEffect(() => {\n        const loadDMsAndGMs = !initialScheduledPostsLoaded.current;\n\n        if (isScheduledPostEnabled) {\n            dispatch(fetchTeamScheduledPosts(teamId, loadDMsAndGMs));\n        }\n\n        initialScheduledPostsLoaded.current = true;\n    }, [dispatch, isScheduledPostEnabled, teamId]);\n\n    const showScheduledPostCount = isScheduledPostEnabled && teamScheduledPostCount > 0;\n\n    const tooltipText = useMemo(() => {\n        const lineBreaks = (x: React.ReactNode) => {\n            if (draftCount > 0 && teamScheduledPostCount > 0) {\n                return (<><br/>{x}</>);\n            }\n\n            return null;\n        };\n\n        return (\n            <FormattedMessage\n                id='drafts.tooltipText'\n                defaultMessage=''\n                values={{\n                    draftCount,\n                    scheduledPostCount: teamScheduledPostCount,\n                    br: lineBreaks,\n                }}\n            />\n        );\n    }, [draftCount, teamScheduledPostCount]);\n\n    if (!itemsExist && !urlMatches) {\n        return null;\n    }\n\n    return (\n        <ul className='SidebarDrafts NavGroupContent nav nav-pills__container'>\n            <li\n                className='SidebarChannel'\n                tabIndex={-1}\n                id='sidebar-drafts-button'\n            >\n                <NavLink\n                    to={`${url}/drafts`}\n                    id='sidebarItem_drafts'\n                    activeClassName='active'\n                    draggable='false'\n                    className='SidebarLink sidebar-item'\n                    tabIndex={0}\n                    isActive={isNavLinkActive}\n                >\n                    <i\n                        data-testid='sendPostIcon'\n                        className='icon icon-send-post icon-send'\n                    />\n                    <div className='SidebarChannelLinkLabel_wrapper'>\n                        <span className='SidebarChannelLinkLabel sidebar-item__name'>\n                            <FormattedMessage\n                                id='drafts.sidebarLink'\n                                defaultMessage='Drafts'\n                            />\n                        </span>\n                    </div>\n                    <WithTooltip\n                        title={tooltipText}\n                    >\n                        <div>\n                            {\n                                draftCount > 0 &&\n                                <ChannelMentionBadge\n                                    unreadMentions={draftCount}\n                                    icon={pencilIcon}\n                                />\n                            }\n\n                            {\n                                showScheduledPostCount &&\n                                <ChannelMentionBadge\n                                    unreadMentions={teamScheduledPostCount}\n                                    icon={scheduleIcon}\n                                    className={classNames('scheduledPostBadge', {persistent: scheduledPostsHasError})}\n                                    hasUrgent={scheduledPostsHasError}\n                                />\n                            }\n                        </div>\n                    </WithTooltip>\n                </NavLink>\n            </li>\n        </ul>\n    );\n}\n\nexport default memo(DraftsLink);\n"],"names":["getDraftsCount","makeGetDraftsCount","scheduleIcon","React","className","pencilIcon","DraftsLink","dispatch","useDispatch","initialScheduledPostsLoaded","useRef","syncedDraftsAllowedAndEnabled","useSelector","syncedDraftsAreAllowedAndEnabled","draftCount","teamId","getCurrentTeamId","teamScheduledPostCount","state","getScheduledPostsByTeamCount","isScheduledPostEnabled","isScheduledPostsEnabled","itemsExist","scheduledPostsHasError","hasScheduledPostError","url","useRouteMatch","isDraftUrlMatch","isScheduledPostUrlMatch","SCHEDULED_POST_URL_SUFFIX","urlMatches","Boolean","isNavLinkActive","useCallback","useEffect","getDrafts","loadDMsAndGMs","current","fetchTeamScheduledPosts","showScheduledPostCount","tooltipText","useMemo","FormattedMessage","id","defaultMessage","values","scheduledPostCount","br","x","tabIndex","NavLink","to","concat","activeClassName","draggable","isActive","WithTooltip","title","ChannelMentionBadge","unreadMentions","icon","classNames","persistent","hasUrgent","memo"],"sourceRoot":""}