{"version":3,"file":"7594.695a7656611d1155c10e.js","mappings":"8OA2FA,QA7EA,WACI,MAAMA,GAAWC,EAAAA,EAAAA,eAEXC,GAAyBC,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,GAAUC,yBAAwB,SAAQC,QAC3GC,GAA0BP,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,GAAUC,yBAA2B,EAAC,wBAAAF,OAAuBC,EAAAA,GAAUI,0BAAyB,SAAQF,QAC1KG,GAAyBT,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,GAAUI,0BAA4B,EAAC,wBAAAL,OAAuBC,EAAAA,GAAUM,yBAAwB,SAAQJ,QACzKK,GAA0BX,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,GAAUM,yBAA2B,EAAC,SAAQJ,QAEhHM,GAAoBC,EAAAA,EAAAA,cAAY,KAClC,QAAQ,GACR,KAAKF,EAAwBG,QACzBjB,GAASkB,EAAAA,EAAAA,IAAWC,EAAAA,GAAYC,SAChCpB,GAASqB,EAAAA,EAAAA,IAAWF,EAAAA,GAAYC,SAChC,MACJ,KAAKR,EAAuBK,QACxBjB,GAASkB,EAAAA,EAAAA,IAAWC,EAAAA,GAAYG,QAChCtB,GAASqB,EAAAA,EAAAA,IAAWF,EAAAA,GAAYG,QAChC,MACJ,KAAKZ,EAAwBO,QACzBjB,GAASkB,EAAAA,EAAAA,IAAWC,EAAAA,GAAYI,SAChCvB,GAASqB,EAAAA,EAAAA,IAAWF,EAAAA,GAAYI,SAChC,MACJ,KAAKrB,EAAuBe,QACxBjB,GAASkB,EAAAA,EAAAA,IAAWC,EAAAA,GAAYK,QAChCxB,GAASqB,EAAAA,EAAAA,IAAWF,EAAAA,GAAYK,QAEpC,GACD,CAACxB,IAEEyB,GAAkCT,EAAAA,EAAAA,aAAYU,KAAS,KACzD1B,GAASkB,EAAAA,EAAAA,OACTlB,GAASqB,EAAAA,EAAAA,MAAa,GACvB,KAAM,IAEHM,GAAqCX,EAAAA,EAAAA,cAAaY,IAChDA,EAAEX,SACFF,GACJ,GACD,CAACA,IAoCJ,OAlCAc,EAAAA,EAAAA,YAAU,KACNd,IAEIb,EAAuB4B,kBACvBhB,EAAwBgB,iBAAiB,SAAUH,GACnDf,EAAuBkB,iBAAiB,SAAUH,GAClDjB,EAAwBoB,iBAAiB,SAAUH,GACnDzB,EAAuB4B,iBAAiB,SAAUH,IAC3CzB,EAAuB6B,aAC9BjB,EAAwBiB,YAAYJ,GACpCf,EAAuBmB,YAAYJ,GACnCjB,EAAwBqB,YAAYJ,GACpCzB,EAAuB6B,YAAYJ,IAEnCvB,OAAO0B,iBAAiB,SAAUL,GAG/B,KACCvB,EAAuB8B,qBACvBlB,EAAwBkB,oBAAoB,SAAUL,GACtDf,EAAuBoB,oBAAoB,SAAUL,GACrDjB,EAAwBsB,oBAAoB,SAAUL,GACtDzB,EAAuB8B,oBAAoB,SAAUL,IAC9CzB,EAAuB+B,gBAC9BnB,EAAwBmB,eAAeN,GACvCf,EAAuBqB,eAAeN,GACtCjB,EAAwBuB,eAAeN,GACvCzB,EAAuB+B,eAAeN,IAEtCvB,OAAO4B,oBAAoB,SAAUP,EACzC,IAEL,CAACE,EAAoCF,EAAiCV,IAElE,IACX,C","sources":["webpack://mattermost-webapp/./src/components/window_size_observer/WindowSizeObserver.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport throttle from 'lodash/throttle';\nimport {useCallback, useEffect, useRef} from 'react';\nimport {useDispatch} from 'react-redux';\n\nimport {setLhsSize} from 'actions/views/lhs';\nimport {setRhsSize} from 'actions/views/rhs';\n\nimport {SidebarSize} from 'components/resizable_sidebar/constants';\n\nimport Constants from 'utils/constants';\n\nfunction WindowSizeObserver() {\n    const dispatch = useDispatch();\n\n    const smallSidebarMediaQuery = useRef(window.matchMedia(`(max-width: ${Constants.SMALL_SIDEBAR_BREAKPOINT}px)`)).current;\n    const mediumSidebarMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.SMALL_SIDEBAR_BREAKPOINT + 1}px) and (max-width: ${Constants.MEDIUM_SIDEBAR_BREAKPOINT}px)`)).current;\n    const largeSidebarMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.MEDIUM_SIDEBAR_BREAKPOINT + 1}px) and (max-width: ${Constants.LARGE_SIDEBAR_BREAKPOINT}px)`)).current;\n    const xLargeSidebarMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.LARGE_SIDEBAR_BREAKPOINT + 1}px)`)).current;\n\n    const updateSidebarSize = useCallback(() => {\n        switch (true) {\n        case xLargeSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.XLARGE));\n            dispatch(setRhsSize(SidebarSize.XLARGE));\n            break;\n        case largeSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.LARGE));\n            dispatch(setRhsSize(SidebarSize.LARGE));\n            break;\n        case mediumSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.MEDIUM));\n            dispatch(setRhsSize(SidebarSize.MEDIUM));\n            break;\n        case smallSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.SMALL));\n            dispatch(setRhsSize(SidebarSize.SMALL));\n            break;\n        }\n    }, [dispatch]);\n\n    const setSidebarSizeWhenWindowResized = useCallback(throttle(() => {\n        dispatch(setLhsSize());\n        dispatch(setRhsSize());\n    }, 100), []);\n\n    const handleSidebarMediaQueryChangeEvent = useCallback((e: MediaQueryListEvent) => {\n        if (e.matches) {\n            updateSidebarSize();\n        }\n    }, [updateSidebarSize]);\n\n    useEffect(() => {\n        updateSidebarSize();\n\n        if (smallSidebarMediaQuery.addEventListener) {\n            xLargeSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n            largeSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n            mediumSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n            smallSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n        } else if (smallSidebarMediaQuery.addListener) {\n            xLargeSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n            largeSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n            mediumSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n            smallSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n        } else {\n            window.addEventListener('resize', setSidebarSizeWhenWindowResized);\n        }\n\n        return () => {\n            if (smallSidebarMediaQuery.removeEventListener) {\n                xLargeSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n                largeSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n                mediumSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n                smallSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n            } else if (smallSidebarMediaQuery.removeListener) {\n                xLargeSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n                largeSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n                mediumSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n                smallSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n            } else {\n                window.removeEventListener('resize', setSidebarSizeWhenWindowResized);\n            }\n        };\n    }, [handleSidebarMediaQueryChangeEvent, setSidebarSizeWhenWindowResized, updateSidebarSize]);\n\n    return null;\n}\n\nexport default WindowSizeObserver;\n"],"names":["dispatch","useDispatch","smallSidebarMediaQuery","useRef","window","matchMedia","concat","Constants","SMALL_SIDEBAR_BREAKPOINT","current","mediumSidebarMediaQuery","MEDIUM_SIDEBAR_BREAKPOINT","largeSidebarMediaQuery","LARGE_SIDEBAR_BREAKPOINT","xLargeSidebarMediaQuery","updateSidebarSize","useCallback","matches","setLhsSize","SidebarSize","XLARGE","setRhsSize","LARGE","MEDIUM","SMALL","setSidebarSizeWhenWindowResized","throttle","handleSidebarMediaQueryChangeEvent","e","useEffect","addEventListener","addListener","removeEventListener","removeListener"],"sourceRoot":""}