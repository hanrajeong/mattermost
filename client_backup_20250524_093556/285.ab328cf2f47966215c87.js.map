{"version":3,"file":"285.ab328cf2f47966215c87.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/admin_console/team_channel_settings/convert_confirm_modal.tsx","webpack://mattermost-webapp/./src/components/channel_header/channel_header_title_direct.tsx","webpack://mattermost-webapp/./src/components/channel_header/channel_header_title_group.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/channel_bookmarks_submenu.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/close_message.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/edit_conversation_header.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/plugins_submenu.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/toggle_favorite_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/toggle_info.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/toggle_mute_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/view_pinned_posts.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/channel_header_menu_items/channel_header_direct_menu.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/no_common_teams/no_common_teams.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/team_selector/team_selector.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/warning_text_section/warning_text_section.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/convert_gm_to_channel_modal.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/convert_gm_to_private.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/notification.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/open_members_rhs.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/channel_header_menu_items/channel_header_group_menu.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/channel_header_menu_items/channel_header_mobile_menu.tsx","webpack://mattermost-webapp/./src/components/delete_channel_modal/delete_channel_modal.tsx","webpack://mattermost-webapp/./src/components/delete_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/archive_channel.tsx","webpack://mattermost-webapp/./src/components/channel_settings_modal/channel_settings_archive_tab.tsx","webpack://mattermost-webapp/./src/components/widgets/advanced_textbox/advanced_textbox.tsx","webpack://mattermost-webapp/./src/components/channel_settings_modal/channel_settings_configuration_tab.tsx","webpack://mattermost-webapp/./src/components/channel_settings_modal/channel_settings_info_tab.tsx","webpack://mattermost-webapp/./src/components/channel_settings_modal/channel_settings_modal.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/channel_settings_menu.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/close_channel.tsx","webpack://mattermost-webapp/./src/components/channel_groups_manage_modal/channel_groups_manage_modal.tsx","webpack://mattermost-webapp/./src/components/channel_groups_manage_modal/index.ts","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/groups.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/leave_channel.tsx","webpack://mattermost-webapp/./src/components/unarchive_channel_modal/unarchive_channel_modal.tsx","webpack://mattermost-webapp/./src/components/unarchive_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/unarchive_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/channel_header_menu_items/channel_header_public_private_menu.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/channel_header_menu.tsx","webpack://mattermost-webapp/./src/components/channel_header_menu/menu_items/mobile_channel_header_plugins.tsx","webpack://mattermost-webapp/./src/components/color_input.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/selectors/entities/channel_banner.ts","webpack://mattermost-webapp/../platform/types/lib/channels.js"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal';\n\ntype Props = {\n\n    /*\n     * Bool whether the modal is shown\n     */\n    show: boolean;\n\n    /*\n     * Action to call on confirm\n     */\n    onConfirm: (checked: boolean) => void;\n\n    /*\n     * Action to call on cancel\n     */\n    onCancel: (checked: boolean) => void;\n\n    /*\n     * Channel display name\n     */\n    displayName: string;\n\n    /*\n     * Channel privacy setting\n     */\n    toPublic: boolean;\n};\n\nconst ConvertConfirmModal = ({show, onConfirm, onCancel, displayName, toPublic}: Props) => {\n    let titleMessage;\n    let convertMessage;\n    let confirmMessage;\n    let convertConfirmationMessage;\n    if (toPublic) {\n        titleMessage = messages.toPublicTitle;\n        convertMessage = messages.toPublicMessage;\n        confirmMessage = messages.toPublicConfirm;\n        convertConfirmationMessage = messages.toPublicMessageConfirmation;\n    } else {\n        titleMessage = messages.toPrivateTitle;\n        convertMessage = messages.toPrivateMessage;\n        confirmMessage = messages.toPrivateConfirm;\n        convertConfirmationMessage = messages.toPrivateMessageConfirmation;\n    }\n\n    const title = (\n        <FormattedMessage\n            {...titleMessage}\n            values={{displayName}}\n        />\n    );\n\n    const message = (\n        <>\n            <p>\n                <FormattedMessage\n                    {...convertMessage}\n                    values={{displayName: <strong>{displayName}</strong>}}\n                />\n            </p>\n            <p>\n                <FormattedMessage\n                    {...convertConfirmationMessage}\n                    values={{displayName: <strong>{displayName}</strong>}}\n                />\n            </p>\n        </>\n    );\n\n    const confirmButton = (\n        <FormattedMessage\n            {...confirmMessage}\n        />\n    );\n\n    const cancelButton = (\n        <FormattedMessage\n            id='admin.team_channel_settings.convertConfirmModal.cancel'\n            defaultMessage='No, cancel'\n        />\n    );\n\n    const modalClass = 'discard-changes-modal';\n\n    return (\n        <ConfirmModal\n            show={show}\n            title={title}\n            message={message}\n            modalClass={modalClass}\n            confirmButtonClass={'btn btn-primary'}\n            confirmButtonText={confirmButton}\n            cancelButtonText={cancelButton}\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n        />\n    );\n};\n\nconst messages = defineMessages({\n    toPrivateConfirm: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPrivateConfirm',\n        defaultMessage: 'Yes, convert to private channel',\n    },\n    toPrivateMessage: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPrivateMessageFirstLine',\n        defaultMessage: 'When you convert {displayName} to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.',\n    },\n    toPrivateMessageConfirmation: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPrivateMessageSecondLine',\n        defaultMessage: 'Are you sure you want to convert {displayName} to a private channel?',\n    },\n    toPrivateTitle: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPrivateTitle',\n        defaultMessage: 'Convert {displayName} to a private channel?',\n    },\n    toPublicConfirm: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPublicConfirm',\n        defaultMessage: 'Yes, convert to public channel',\n    },\n    toPublicMessage: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPublicMessageFirstLine',\n        defaultMessage: 'When you convert {displayName} to a public channel, history and membership are preserved. Public channels are discoverable and can be joined by users on the system without invitation.',\n    },\n    toPublicMessageConfirmation: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPublicMessageSecondLine',\n        defaultMessage: 'Are you sure you want to convert {displayName} to a public channel?',\n    },\n    toPublicTitle: {\n        id: 'admin.team_channel_settings.convertConfirmModal.toPublicTitle',\n        defaultMessage: 'Convert {displayName} to a public channel?',\n    },\n});\n\nexport default ConvertConfirmModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {displayUsername, isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport GuestTag from 'components/widgets/tag/guest_tag';\n\ntype Props = {\n    dmUser?: UserProfile;\n}\n\nconst ChannelHeaderTitleDirect = ({\n    dmUser,\n}: Props) => {\n    const currentUser = useSelector(getCurrentUser);\n    const teammateNameDisplaySetting = useSelector(getTeammateNameDisplaySetting);\n    const displayName = displayUsername(dmUser, teammateNameDisplaySetting);\n\n    return (\n        <>\n            {currentUser.id !== dmUser?.id && displayName + ' '}\n            {currentUser.id === dmUser?.id &&\n                <FormattedMessage\n                    id='channel_header.directchannel.you'\n                    defaultMessage='{displayName} (you) '\n                    values={{displayName}}\n                />}\n            {isGuest(dmUser?.roles ?? '') && <GuestTag/>}\n        </>\n    );\n};\n\nexport default memo(ChannelHeaderTitleDirect);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {displayUsername, isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport GuestTag from 'components/widgets/tag/guest_tag';\n\ntype Props = {\n    gmMembers?: UserProfile[];\n}\n\nconst ChannelHeaderTitleGroup = ({\n    gmMembers,\n}: Props) => {\n    const currentUser = useSelector(getCurrentUser);\n    const teammateNameDisplaySetting = useSelector(getTeammateNameDisplaySetting);\n    const channel = useSelector(getCurrentChannel);\n\n    if (!channel) {\n        return null;\n    }\n\n    // map the displayname to the gm member users\n    const membersMap: Record<string, UserProfile[]> = {};\n    if (gmMembers) {\n        for (const user of gmMembers) {\n            if (user.id === currentUser.id) {\n                continue;\n            }\n            const userDisplayName = displayUsername(user, teammateNameDisplaySetting);\n\n            if (!membersMap[userDisplayName]) {\n                membersMap[userDisplayName] = []; //Create an array for cases with same display name\n            }\n\n            membersMap[userDisplayName].push(user);\n        }\n    }\n\n    const displayNames = channel.display_name.split(', ');\n\n    return (\n        <>\n            {displayNames.map((displayName, index) => {\n                if (!membersMap[displayName]) {\n                    return displayName;\n                }\n\n                const user = membersMap[displayName].shift();\n\n                return (\n                    <React.Fragment key={user?.id}>\n                        {index > 0 && ', '}\n                        {displayName}\n                        {isGuest(user?.roles ?? '') && <GuestTag/>}\n                    </React.Fragment>\n                );\n            })}\n        </>\n    );\n};\n\nexport default memo(ChannelHeaderTitleGroup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// Purpose of this file to exists is only required until channel header dropdown is migrated to new menus\nimport React, {memo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {\n    ChevronRightIcon,\n    LinkVariantIcon,\n    PaperclipIcon,\n    BookmarkOutlineIcon,\n} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getChannelBookmarks} from 'mattermost-redux/selectors/entities/channel_bookmarks';\n\nimport {useBookmarkAddActions} from 'components/channel_bookmarks/channel_bookmarks_menu';\nimport {MAX_BOOKMARKS_PER_CHANNEL, useCanUploadFiles, useChannelBookmarkPermission} from 'components/channel_bookmarks/utils';\nimport * as Menu from 'components/menu';\n\nimport type {GlobalState} from 'types/store';\n\ntype Props = {\n    channel: Channel;\n};\n\nconst ChannelBookmarksSubmenu = (props: Props) => {\n    const {formatMessage} = useIntl();\n\n    const {handleCreateLink, handleCreateFile} = useBookmarkAddActions(props.channel.id);\n    const canAdd = useChannelBookmarkPermission(props.channel.id, 'add');\n    const canUploadFiles = useCanUploadFiles();\n\n    useSelector((state: GlobalState) => {\n        const bookmarks = getChannelBookmarks(state, props.channel.id);\n        return bookmarks && Object.keys(bookmarks).length >= MAX_BOOKMARKS_PER_CHANNEL;\n    });\n\n    if (!canAdd) {\n        return null;\n    }\n    return (\n        <Menu.SubMenu\n            id={`channel-menu-${props.channel.id}-bookmarks`}\n            leadingElement={<BookmarkOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='channel_menu.bookmarks'\n                    defaultMessage='Bookmarks Bar'\n                />\n            )}\n            trailingElements={(\n                <ChevronRightIcon size={16}/>\n            )}\n            menuId={`channel-menu-${props.channel.id}-menu`}\n            menuAriaLabel={formatMessage({id: 'channel_menu.bookmarks', defaultMessage: 'Bookmarks Bar'})}\n        >\n            <Menu.Item\n                id={`channel-menu-${props.channel.id}-bookmarks-link`}\n                leadingElement={<LinkVariantIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='channel_menu.bookmarks.addLink'\n                        defaultMessage='Add a link'\n                    />\n                )}\n                onClick={() => handleCreateLink()}\n            />\n            {canUploadFiles && (\n                <Menu.Item\n                    id={`channel-menu-${props.channel.id}-bookmarks-file`}\n                    leadingElement={<PaperclipIcon size={18}/>}\n                    labels={(\n                        <FormattedMessage\n                            id='channel_menu.bookmarks.addFile'\n                            defaultMessage='Attach a file'\n                        />\n                    )}\n                    onClick={() => handleCreateFile()}\n                />\n            )}\n        </Menu.SubMenu>\n    );\n};\n\nexport default memo(ChannelBookmarksSubmenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {CloseIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getRedirectChannelNameForCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {leaveDirectChannel} from 'actions/views/channel';\n\nimport * as Menu from 'components/menu';\n\nimport {getHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\n\ntype Props = {\n    currentUserID: string;\n    channel: Channel;\n    id?: string;\n};\n\nexport default function CloseMessage(props: Props) {\n    const dispatch = useDispatch();\n    const currentTeam = useSelector(getCurrentTeam);\n    const redirectChannel = useSelector(getRedirectChannelNameForCurrentTeam);\n\n    const handleClose = () => {\n        const {\n            channel,\n            currentUserID,\n        } = props;\n\n        let name: string;\n        let category;\n        if (channel.type === Constants.DM_CHANNEL) {\n            category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n            name = channel.teammate_id!;\n        } else {\n            category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n            name = channel.id;\n        }\n\n        dispatch(leaveDirectChannel(channel.name));\n        dispatch(savePreferences(currentUserID, [{user_id: currentUserID, category, name, value: 'false'}]));\n\n        if (currentTeam) {\n            getHistory().push(`/${currentTeam.name}/channels/${redirectChannel}`);\n        }\n    };\n\n    const {id, channel} = props;\n\n    // DM\n    let text = (\n        <FormattedMessage\n            id='center_panel.direct.closeDirectMessage'\n            defaultMessage='Close Direct Message'\n        />);\n    if (channel.type === Constants.GM_CHANNEL) {\n        text = (\n            <FormattedMessage\n                id='center_panel.direct.closeGroupMessage'\n                defaultMessage='Close Group Message'\n            />);\n    }\n\n    return (\n        <Menu.Item\n            id={id}\n            leadingElement={<CloseIcon size='18px'/>}\n            onClick={handleClose}\n            labels={text}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n    leadingElement?: React.ReactNode;\n}\n\nconst EditConversationHeader = ({channel, leadingElement}: Props): JSX.Element => {\n    const dispatch = useDispatch();\n    const handleEditHeader = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n                dialogType: EditChannelHeaderModal,\n                dialogProps: {channel},\n            }),\n        );\n    };\n\n    return (\n        <Menu.Item\n            id='channelEditHeader'\n            leadingElement={leadingElement}\n            onClick={handleEditHeader}\n            labels={\n                <FormattedMessage\n                    id='channel_header.setConversationHeader'\n                    defaultMessage='Edit Header'\n                />\n            }\n        />\n    );\n};\n\nexport default React.memo(EditConversationHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React, {memo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {\n    AppsIcon,\n    ChevronRightIcon,\n} from '@mattermost/compass-icons/components';\n\nimport * as Menu from 'components/menu';\n\ntype Props = {\n    pluginItems: ReactNode[];\n};\n\nconst PluginsSubmenu = (props: Props) => {\n    const {formatMessage} = useIntl();\n    if (!props.pluginItems || !props.pluginItems.length) {\n        return <></>;\n    }\n    return (\n        <Menu.SubMenu\n            id={'moreActions'}\n            labels={\n                <FormattedMessage\n                    id='pluginsMenu.more_actions'\n                    defaultMessage='More actions'\n                />\n            }\n            leadingElement={<AppsIcon size='18px'/>}\n            trailingElements={<ChevronRightIcon size={16}/>}\n            menuId={'moreActions-menu'}\n            menuAriaLabel={formatMessage({id: 'pluginsMenu.more_actions', defaultMessage: 'More actions'})}\n        >\n            {props.pluginItems}\n        </Menu.SubMenu>\n    );\n};\n\nexport default memo(PluginsSubmenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {favoriteChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\n\nimport * as Menu from 'components/menu';\n\ntype Props = {\n    channelID: string;\n    isFavorite: boolean;\n};\n\nconst ToggleFavoriteChannel = ({\n    isFavorite,\n    channelID,\n}: Props) => {\n    const dispatch = useDispatch();\n    const toggleFavorite = () => {\n        if (isFavorite) {\n            dispatch(unfavoriteChannel(channelID));\n        } else {\n            dispatch(favoriteChannel(channelID));\n        }\n    };\n\n    let text = (\n        <FormattedMessage\n            id='channelHeader.addToFavorites'\n            defaultMessage='Add to Favorites'\n        />);\n    if (isFavorite) {\n        text = (\n            <FormattedMessage\n                id='channelHeader.removeFromFavorites'\n                defaultMessage='Remove from Favorites'\n            />);\n    }\n    return (\n        <Menu.Item\n            onClick={toggleFavorite}\n            labels={text}\n        />\n    );\n};\n\nexport default memo(ToggleFavoriteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {InformationOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {closeRightHandSide, showChannelInfo} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\n\nimport * as Menu from 'components/menu';\n\nimport {RHSStates} from 'utils/constants';\n\ninterface Props extends Menu.FirstMenuItemProps {\n    channel: Channel;\n}\n\nconst ToggleInfo = ({channel, ...rest}: Props) => {\n    const dispatch = useDispatch();\n    let rhsOpen = useSelector(getIsRhsOpen);\n    const rhsState = useSelector(getRhsState);\n    if (rhsState !== RHSStates.CHANNEL_INFO) {\n        rhsOpen = false;\n    }\n\n    const toggleRHS = () => {\n        if (rhsOpen) {\n            dispatch(closeRightHandSide());\n            return;\n        }\n        dispatch(showChannelInfo(channel.id));\n    };\n\n    let text;\n    if (rhsOpen) {\n        text = (\n            <FormattedMessage\n                id='channelHeader.hideInfo'\n                defaultMessage='Close Info'\n            />);\n    } else {\n        text = (\n            <FormattedMessage\n                id='channelHeader.viewInfo'\n                defaultMessage='View Info'\n            />);\n    }\n\n    return (\n        <>\n            <Menu.Item\n                leadingElement={<InformationOutlineIcon size='18px'/>}\n                onClick={toggleRHS}\n                labels={text}\n                {...rest}\n            />\n        </>\n    );\n};\n\nexport default ToggleInfo;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {BellOffOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport * as Menu from 'components/menu';\n\nimport {Constants, NotificationLevels} from 'utils/constants';\n\ntype Props = {\n    userID: string;\n    channel: Channel;\n    isMuted: boolean;\n};\n\nexport default function ToggleMuteChannel({\n    isMuted,\n    channel,\n    userID,\n}: Props) {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(updateChannelNotifyProps(\n            userID,\n            channel.id,\n            {\n                mark_unread: (isMuted ? NotificationLevels.ALL : NotificationLevels.MENTION) as 'all' | 'mention',\n            },\n        ));\n    };\n\n    let text;\n    if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n        if (isMuted) {\n            text = (\n                <FormattedMessage\n                    id='channel_header.unmuteConversation'\n                    defaultMessage='Unmute'\n                />\n            );\n        } else {\n            text = (\n                <FormattedMessage\n                    id='channel_header.muteConversation'\n                    defaultMessage='Mute'\n                />\n            );\n        }\n    } else if (isMuted) {\n        text = (\n            <FormattedMessage\n                id='channel_header.unmute'\n                defaultMessage='Unmute Channel'\n            />\n        );\n    } else {\n        text = (\n            <FormattedMessage\n                id='channel_header.mute'\n                defaultMessage='Mute Channel'\n            />\n        );\n    }\n\n    return (\n        <Menu.Item\n            leadingElement={<BellOffOutlineIcon size='18px'/>}\n            id='channelToggleMuteChannel'\n            onClick={handleClick}\n            labels={text}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {closeRightHandSide, showPinnedPosts} from 'actions/views/rhs';\nimport {getRhsState} from 'selectors/rhs';\n\nimport * as Menu from 'components/menu';\n\nimport {RHSStates} from 'utils/constants';\n\ntype Props = {\n    channelID: string;\n}\n\nconst ViewPinnedPosts = ({\n    channelID,\n}: Props) => {\n    const dispatch = useDispatch();\n    const rhsState = useSelector(getRhsState);\n    const hasPinnedPosts = rhsState === RHSStates.PIN;\n\n    const handleClick = () => {\n        if (hasPinnedPosts) {\n            dispatch(closeRightHandSide());\n        } else {\n            dispatch(showPinnedPosts(channelID));\n        }\n    };\n\n    return (\n        <Menu.Item\n            onClick={handleClick}\n            labels={\n                <FormattedMessage\n                    id='navbar.viewPinnedPosts'\n                    defaultMessage='View Pinned Posts'\n                />\n            }\n        />\n    );\n};\n\nexport default memo(ViewPinnedPosts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\n\nimport {CogOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport ChannelMoveToSubMenu from 'components/channel_move_to_sub_menu';\nimport * as Menu from 'components/menu';\n\nimport MenuItemChannelBookmarks from '../menu_items/channel_bookmarks_submenu';\nimport CloseMessage from '../menu_items/close_message';\nimport EditConversationHeader from '../menu_items/edit_conversation_header';\nimport MenuItemPluginItems from '../menu_items/plugins_submenu';\nimport MenuItemToggleFavoriteChannel from '../menu_items/toggle_favorite_channel';\nimport MenuItemToggleInfo from '../menu_items/toggle_info';\nimport MenuItemToggleMuteChannel from '../menu_items/toggle_mute_channel';\nimport MenuItemViewPinnedPosts from '../menu_items/view_pinned_posts';\n\ninterface Props extends Menu.FirstMenuItemProps {\n    channel: Channel;\n    user: UserProfile;\n    isMuted: boolean;\n    isMobile: boolean;\n    isFavorite: boolean;\n    pluginItems: ReactNode[];\n    isChannelBookmarksEnabled: boolean;\n}\n\nconst ChannelHeaderDirectMenu = ({channel, user, isMuted, isMobile, isFavorite, pluginItems, isChannelBookmarksEnabled, ...rest}: Props) => {\n    return (\n        <>\n            <MenuItemToggleInfo\n                channel={channel}\n                {...rest}\n            />\n            <MenuItemToggleMuteChannel\n                userID={user.id}\n                channel={channel}\n                isMuted={isMuted}\n            />\n            {isMobile && (\n                <>\n                    <MenuItemToggleFavoriteChannel\n                        channelID={channel.id}\n                        isFavorite={isFavorite}\n                    />\n                    <MenuItemViewPinnedPosts\n                        channelID={channel.id}\n                    />\n                </>\n            )}\n            <EditConversationHeader\n                leadingElement={<CogOutlineIcon size='18px'/>}\n                channel={channel}\n            />\n            <Menu.Separator/>\n            {!isGuest(user.roles) && isChannelBookmarksEnabled && (\n                <MenuItemChannelBookmarks\n                    channel={channel}\n                />\n            )}\n            <ChannelMoveToSubMenu\n                channel={channel}\n            />\n            {!isMobile && (\n                <MenuItemPluginItems pluginItems={pluginItems}/>\n            )}\n            <Menu.Separator/>\n            <CloseMessage\n                currentUserID={user.id}\n                channel={channel}\n            />\n        </>\n    );\n};\n\nexport default ChannelHeaderDirectMenu;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nconst NoCommonTeamsError = (): JSX.Element => {\n    const intl = useIntl();\n    return (\n        <SectionNotice\n            title={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.no_common_teams_error.heading',\n                defaultMessage: 'Unable to convert to a channel because group members are part of different teams',\n            })}\n            text={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.no_common_teams_error.body',\n                defaultMessage: 'Group Message cannot be converted to a channel because members are not a part of the same team. Add all members to a single team to convert this group message to a channel in that team.',\n            })}\n            type={'danger'}\n        />\n    );\n};\n\nexport default NoCommonTeamsError;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport DropdownInput from 'components/dropdown_input';\n\nexport type Props = {\n    teamsById: {[id: string]: Team};\n    onChange: (teamId: string) => void;\n}\n\nconst TeamSelector = (props: Props): JSX.Element => {\n    const [value, setValue] = useState<Team>();\n    const intl = useIntl();\n    const {formatMessage} = intl;\n\n    const handleTeamChange = useCallback((e) => {\n        const teamId = e.value as string;\n\n        setValue(props.teamsById[teamId]);\n        props.onChange(teamId);\n    }, []);\n\n    const currentLocale = useSelector(getCurrentLocale);\n\n    const teamValues = Object.values(props.teamsById).\n        map((team) => ({value: team.id, label: team.display_name})).\n        sort((teamA, teamB) => teamA.label.localeCompare(teamB.label, currentLocale));\n\n    return (\n        <DropdownInput\n            className='team_selector'\n            required={true}\n            onChange={handleTeamChange}\n            value={value ? {label: value.display_name, value: value.id} : undefined}\n            options={teamValues}\n            legend={formatMessage({id: 'sidebar_left.sidebar_channel_modal.select_team_placeholder', defaultMessage: 'Select Team'})}\n            placeholder={formatMessage({id: 'sidebar_left.sidebar_channel_modal.select_team_placeholder', defaultMessage: 'Select Team'})}\n            name='team_selector'\n        />\n    );\n};\n\nexport default TeamSelector;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nexport type Props = {\n    channelMemberNames: string[];\n}\nconst WarningTextSection = (props: Props): JSX.Element => {\n    const intl = useIntl();\n\n    let memberNames: string;\n\n    if (props.channelMemberNames.length > 0) {\n        memberNames = intl.formatList(props.channelMemberNames);\n    } else {\n        memberNames = intl.formatMessage({id: 'sidebar_left.sidebar_channel_modal.warning_body_yourself', defaultMessage: 'yourself'});\n    }\n\n    return (\n        <SectionNotice\n            title={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.warning_header',\n                defaultMessage: 'Conversation history will be visible to any channel members',\n            })}\n            text={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.warning_body',\n                defaultMessage: 'You are about to convert the Group Message with {memberNames} to a Channel. This cannot be undone.',\n            },\n            {\n                memberNames,\n            })}\n        />\n    );\n};\nexport default WarningTextSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport type {ComponentProps} from 'react';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport './convert_gm_to_channel_modal.scss';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {getGroupMessageMembersCommonTeams} from 'actions/team_actions';\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport ChannelNameFormField from 'components/channel_name_form_field/channel_name_form_field';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport NoCommonTeamsError from './no_common_teams/no_common_teams';\nimport TeamSelector from './team_selector/team_selector';\nimport WarningTextSection from './warning_text_section/warning_text_section';\n\nimport type {Actions} from './index';\n\nconst enum ServerErrorId {\n    CHANNEL_NAME_EXISTS = 'store.sql_channel.save_channel.exists.app_error',\n}\n\nexport type Props = {\n    onExited: () => void;\n    channel: Channel;\n    actions: Actions;\n    profilesInChannel: UserProfile[];\n    teammateNameDisplaySetting: string;\n    currentUserId: string;\n}\n\nconst ConvertGmToChannelModal = (props: Props) => {\n    const intl = useIntl();\n    const {formatMessage} = intl;\n\n    const [channelName, setChannelName] = useState<string>('');\n    const channelURL = useRef<string>('');\n\n    const [urlError, setURLError] = useState('');\n    const handleChannelURLChange = useCallback((newURL: string) => {\n        channelURL.current = newURL;\n        setURLError('');\n    }, []);\n\n    const [channelMemberNames, setChannelMemberNames] = useState<string[]>([]);\n\n    useEffect(() => {\n        const validProfilesInChannel = props.profilesInChannel.\n            filter((user) => user.id !== props.currentUserId && user.delete_at === 0).\n            map((user) => displayUsername(user, props.teammateNameDisplaySetting));\n\n        setChannelMemberNames(validProfilesInChannel);\n    }, [props.profilesInChannel, props.currentUserId, props.teammateNameDisplaySetting]);\n\n    const [commonTeamsById, setCommonTeamsById] = useState<{[id: string]: Team}>({});\n    const [commonTeamsFetched, setCommonTeamsFetched] = useState<boolean>(false);\n    const [loadingAnimationTimeout, setLoadingAnimationTimeout] = useState<boolean>(false);\n    const [selectedTeamId, setSelectedTeamId] = useState<string>();\n    const [nameError, setNameError] = useState<boolean>(false);\n    const [conversionError, setConversionError] = useState<string>();\n\n    const dispatch = useDispatch();\n\n    const mounted = useRef(false);\n    useEffect(() => {\n        mounted.current = true;\n        return (() => {\n            mounted.current = false;\n        });\n    }, []);\n\n    useEffect(() => {\n        const work = async () => {\n            const response = await dispatch(getGroupMessageMembersCommonTeams(props.channel.id));\n            if (!mounted.current) {\n                return;\n            }\n\n            if (response.error || !response.data) {\n                return;\n            }\n            const teams = response.data;\n\n            const teamsById: {[id: string]: Team} = {};\n            teams.forEach((team) => {\n                teamsById[team.id] = team;\n            });\n\n            setCommonTeamsById(teamsById);\n            setCommonTeamsFetched(true);\n\n            // if there is only common team, selected it.\n            if (teams.length === 1) {\n                setSelectedTeamId(teams[0].id);\n            }\n        };\n\n        work();\n        setTimeout(() => setLoadingAnimationTimeout(true), 1200);\n    }, [dispatch, props.channel.id]);\n\n    const handleConfirm = useCallback(async () => {\n        if (!selectedTeamId) {\n            return;\n        }\n\n        const {error} = await props.actions.convertGroupMessageToPrivateChannel(props.channel.id, selectedTeamId, channelName.trim(), channelURL.current.trim());\n\n        if (error) {\n            if (error.server_error_id === ServerErrorId.CHANNEL_NAME_EXISTS) {\n                setURLError(\n                    formatMessage({\n                        id: 'channel_modal.alreadyExist',\n                        defaultMessage: 'A channel with that URL already exists',\n                    }),\n                );\n            } else {\n                setConversionError(error.message);\n            }\n\n            return;\n        }\n\n        setConversionError(undefined);\n        trackEvent('actions', 'convert_group_message_to_private_channel', {channel_id: props.channel.id});\n        props.onExited();\n    }, [selectedTeamId, props, channelName, formatMessage]);\n\n    const showLoader = !commonTeamsFetched || !loadingAnimationTimeout;\n    const canCreate = selectedTeamId !== undefined && channelName !== '' && !nameError && !urlError;\n    const modalProps: Partial<ComponentProps<typeof GenericModal>> = {};\n    let modalBody;\n\n    if (!showLoader && Object.keys(commonTeamsById).length === 0) {\n        modalProps.confirmButtonText = formatMessage({id: 'generic.okay', defaultMessage: 'Okay'});\n        modalProps.handleConfirm = props.onExited;\n\n        modalBody = (\n            <div className='convert-gm-to-channel-modal-body error'>\n                <NoCommonTeamsError/>\n            </div>\n        );\n    } else {\n        modalProps.handleCancel = showLoader ? undefined : props.onExited;\n        modalProps.isDeleteModal = true;\n        modalProps.cancelButtonText = formatMessage({id: 'channel_modal.cancel', defaultMessage: 'Cancel'});\n        modalProps.confirmButtonText = formatMessage({id: 'sidebar_left.sidebar_channel_modal.confirmation_text', defaultMessage: 'Convert to private channel'});\n        modalProps.isConfirmDisabled = !canCreate;\n\n        let subBody;\n        if (showLoader) {\n            subBody = (\n                <div className='loadingIndicator'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        } else {\n            subBody = (\n                <>\n                    <WarningTextSection channelMemberNames={channelMemberNames}/>\n\n                    {\n                        Object.keys(commonTeamsById).length > 1 &&\n                        <TeamSelector\n                            teamsById={commonTeamsById}\n                            onChange={setSelectedTeamId}\n                        />\n                    }\n\n                    <ChannelNameFormField\n                        value={channelName}\n                        name='convert-gm-to-channel-modal-channel-name'\n                        placeholder={formatMessage({id: 'sidebar_left.sidebar_channel_modal.channel_name_placeholder', defaultMessage: 'Enter a name for the channel'})}\n                        autoFocus={false}\n                        onDisplayNameChange={setChannelName}\n                        onURLChange={handleChannelURLChange}\n                        onErrorStateChange={setNameError}\n                        team={selectedTeamId ? commonTeamsById[selectedTeamId] : undefined}\n                        urlError={urlError}\n                    />\n\n                    {\n                        conversionError &&\n                        <div className='conversion-error'>\n                            <i className='icon icon-alert-outline'/>\n                            <span>{conversionError}</span>\n                        </div>\n                    }\n\n                </>\n            );\n        }\n\n        modalBody = (\n            <div\n                className={classNames({\n                    'convert-gm-to-channel-modal-body': true,\n                    loading: showLoader,\n                    'single-team': Object.keys(commonTeamsById).length === 1,\n                    'multi-team': Object.keys(commonTeamsById).length > 1,\n                })}\n            >\n                {subBody}\n            </div>\n        );\n    }\n\n    return (\n        <GenericModal\n            id='convert-gm-to-channel-modal'\n            className='convert-gm-to-channel-modal'\n            modalHeaderText={formatMessage({id: 'sidebar_left.sidebar_channel_modal.header', defaultMessage: 'Convert to Private Channel'})}\n            compassDesign={true}\n            handleConfirm={showLoader ? undefined : handleConfirm}\n            onExited={props.onExited}\n            autoCloseOnConfirmButton={false}\n            {...modalProps}\n        >\n            {modalBody}\n        </GenericModal>\n    );\n};\n\nexport default ConvertGmToChannelModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {Dispatch} from 'redux';\nimport {bindActionCreators} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {convertGroupMessageToPrivateChannel} from 'mattermost-redux/actions/channels';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    getCurrentUserId,\n    makeGetProfilesInChannel,\n} from 'mattermost-redux/selectors/entities/users';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {moveChannelsInSidebar} from 'actions/views/channel_sidebar';\nimport {closeModal} from 'actions/views/modals';\n\nimport type {GlobalState} from 'types/store';\n\nimport ConvertGmToChannelModal from './convert_gm_to_channel_modal';\n\ntype OwnProps = {\n    channel: Channel;\n}\nfunction makeMapStateToProps() {\n    const getProfilesInChannel = makeGetProfilesInChannel();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const allProfilesInChannel = getProfilesInChannel(state, ownProps.channel.id);\n        const currentUserId = getCurrentUserId(state);\n        const teammateNameDisplaySetting = getTeammateNameDisplaySetting(state);\n\n        return {\n            profilesInChannel: allProfilesInChannel,\n            teammateNameDisplaySetting,\n            currentUserId,\n        };\n    };\n}\n\nexport type Actions = {\n    closeModal: (modalID: string) => void;\n    convertGroupMessageToPrivateChannel: (channelID: string, teamID: string, displayName: string, name: string) => Promise<ActionResult>;\n    moveChannelsInSidebar: (categoryId: string, targetIndex: number, draggableChannelId: string, setManualSorting?: boolean) => void;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal,\n            convertGroupMessageToPrivateChannel,\n            moveChannelsInSidebar,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(ConvertGmToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ConvertGmToChannelModal from 'components/convert_gm_to_channel_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n}\n\nconst ConvertGMtoPrivate = ({channel}: Props): JSX.Element => {\n    const dispatch = useDispatch();\n    const handleConvertToPrivate = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.CONVERT_GM_TO_CHANNEL,\n                dialogType: ConvertGmToChannelModal,\n                dialogProps: {channel},\n            }),\n        );\n    };\n\n    return (\n        <Menu.Item\n            id='convertGMPrivateChannel'\n            onClick={handleConvertToPrivate}\n            labels={\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu_convert_to_channel'\n                    defaultMessage='Convert to Private Channel'\n                />\n            }\n        />\n    );\n};\n\nexport default React.memo(ConvertGMtoPrivate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {BellOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ninterface Props extends Menu.FirstMenuItemProps {\n    channel: Channel;\n    user: UserProfile;\n}\n\nconst Notification = ({channel, user, ...rest}: Props): JSX.Element => {\n    const dispatch = useDispatch();\n\n    const handleNotificationPreferences = () => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.CHANNEL_NOTIFICATIONS,\n            dialogType: ChannelNotificationsModal,\n            dialogProps: {\n                channel,\n                currentUser: user,\n            },\n        }));\n    };\n\n    return (\n        <Menu.Item\n            leadingElement={<BellOutlineIcon size='18px'/>}\n            id='channelNotificationPreferences'\n            onClick={handleNotificationPreferences}\n            labels={\n                <FormattedMessage\n                    id='navbar.preferences'\n                    defaultMessage='Notification Preferences'\n                />\n            }\n            {...rest}\n        />\n    );\n};\n\nexport default React.memo(Notification);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {AccountOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {showChannelMembers} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\n\nimport * as Menu from 'components/menu';\n\nimport {RHSStates} from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n    id: string;\n    editMembers?: boolean;\n    text: React.ReactElement;\n};\n\nconst OpenMembersRHS = ({\n    id,\n    channel,\n    text,\n    editMembers = false,\n}: Props) => {\n    const dispatch = useDispatch();\n    let rhsOpen = useSelector(getIsRhsOpen);\n    const rhsState = useSelector(getRhsState);\n    if (rhsState !== RHSStates.CHANNEL_MEMBERS) {\n        rhsOpen = false;\n    }\n    const openRHSIfNotOpen = () => {\n        if (rhsOpen) {\n            return;\n        }\n        dispatch(showChannelMembers(channel.id, editMembers));\n    };\n\n    return (\n        <Menu.Item\n            leadingElement={<AccountOutlineIcon size={16}/>}\n            id={id}\n            onClick={openRHSIfNotOpen}\n            labels={text}\n        />\n    );\n};\n\nexport default OpenMembersRHS;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {\n    ChevronRightIcon,\n    CogOutlineIcon,\n} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport ChannelMoveToSubMenu from 'components/channel_move_to_sub_menu';\nimport * as Menu from 'components/menu';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\n\nimport MenuItemChannelBookmarks from '../menu_items/channel_bookmarks_submenu';\nimport CloseMessage from '../menu_items/close_message';\nimport MenuItemConvertToPrivate from '../menu_items/convert_gm_to_private';\nimport EditConversationHeader from '../menu_items/edit_conversation_header';\nimport MenuItemNotification from '../menu_items/notification';\nimport MenuItemOpenMembersRHS from '../menu_items/open_members_rhs';\nimport MenuItemPluginItems from '../menu_items/plugins_submenu';\nimport MenuItemToggleFavoriteChannel from '../menu_items/toggle_favorite_channel';\nimport MenuItemToggleInfo from '../menu_items/toggle_info';\nimport MenuItemToggleMuteChannel from '../menu_items/toggle_mute_channel';\nimport MenuItemViewPinnedPosts from '../menu_items/view_pinned_posts';\n\ninterface Props extends Menu.FirstMenuItemProps {\n    channel: Channel;\n    user: UserProfile;\n    isMuted: boolean;\n    isMobile: boolean;\n    isFavorite: boolean;\n    pluginItems: ReactNode[];\n    isChannelBookmarksEnabled: boolean;\n}\n\nconst ChannelHeaderGroupMenu = ({channel, user, isMuted, isMobile, isFavorite, pluginItems, isChannelBookmarksEnabled, ...rest}: Props) => {\n    const isGroupConstrained = channel?.group_constrained === true;\n    const isArchived = channel.delete_at !== 0;\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            <MenuItemToggleInfo\n                channel={channel}\n                {...rest}\n            />\n            <MenuItemToggleMuteChannel\n                userID={user.id}\n                channel={channel}\n                isMuted={isMuted}\n            />\n            {isMobile && (\n                <>\n                    <MenuItemToggleFavoriteChannel\n                        channelID={channel.id}\n                        isFavorite={isFavorite}\n                    />\n                    <MenuItemViewPinnedPosts\n                        channelID={channel.id}\n                    />\n                </>\n            )}\n            {!isArchived && (\n                <MenuItemNotification\n                    user={user}\n                    channel={channel}\n                />\n            )}\n            {(!isArchived && isGuest(user.roles)) && (\n                <EditConversationHeader\n                    leadingElement={<CogOutlineIcon size='18px'/>}\n                    channel={channel}\n                />\n            )}\n            {(!isArchived && !isGroupConstrained && !isGuest(user.roles)) && (\n                <Menu.SubMenu\n                    id={'channelSettings'}\n                    labels={\n                        <FormattedMessage\n                            id='channel_header.settings'\n                            defaultMessage='Settings'\n                        />\n                    }\n                    leadingElement={<CogOutlineIcon size={18}/>}\n                    trailingElements={<ChevronRightIcon size={16}/>}\n                    menuId={'channelSettings-menu'}\n                    menuAriaLabel={formatMessage({id: 'channel_header.settings', defaultMessage: 'Settings'})}\n                >\n                    <EditConversationHeader\n                        channel={channel}\n                    />\n                    <MenuItemConvertToPrivate\n                        channel={channel}\n                    />\n                </Menu.SubMenu>\n            )}\n            {!isArchived && !isGuest(user.roles) && isChannelBookmarksEnabled && (\n                <MenuItemChannelBookmarks\n                    channel={channel}\n                />\n            )}\n            <Menu.Separator/>\n            {(!isArchived && !isGroupConstrained) && (\n                <ChannelPermissionGate\n                    channelId={channel.id}\n                    teamId={channel.team_id}\n                    permissions={[Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS]}\n                >\n                    <MenuItemOpenMembersRHS\n                        id='channelMembers'\n                        channel={channel}\n                        text={\n                            <FormattedMessage\n                                id='channel_header.members'\n                                defaultMessage='Members'\n                            />\n                        }\n                    />\n                    <Menu.Separator/>\n                </ChannelPermissionGate>\n            )}\n            <ChannelMoveToSubMenu channel={channel}/>\n            {!isMobile && (\n                <MenuItemPluginItems pluginItems={pluginItems}/>\n            )}\n            <Menu.Separator/>\n            <CloseMessage\n                currentUserID={user.id}\n                channel={channel}\n            />\n        </>\n    );\n};\n\nexport default ChannelHeaderGroupMenu;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React, {memo} from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport * as Menu from 'components/menu';\n\nimport MobileChannelHeaderPlugins from '../menu_items/mobile_channel_header_plugins';\n\ntype Props = {\n    isMobile: boolean;\n    channel: Channel;\n    pluginItems: ReactNode[];\n}\n\nconst ChannelHeaderMobileMenu = (props: Props): JSX.Element => {\n    if (!props.isMobile) {\n        return <></>;\n    }\n    return (\n        <>\n            <MobileChannelHeaderPlugins\n                channel={props.channel}\n                isDropdown={true}\n            />\n            <Menu.Separator/>\n            {props.pluginItems}\n        </>\n    );\n};\n\nexport default memo(ChannelHeaderMobileMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\nexport type Props = {\n    onExited: () => void;\n    channel: Channel;\n    currentTeamDetails?: {name: string};\n    canViewArchivedChannels?: boolean;\n    penultimateViewedChannelName: string;\n    actions: {\n        deleteChannel: (channelId: string) => void;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class DeleteChannelModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {show: true};\n    }\n\n    handleDelete = () => {\n        if (this.props.channel.id.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n        if (!this.props.canViewArchivedChannels) {\n            const {penultimateViewedChannelName} = this.props;\n            if (this.props.currentTeamDetails) {\n                getHistory().push('/' + this.props.currentTeamDetails.name + '/channels/' + penultimateViewedChannelName);\n            }\n        }\n        this.props.actions.deleteChannel(this.props.channel.id);\n        this.onHide();\n    };\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    render() {\n        const {canViewArchivedChannels} = this.props;\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onExited}\n                role='none'\n                aria-labelledby='deleteChannelModalLabel'\n                id='deleteChannelModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='deleteChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.confirm'\n                            defaultMessage='Confirm ARCHIVE Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='alert alert-danger'>\n                        {!canViewArchivedChannels &&\n                            <>\n                                <p>\n                                    <FormattedMessage\n                                        id='deleteChannelModal.cannotViewArchivedChannelsWarning'\n                                        defaultMessage='This will archive the channel from the team and remove it from the user interface. Archived channels can be unarchived if needed again.'\n                                    />\n                                </p>\n                                <p>\n                                    <FormattedMessage\n                                        id='deleteChannelModal.confirmArchive'\n                                        defaultMessage='Are you sure you wish to archive the <strong>{display_name}</strong> channel?'\n                                        values={{\n                                            display_name: this.props.channel.display_name,\n                                            strong: (chunks: string) => <strong>{chunks}</strong>,\n                                        }}\n                                    />\n                                </p>\n                            </>\n                        }\n                        {canViewArchivedChannels &&\n                            <>\n                                <p>\n                                    <FormattedMessage\n                                        id='deleteChannelModal.canViewArchivedChannelsWarning'\n                                        defaultMessage='This will archive the channel from the team. Channel contents will still be accessible by channel members.'\n                                    />\n                                </p>\n                                <p>\n                                    <FormattedMessage\n                                        id='deleteChannelModal.confirmArchive'\n                                        defaultMessage='Are you sure you wish to archive the <strong>{display_name}</strong> channel?'\n                                        values={{\n                                            display_name: this.props.channel.display_name,\n                                            strong: (chunks: string) => <strong>{chunks}</strong>,\n                                        }}\n                                    />\n                                </p>\n                            </>\n                        }\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-tertiary'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='delete_channel.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        data-dismiss='modal'\n                        onClick={this.handleDelete}\n                        autoFocus={true}\n                        id='deleteChannelModalDeleteButton'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.del'\n                            defaultMessage='Archive'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deleteChannel} from 'actions/views/channel';\n\nimport DeleteChannelModal from './delete_channel_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        canViewArchivedChannels: config.ExperimentalViewArchivedChannels === 'true',\n        currentTeamDetails: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators(\n            {\n                deleteChannel,\n            },\n            dispatch,\n        ),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {ArchiveOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getRedirectChannelNameForCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport {openModal} from 'actions/views/modals';\nimport {getPenultimateViewedChannelName} from 'selectors/local_storage';\n\nimport DeleteChannelModal from 'components/delete_channel_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n}\n\nconst ArchiveChannel = ({\n    channel,\n}: Props) => {\n    const dispatch = useDispatch();\n    const redirectChannelName = useSelector(getRedirectChannelNameForCurrentTeam);\n    const penultimateViewedChannelName = useSelector(getPenultimateViewedChannelName) || redirectChannelName;\n\n    const handleArchiveChannel = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.DELETE_CHANNEL,\n                dialogType: DeleteChannelModal,\n                dialogProps: {\n                    channel,\n                    penultimateViewedChannelName,\n                },\n            }),\n        );\n    };\n\n    return (\n        <Menu.Item\n            id='channelArchiveChannel'\n            leadingElement={<ArchiveOutlineIcon size={18}/>}\n            onClick={handleArchiveChannel}\n            labels={\n                <FormattedMessage\n                    id='channel_header.delete'\n                    defaultMessage='Archive Channel'\n                />\n            }\n            isDestructive={true}\n        />\n    );\n};\n\nexport default memo(ArchiveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState, useCallback} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {deleteChannel} from 'actions/views/channel';\n\nimport ConfirmationModal from 'components/confirm_modal';\n\nimport type {GlobalState} from 'types/store';\n\ntype ChannelSettingsArchiveTabProps = {\n    channel: Channel;\n    onHide: () => void;\n}\n\nfunction ChannelSettingsArchiveTab({\n    channel,\n    onHide,\n}: ChannelSettingsArchiveTabProps) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    // Redux selector\n    const canViewArchivedChannels = useSelector((state: GlobalState) => getConfig(state).ExperimentalViewArchivedChannels === 'true');\n\n    const [showArchiveConfirmModal, setShowArchiveConfirmModal] = useState(false);\n\n    const handleArchiveChannel = useCallback(() => {\n        setShowArchiveConfirmModal(true);\n    }, []);\n\n    const doArchiveChannel = async () => {\n        // Call the delete channel action which handles validation, redirection, and notification sounds\n        await dispatch(deleteChannel(channel.id));\n\n        // Close the modal\n        onHide();\n    };\n\n    return (\n        <div className='ChannelSettingsModal__archiveTab'>\n            <FormattedMessage\n                id='channel_settings.archive.warning'\n                defaultMessage=\"Archiving a channel removes it from the user interface, but doesn't permanently delete the channel. New messages can't be posted to archived channels.\"\n            />\n            <button\n                type='button'\n                className='btn btn-danger'\n                onClick={handleArchiveChannel}\n                id='channelSettingsArchiveChannelButton'\n                aria-label={`Archive channel ${channel.display_name}`}\n            >\n                <FormattedMessage\n                    id='channel_settings.archive.button'\n                    defaultMessage='Archive this channel'\n                />\n            </button>\n\n            {showArchiveConfirmModal && (\n                <ConfirmationModal\n                    id='archiveChannelConfirmModal'\n                    show={true}\n                    title={formatMessage({id: 'channel_settings.modal.archiveTitle', defaultMessage: 'Archive channel?'})}\n                    message={\n                        <div>\n                            <p>\n                                <FormattedMessage\n                                    id={canViewArchivedChannels ?\n                                        'deleteChannelModal.canViewArchivedChannelsWarning' :\n                                        'deleteChannelModal.cannotViewArchivedChannelsWarning'\n                                    }\n                                    defaultMessage=\"Archiving a channel removes it from the user interface, but doesn't permanently delete the channel. New messages can't be posted to archived channels.\"\n                                />\n                            </p>\n                            <p>\n                                <FormattedMessage\n                                    id='deleteChannelModal.confirmArchive'\n                                    defaultMessage='Are you sure you wish to archive the <strong>{display_name}</strong> channel?'\n                                    values={{\n                                        display_name: channel.display_name,\n                                        strong: (chunks: string) => <strong>{chunks}</strong>,\n                                    }}\n                                />\n                            </p>\n                        </div>\n                    }\n                    confirmButtonText={formatMessage({id: 'channel_settings.modal.confirmArchive', defaultMessage: 'Confirm'})}\n                    onConfirm={doArchiveChannel}\n                    onCancel={() => setShowArchiveConfirmModal(false)}\n                    confirmButtonClass='btn btn-danger'\n                    modalClass='archiveChannelConfirmModal'\n                    focusOriginElement='channelSettingsArchiveChannelButton'\n                />\n            )}\n        </div>\n    );\n}\n\nexport default ChannelSettingsArchiveTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useState, useEffect} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport ShowFormat from 'components/advanced_text_editor/show_formatting/show_formatting';\nimport Textbox from 'components/textbox';\nimport type {TextboxElement} from 'components/textbox';\n\nimport './advanced_textbox.scss';\n\ntype AdvancedTextboxProps = {\n    id: string;\n    value: string;\n    channelId: string;\n    onChange: (e: React.ChangeEvent<TextboxElement>) => void;\n    onKeyPress: (e: React.KeyboardEvent<TextboxElement>) => void;\n    createMessage: string;\n    maxLength: number;\n    minLength?: number;\n    minLengthErrorMessage?: string;\n    preview: boolean;\n    togglePreview: () => void;\n    useChannelMentions?: boolean;\n    descriptionMessage?: JSX.Element | string;\n    hasError?: boolean;\n    errorMessage?: string | JSX.Element;\n    onValidate?: (value: string) => { isValid: boolean; errorMessage?: string };\n    showCharacterCount?: boolean;\n    readOnly?: boolean;\n    name?: string; // Added name prop for floating label\n};\n\nconst AdvancedTextbox = ({\n    id,\n    value,\n    channelId,\n    onChange,\n    onKeyPress,\n    createMessage,\n    maxLength,\n    minLength,\n    minLengthErrorMessage,\n    preview,\n    togglePreview,\n    useChannelMentions = false,\n    descriptionMessage,\n    hasError,\n    errorMessage,\n    onValidate,\n    showCharacterCount = false,\n    readOnly = false,\n    name,\n}: AdvancedTextboxProps) => {\n    const {formatMessage} = useIntl();\n    const [internalError, setInternalError] = useState<string | JSX.Element | undefined>(errorMessage);\n    const [isFocused, setIsFocused] = useState(false);\n\n    // Derived values\n    const isTooLong = value.length > maxLength;\n    const isTooShort = minLength !== undefined && value.length > 0 && value.length < minLength;\n\n    // Update internal error when prop changes or when validation state changes\n    useEffect(() => {\n        if (errorMessage) {\n            setInternalError(errorMessage);\n        } else if (isTooLong) {\n            setInternalError(formatMessage(\n                {id: 'advanced_textbox.max_length_error', defaultMessage: 'Text exceeds the maximum character limit of {maxLength} characters.'},\n                {maxLength},\n            ));\n        } else if (isTooShort) {\n            setInternalError(minLengthErrorMessage || formatMessage(\n                {id: 'advanced_textbox.min_length_error', defaultMessage: 'Text must be at least {minLength} characters.'},\n                {minLength},\n            ));\n        } else {\n            setInternalError(undefined);\n        }\n    }, [errorMessage, isTooLong, isTooShort, maxLength, minLength, minLengthErrorMessage, formatMessage]);\n\n    // Handle focus events\n    const handleFocus = () => {\n        setIsFocused(true);\n    };\n\n    const handleBlur = () => {\n        setIsFocused(false);\n    };\n\n    // Handle validation on change\n    const handleChange = (e: React.ChangeEvent<TextboxElement>) => {\n        const newValue = e.target.value;\n\n        // Run validation if provided\n        if (onValidate) {\n            const validationResult = onValidate(newValue);\n            if (validationResult.isValid === false) {\n                setInternalError(validationResult.errorMessage);\n            } else {\n                setInternalError(undefined);\n            }\n        }\n\n        // Call original onChange\n        onChange(e);\n    };\n\n    let localPreview = preview;\n    if (readOnly) {\n        localPreview = true;\n    }\n\n    return (\n        <div className='AdvancedTextbox'>\n            <div className='AdvancedTextbox__wrapper'>\n                {name && (\n                    <div className={`AdvancedTextbox__label ${(value || isFocused) ? 'AdvancedTextbox__label--active' : ''} ${isFocused ? 'AdvancedTextbox__label--focused' : ''} ${hasError || internalError ? 'AdvancedTextbox__label--error' : ''}`}>\n                        {name}\n                    </div>\n                )}\n                <Textbox\n                    value={value}\n                    onChange={handleChange}\n                    onKeyPress={onKeyPress}\n                    supportsCommands={false}\n                    suggestionListPosition='bottom'\n                    createMessage={createMessage}\n                    channelId={channelId}\n                    id={id}\n                    characterLimit={maxLength}\n                    preview={localPreview}\n                    useChannelMentions={useChannelMentions}\n                    hasError={hasError}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                    disabled={readOnly}\n                />\n            </div>\n            {!readOnly && value.trim().length > 0 && (\n                <ShowFormat\n                    onClick={togglePreview}\n                    active={preview}\n                />)\n            }\n\n            <div className='AdvancedTextbox__error-wrapper'>\n                {/* Error message display */}\n                {internalError && (\n                    <div className='AdvancedTextbox__error-message'>\n                        <i className='icon icon-alert-circle-outline'/>\n                        <span>{internalError}</span>\n                    </div>\n                )}\n\n                {/* Character count display */}\n                {showCharacterCount && (isTooLong || isTooShort || internalError) && (\n                    <div\n                        className={classNames('AdvancedTextbox__character-count', {\n                            'exceeds-limit': isTooLong,\n                            'below-minimum': isTooShort,\n                        })}\n                    >\n                        {value.length}{'/'}\n                        {isTooShort ? minLength : maxLength}\n                    </div>\n                )}\n            </div>\n\n            {/* Error message display */}\n            {(descriptionMessage && !internalError) && (\n                <p\n                    data-testid='AdvancedTextbox__description'\n                    className='AdvancedTextbox__description'\n                >\n                    {descriptionMessage}\n                </p>\n            )}\n        </div>\n    );\n};\n\nexport default AdvancedTextbox;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ServerError} from '@mattermost/types/errors';\n\nimport {patchChannel} from 'mattermost-redux/actions/channels';\n\nimport ColorInput from 'components/color_input';\nimport type {TextboxElement} from 'components/textbox';\nimport Toggle from 'components/toggle';\nimport AdvancedTextbox from 'components/widgets/advanced_textbox/advanced_textbox';\nimport type {SaveChangesPanelState} from 'components/widgets/modals/components/save_changes_panel';\nimport SaveChangesPanel from 'components/widgets/modals/components/save_changes_panel';\n\nimport './channel_settings_configuration_tab.scss';\n\nconst CHANNEL_BANNER_MAX_CHARACTER_LIMIT = 1024;\nconst CHANNEL_BANNER_MIN_CHARACTER_LIMIT = 0;\n\nconst DEFAULT_CHANNEL_BANNER = {\n    enabled: false,\n    background_color: '#DDDDDD',\n    text: '',\n};\n\ntype Props = {\n    channel: Channel;\n    setAreThereUnsavedChanges?: (unsaved: boolean) => void;\n    showTabSwitchError?: boolean;\n}\n\nfunction ChannelSettingsConfigurationTab({channel, setAreThereUnsavedChanges, showTabSwitchError}: Props) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    const heading = formatMessage({id: 'channel_banner.label.name', defaultMessage: 'Channel Banner'});\n    const subHeading = formatMessage({id: 'channel_banner.label.subtext', defaultMessage: 'When enabled, a customized banner will display at the top of the channel.'});\n    const bannerTextSettingTitle = formatMessage({id: 'channel_banner.banner_text.label', defaultMessage: 'Banner text'});\n    const bannerColorSettingTitle = formatMessage({id: 'channel_banner.banner_color.label', defaultMessage: 'Banner color'});\n    const bannerTextPlaceholder = formatMessage({id: 'channel_banner.banner_text.placeholder', defaultMessage: 'Channel banner text'});\n\n    const initialBannerInfo = channel.banner_info || DEFAULT_CHANNEL_BANNER;\n\n    const [formError, setFormError] = useState('');\n    const [showBannerTextPreview, setShowBannerTextPreview] = useState(false);\n    const [updatedChannelBanner, setUpdatedChannelBanner] = useState(initialBannerInfo);\n\n    const [requireConfirm, setRequireConfirm] = useState(false);\n    const [characterLimitExceeded, setCharacterLimitExceeded] = useState(false);\n    const [saveChangesPanelState, setSaveChangesPanelState] = useState<SaveChangesPanelState>();\n\n    // Change handlers\n    const handleToggle = useCallback(() => {\n        const newValue = !updatedChannelBanner.enabled;\n        const toUpdate = {\n            ...updatedChannelBanner,\n            enabled: newValue,\n        };\n        if (!newValue) {\n            toUpdate.text = initialBannerInfo.text;\n            toUpdate.background_color = initialBannerInfo.background_color;\n        }\n\n        setUpdatedChannelBanner(toUpdate);\n    }, [initialBannerInfo, updatedChannelBanner]);\n\n    const resetFormErrors = useCallback(() => {\n        setFormError('');\n        setSaveChangesPanelState(undefined);\n    }, []);\n\n    const handleTextChange = useCallback((e: React.ChangeEvent<TextboxElement>) => {\n        const newValue = e.target.value;\n        setUpdatedChannelBanner((prev) => ({\n            ...prev,\n            text: newValue,\n        }));\n\n        if (newValue.trim().length > CHANNEL_BANNER_MAX_CHARACTER_LIMIT) {\n            setFormError(formatMessage({\n                id: 'channel_settings.save_changes_panel.standard_error',\n                defaultMessage: 'There are errors in the form above',\n            }));\n            setCharacterLimitExceeded(true);\n        } else if (newValue.trim().length <= CHANNEL_BANNER_MIN_CHARACTER_LIMIT) {\n            setFormError(formatMessage({\n                id: 'channel_settings.save_changes_panel.banner_text.required_error',\n                defaultMessage: 'Channel banner text cannot be empty when enabled',\n            }));\n            setCharacterLimitExceeded(true);\n        } else {\n            resetFormErrors();\n            setCharacterLimitExceeded(false);\n        }\n    }, [formatMessage, resetFormErrors]);\n\n    const handleColorChange = useCallback((color: string) => {\n        setUpdatedChannelBanner((prev) => ({\n            ...prev,\n            background_color: color,\n        }));\n\n        if (color.trim()) {\n            resetFormErrors();\n        }\n    }, [resetFormErrors]);\n\n    const toggleTextPreview = useCallback(() => setShowBannerTextPreview((show) => !show), []);\n\n    const hasUnsavedChanges = useCallback(() => {\n        return (updatedChannelBanner.text?.trim() || '') !== (initialBannerInfo?.text?.trim() || '') ||\n            (updatedChannelBanner.background_color?.trim() || '') !== (initialBannerInfo?.background_color?.trim() || '') ||\n            updatedChannelBanner.enabled !== initialBannerInfo?.enabled;\n    }, [initialBannerInfo, updatedChannelBanner]);\n\n    useEffect(() => {\n        const unsavedChanges = hasUnsavedChanges();\n        setRequireConfirm(unsavedChanges);\n        setAreThereUnsavedChanges?.(unsavedChanges);\n    }, [hasUnsavedChanges, setAreThereUnsavedChanges]);\n\n    const handleServerError = useCallback((err: ServerError) => {\n        const errorMsg = err.message || formatMessage({id: 'channel_settings.unknown_error', defaultMessage: 'Something went wrong.'});\n        setFormError(errorMsg);\n    }, [formatMessage]);\n\n    const handleSave = useCallback(async (): Promise<boolean> => {\n        if (!channel) {\n            return false;\n        }\n\n        if (updatedChannelBanner.enabled && !updatedChannelBanner.text?.trim()) {\n            setFormError(formatMessage({\n                id: 'channel_settings.error_banner_text_required',\n                defaultMessage: 'Banner text is required',\n            }));\n            return false;\n        }\n\n        if (updatedChannelBanner.enabled && !updatedChannelBanner.background_color?.trim()) {\n            setFormError(formatMessage({\n                id: 'channel_settings.error_banner_color_required',\n                defaultMessage: 'Banner color is required',\n            }));\n            return false;\n        }\n\n        const updated: Channel = {\n            ...channel,\n        };\n\n        updated.banner_info = {\n            text: updatedChannelBanner.text?.trim() || '',\n            background_color: updatedChannelBanner.background_color?.trim() || '',\n            enabled: updatedChannelBanner.enabled,\n        };\n\n        const {error} = await dispatch(patchChannel(channel.id, updated));\n        if (error) {\n            handleServerError(error as ServerError);\n            return false;\n        }\n\n        return true;\n    }, [channel, dispatch, formatMessage, handleServerError, updatedChannelBanner]);\n\n    const handleSaveChanges = useCallback(async () => {\n        const success = await handleSave();\n        if (!success) {\n            setSaveChangesPanelState('error');\n            return;\n        }\n\n        // Update local state with trimmed values after successful save\n        setUpdatedChannelBanner((prev) => ({\n            ...prev,\n            text: prev.text?.trim() || '',\n            background_color: prev.background_color?.trim() || '',\n        }));\n\n        resetFormErrors();\n        setSaveChangesPanelState('saved');\n    }, [handleSave, resetFormErrors]);\n\n    const handleCancel = useCallback(() => {\n        setRequireConfirm(false);\n        setSaveChangesPanelState(undefined);\n        setShowBannerTextPreview(false);\n\n        setUpdatedChannelBanner(initialBannerInfo);\n        setFormError('');\n        setSaveChangesPanelState(undefined);\n        setCharacterLimitExceeded(false);\n    }, [initialBannerInfo]);\n\n    const handleClose = useCallback(() => {\n        setSaveChangesPanelState(undefined);\n        setRequireConfirm(false);\n    }, []);\n\n    const hasErrors = Boolean(formError) ||\n        characterLimitExceeded ||\n        showTabSwitchError;\n\n    const showSaveChangesPanel = requireConfirm || saveChangesPanelState === 'saved';\n\n    return (\n        <div className='ChannelSettingsModal__configurationTab'>\n            <div className='channel_banner_header'>\n                <div className='channel_banner_header__text'>\n                    <label\n                        className='Input_legend'\n                        aria-label={heading}\n                    >\n                        {heading}\n                    </label>\n                    <label\n                        className='Input_subheading'\n                        aria-label={heading}\n                    >\n                        {subHeading}\n                    </label>\n                </div>\n\n                <div className='channel_banner_header__toggle'>\n                    <Toggle\n                        id='channelBannerToggle'\n                        ariaLabel={heading}\n                        size='btn-md'\n                        disabled={false}\n                        onToggle={handleToggle}\n                        toggled={updatedChannelBanner.enabled}\n                        tabIndex={0}\n                        toggleClassName='btn-toggle-primary'\n                    />\n                </div>\n            </div>\n\n            {\n                updatedChannelBanner.enabled &&\n                <div className='channel_banner_section_body'>\n                    {/*Banner text section*/}\n                    <div className='setting_section'>\n                        <span\n                            className='setting_title'\n                            aria-label={bannerTextSettingTitle}\n                        >\n                            {bannerTextSettingTitle}\n                        </span>\n\n                        <div className='setting_body'>\n                            <AdvancedTextbox\n                                id='channel_banner_banner_text_textbox'\n                                value={updatedChannelBanner.text!}\n                                channelId={channel.id}\n                                onKeyPress={() => {}}\n                                showCharacterCount={true}\n                                useChannelMentions={false}\n                                onChange={handleTextChange}\n                                preview={showBannerTextPreview}\n                                togglePreview={toggleTextPreview}\n                                hasError={characterLimitExceeded}\n                                createMessage={bannerTextPlaceholder}\n                                maxLength={CHANNEL_BANNER_MAX_CHARACTER_LIMIT}\n                                minLength={CHANNEL_BANNER_MIN_CHARACTER_LIMIT}\n                            />\n                        </div>\n                    </div>\n\n                    {/*Banner background color section*/}\n                    <div className='setting_section'>\n                        <span\n                            className='setting_title'\n                            aria-label={bannerColorSettingTitle}\n                        >\n                            {bannerColorSettingTitle}\n                        </span>\n\n                        <div className='setting_body'>\n                            <ColorInput\n                                id='channel_banner_banner_background_color_picker'\n                                onChange={handleColorChange}\n                                value={updatedChannelBanner.background_color || ''}\n                            />\n                        </div>\n                    </div>\n                </div>\n            }\n\n            {showSaveChangesPanel && (\n                <SaveChangesPanel\n                    handleSubmit={handleSaveChanges}\n                    handleCancel={handleCancel}\n                    handleClose={handleClose}\n                    tabChangeError={hasErrors}\n                    state={hasErrors ? 'error' : saveChangesPanelState}\n                    customErrorMessage={formError}\n                    cancelButtonText={formatMessage({\n                        id: 'channel_settings.save_changes_panel.reset',\n                        defaultMessage: 'Reset',\n                    })}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default ChannelSettingsConfigurationTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState, useEffect, useMemo} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {Channel, ChannelType} from '@mattermost/types/channels';\nimport type {ServerError} from '@mattermost/types/errors';\n\nimport {patchChannel, updateChannelPrivacy} from 'mattermost-redux/actions/channels';\nimport {General} from 'mattermost-redux/constants';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport {\n    setShowPreviewOnChannelSettingsHeaderModal,\n    setShowPreviewOnChannelSettingsPurposeModal,\n} from 'actions/views/textbox';\nimport {\n    showPreviewOnChannelSettingsHeaderModal,\n    showPreviewOnChannelSettingsPurposeModal,\n} from 'selectors/views/textbox';\n\nimport ConvertConfirmModal from 'components/admin_console/team_channel_settings/convert_confirm_modal';\nimport ChannelNameFormField from 'components/channel_name_form_field/channel_name_form_field';\nimport type {TextboxElement} from 'components/textbox';\nimport AdvancedTextbox from 'components/widgets/advanced_textbox/advanced_textbox';\nimport SaveChangesPanel, {type SaveChangesPanelState} from 'components/widgets/modals/components/save_changes_panel';\nimport PublicPrivateSelector from 'components/widgets/public-private-selector/public-private-selector';\n\nimport Constants from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\ntype ChannelSettingsInfoTabProps = {\n    channel: Channel;\n    onCancel?: () => void;\n    setAreThereUnsavedChanges?: (unsaved: boolean) => void;\n    showTabSwitchError?: boolean;\n};\n\nfunction ChannelSettingsInfoTab({\n    channel,\n    onCancel,\n    setAreThereUnsavedChanges,\n    showTabSwitchError,\n}: ChannelSettingsInfoTabProps) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const shouldShowPreviewPurpose = useSelector(showPreviewOnChannelSettingsPurposeModal);\n    const shouldShowPreviewHeader = useSelector(showPreviewOnChannelSettingsHeaderModal);\n\n    // Permissions for transforming channel type\n    const canConvertToPrivate = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, Permissions.CONVERT_PUBLIC_CHANNEL_TO_PRIVATE),\n    );\n    const canConvertToPublic = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, Permissions.CONVERT_PRIVATE_CHANNEL_TO_PUBLIC),\n    );\n\n    // Permissions for managing channel (name, header, purpose)\n    const channelPropertiesPermission = channel.type === Constants.PRIVATE_CHANNEL ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES;\n    const canManageChannelProperties = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, channelPropertiesPermission),\n    );\n\n    // Constants\n    const HEADER_MAX_LENGTH = 1024;\n\n    // Internal state variables\n    const [internalUrlError, setUrlError] = useState('');\n    const [channelNameError, setChannelNameError] = useState('');\n    const [characterLimitExceeded, setCharacterLimitExceeded] = useState(false);\n    const [showConvertConfirmModal, setShowConvertConfirmModal] = useState(false);\n\n    // Removed switchingTabsWithUnsaved state as we now use the showTabSwitchError prop directly\n\n    // The fields we allow editing\n    const [displayName, setDisplayName] = useState(channel?.display_name ?? '');\n    const [channelUrl, setChannelURL] = useState(channel?.name ?? '');\n    const [channelPurpose, setChannelPurpose] = useState(channel.purpose ?? '');\n    const [channelHeader, setChannelHeader] = useState(channel?.header ?? '');\n    const [channelType, setChannelType] = useState<ChannelType>(channel?.type as ChannelType ?? Constants.OPEN_CHANNEL as ChannelType);\n\n    // UI Feedback: errors, states\n    const [formError, setFormError] = useState('');\n\n    // SaveChangesPanel state\n    const [saveChangesPanelState, setSaveChangesPanelState] = useState<SaveChangesPanelState>();\n\n    // Handler for channel name validation errors\n    const handleChannelNameError = useCallback((isError: boolean, errorMessage?: string) => {\n        setChannelNameError(errorMessage || '');\n\n        // If there's an error, update the error to show in the SaveChangesPanel\n        if (isError && errorMessage) {\n            setFormError(errorMessage);\n        } else if (formError === channelNameError) {\n            // Only clear error if it's the same as the channel name error\n            setFormError('');\n        }\n    }, [channelNameError, formError, setFormError]);\n\n    // Update parent component when changes occur\n    useEffect(() => {\n        // Calculate unsaved changes directly\n        const unsavedChanges = channel ? (\n            displayName.trim() !== channel.display_name ||\n            channelUrl.trim() !== channel.name ||\n            channelPurpose.trim() !== channel.purpose ||\n            channelHeader.trim() !== channel.header ||\n            channelType !== channel.type\n        ) : false;\n\n        setAreThereUnsavedChanges?.(unsavedChanges);\n    }, [channel, displayName, channelUrl, channelPurpose, channelHeader, channelType, setAreThereUnsavedChanges]);\n\n    const handleURLChange = useCallback((newURL: string) => {\n        if (internalUrlError) {\n            setFormError('');\n            setSaveChangesPanelState(undefined);\n            setUrlError('');\n        }\n        setChannelURL(newURL.trim());\n    }, [internalUrlError]);\n\n    const togglePurposePreview = useCallback(() => {\n        dispatch(setShowPreviewOnChannelSettingsPurposeModal(!shouldShowPreviewPurpose));\n    }, [dispatch, shouldShowPreviewPurpose]);\n\n    const toggleHeaderPreview = useCallback(() => {\n        dispatch(setShowPreviewOnChannelSettingsHeaderModal(!shouldShowPreviewHeader));\n    }, [dispatch, shouldShowPreviewHeader]);\n\n    const handleChannelTypeChange = (type: ChannelType) => {\n        // Never allow conversion from private to public, regardless of permissions\n        if (channel.type === Constants.PRIVATE_CHANNEL && type === Constants.OPEN_CHANNEL) {\n            return;\n        }\n\n        // Check if user has permission to convert from public to private\n        if (channel.type === Constants.OPEN_CHANNEL && type === Constants.PRIVATE_CHANNEL && !canConvertToPrivate) {\n            return;\n        }\n\n        setChannelType(type);\n        setFormError('');\n    };\n\n    const handleHeaderChange = useCallback((e: React.ChangeEvent<TextboxElement>) => {\n        const newValue = e.target.value;\n\n        // Update the header value\n        setChannelHeader(newValue);\n\n        // Check for character limit\n        if (newValue.trim().length > HEADER_MAX_LENGTH) {\n            setFormError(formatMessage({\n                id: 'edit_channel_header_modal.error',\n                defaultMessage: 'The text entered exceeds the character limit. The channel header is limited to {maxLength} characters.',\n            }, {\n                maxLength: HEADER_MAX_LENGTH,\n            }));\n        } else if (formError && !channelNameError) {\n            // Only clear form error if there's no channel name error\n            // This prevents clearing channel name errors when editing the header\n            setFormError('');\n        }\n    }, [HEADER_MAX_LENGTH, formError, channelNameError, setFormError, formatMessage]);\n\n    const handlePurposeChange = useCallback((e: React.ChangeEvent<TextboxElement>) => {\n        const newValue = e.target.value;\n\n        // Update the purpose value\n        setChannelPurpose(newValue);\n\n        // Check for character limit\n        if (newValue.trim().length > Constants.MAX_CHANNELPURPOSE_LENGTH) {\n            setFormError(formatMessage({\n                id: 'channel_settings.error_purpose_length',\n                defaultMessage: 'The text entered exceeds the character limit. The channel purpose is limited to {maxLength} characters.',\n            }, {\n                maxLength: Constants.MAX_CHANNELPURPOSE_LENGTH,\n            }));\n        } else if (formError && !channelNameError) {\n            // Only clear server error if there's no channel name error\n            // This prevents clearing channel name errors when editing the purpose\n            setFormError('');\n        }\n    }, [formError, channelNameError, setFormError, formatMessage]);\n\n    const handleServerError = (err: ServerError) => {\n        const errorMsg = err.message || formatMessage({id: 'channel_settings.unknown_error', defaultMessage: 'Something went wrong.'});\n        setFormError(errorMsg);\n        setSaveChangesPanelState('error');\n\n        // Check if the error is related to a URL conflict\n        if (err.message && (\n            err.message.toLowerCase().includes('url') ||\n            err.message.toLowerCase().includes('name') ||\n            err.message.toLowerCase().includes('already exists')\n        )) {\n            setUrlError(errorMsg); // Set the URL error to show in the URL input\n        }\n    };\n\n    // Validate & Save - using useCallback to ensure it has the latest state values\n    const handleSave = useCallback(async (): Promise<boolean> => {\n        if (!channel) {\n            return false;\n        }\n\n        if (!displayName.trim()) {\n            setFormError(formatMessage({\n                id: 'channel_settings.error_display_name_required',\n                defaultMessage: 'Channel name is required',\n            }));\n            return false;\n        }\n\n        // write the code to validate if the channel is changing from public to private\n        if (channel.type === Constants.OPEN_CHANNEL && channelType === Constants.PRIVATE_CHANNEL) {\n            const {error} = await dispatch(updateChannelPrivacy(channel.id, General.PRIVATE_CHANNEL));\n            if (error) {\n                handleServerError(error as ServerError);\n                return false;\n            }\n        }\n\n        // Build updated channel object\n        const updated: Channel = {\n            ...channel,\n            display_name: displayName.trim(),\n            name: channelUrl.trim(),\n            purpose: channelPurpose.trim(),\n            header: channelHeader.trim(),\n        };\n\n        const {error} = await dispatch(patchChannel(channel.id, updated));\n        if (error) {\n            handleServerError(error as ServerError);\n            return false;\n        }\n\n        // After every successful save, update local state to match the saved values\n        // with this, we make sure that the unsavedChanges check will return false after saving\n        setDisplayName(updated.display_name);\n        setChannelURL(updated.name);\n        setChannelPurpose(updated.purpose);\n        setChannelHeader(updated.header);\n        return true;\n    }, [channel, displayName, channelUrl, channelPurpose, channelHeader, channelType, setFormError, handleServerError]);\n\n    // Handle save changes panel actions\n    const handleSaveChanges = useCallback(async () => {\n        // Check if privacy is changing from public to private\n        const isPrivacyChanging = channel.type === Constants.OPEN_CHANNEL &&\n                                 channelType === Constants.PRIVATE_CHANNEL;\n\n        // If privacy is changing, show confirmation modal\n        if (isPrivacyChanging) {\n            setShowConvertConfirmModal(true);\n            return;\n        }\n\n        // Otherwise proceed with normal save\n        const success = await handleSave();\n        if (!success) {\n            setSaveChangesPanelState('error');\n            return;\n        }\n        setSaveChangesPanelState('saved');\n    }, [channel, channelType, handleSave]);\n\n    const handleClose = useCallback(() => {\n        setSaveChangesPanelState(undefined);\n    }, []);\n\n    const hideConvertConfirmModal = useCallback(() => {\n        setShowConvertConfirmModal(false);\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        // First, hide the panel immediately to prevent further interactions\n        setSaveChangesPanelState(undefined);\n\n        // Then reset all form fields to their original values\n        setDisplayName(channel?.display_name ?? '');\n        setChannelURL(channel?.name ?? '');\n        setChannelPurpose(channel?.purpose ?? '');\n        setChannelHeader(channel?.header ?? '');\n        setChannelType(channel?.type as ChannelType ?? Constants.OPEN_CHANNEL as ChannelType);\n\n        // Clear errors\n        setUrlError('');\n        setFormError('');\n        setCharacterLimitExceeded(false);\n        setChannelNameError('');\n\n        // If parent provided an onCancel callback, call it\n        if (onCancel) {\n            onCancel();\n        }\n    }, [channel, onCancel, setFormError]);\n\n    // Calculate if there are errors\n    const hasErrors = Boolean(formError) ||\n                     characterLimitExceeded ||\n                     Boolean(channelNameError) ||\n                     Boolean(showTabSwitchError) ||\n                     Boolean(internalUrlError);\n\n    // Memoize the calculation for whether to show the save changes panel\n    const shouldShowPanel = useMemo(() => {\n        const unsavedChanges = channel ? (\n            displayName.trim() !== channel.display_name ||\n            channelUrl.trim() !== channel.name ||\n            channelPurpose.trim() !== channel.purpose ||\n            channelHeader.trim() !== channel.header ||\n            channelType !== channel.type\n        ) : false;\n\n        return unsavedChanges || saveChangesPanelState === 'saved';\n    }, [channel, displayName, channelUrl, channelPurpose, channelHeader, channelType, saveChangesPanelState]);\n\n    return (\n        <div className='ChannelSettingsModal__infoTab'>\n            {/* ConvertConfirmModal for channel privacy changes */}\n            <ConvertConfirmModal\n                show={showConvertConfirmModal}\n                onCancel={hideConvertConfirmModal}\n                onConfirm={async () => {\n                    hideConvertConfirmModal();\n                    const success = await handleSave();\n                    if (!success) {\n                        setSaveChangesPanelState('error');\n                        return;\n                    }\n                    setSaveChangesPanelState('saved');\n                }}\n                displayName={channel?.display_name || ''}\n                toPublic={false} // Always false since we're only converting from public to private\n            />\n\n            {/* Channel Name Section*/}\n            <label\n                htmlFor='input_channel-settings-name'\n                className='Input_legend'\n            >\n                {formatMessage({id: 'channel_settings.label.name', defaultMessage: 'Channel Name'})}\n            </label>\n            <ChannelNameFormField\n                value={displayName}\n                name='channel-settings-name'\n                placeholder={formatMessage({\n                    id: 'channel_settings_modal.name.placeholder',\n                    defaultMessage: 'Enter a name for your channel',\n                })}\n                onDisplayNameChange={(name) => {\n                    setDisplayName(name);\n                }}\n                onURLChange={handleURLChange}\n                onErrorStateChange={handleChannelNameError}\n                urlError={internalUrlError}\n                currentUrl={channelUrl}\n                readOnly={!canManageChannelProperties}\n            />\n\n            {/* Channel Type Section*/}\n            <PublicPrivateSelector\n                className='ChannelSettingsModal__typeSelector'\n                selected={channelType}\n                publicButtonProps={{\n                    title: formatMessage({id: 'channel_modal.type.public.title', defaultMessage: 'Public Channel'}),\n                    description: formatMessage({id: 'channel_modal.type.public.description', defaultMessage: 'Anyone can join'}),\n\n                    // Always disable public button if current channel is private, regardless of permissions\n                    disabled: channel.type === Constants.PRIVATE_CHANNEL || !canConvertToPublic,\n                }}\n                privateButtonProps={{\n                    title: formatMessage({id: 'channel_modal.type.private.title', defaultMessage: 'Private Channel'}),\n                    description: formatMessage({id: 'channel_modal.type.private.description', defaultMessage: 'Only invited members'}),\n                    disabled: !canConvertToPrivate,\n                }}\n                onChange={handleChannelTypeChange}\n            />\n\n            {/* Purpose Section*/}\n            <AdvancedTextbox\n                id='channel_settings_purpose_textbox'\n                value={channelPurpose}\n                channelId={channel.id}\n                onChange={handlePurposeChange}\n                createMessage={formatMessage({\n                    id: 'channel_settings_modal.purpose.placeholder',\n                    defaultMessage: 'Enter a purpose for this channel',\n                })}\n                maxLength={Constants.MAX_CHANNELPURPOSE_LENGTH}\n                preview={shouldShowPreviewPurpose}\n                togglePreview={togglePurposePreview}\n                useChannelMentions={false}\n                onKeyPress={() => {}}\n                descriptionMessage={formatMessage({\n                    id: 'channel_settings.purpose.description',\n                    defaultMessage: 'Describe how this channel should be used.',\n                })}\n                hasError={channelPurpose.length > Constants.MAX_CHANNELPURPOSE_LENGTH}\n                errorMessage={channelPurpose.length > Constants.MAX_CHANNELPURPOSE_LENGTH ? formatMessage({\n                    id: 'channel_settings.error_purpose_length',\n                    defaultMessage: 'The channel purpose exceeds the maximum character limit of {maxLength} characters.',\n                }, {\n                    maxLength: Constants.MAX_CHANNELPURPOSE_LENGTH,\n                }) : undefined\n                }\n                showCharacterCount={channelPurpose.length > Constants.MAX_CHANNELPURPOSE_LENGTH}\n                readOnly={!canManageChannelProperties}\n                name={formatMessage({id: 'channel_settings.purpose.label', defaultMessage: 'Channel Purpose'})}\n            />\n\n            {/* Channel Header Section*/}\n            <AdvancedTextbox\n                id='channel_settings_header_textbox'\n                value={channelHeader}\n                channelId={channel.id}\n                onChange={handleHeaderChange}\n                createMessage={formatMessage({\n                    id: 'channel_settings_modal.header.placeholder',\n                    defaultMessage: 'Enter a header description or important links',\n                })}\n                maxLength={HEADER_MAX_LENGTH}\n                preview={shouldShowPreviewHeader}\n                togglePreview={toggleHeaderPreview}\n                useChannelMentions={false}\n                onKeyPress={() => {}}\n                descriptionMessage={formatMessage({\n                    id: 'channel_settings.purpose.header',\n                    defaultMessage: 'This is the text that will appear in the header of the channel beside the channel name. You can use markdown to include links by typing [Link Title](http://example.com).',\n                })}\n                hasError={channelHeader.length > HEADER_MAX_LENGTH}\n                errorMessage={channelHeader.length > HEADER_MAX_LENGTH ? formatMessage({\n                    id: 'edit_channel_header_modal.error',\n                    defaultMessage: 'The channel header exceeds the maximum character limit of {maxLength} characters.',\n                }, {\n                    maxLength: HEADER_MAX_LENGTH,\n                }) : undefined\n                }\n                showCharacterCount={channelHeader.length > HEADER_MAX_LENGTH}\n                readOnly={!canManageChannelProperties}\n                name={formatMessage({id: 'channel_settings.header.label', defaultMessage: 'Channel Header'})}\n            />\n\n            {/* SaveChangesPanel for unsaved changes */}\n            {(canManageChannelProperties && shouldShowPanel) && (\n                <SaveChangesPanel\n                    handleSubmit={handleSaveChanges}\n                    handleCancel={handleCancel}\n                    handleClose={handleClose}\n                    tabChangeError={hasErrors}\n                    state={hasErrors ? 'error' : saveChangesPanelState}\n                    {...(!showTabSwitchError && { // for swowTabShiwthError use the default message\n                        customErrorMessage: formatMessage({\n                            id: 'channel_settings.save_changes_panel.standard_error',\n                            defaultMessage: 'There are errors in the form above',\n                        }),\n                    })}\n                    cancelButtonText={formatMessage({\n                        id: 'channel_settings.save_changes_panel.reset',\n                        defaultMessage: 'Reset',\n                    })}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default ChannelSettingsInfoTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {\n    useState,\n    useRef,\n} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {selectChannelBannerEnabled} from 'mattermost-redux/selectors/entities/channel_banner';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport {\n    setShowPreviewOnChannelSettingsHeaderModal,\n    setShowPreviewOnChannelSettingsPurposeModal,\n} from 'actions/views/textbox';\n\nimport {focusElement} from 'utils/a11y_utils';\nimport Constants from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelSettingsArchiveTab from './channel_settings_archive_tab';\nimport ChannelSettingsConfigurationTab from './channel_settings_configuration_tab';\nimport ChannelSettingsInfoTab from './channel_settings_info_tab';\n\nimport './channel_settings_modal.scss';\n\n// Lazy-loaded components\nconst SettingsSidebar = React.lazy(() => import('components/settings_sidebar'));\n\ntype ChannelSettingsModalProps = {\n    channelId: string;\n    onExited: () => void;\n    isOpen: boolean;\n    focusOriginElement?: string;\n};\n\nenum ChannelSettingsTabs {\n    INFO = 'info',\n    CONFIGURATION = 'configuration',\n    ARCHIVE = 'archive',\n}\n\nconst SHOW_PANEL_ERROR_STATE_TAB_SWITCH_TIMEOUT = 3000;\n\nfunction ChannelSettingsModal({channelId, isOpen, onExited, focusOriginElement}: ChannelSettingsModalProps) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const channel = useSelector((state: GlobalState) => getChannel(state, channelId)) as Channel;\n    const channelBannerEnabled = useSelector(selectChannelBannerEnabled);\n\n    const canManagePublicChannelBanner = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, Permissions.MANAGE_PUBLIC_CHANNEL_BANNER),\n    );\n    const canManagePrivateChannelBanner = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, Permissions.MANAGE_PRIVATE_CHANNEL_BANNER),\n    );\n    const hasManageChannelBannerPermission = (channel.type === 'O' && canManagePublicChannelBanner) || (channel.type === 'P' && canManagePrivateChannelBanner);\n\n    const shouldShowConfigurationTab = channelBannerEnabled && hasManageChannelBannerPermission;\n\n    const canArchivePrivateChannels = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, Permissions.DELETE_PRIVATE_CHANNEL),\n    );\n\n    const canArchivePublicChannels = useSelector((state: GlobalState) =>\n        haveIChannelPermission(state, channel.team_id, channel.id, Permissions.DELETE_PUBLIC_CHANNEL),\n    );\n\n    const [show, setShow] = useState(isOpen);\n\n    // Active tab\n    const [activeTab, setActiveTab] = useState<ChannelSettingsTabs>(ChannelSettingsTabs.INFO);\n\n    // State for showing error in the save changes panel when trying to switch tabs with unsaved changes\n    const [showTabSwitchError, setShowTabSwitchError] = useState(false);\n\n    // State to track if there are unsaved changes\n    const [areThereUnsavedChanges, setAreThereUnsavedChanges] = useState(false);\n\n    // Refs\n    const modalBodyRef = useRef<HTMLDivElement>(null);\n\n    // Called to set the active tab, prompting save changes panel if there are unsaved changes\n    const updateTab = (newTab: string) => {\n        /**\n         * If there are unsaved changes, show an error in the save changes panel\n         * and reset it after a timeout to indicate the user needs to save or discard changes\n         * before switching tabs.\n         */\n        if (areThereUnsavedChanges) {\n            setShowTabSwitchError(true);\n            setTimeout(() => {\n                setShowTabSwitchError(false);\n            }, SHOW_PANEL_ERROR_STATE_TAB_SWITCH_TIMEOUT);\n            return;\n        }\n\n        const tab = newTab as ChannelSettingsTabs;\n        setActiveTab(tab);\n\n        if (modalBodyRef.current) {\n            modalBodyRef.current.scrollTop = 0;\n        }\n    };\n\n    const handleHide = () => {\n        handleHideConfirm();\n    };\n\n    const handleHideConfirm = () => {\n        // Reset preview states to false when closing the modal\n        dispatch(setShowPreviewOnChannelSettingsHeaderModal(false));\n        dispatch(setShowPreviewOnChannelSettingsPurposeModal(false));\n        setShow(false);\n    };\n\n    // Called after the fade-out completes\n    const handleExited = () => {\n        // Clear anything if needed\n        setActiveTab(ChannelSettingsTabs.INFO);\n        if (focusOriginElement) {\n            focusElement(focusOriginElement, true);\n        }\n        onExited();\n    };\n\n    // Renders content based on active tab\n    const renderTabContent = () => {\n        switch (activeTab) {\n        case ChannelSettingsTabs.INFO:\n            return renderInfoTab();\n        case ChannelSettingsTabs.CONFIGURATION:\n            return renderConfigurationTab();\n        case ChannelSettingsTabs.ARCHIVE:\n            return renderArchiveTab();\n        default:\n            return renderInfoTab();\n        }\n    };\n\n    const renderInfoTab = () => {\n        return (\n            <ChannelSettingsInfoTab\n                channel={channel}\n                setAreThereUnsavedChanges={setAreThereUnsavedChanges}\n                showTabSwitchError={showTabSwitchError}\n            />\n        );\n    };\n\n    const renderConfigurationTab = () => {\n        return (\n            <ChannelSettingsConfigurationTab\n                channel={channel}\n                setAreThereUnsavedChanges={setAreThereUnsavedChanges}\n                showTabSwitchError={showTabSwitchError}\n            />\n        );\n    };\n\n    const renderArchiveTab = () => {\n        return (\n            <ChannelSettingsArchiveTab\n                channel={channel}\n                onHide={handleHideConfirm}\n            />\n        );\n    };\n\n    // Define tabs for the settings sidebar\n    const tabs = [\n        {\n            name: ChannelSettingsTabs.INFO,\n            uiName: formatMessage({id: 'channel_settings.tab.info', defaultMessage: 'Info'}),\n            icon: 'icon icon-information-outline',\n            iconTitle: formatMessage({id: 'generic_icons.info', defaultMessage: 'Info Icon'}),\n        },\n        {\n            name: ChannelSettingsTabs.CONFIGURATION,\n            uiName: formatMessage({id: 'channel_settings.tab.configuration', defaultMessage: 'Configuration'}),\n            icon: 'icon icon-cog-outline',\n            iconTitle: formatMessage({id: 'generic_icons.settings', defaultMessage: 'Settings Icon'}),\n            display: shouldShowConfigurationTab,\n        },\n        {\n            name: ChannelSettingsTabs.ARCHIVE,\n            uiName: formatMessage({id: 'channel_settings.tab.archive', defaultMessage: 'Archive Channel'}),\n            icon: 'icon icon-archive-outline',\n            iconTitle: formatMessage({id: 'generic_icons.archive', defaultMessage: 'Archive Icon'}),\n            newGroup: true,\n            display: channel.name !== Constants.DEFAULT_CHANNEL && // archive is not available for the default channel\n                ((channel.type === Constants.PRIVATE_CHANNEL && canArchivePrivateChannels) ||\n                (channel.type === Constants.OPEN_CHANNEL && canArchivePublicChannels)),\n        },\n    ];\n\n    // Renders the body: left sidebar for tabs, the content on the right\n    const renderModalBody = () => {\n        return (\n            <div\n                ref={modalBodyRef}\n                className='settings-table'\n            >\n                <div className='settings-links'>\n                    <React.Suspense fallback={null}>\n                        <SettingsSidebar\n                            tabs={tabs}\n                            activeTab={activeTab}\n                            updateTab={updateTab}\n                        />\n                    </React.Suspense>\n                </div>\n                <div className='settings-content minimize-settings'>\n                    {renderTabContent()}\n                </div>\n            </div>\n        );\n    };\n\n    const modalTitle = formatMessage({id: 'channel_settings.modal.title', defaultMessage: 'Channel Settings'});\n\n    return (\n        <GenericModal\n            id='channelSettingsModal'\n            ariaLabel={modalTitle}\n            className='ChannelSettingsModal settings-modal'\n            show={show}\n            onHide={handleHide}\n            onExited={handleExited}\n            compassDesign={true}\n            modalHeaderText={modalTitle}\n            bodyPadding={false}\n            modalLocation={'top'}\n        >\n            <div className='ChannelSettingsModal__bodyWrapper'>\n                {renderModalBody()}\n            </div>\n        </GenericModal>\n    );\n}\n\nexport default ChannelSettingsModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {\n    CogOutlineIcon,\n} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ChannelSettingsModal from 'components/channel_settings_modal/channel_settings_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n}\n\nconst ChannelSettingsMenu = ({channel}: Props): JSX.Element => {\n    const dispatch = useDispatch();\n\n    const handleOpenChannelSettings = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.CHANNEL_SETTINGS,\n                dialogType: ChannelSettingsModal,\n                dialogProps: {\n                    channelId: channel.id,\n                    focusOriginElement: 'channelHeaderDropdownButton',\n                    isOpen: true,\n                },\n            }),\n        );\n    };\n\n    return (\n        <Menu.Item\n            id={'channelSettings'}\n            labels={\n                <FormattedMessage\n                    id='channel_header.channel_settings'\n                    defaultMessage='Channel Settings'\n                />\n            }\n            onClick={handleOpenChannelSettings}\n            leadingElement={<CogOutlineIcon size={18}/>}\n        />\n    );\n};\n\nexport default memo(ChannelSettingsMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport * as Menu from 'components/menu';\n\ninterface Props extends Menu.FirstMenuItemProps {}\n\nconst CloseChannel = ({...rest}: Props): JSX.Element => {\n    return (\n        <Menu.Item\n            onClick={goToLastViewedChannel}\n            labels={\n                <FormattedMessage\n                    id='center_panel.archived.closeChannel'\n                    defaultMessage='Close Channel'\n                />}\n            {...rest}\n        />\n    );\n};\nexport default React.memo(CloseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport {SyncableType} from '@mattermost/types/groups';\nimport type {Group} from '@mattermost/types/groups';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal';\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport {ModalIdentifiers} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\ntype Props = {\n    channel: Channel;\n    intl: IntlShape;\n    actions: {\n        getGroupsAssociatedToChannel: (channelId: string, searchTerm: string, pageNumber: number, perPage: number) => Promise<ActionResult>;\n        unlinkGroupSyncable: (itemId: string, channelId: string, groupsSyncableTypeChannel: SyncableType) => Promise<ActionResult>;\n        patchGroupSyncable: (itemId: string, channelId: string, groupsSyncableTypeChannel: SyncableType, params: {scheme_admin: boolean}) => Promise<ActionResult>;\n        getMyChannelMember: (channelId: string) => void;\n        closeModal: (modalId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n};\n\nclass ChannelGroupsManageModal extends React.PureComponent<Props> {\n    public loadItems = async (pageNumber: number, searchTerm: string) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToChannel(this.props.channel.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE);\n        return {\n            items: data.groups,\n            totalCount: data.totalGroupCount,\n        };\n    };\n\n    public onClickRemoveGroup = (item: Group, listModal: any) => this.props.actions.unlinkGroupSyncable(item.id, this.props.channel.id, SyncableType.Channel).then(async () => {\n        listModal.setState({loading: true});\n        const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items, totalCount});\n    });\n\n    public onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_CHANNEL_GROUPS);\n    };\n\n    public titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToChannelModal});\n    };\n\n    public setChannelMemberStatus = async (item: Group, listModal: any, isChannelAdmin: boolean) => {\n        this.props.actions.patchGroupSyncable(item.id, this.props.channel.id, SyncableType.Channel, {scheme_admin: isChannelAdmin}).then(async () => {\n            listModal.setState({loading: true});\n            const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n            await this.props.actions.getMyChannelMember(this.props.channel.id);\n\n            listModal.setState({loading: false, items, totalCount});\n        });\n    };\n\n    public renderRow = (item: Group, listModal: any) => {\n        let title;\n        if (item.scheme_admin) {\n            title = (\n                <FormattedMessage\n                    id='channel_members_dropdown.channel_admins'\n                    defaultMessage='Channel Admins'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='channel_members_dropdown.channel_members'\n                    defaultMessage='Channel Members'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>{item.display_name} {'-'}{' '}\n                        <span className='more-modal__name_count'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: item.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <MenuWrapper>\n                        <button\n                            id={`teamGroupsDropdown_${item.display_name}`}\n                            className='dropdown-toggle theme color--link style--none'\n                            type='button'\n                            aria-expanded='true'\n                        >\n                            <span>{title} </span>\n                            <DropdownIcon/>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            ariaLabel={Utils.localizeMessage({id: 'channel_members_dropdown.menuAriaLabel', defaultMessage: 'Change the role of channel member'})}\n                        >\n                            <Menu.ItemAction\n                                show={!item.scheme_admin}\n                                onClick={() => this.setChannelMemberStatus(item, listModal, true)}\n                                text={Utils.localizeMessage({id: 'channel_members_dropdown.make_channel_admins', defaultMessage: 'Make Channel Admins'})}\n                            />\n                            <Menu.ItemAction\n                                show={Boolean(item.scheme_admin)}\n                                onClick={() => this.setChannelMemberStatus(item, listModal, false)}\n                                text={Utils.localizeMessage({id: 'channel_members_dropdown.make_channel_members', defaultMessage: 'Make Channel Members'})}\n                            />\n                            <Menu.ItemAction\n                                onClick={() => this.onClickRemoveGroup(item, listModal)}\n                                text={Utils.localizeMessage({id: 'group_list_modal.removeGroupButton', defaultMessage: 'Remove Group'})}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        return (\n            <ListModal\n                titleText={formatMessage({id: 'channel_groups', defaultMessage: '{channel} Groups'}, {channel: this.props.channel.display_name})}\n                searchPlaceholderText={formatMessage({id: 'manage_channel_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                renderRow={this.renderRow}\n                loadItems={this.loadItems}\n                onHide={this.onHide}\n                titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                titleBarButtonOnClick={this.titleButtonOnClick}\n            />\n        );\n    }\n}\n\nexport default injectIntl(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getMyChannelMember} from 'mattermost-redux/actions/channels';\nimport {getGroupsAssociatedToChannel, unlinkGroupSyncable, patchGroupSyncable} from 'mattermost-redux/actions/groups';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport ChannelGroupsManageModal from './channel_groups_manage_modal';\n\nconst mapStateToProps = (state: GlobalState, ownProps: any) => {\n    return {\n        channel: state.entities.channels.channels[ownProps.channelID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators(\n        {\n            getGroupsAssociatedToChannel,\n            closeModal,\n            openModal,\n            unlinkGroupSyncable,\n            patchGroupSyncable,\n            getMyChannelMember,\n        },\n        dispatch,\n    ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {AccountMultipleOutlineIcon, AccountMultiplePlusOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ChannelGroupsManageModal from 'components/channel_groups_manage_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ninterface Props extends Menu.FirstMenuItemProps {\n    channel: Channel;\n}\n\nconst Groups = ({channel, ...rest}: Props): JSX.Element => {\n    const dispatch = useDispatch();\n    const handleAddGroups = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.ADD_GROUPS_TO_CHANNEL,\n                dialogType: AddGroupsToChannelModal,\n            }),\n        );\n    };\n\n    const handleManageGroups = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.MANAGE_CHANNEL_GROUPS,\n                dialogType: ChannelGroupsManageModal,\n                dialogProps: {channelID: channel.id},\n            }),\n        );\n    };\n\n    return (\n        <>\n            <Menu.Item\n                id='channelAddGroups'\n                leadingElement={<AccountMultiplePlusOutlineIcon size='18px'/>}\n                onClick={handleAddGroups}\n                labels={\n                    <FormattedMessage\n                        id='navbar.addGroups'\n                        defaultMessage='Add Groups'\n                    />\n                }\n                {...rest}\n            />\n            <Menu.Item\n                id='channelManageGroups'\n                leadingElement={<AccountMultipleOutlineIcon size='18px'/>}\n                onClick={handleManageGroups}\n                labels={\n                    <FormattedMessage\n                        id='navbar_dropdown.manageGroups'\n                        defaultMessage='Manage Groups'\n                    />\n                }\n                {...rest}\n            />\n        </>\n    );\n};\n\nexport default React.memo(Groups);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {LogoutVariantIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {leaveChannel} from 'actions/views/channel';\nimport {openModal} from 'actions/views/modals';\n\nimport LeaveChannelModal from 'components/leave_channel_modal';\nimport * as Menu from 'components/menu';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\n\n// import type {PropsFromRedux} from './index';\n\ntype Props = {\n    channel: Channel;\n    id?: string;\n}\n\nconst LeaveChannel = ({\n    channel,\n    id,\n}: Props) => {\n    const dispatch = useDispatch();\n    const handleLeave = () => {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            dispatch(\n                openModal({\n                    modalId: ModalIdentifiers.LEAVE_PRIVATE_CHANNEL_MODAL,\n                    dialogType: LeaveChannelModal,\n                    dialogProps: {\n                        channel,\n                    },\n                }),\n            );\n        } else {\n            dispatch(leaveChannel(channel.id));\n        }\n    };\n\n    return (\n        <Menu.Item\n            id={id}\n            leadingElement={<LogoutVariantIcon size='18px'/>}\n            onClick={handleLeave}\n            labels={\n                <FormattedMessage\n                    id='channel_header.leave'\n                    defaultMessage='Leave Channel'\n                />\n            }\n            isDestructive={true}\n        />\n    );\n};\n\nexport default memo(LeaveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    onExited: () => void;\n    channel: Channel;\n    actions: ChannelDetailsActions;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport type ChannelDetailsActions = {\n    unarchiveChannel: (channelId: string) => Promise<ActionResult>;\n};\n\nexport default class UnarchiveChannelModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    handleUnarchive = (): void => {\n        if (this.props.channel.id.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n        this.props.actions.unarchiveChannel(this.props.channel.id);\n        this.onHide();\n    };\n\n    onHide = (): void => {\n        this.setState({show: false});\n    };\n\n    render(): JSX.Element {\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onExited}\n                role='none'\n                aria-labelledby='unarchiveChannelModalLabel'\n                id='unarchiveChannelModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='unarchiveChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='unarchive_channel.confirm'\n                            defaultMessage='Confirm UNARCHIVE Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='alert alert-danger'>\n                        <FormattedMessage\n                            id='unarchiveChannelModal.viewArchived.question'\n                            defaultMessage={'Are you sure you wish to unarchive the <b>{display_name}</b> channel?'}\n                            values={{\n                                display_name: this.props.channel.display_name,\n                                b: (chunks: string) => <b>{chunks}</b>,\n                            }}\n                        />\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-tertiary'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='unarchive_channel.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        data-dismiss='modal'\n                        onClick={this.handleUnarchive}\n                        autoFocus={true}\n                        id='unarchiveChannelModalDeleteButton'\n                    >\n                        <FormattedMessage\n                            id='unarchive_channel.del'\n                            defaultMessage='Unarchive'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {unarchiveChannel} from 'mattermost-redux/actions/channels';\n\nimport UnarchiveChannelModal from './unarchive_channel_modal';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            unarchiveChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(UnarchiveChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport * as Menu from 'components/menu';\nimport UnarchiveChannelModal from 'components/unarchive_channel_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n}\n\nconst UnarchiveChannel = ({\n    channel,\n}: Props) => {\n    const dispatch = useDispatch();\n\n    const handleUnarchiveChannel = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.UNARCHIVE_CHANNEL,\n                dialogType: UnarchiveChannelModal,\n                dialogProps: {channel},\n            }),\n        );\n    };\n\n    return (\n        <>\n            <Menu.Separator/>\n            <Menu.Item\n                id='channelUnarchiveChannel'\n                onClick={handleUnarchiveChannel}\n                labels={\n                    <FormattedMessage\n                        id='channel_header.unarchive'\n                        defaultMessage='Unarchive Channel'\n                    />\n                }\n            />\n        </>\n    );\n};\n\nexport default memo(UnarchiveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport ChannelMoveToSubMenu from 'components/channel_move_to_sub_menu';\nimport * as Menu from 'components/menu';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\n\nimport {Constants} from 'utils/constants';\n\nimport MenuItemArchiveChannel from '../menu_items/archive_channel';\nimport MenuItemChannelBookmarks from '../menu_items/channel_bookmarks_submenu';\nimport MenuItemChannelSettings from '../menu_items/channel_settings_menu';\nimport MenuItemCloseChannel from '../menu_items/close_channel';\nimport MenuItemGroupsMenuItems from '../menu_items/groups';\nimport MenuItemLeaveChannel from '../menu_items/leave_channel';\nimport MenuItemNotification from '../menu_items/notification';\nimport MenuItemOpenMembersRHS from '../menu_items/open_members_rhs';\nimport MenuItemPluginItems from '../menu_items/plugins_submenu';\nimport MenuItemToggleFavoriteChannel from '../menu_items/toggle_favorite_channel';\nimport MenuItemToggleInfo from '../menu_items/toggle_info';\nimport MenuItemToggleMuteChannel from '../menu_items/toggle_mute_channel';\nimport MenuItemUnarchiveChannel from '../menu_items/unarchive_channel';\nimport MenuItemViewPinnedPosts from '../menu_items/view_pinned_posts';\n\ninterface Props extends Menu.FirstMenuItemProps {\n    channel: Channel;\n    user: UserProfile;\n    isMuted: boolean;\n    isReadonly: boolean;\n    isDefault: boolean;\n    isMobile: boolean;\n    isFavorite: boolean;\n    isLicensedForLDAPGroups: boolean;\n    pluginItems: ReactNode[];\n    isChannelBookmarksEnabled: boolean;\n}\n\nconst ChannelHeaderPublicMenu = ({channel, user, isMuted, isDefault, isMobile, isFavorite, isLicensedForLDAPGroups, pluginItems, isChannelBookmarksEnabled, ...rest}: Props) => {\n    const isGroupConstrained = channel?.group_constrained === true;\n    const isArchived = channel.delete_at !== 0;\n    const isPrivate = channel?.type === Constants.PRIVATE_CHANNEL;\n\n    const channelMembersPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS;\n    const channelDeletePermission = isPrivate ? Permissions.DELETE_PRIVATE_CHANNEL : Permissions.DELETE_PUBLIC_CHANNEL;\n    const channelUnarchivePermission = Permissions.MANAGE_TEAM;\n\n    return (\n        <>\n            <MenuItemToggleInfo\n                channel={channel}\n                {...rest}\n            />\n            <MenuItemToggleMuteChannel\n                userID={user.id}\n                channel={channel}\n                isMuted={isMuted}\n            />\n            {!isArchived && (\n                <>\n                    <MenuItemNotification\n                        user={user}\n                        channel={channel}\n                    />\n                    <MenuItemChannelSettings\n                        channel={channel}\n                    />\n                    {isChannelBookmarksEnabled && (\n                        <MenuItemChannelBookmarks\n                            channel={channel}\n                        />\n                    )}\n                </>\n            )}\n            <Menu.Separator/>\n            {isMobile && (\n                <>\n                    <MenuItemToggleFavoriteChannel\n                        channelID={channel.id}\n                        isFavorite={isFavorite}\n                    />\n                    <MenuItemViewPinnedPosts\n                        channelID={channel.id}\n                    />\n                    <Menu.Separator/>\n                </>\n            )}\n\n            {(isArchived || isDefault) && (\n                <MenuItemOpenMembersRHS\n                    id='channelMembers'\n                    channel={channel}\n                    text={\n                        <FormattedMessage\n                            id='channel_header.members'\n                            defaultMessage='Members'\n                        />\n                    }\n                />\n            )}\n\n            {!isArchived && !isDefault && (\n                <>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        {isGroupConstrained && isLicensedForLDAPGroups && (\n                            <MenuItemGroupsMenuItems\n                                channel={channel}\n                            />\n                        )}\n                        <MenuItemOpenMembersRHS\n                            id='channelMembers'\n                            channel={channel}\n                            text={\n                                <FormattedMessage\n                                    id='channel_header.members'\n                                    defaultMessage='Members'\n                                />\n                            }\n                        />\n                    </ChannelPermissionGate>\n\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                        invert={true}\n                    >\n                        <MenuItemOpenMembersRHS\n                            id='channelMembers'\n                            channel={channel}\n                            text={\n                                <FormattedMessage\n                                    id='channel_header.members'\n                                    defaultMessage='Members'\n                                />\n                            }\n                        />\n                    </ChannelPermissionGate>\n                </>\n            )}\n\n            <Menu.Separator/>\n            <ChannelMoveToSubMenu channel={channel}/>\n            {!isMobile && (\n                <MenuItemPluginItems pluginItems={pluginItems}/>\n            )}\n            {!isDefault && (\n                <Menu.Separator/>\n            )}\n            {!isDefault && !isGuest(user.roles) && (\n                <MenuItemLeaveChannel\n                    id='channelLeaveChannel'\n                    channel={channel}\n                />\n            )}\n\n            {isArchived && (\n                <MenuItemCloseChannel/>\n            )}\n\n            {!isArchived && !isDefault && (\n                <ChannelPermissionGate\n                    channelId={channel.id}\n                    teamId={channel.team_id}\n                    permissions={[channelDeletePermission]}\n                >\n                    <MenuItemArchiveChannel\n                        channel={channel}\n                    />\n                </ChannelPermissionGate>\n            )}\n\n            {isArchived && !isDefault && (\n                <ChannelPermissionGate\n                    channelId={channel.id}\n                    teamId={channel.team_id}\n                    permissions={[channelUnarchivePermission]}\n                >\n                    <MenuItemUnarchiveChannel\n                        channel={channel}\n                    />\n                </ChannelPermissionGate>\n            )}\n        </>\n    );\n};\n\nexport default ChannelHeaderPublicMenu;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport ChevronDownIcon from '@mattermost/compass-icons/components/chevron-down';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {\n    getCurrentChannel,\n    isCurrentChannelDefault,\n    isCurrentChannelFavorite,\n    isCurrentChannelMuted,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    getCurrentUser,\n} from 'mattermost-redux/selectors/entities/users';\n\nimport {getChannelHeaderMenuPluginComponents} from 'selectors/plugins';\n\nimport {getIsChannelBookmarksEnabled} from 'components/channel_bookmarks/utils';\nimport * as Menu from 'components/menu';\n\nimport {Constants} from 'utils/constants';\n\nimport ChannelDirectMenu from './channel_header_menu_items/channel_header_direct_menu';\nimport ChannelGroupMenu from './channel_header_menu_items/channel_header_group_menu';\nimport ChannelHeaderMobileMenu from './channel_header_menu_items/channel_header_mobile_menu';\nimport ChannelPublicPrivateMenu from './channel_header_menu_items/channel_header_public_private_menu';\n\nimport ChannelHeaderTitleDirect from '../channel_header/channel_header_title_direct';\nimport ChannelHeaderTitleGroup from '../channel_header/channel_header_title_group';\n\ntype Props = {\n    dmUser?: UserProfile;\n    gmMembers?: UserProfile[];\n    archivedIcon?: JSX.Element;\n    sharedIcon?: JSX.Element;\n    isMobile?: boolean;\n}\n\nexport default function ChannelHeaderMenu({dmUser, gmMembers, isMobile, archivedIcon, sharedIcon}: Props): JSX.Element | null {\n    const intl = useIntl();\n\n    const user = useSelector(getCurrentUser);\n    const channel = useSelector(getCurrentChannel);\n    const isDefault = useSelector(isCurrentChannelDefault);\n    const isFavorite = useSelector(isCurrentChannelFavorite);\n    const isMuted = useSelector(isCurrentChannelMuted);\n    const isLicensedForLDAPGroups = useSelector(getLicense).LDAPGroups === 'true';\n    const pluginMenuItems = useSelector(getChannelHeaderMenuPluginComponents);\n    const isChannelBookmarksEnabled = useSelector(getIsChannelBookmarksEnabled);\n\n    const isReadonly = false;\n\n    if (!channel) {\n        return null;\n    }\n\n    const isDirect = (channel.type === Constants.DM_CHANNEL);\n    const isGroup = (channel.type === Constants.GM_CHANNEL);\n\n    let channelTitle: ReactNode = channel.display_name;\n    let ariaLabel = intl.formatMessage({\n        id: 'channel_header.otherchannel',\n        defaultMessage: '{displayName} Channel Menu',\n    }, {\n        displayName: channel.display_name,\n    });\n    if (isDirect && dmUser) {\n        channelTitle = <ChannelHeaderTitleDirect dmUser={dmUser}/>;\n        if (user.id === dmUser.id) {\n            ariaLabel = intl.formatMessage({\n                id: 'channel_header.directchannel',\n                defaultMessage: '{displayName} (you) Channel Menu',\n            }, {\n                displayName: channel.display_name,\n            });\n        }\n    } else if (isGroup) {\n        channelTitle = <ChannelHeaderTitleGroup gmMembers={gmMembers}/>;\n    }\n\n    const pluginItems = pluginMenuItems.map((item) => {\n        const handlePluginItemClick = () => {\n            if (item.action) {\n                item.action(channel.id);\n            }\n        };\n\n        return (\n            <Menu.Item\n                id={item.id + '_pluginmenuitem'}\n                key={item.id + '_pluginmenuitem'}\n                onClick={handlePluginItemClick}\n                labels={<span>{item.text}</span>}\n            />\n        );\n    });\n\n    return (\n        <Menu.Container\n            menuButtonTooltip={{\n                text: channelTitle as string,\n            }}\n            menuButton={{\n                id: 'channelHeaderDropdownButton',\n                class: classNames('channel-header__trigger style--none'),\n                children: (\n                    <>\n                        {archivedIcon}\n                        <strong\n                            id='channelHeaderTitle'\n                            className='heading'\n                        >\n                            {channelTitle as string}\n                        </strong>\n                        {sharedIcon}\n                        <ChevronDownIcon size={16}/>\n                    </>\n                ),\n                'aria-label': ariaLabel.toLowerCase(),\n            }}\n            menu={{\n                id: 'channelHeaderDropdownMenu',\n            }}\n            transformOrigin={{\n                horizontal: 'left',\n                vertical: 'top',\n            }}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n            }}\n        >\n            {isDirect && (\n                <ChannelDirectMenu\n                    channel={channel}\n                    user={user}\n                    isMuted={isMuted}\n                    pluginItems={pluginItems}\n                    isFavorite={isFavorite}\n                    isMobile={isMobile || false}\n                    isChannelBookmarksEnabled={isChannelBookmarksEnabled}\n                />\n            )}\n            {isGroup && (\n                <ChannelGroupMenu\n                    channel={channel}\n                    user={user}\n                    isMuted={isMuted}\n                    pluginItems={pluginItems}\n                    isFavorite={isFavorite}\n                    isMobile={isMobile || false}\n                    isChannelBookmarksEnabled={isChannelBookmarksEnabled}\n                />\n            )}\n            {(!isDirect && !isGroup) && (\n                <ChannelPublicPrivateMenu\n                    channel={channel}\n                    user={user}\n                    isMuted={isMuted}\n                    pluginItems={pluginItems}\n                    isFavorite={isFavorite}\n                    isMobile={isMobile || false}\n                    isDefault={isDefault}\n                    isReadonly={isReadonly}\n                    isLicensedForLDAPGroups={isLicensedForLDAPGroups}\n                    isChannelBookmarksEnabled={isChannelBookmarksEnabled}\n                />\n            )}\n\n            <ChannelHeaderMobileMenu\n                isMobile={isMobile || false}\n                pluginItems={pluginItems}\n                channel={channel}\n            />\n        </Menu.Container>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport type {AppBinding} from '@mattermost/types/apps';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {AppCallResponseTypes, AppBindingLocations} from 'mattermost-redux/constants/apps';\nimport {makeAppBindingsSelector} from 'mattermost-redux/selectors/entities/apps';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport {handleBindingClick, openAppsModal, postEphemeralCallResponseForChannel} from 'actions/apps';\nimport {getChannelMobileHeaderPluginButtons} from 'selectors/plugins';\n\nimport * as Menu from 'components/menu';\n\nimport {createCallContext} from 'utils/apps';\n\nimport type {MobileChannelHeaderButtonAction} from 'types/store/plugins';\n\ntype Props = {\n    channel: Channel;\n    isDropdown: boolean;\n}\n\nconst MobileChannelHeaderPlugins = (props: Props): JSX.Element => {\n    const mobileComponents = useSelector(getChannelMobileHeaderPluginButtons);\n    const channelMember = useSelector(getMyCurrentChannelMembership);\n    const getChannelHeaderBindings = useSelector(makeAppBindingsSelector(AppBindingLocations.CHANNEL_HEADER_ICON));\n    const intl = useIntl();\n    const dispatch = useDispatch();\n\n    const createAppButton = (binding: AppBinding) => {\n        const handleAppButtonClick = () => fireAppAction(binding);\n\n        if (props.isDropdown) {\n            return (\n                <Menu.Item\n                    key={'mobileChannelHeaderItem' + binding.app_id + binding.location}\n                    onClick={handleAppButtonClick}\n                    labels={<span>{binding.label}</span>}\n                />\n            );\n        }\n        return (\n            <li className='flex-parent--center'>\n                <button\n                    id={`${binding.app_id}_${binding.location}`}\n                    className='navbar-toggle navbar-right__icon'\n                    onClick={handleAppButtonClick}\n                >\n                    <span className='icon navbar-plugin-button'>\n                        <img\n                            alt=''\n                            src={binding.icon}\n                            width='16'\n                            height='16'\n                        />\n                    </span>\n                </button>\n            </li>\n        );\n    };\n\n    const createButton = (plug: MobileChannelHeaderButtonAction) => {\n        const handlePluginButtonClick = () => fireAction(plug);\n\n        if (props.isDropdown) {\n            return (\n                <Menu.Item\n                    key={'mobileChannelHeaderItem' + plug.id}\n                    id={'mobileChannelHeaderItem' + plug.id}\n                    onClick={handlePluginButtonClick}\n                    labels={<span>{plug.dropdownText}</span>}\n                />\n            );\n        }\n\n        return (\n            <li className='flex-parent--center'>\n                <button\n                    className='navbar-toggle navbar-right__icon'\n                    onClick={handlePluginButtonClick}\n                >\n                    <span className='icon navbar-plugin-button'>\n                        {plug.icon}\n                    </span>\n                </button>\n            </li>\n        );\n    };\n\n    const createList = (plugs: MobileChannelHeaderButtonAction[]) => {\n        return plugs.map(createButton);\n    };\n\n    const createAppList = (bindings: AppBinding[]) => {\n        return bindings.map(createAppButton);\n    };\n\n    const fireAction = (plug: MobileChannelHeaderButtonAction) => {\n        return plug.action?.(props.channel, channelMember);\n    };\n\n    const fireAppAction = async (binding: AppBinding) => {\n        const {channel} = props;\n        const context = createCallContext(\n            binding.app_id,\n            binding.location,\n            channel.id,\n            channel.team_id,\n        );\n\n        const handleAppResponse = (callResp: any, errorResponse?: any) => {\n            if (errorResponse) {\n                const errorMessage = errorResponse.text || intl.formatMessage({\n                    id: 'apps.error.unknown',\n                    defaultMessage: 'Unknown error occurred.',\n                });\n                dispatch(postEphemeralCallResponseForChannel(errorResponse, errorMessage, channel.id));\n                return;\n            }\n\n            switch (callResp.type) {\n            case AppCallResponseTypes.OK:\n                if (callResp.text) {\n                    dispatch(postEphemeralCallResponseForChannel(callResp, callResp.text, channel.id));\n                }\n                break;\n            case AppCallResponseTypes.NAVIGATE:\n                break;\n            case AppCallResponseTypes.FORM:\n                if (callResp.form) {\n                    dispatch(openAppsModal(callResp.form, context));\n                }\n                break;\n            default: {\n                const errorMessage = intl.formatMessage({\n                    id: 'apps.error.responses.unknown_type',\n                    defaultMessage: 'App response type not supported. Response type: {type}.',\n                }, {\n                    type: callResp.type,\n                });\n                dispatch(postEphemeralCallResponseForChannel(callResp, errorMessage, channel.id));\n            }\n            }\n        };\n\n        const res = await dispatch(handleBindingClick(binding, context, intl));\n        if (res.error) {\n            handleAppResponse(null, res.error);\n            return;\n        }\n        handleAppResponse(res.data!);\n    };\n\n    const components = mobileComponents || [];\n    const bindings = getChannelHeaderBindings || [];\n\n    if (components.length === 0 && bindings.length === 0) {\n        return <></>;\n    } else if (components.length === 1 && bindings.length === 0) {\n        return createButton(components[0]);\n    } else if (components.length === 0 && bindings.length === 1) {\n        return createAppButton(bindings[0]);\n    }\n\n    if (!props.isDropdown) {\n        return <></>;\n    }\n\n    const plugItems = createList(components);\n    const appItems = createAppList(bindings);\n    return (\n        <>\n            <Menu.Separator/>\n            {appItems}\n            {plugItems}\n        </>\n\n    );\n};\n\n// Exported for tests\nexport {MobileChannelHeaderPlugins as RawMobileChannelHeaderPlug};\n\nexport default memo(MobileChannelHeaderPlugins);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker} from 'react-color';\nimport type {ColorResult} from 'react-color';\nimport tinycolor from 'tinycolor2';\n\ntype Props = {\n    id: string;\n    onChange: (color: string) => void;\n    value: string;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    focused: boolean;\n    isOpened: boolean;\n    value: string;\n}\n\nexport default class ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n\n        this.state = {\n            focused: false,\n            isOpened: false,\n            value: props.value,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (!state.focused && props.value !== state.value) {\n            return {\n                value: props.value,\n            };\n        }\n\n        return null;\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick, {capture: true});\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        this.setState({focused: false});\n        this.props.onChange(newColorData.hex);\n    };\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n        }\n\n        this.setState({value});\n    };\n\n    private onFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n        this.setState({\n            focused: true,\n        });\n\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    };\n\n    private onBlur = () => {\n        const value = this.state.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n\n            this.setState({\n                value: normalizedColor,\n            });\n        } else {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n\n        this.setState({\n            focused: false,\n        });\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    public render() {\n        const {id} = this.props;\n        const {isOpened, value} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={value}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    maxLength={7}\n                    disabled={this.props.isDisabled}\n                    data-testid='color-inputColorValue'\n\n                />\n                {!this.props.isDisabled &&\n                    <span\n                        id={`${id}-squareColorIcon`}\n                        className='input-group-addon color-pad'\n                        onClick={this.togglePicker}\n                    >\n                        <i\n                            id={`${id}-squareColorIconValue`}\n                            className='color-icon'\n                            style={{\n                                backgroundColor: value,\n                            }}\n                        />\n                    </span>\n                }\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={value}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {channelBannerEnabled} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {General} from 'mattermost-redux/constants';\nimport {getChannel, getChannelBanner} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nexport const selectChannelBannerEnabled = (state: GlobalState): boolean => {\n    const license = getLicense(state);\n    return license?.SkuShortName === General.SKUEnterpriseAdvanced;\n};\n\nexport const selectShowChannelBanner = (state: GlobalState, channelId: string): boolean => {\n    const enabled = selectChannelBannerEnabled(state);\n\n    if (!enabled) {\n        return false;\n    }\n\n    const channelBannerInfo = getChannelBanner(state, channelId);\n    const channel = getChannel(state, channelId);\n    const isValidChannelType = Boolean(channel && (channel.type === General.OPEN_CHANNEL || channel.type === General.PRIVATE_CHANNEL));\n    return isValidChannelType && channelBannerEnabled(channelBannerInfo);\n};\n","\"use strict\";\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.channelBannerEnabled = channelBannerEnabled;\nfunction channelBannerEnabled(banner) {\n    if (!banner) {\n        return false;\n    }\n    return Boolean(banner.enabled) && Boolean(banner.text) && Boolean(banner.background_color);\n}\n"],"names":["ConvertConfirmModal","_ref","titleMessage","convertMessage","confirmMessage","convertConfirmationMessage","show","onConfirm","onCancel","displayName","toPublic","messages","toPublicTitle","toPublicMessage","toPublicConfirm","toPublicMessageConfirmation","toPrivateTitle","toPrivateMessage","toPrivateConfirm","toPrivateMessageConfirmation","title","React","FormattedMessage","Object","assign","values","message","confirmButton","cancelButton","id","defaultMessage","ConfirmModal","modalClass","confirmButtonClass","confirmButtonText","cancelButtonText","propTypes","_pt","isRequired","defineMessages","ChannelHeaderTitleDirect","_dmUser$roles","dmUser","currentUser","useSelector","getCurrentUser","teammateNameDisplaySetting","getTeammateNameDisplaySetting","displayUsername","isGuest","roles","GuestTag","memo","ChannelHeaderTitleGroup","gmMembers","channel","getCurrentChannel","membersMap","user","userDisplayName","push","displayNames","display_name","split","map","index","_user$roles","shift","key","ChannelBookmarksSubmenu","props","formatMessage","useIntl","handleCreateLink","handleCreateFile","useBookmarkAddActions","canAdd","useChannelBookmarkPermission","canUploadFiles","useCanUploadFiles","state","bookmarks","getChannelBookmarks","keys","length","MAX_BOOKMARKS_PER_CHANNEL","Menu","concat","leadingElement","BookmarkOutlineIcon","size","labels","trailingElements","ChevronRightIcon","menuId","menuAriaLabel","LinkVariantIcon","onClick","PaperclipIcon","CloseMessage","dispatch","useDispatch","currentTeam","getCurrentTeam","redirectChannel","getRedirectChannelNameForCurrentTeam","text","type","Constants","GM_CHANNEL","CloseIcon","handleClose","currentUserID","name","category","DM_CHANNEL","Preferences","CATEGORY_DIRECT_CHANNEL_SHOW","teammate_id","CATEGORY_GROUP_CHANNEL_SHOW","leaveDirectChannel","savePreferences","user_id","value","getHistory","EditConversationHeader","handleEditHeader","openModal","modalId","ModalIdentifiers","EDIT_CHANNEL_HEADER","dialogType","EditChannelHeaderModal","dialogProps","PluginsSubmenu","pluginItems","AppsIcon","ToggleFavoriteChannel","isFavorite","channelID","toggleFavorite","unfavoriteChannel","favoriteChannel","rest","_objectWithoutProperties","_excluded","rhsOpen","getIsRhsOpen","getRhsState","RHSStates","CHANNEL_INFO","InformationOutlineIcon","toggleRHS","closeRightHandSide","showChannelInfo","ToggleMuteChannel","isMuted","userID","BellOffOutlineIcon","handleClick","updateChannelNotifyProps","mark_unread","NotificationLevels","ALL","MENTION","ViewPinnedPosts","hasPinnedPosts","PIN","showPinnedPosts","ChannelHeaderDirectMenu","isMobile","isChannelBookmarksEnabled","e","t","o","r","i","n","hasOwnProperty","call","includes","_objectWithoutPropertiesLoose","getOwnPropertySymbols","s","propertyIsEnumerable","MenuItemToggleInfo","MenuItemToggleMuteChannel","MenuItemToggleFavoriteChannel","MenuItemViewPinnedPosts","CogOutlineIcon","MenuItemChannelBookmarks","ChannelMoveToSubMenu","MenuItemPluginItems","NoCommonTeamsError","intl","SectionNotice","TeamSelector","setValue","useState","handleTeamChange","useCallback","teamId","teamsById","onChange","currentLocale","getCurrentLocale","teamValues","team","label","sort","teamA","teamB","localeCompare","DropdownInput","className","required","undefined","options","legend","placeholder","WarningTextSection","memberNames","channelMemberNames","formatList","ServerErrorId","ConvertGmToChannelModal","channelName","setChannelName","channelURL","useRef","urlError","setURLError","handleChannelURLChange","newURL","current","setChannelMemberNames","useEffect","validProfilesInChannel","profilesInChannel","filter","currentUserId","delete_at","commonTeamsById","setCommonTeamsById","commonTeamsFetched","setCommonTeamsFetched","loadingAnimationTimeout","setLoadingAnimationTimeout","selectedTeamId","setSelectedTeamId","nameError","setNameError","conversionError","setConversionError","mounted","async","response","getGroupMessageMembersCommonTeams","error","data","teams","forEach","work","setTimeout","handleConfirm","actions","convertGroupMessageToPrivateChannel","trim","server_error_id","CHANNEL_NAME_EXISTS","trackEvent","channel_id","onExited","showLoader","canCreate","modalProps","modalBody","subBody","handleCancel","isDeleteModal","isConfirmDisabled","LoadingSpinner","ChannelNameFormField","autoFocus","onDisplayNameChange","onURLChange","onErrorStateChange","classNames","loading","GenericModal","modalHeaderText","compassDesign","autoCloseOnConfirmButton","connect","getProfilesInChannel","makeGetProfilesInChannel","ownProps","allProfilesInChannel","getCurrentUserId","bindActionCreators","closeModal","moveChannelsInSidebar","ConvertGMtoPrivate","handleConvertToPrivate","CONVERT_GM_TO_CHANNEL","Notification","BellOutlineIcon","handleNotificationPreferences","CHANNEL_NOTIFICATIONS","ChannelNotificationsModal","OpenMembersRHS","editMembers","CHANNEL_MEMBERS","AccountOutlineIcon","openRHSIfNotOpen","showChannelMembers","ChannelHeaderGroupMenu","isGroupConstrained","group_constrained","isArchived","MenuItemNotification","MenuItemConvertToPrivate","ChannelPermissionGate","channelId","team_id","permissions","Permissions","MANAGE_PUBLIC_CHANNEL_MEMBERS","MenuItemOpenMembersRHS","ChannelHeaderMobileMenu","MobileChannelHeaderPlugins","isDropdown","DeleteChannelModal","constructor","super","_defineProperty","this","CHANNEL_ID_LENGTH","canViewArchivedChannels","penultimateViewedChannelName","currentTeamDetails","deleteChannel","onHide","setState","render","Modal","dialogClassName","role","Header","closeButton","Title","componentClass","Body","strong","chunks","Footer","handleDelete","getConfig","ExperimentalViewArchivedChannels","ArchiveChannel","redirectChannelName","getPenultimateViewedChannelName","ArchiveOutlineIcon","handleArchiveChannel","DELETE_CHANNEL","isDestructive","ChannelSettingsArchiveTab","showArchiveConfirmModal","setShowArchiveConfirmModal","ConfirmationModal","focusOriginElement","AdvancedTextbox","onKeyPress","createMessage","maxLength","minLength","minLengthErrorMessage","preview","togglePreview","useChannelMentions","descriptionMessage","hasError","errorMessage","onValidate","showCharacterCount","readOnly","internalError","setInternalError","isFocused","setIsFocused","isTooLong","isTooShort","localPreview","Textbox","newValue","target","validationResult","isValid","supportsCommands","suggestionListPosition","characterLimit","onFocus","handleFocus","onBlur","handleBlur","disabled","ShowFormat","active","DEFAULT_CHANNEL_BANNER","enabled","background_color","ChannelSettingsConfigurationTab","setAreThereUnsavedChanges","showTabSwitchError","heading","subHeading","bannerTextSettingTitle","bannerColorSettingTitle","bannerTextPlaceholder","initialBannerInfo","banner_info","formError","setFormError","showBannerTextPreview","setShowBannerTextPreview","updatedChannelBanner","setUpdatedChannelBanner","requireConfirm","setRequireConfirm","characterLimitExceeded","setCharacterLimitExceeded","saveChangesPanelState","setSaveChangesPanelState","handleToggle","toUpdate","_objectSpread","resetFormErrors","handleTextChange","prev","handleColorChange","color","toggleTextPreview","hasUnsavedChanges","_updatedChannelBanner","_initialBannerInfo$te","_updatedChannelBanner2","_initialBannerInfo$ba","unsavedChanges","handleServerError","err","errorMsg","handleSave","_updatedChannelBanner3","_updatedChannelBanner4","_updatedChannelBanner5","_updatedChannelBanner6","updated","patchChannel","handleSaveChanges","_prev$text","_prev$background_colo","hasErrors","Boolean","showSaveChangesPanel","Toggle","ariaLabel","onToggle","toggled","tabIndex","toggleClassName","ColorInput","SaveChangesPanel","handleSubmit","tabChangeError","customErrorMessage","ChannelSettingsInfoTab","_channel$display_name","_channel$name","_channel$purpose","_channel$header","_ref2","shouldShowPreviewPurpose","showPreviewOnChannelSettingsPurposeModal","shouldShowPreviewHeader","showPreviewOnChannelSettingsHeaderModal","canConvertToPrivate","haveIChannelPermission","CONVERT_PUBLIC_CHANNEL_TO_PRIVATE","canConvertToPublic","CONVERT_PRIVATE_CHANNEL_TO_PUBLIC","channelPropertiesPermission","PRIVATE_CHANNEL","MANAGE_PRIVATE_CHANNEL_PROPERTIES","MANAGE_PUBLIC_CHANNEL_PROPERTIES","canManageChannelProperties","HEADER_MAX_LENGTH","internalUrlError","setUrlError","channelNameError","setChannelNameError","showConvertConfirmModal","setShowConvertConfirmModal","setDisplayName","channelUrl","setChannelURL","channelPurpose","setChannelPurpose","purpose","channelHeader","setChannelHeader","header","channelType","setChannelType","OPEN_CHANNEL","handleChannelNameError","isError","handleURLChange","togglePurposePreview","setShowPreviewOnChannelSettingsPurposeModal","toggleHeaderPreview","setShowPreviewOnChannelSettingsHeaderModal","handleHeaderChange","handlePurposeChange","MAX_CHANNELPURPOSE_LENGTH","toLowerCase","updateChannelPrivacy","General","hideConvertConfirmModal","_channel$display_name2","_channel$name2","_channel$purpose2","_channel$header2","_ref3","shouldShowPanel","useMemo","htmlFor","currentUrl","PublicPrivateSelector","selected","publicButtonProps","description","privateButtonProps","SettingsSidebar","ChannelSettingsTabs","ChannelSettingsModal","isOpen","getChannel","channelBannerEnabled","selectChannelBannerEnabled","canManagePublicChannelBanner","MANAGE_PUBLIC_CHANNEL_BANNER","canManagePrivateChannelBanner","MANAGE_PRIVATE_CHANNEL_BANNER","hasManageChannelBannerPermission","shouldShowConfigurationTab","canArchivePrivateChannels","DELETE_PRIVATE_CHANNEL","canArchivePublicChannels","DELETE_PUBLIC_CHANNEL","setShow","activeTab","setActiveTab","INFO","setShowTabSwitchError","areThereUnsavedChanges","modalBodyRef","handleHideConfirm","renderInfoTab","tabs","uiName","icon","iconTitle","CONFIGURATION","display","ARCHIVE","newGroup","DEFAULT_CHANNEL","modalTitle","handleHide","handleExited","focusElement","bodyPadding","modalLocation","ref","fallback","updateTab","newTab","scrollTop","renderTabContent","ChannelSettingsMenu","handleOpenChannelSettings","CHANNEL_SETTINGS","CloseChannel","_objectDestructuringEmpty","goToLastViewedChannel","ChannelGroupsManageModal","arguments","pageNumber","searchTerm","getGroupsAssociatedToChannel","DEFAULT_NUM_PER_PAGE","items","groups","totalCount","totalGroupCount","item","listModal","unlinkGroupSyncable","SyncableType","Channel","then","loadItems","page","MANAGE_CHANNEL_GROUPS","ADD_GROUPS_TO_TEAM","AddGroupsToChannelModal","isChannelAdmin","patchGroupSyncable","scheme_admin","getMyChannelMember","src","groupsAvatar","alt","width","height","num","member_count","MenuWrapper","DropdownIcon","openLeft","Utils","ItemAction","setChannelMemberStatus","onClickRemoveGroup","ListModal","titleText","searchPlaceholderText","renderRow","titleBarButtonText","titleBarButtonOnClick","titleButtonOnClick","injectIntl","mapStateToProps","entities","channels","Groups","AccountMultiplePlusOutlineIcon","handleAddGroups","ADD_GROUPS_TO_CHANNEL","AccountMultipleOutlineIcon","handleManageGroups","LeaveChannel","LogoutVariantIcon","handleLeave","LEAVE_PRIVATE_CHANNEL_MODAL","LeaveChannelModal","leaveChannel","UnarchiveChannelModal","unarchiveChannel","b","handleUnarchive","UnarchiveChannel","handleUnarchiveChannel","UNARCHIVE_CHANNEL","ChannelHeaderPublicMenu","isDefault","isLicensedForLDAPGroups","isPrivate","channelMembersPermission","MANAGE_PRIVATE_CHANNEL_MEMBERS","channelDeletePermission","channelUnarchivePermission","MANAGE_TEAM","MenuItemChannelSettings","MenuItemGroupsMenuItems","invert","MenuItemLeaveChannel","MenuItemCloseChannel","MenuItemArchiveChannel","MenuItemUnarchiveChannel","isReadonly","ChannelHeaderMenu","archivedIcon","sharedIcon","isCurrentChannelDefault","isCurrentChannelFavorite","isCurrentChannelMuted","getLicense","LDAPGroups","pluginMenuItems","getChannelHeaderMenuPluginComponents","getIsChannelBookmarksEnabled","isDirect","isGroup","channelTitle","handlePluginItemClick","action","menuButtonTooltip","menuButton","class","children","ChevronDownIcon","menu","transformOrigin","horizontal","vertical","anchorOrigin","ChannelDirectMenu","ChannelGroupMenu","ChannelPublicPrivateMenu","mobileComponents","getChannelMobileHeaderPluginButtons","channelMember","getMyCurrentChannelMembership","getChannelHeaderBindings","makeAppBindingsSelector","AppBindingLocations","CHANNEL_HEADER_ICON","createAppButton","binding","handleAppButtonClick","fireAppAction","app_id","location","createButton","plug","handlePluginButtonClick","fireAction","dropdownText","_plug$action","context","createCallContext","handleAppResponse","callResp","errorResponse","postEphemeralCallResponseForChannel","AppCallResponseTypes","OK","NAVIGATE","FORM","form","openAppsModal","res","handleBindingClick","components","bindings","plugItems","appItems","createAppList","colorPicker","contains","isOpened","colorInput","focus","newColorData","focused","hex","event","tinycolor","normalizedColor","toHex","setSelectionRange","togglePicker","getDerivedStateFromProps","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","capture","removeEventListener","onKeyDown","isDisabled","style","backgroundColor","ChromePicker","disableAlpha","license","SkuShortName","SKUEnterpriseAdvanced","selectShowChannelBanner","channelBannerInfo","getChannelBanner","exports","banner"],"sourceRoot":""}