{"version":3,"file":"8508.9a0bd3cc0e4ca2cb5fa9.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/widgets/inputs/check/index.tsx","webpack://mattermost-webapp/./src/components/signup/signup.tsx","webpack://mattermost-webapp/./src/utils/password.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport './check.scss';\n\ntype Props = {\n    id: string;\n    ariaLabel: string;\n    name: string;\n    text: ReactNode;\n    onChange: () => void;\n    checked: boolean;\n}\n\nfunction CheckInput(props: Props) {\n    const {id, ariaLabel, text, ...rest} = props;\n\n    return (\n        <div className='check-input'>\n            <input\n                {...rest}\n                id={id}\n                aria-label={ariaLabel}\n                data-testid={id}\n                type='checkbox'\n            />\n            <label\n                className='text'\n                htmlFor={id}\n            >\n                <span>{text}</span>\n            </label>\n        </div>\n    );\n}\n\nexport default CheckInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport throttle from 'lodash/throttle';\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\nimport type {FocusEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {useLocation, useHistory, Route} from 'react-router-dom';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\nimport {createUser, loadMe} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getConfig, getLicense, getPasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getIsOnboardingFlowEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\nimport {removeGlobalItem, setGlobalItem} from 'actions/storage';\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {loginById} from 'actions/views/login';\nimport {getGlobalItem} from 'selectors/storage';\n\nimport AlertBanner from 'components/alert_banner';\nimport type {ModeType, AlertBannerProps} from 'components/alert_banner';\nimport useCWSAvailabilityCheck, {CSWAvailabilityCheckTypes} from 'components/common/hooks/useCWSAvailabilityCheck';\nimport DesktopAuthToken from 'components/desktop_auth_token';\nimport ExternalLink from 'components/external_link';\nimport ExternalLoginButton from 'components/external_login_button/external_login_button';\nimport type {ExternalLoginButtonType} from 'components/external_login_button/external_login_button';\nimport AlternateLinkLayout from 'components/header_footer_route/content_layouts/alternate_link';\nimport ColumnLayout from 'components/header_footer_route/content_layouts/column';\nimport type {CustomizeHeaderType} from 'components/header_footer_route/header_footer_route';\nimport LoadingScreen from 'components/loading_screen';\nimport Markdown from 'components/markdown';\nimport SaveButton from 'components/save_button';\nimport EntraIdIcon from 'components/widgets/icons/entra_id_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport LoginGitlabIcon from 'components/widgets/icons/login_gitlab_icon';\nimport LoginGoogleIcon from 'components/widgets/icons/login_google_icon';\nimport LoginOpenIDIcon from 'components/widgets/icons/login_openid_icon';\nimport CheckInput from 'components/widgets/inputs/check';\nimport Input, {SIZE} from 'components/widgets/inputs/input/input';\nimport type {CustomMessageInputType} from 'components/widgets/inputs/input/input';\nimport PasswordInput from 'components/widgets/inputs/password_input/password_input';\n\nimport {Constants, HostedCustomerLinks, ItemStatus, ValidationErrors} from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\nimport {isDesktopApp} from 'utils/user_agent';\nimport {isValidUsername, getRoleFromTrackFlow, getMediumFromTrackFlow} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport './signup.scss';\n\nconst MOBILE_SCREEN_WIDTH = 1200;\n\ntype SignupProps = {\n    onCustomizeHeader?: CustomizeHeaderType;\n}\n\nconst Signup = ({onCustomizeHeader}: SignupProps) => {\n    const intl = useIntl();\n    const {formatMessage} = intl;\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const {search} = useLocation();\n\n    const params = new URLSearchParams(search);\n    const token = params.get('t') ?? '';\n    const inviteId = params.get('id') ?? '';\n    const data = params.get('d');\n    const parsedData: Record<string, string> = data ? JSON.parse(data) : {};\n    const {email: parsedEmail, name: parsedTeamName, reminder_interval: reminderInterval} = parsedData;\n\n    const config = useSelector(getConfig);\n    const {\n        EnableOpenServer,\n        EnableUserCreation,\n        NoAccounts,\n        EnableSignUpWithEmail,\n        EnableSignUpWithGitLab,\n        EnableSignUpWithGoogle,\n        EnableSignUpWithOffice365,\n        EnableSignUpWithOpenId,\n        EnableLdap,\n        EnableSaml,\n        SamlLoginButtonText,\n        LdapLoginFieldName,\n        SiteName,\n        CustomDescriptionText,\n        GitLabButtonText,\n        GitLabButtonColor,\n        OpenIdButtonText,\n        OpenIdButtonColor,\n        EnableCustomBrand,\n        CustomBrandText,\n        TermsOfServiceLink,\n        PrivacyPolicyLink,\n    } = config;\n    const {IsLicensed} = useSelector(getLicense);\n    const loggedIn = Boolean(useSelector(getCurrentUserId));\n    const onboardingFlowEnabled = useSelector(getIsOnboardingFlowEnabled);\n    const usedBefore = useSelector((state: GlobalState) => (!inviteId && !loggedIn && token ? getGlobalItem(state, token, null) : undefined));\n\n    const emailInput = useRef<HTMLInputElement>(null);\n    const nameInput = useRef<HTMLInputElement>(null);\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const isLicensed = IsLicensed === 'true';\n    const enableOpenServer = EnableOpenServer === 'true';\n    const enableUserCreation = EnableUserCreation === 'true';\n    const noAccounts = NoAccounts === 'true';\n    const enableSignUpWithEmail = enableUserCreation && EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = enableUserCreation && EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = enableUserCreation && EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = enableUserCreation && EnableSignUpWithOffice365 === 'true';\n    const enableSignUpWithOpenId = enableUserCreation && EnableSignUpWithOpenId === 'true';\n    const enableLDAP = EnableLdap === 'true';\n    const enableSAML = EnableSaml === 'true';\n    const enableCustomBrand = EnableCustomBrand === 'true';\n\n    const noOpenServer = !inviteId && !token && !enableOpenServer && !noAccounts && !enableUserCreation;\n\n    const [employeeId, setEmployeeId] = useState(parsedEmployeeId ?? '');\n    const [fullName, setFullName] = useState(parsedFullName ?? '');\n    const [password, setPassword] = useState('');\n    const [loading, setLoading] = useState(Boolean(inviteId));\n    const [isWaiting, setIsWaiting] = useState(false);\n    const [employeeIdError, setEmployeeIdError] = useState('');\n    const [fullNameError, setFullNameError] = useState('');\n    const [passwordError, setPasswordError] = useState('');\n    const [brandImageError, setBrandImageError] = useState(false);\n    const [serverError, setServerError] = useState('');\n    const [teamName, setTeamName] = useState('');\n    const [alertBanner, setAlertBanner] = useState<AlertBannerProps | null>(null);\n    const [isMobileView, setIsMobileView] = useState(false);\n    const [subscribeToSecurityNewsletter, setSubscribeToSecurityNewsletter] = useState(false);\n    const [submitClicked, setSubmitClicked] = useState(false);\n\n    const cwsAvailability = useCWSAvailabilityCheck();\n\n    const enableExternalSignup = enableSignUpWithGitLab || enableSignUpWithOffice365 || enableSignUpWithGoogle || enableSignUpWithOpenId || enableLDAP || enableSAML;\n    const hasError = Boolean(employeeIdError || fullNameError || passwordError || serverError || alertBanner);\n    const canSubmit = Boolean(employeeId && fullName && password) && !hasError && !loading;\n    const passwordConfig = useSelector(getPasswordConfig);\n    const {error: passwordInfo} = isValidPassword('', passwordConfig, intl);\n\n    const [desktopLoginLink, setDesktopLoginLink] = useState('');\n\n    const subscribeToSecurityNewsletterFunc = () => {\n        try {\n            Client4.subscribeToNewsletter({email: employeeId, subscribed_content: 'security_newsletter'});\n        } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error(error);\n        }\n    };\n\n    const getExternalSignupOptions = () => {\n        const externalLoginOptions: ExternalLoginButtonType[] = [];\n\n        if (!enableExternalSignup) {\n            return externalLoginOptions;\n        }\n\n        if (enableSignUpWithGitLab) {\n            const url = `${Client4.getOAuthRoute()}/gitlab/signup${search}`;\n            externalLoginOptions.push({\n                id: 'gitlab',\n                url,\n                icon: <LoginGitlabIcon/>,\n                label: GitLabButtonText || formatMessage({id: 'login.gitlab', defaultMessage: 'GitLab'}),\n                style: {color: GitLabButtonColor, borderColor: GitLabButtonColor},\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithGoogle) {\n            const url = `${Client4.getOAuthRoute()}/google/signup${search}`;\n            externalLoginOptions.push({\n                id: 'google',\n                url,\n                icon: <LoginGoogleIcon/>,\n                label: formatMessage({id: 'login.google', defaultMessage: 'Google'}),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithOffice365) {\n            const url = `${Client4.getOAuthRoute()}/office365/signup${search}`;\n            externalLoginOptions.push({\n                id: 'office365',\n                url,\n                icon: <EntraIdIcon/>,\n                label: formatMessage({id: 'login.office365', defaultMessage: 'Entra ID'}),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithOpenId) {\n            const url = `${Client4.getOAuthRoute()}/openid/signup${search}`;\n            externalLoginOptions.push({\n                id: 'openid',\n                url,\n                icon: <LoginOpenIDIcon/>,\n                label: OpenIdButtonText || formatMessage({id: 'login.openid', defaultMessage: 'Open ID'}),\n                style: {color: OpenIdButtonColor, borderColor: OpenIdButtonColor},\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableLDAP) {\n            const newSearchParam = new URLSearchParams(search);\n            newSearchParam.set('extra', Constants.CREATE_LDAP);\n\n            externalLoginOptions.push({\n                id: 'ldap',\n                url: `${Client4.getUrl()}/login?${newSearchParam.toString()}`,\n                icon: <LockIcon/>,\n                label: LdapLoginFieldName || formatMessage({id: 'signup.ldap', defaultMessage: 'AD/LDAP Credentials'}),\n                onClick: () => {},\n            });\n        }\n\n        if (isLicensed && enableSAML) {\n            const newSearchParam = new URLSearchParams(search);\n            newSearchParam.set('action', 'signup');\n\n            const url = `${Client4.getUrl()}/login/sso/saml?${newSearchParam.toString()}`;\n            externalLoginOptions.push({\n                id: 'saml',\n                url,\n                icon: <LockIcon/>,\n                label: SamlLoginButtonText || formatMessage({id: 'login.saml', defaultMessage: 'SAML'}),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        return externalLoginOptions;\n    };\n\n    const handleHeaderBackButtonOnClick = useCallback(() => {\n        if (!noAccounts) {\n            trackEvent('signup_email', 'click_back');\n        }\n\n        history.goBack();\n    }, [noAccounts, history]);\n\n    const handleInvalidInvite = ({\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        server_error_id,\n        message,\n    }: {server_error_id: string; message: string}) => {\n        let errorMessage;\n\n        if (server_error_id === 'store.sql_user.save.max_accounts.app_error' ||\n            server_error_id === 'api.team.add_user_to_team_from_invite.guest.app_error') {\n            errorMessage = message;\n        }\n\n        setServerError(errorMessage || formatMessage({id: 'signup_user_completed.invalid_invite.title', defaultMessage: 'This invite link is invalid'}));\n        setLoading(false);\n    };\n\n    const handleAddUserToTeamFromInvite = async (token: string, inviteId: string) => {\n        const {data: team, error} = await dispatch(addUserToTeamFromInvite(token, inviteId));\n\n        if (team) {\n            history.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            handleInvalidInvite(error);\n        }\n    };\n\n    const getInviteInfo = async (inviteId: string) => {\n        const {data, error} = await dispatch(getTeamInviteInfo(inviteId));\n\n        if (data) {\n            setServerError('');\n            setTeamName(data.name);\n        } else if (error) {\n            handleInvalidInvite(error);\n        }\n\n        setLoading(false);\n    };\n\n    const getAlternateLink = useCallback(() => (\n        <AlternateLinkLayout\n            className='signup-body-alternate-link'\n            alternateMessage={formatMessage({\n                id: 'signup_user_completed.haveAccount',\n                defaultMessage: 'Already have an account?',\n            })}\n            alternateLinkPath='/login'\n            alternateLinkLabel={formatMessage({\n                id: 'signup_user_completed.signIn',\n                defaultMessage: 'Log in',\n            })}\n        />\n    ), []);\n\n    const onWindowResize = throttle(() => {\n        setIsMobileView(window.innerWidth < MOBILE_SCREEN_WIDTH);\n    }, 100);\n\n    const desktopExternalAuth = (href: string) => {\n        return (event: React.MouseEvent) => {\n            if (isDesktopApp()) {\n                event.preventDefault();\n\n                setDesktopLoginLink(href);\n                history.push(`/signup_user_complete/desktop${search}`);\n            }\n        };\n    };\n\n    useEffect(() => {\n        dispatch(removeGlobalItem('team'));\n        trackEvent('signup', 'signup_user_01_welcome', {...getRoleFromTrackFlow(), ...getMediumFromTrackFlow()});\n\n        onWindowResize();\n\n        window.addEventListener('resize', onWindowResize);\n\n        if (search) {\n            if ((inviteId || token) && loggedIn) {\n                handleAddUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                getInviteInfo(inviteId);\n            } else if (loggedIn) {\n                if (onboardingFlowEnabled) {\n                    // need info about whether admin or not,\n                    // and whether admin has already completed\n                    // first tiem onboarding. Instead of fetching and orchestrating that here,\n                    // let the default root component handle it.\n                    history.push('/');\n                } else {\n                    redirectUserToDefaultTeam();\n                }\n            }\n        }\n\n        return () => {\n            window.removeEventListener('resize', onWindowResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        document.title = formatMessage(\n            {\n                id: 'signup.title',\n                defaultMessage: 'Create Account | {siteName}',\n            },\n            {siteName: SiteName || 'Mattermost'},\n        );\n    }, [formatMessage, SiteName]);\n\n    useEffect(() => {\n        if (onCustomizeHeader) {\n            onCustomizeHeader({\n                onBackButtonClick: handleHeaderBackButtonOnClick,\n                alternateLink: isMobileView ? getAlternateLink() : undefined,\n            });\n        }\n    }, [onCustomizeHeader, handleHeaderBackButtonOnClick, isMobileView, getAlternateLink, search]);\n\n    useEffect(() => {\n        if (submitClicked) {\n            if (employeeIdError && employeeIdInput.current) {\n                employeeIdInput.current.focus();\n            } else if (fullNameError && fullNameInput.current) {\n                fullNameInput.current.focus();\n            } else if (passwordError && passwordInput.current) {\n                passwordInput.current.focus();\n            }\n            setSubmitClicked(false);\n        }\n    }, [employeeIdError, fullNameError, passwordError, submitClicked]);\n\n    if (loading) {\n        return (<LoadingScreen/>);\n    }\n\n    const handleBrandImageError = () => {\n        setBrandImageError(true);\n    };\n\n    const getCardTitle = () => {\n        if (CustomDescriptionText) {\n            return CustomDescriptionText;\n        }\n\n        if (!enableSignUpWithEmail && enableExternalSignup) {\n            return formatMessage({id: 'signup_user_completed.cardtitle.external', defaultMessage: 'Create your account with one of the following:'});\n        }\n\n        return formatMessage({id: 'signup_user_completed.cardtitle', defaultMessage: 'Create your account'});\n    };\n\n    const getMessageSubtitle = () => {\n        if (enableCustomBrand) {\n            return CustomBrandText ? (\n                <div className='signup-body-custom-branding-markdown'>\n                    <Markdown\n                        message={CustomBrandText}\n                        options={{mentionHighlight: false}}\n                    />\n                </div>\n            ) : null;\n        }\n\n        return (\n            <p className='signup-body-message-subtitle'>\n                {formatMessage({\n                    id: 'signup_user_completed.subtitle',\n                    defaultMessage: 'Create your Mattermost account to start collaborating with your team',\n                })}\n            </p>\n        );\n    };\n\n    const handleEmployeeIdOnChange = ({target: {value: employeeId}}: React.ChangeEvent<HTMLInputElement>) => {\n        setEmployeeId(employeeId);\n        dismissAlert();\n\n        if (employeeIdError) {\n            setEmployeeIdError('');\n        }\n    };\n\n    const handleFullNameOnChange = ({target: {value: fullName}}: React.ChangeEvent<HTMLInputElement>) => {\n        setFullName(fullName);\n        dismissAlert();\n\n        if (fullNameError) {\n            setFullNameError('');\n        }\n    };\n\n    const handlePasswordInputOnChange = ({target: {value: password}}: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(password);\n        dismissAlert();\n\n        if (passwordError) {\n            setPasswordError('');\n        }\n    };\n\n    const handleSignupSuccess = async (user: UserProfile, data: UserProfile) => {\n        trackEvent('signup', 'signup_user_02_complete', getRoleFromTrackFlow());\n\n        if (reminderInterval) {\n            trackEvent('signup', `signup_from_reminder_${reminderInterval}`, {user: user.id});\n        }\n\n        const redirectTo = (new URLSearchParams(search)).get('redirect_to');\n\n        const {error} = await dispatch(loginById(data.id, user.password));\n\n        if (error) {\n            if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                let verifyUrl = '/should_verify_email?email=' + encodeURIComponent(user.email);\n\n                if (teamName) {\n                    verifyUrl += '&teamname=' + encodeURIComponent(teamName);\n                }\n\n                if (redirectTo) {\n                    verifyUrl += '&redirect_to=' + redirectTo;\n                }\n\n                history.push(verifyUrl);\n            } else {\n                setServerError(error.message);\n                setIsWaiting(false);\n            }\n\n            return;\n        }\n\n        await postSignupSuccess();\n    };\n\n    const postSignupSuccess = async () => {\n        const redirectTo = (new URLSearchParams(search)).get('redirect_to');\n\n        await dispatch(loadMe());\n\n        if (token) {\n            setGlobalItem(token, JSON.stringify({usedBefore: true}));\n        }\n\n        if (redirectTo) {\n            history.push(redirectTo);\n        } else if (onboardingFlowEnabled) {\n            // need info about whether admin or not,\n            // and whether admin has already completed\n            // first tiem onboarding. Instead of fetching and orchestrating that here,\n            // let the default root component handle it.\n            history.push('/');\n        } else {\n            redirectUserToDefaultTeam();\n        }\n    };\n\n    function sendSignUpTelemetryEvents(telemetryId: string, props?: any) {\n        trackEvent('signup', telemetryId, props);\n    }\n\n    type TelemetryErrorList = {errors: Array<{field: string; rule: string}>; success: boolean};\n\n    const isUserValid = () => {\n        let isValid = true;\n\n        const providedEmployeeId = employeeIdInput.current?.value.trim();\n        const telemetryEvents: TelemetryErrorList = {errors: [], success: true};\n\n        if (!providedEmployeeId) {\n            setEmployeeIdError(formatMessage({id: 'signup_user_completed.required', defaultMessage: 'This field is required'}));\n            telemetryEvents.errors.push({field: 'employeeId', rule: 'not_provided'});\n            isValid = false;\n        }\n\n        const providedFullName = fullNameInput.current?.value.trim();\n\n        if (!providedFullName) {\n            setFullNameError(formatMessage({id: 'signup_user_completed.required', defaultMessage: 'This field is required'}));\n            telemetryEvents.errors.push({field: 'fullName', rule: 'not_provided'});\n            isValid = false;\n        }\n\n        const providedPassword = passwordInput.current?.value ?? '';\n        const {error, telemetryErrorIds} = isValidPassword(providedPassword, passwordConfig, intl);\n\n        if (error) {\n            setPasswordError(error as string);\n            telemetryEvents.errors = [...telemetryEvents.errors, ...telemetryErrorIds];\n            isValid = false;\n        }\n\n        if (telemetryEvents.errors.length) {\n            telemetryEvents.success = false;\n        }\n\n        sendSignUpTelemetryEvents('validate_user', telemetryEvents);\n\n        return isValid;\n    };\n\n    const dismissAlert = () => {\n        setAlertBanner(null);\n    };\n\n    const handleSubmit = async (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n        sendSignUpTelemetryEvents('click_create_account', getRoleFromTrackFlow());\n        setIsWaiting(true);\n        setSubmitClicked(true);\n\n        if (isUserValid()) {\n            setEmployeeIdError('');\n            setFullNameError('');\n            setPasswordError('');\n            setServerError('');\n            setIsWaiting(true);\n\n            const user = {\n                email: employeeIdInput.current?.value.trim(),\n                username: fullNameInput.current?.value.trim(),\n                password: passwordInput.current?.value,\n            } as UserProfile;\n\n            const redirectTo = (new URLSearchParams(search)).get('redirect_to') as string;\n\n            const {data, error} = await dispatch(createUser(user, token, inviteId, redirectTo));\n\n            if (error) {\n                setAlertBanner({\n                    mode: 'danger' as ModeType,\n                    title: (error as ServerError).message,\n                    onDismiss: dismissAlert,\n                });\n                setIsWaiting(false);\n\n                // Special case for accessibility to show the error message when the username is already taken\n                if (error.server_error_id === 'app.user.save.username_exists.app_error') {\n                    setFullNameError(error.message);\n                    setSubmitClicked(true);\n                }\n                return;\n            }\n\n            await handleSignupSuccess(user, data!);\n            if (subscribeToSecurityNewsletter) {\n                subscribeToSecurityNewsletterFunc();\n            }\n        } else {\n            setIsWaiting(false);\n        }\n    };\n\n    const handleReturnButtonOnClick = () => history.replace('/');\n\n    const getNewsletterCheck = () => {\n        if (cwsAvailability === CSWAvailabilityCheckTypes.Available) {\n            return (\n                <CheckInput\n                    id='signup-body-card-form-check-newsletter'\n                    ariaLabel={formatMessage({id: 'newsletter_optin.checkmark.box', defaultMessage: 'newsletter checkbox'})}\n                    name='newsletter'\n                    onChange={() => setSubscribeToSecurityNewsletter(!subscribeToSecurityNewsletter)}\n                    text={\n                        formatMessage(\n                            {id: 'newsletter_optin.checkmark.text', defaultMessage: '<span>I would like to receive Mattermost security updates via newsletter.</span> By subscribing, I consent to receive emails from Mattermost with product updates, promotions, and company news. I have read the <a>Privacy Policy</a> and understand that I can <aa>unsubscribe</aa> at any time'},\n                            {\n                                a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                    <ExternalLink\n                                        location='signup-newsletter-checkmark'\n                                        href={HostedCustomerLinks.PRIVACY}\n                                    >\n                                        {chunks}\n                                    </ExternalLink>\n                                ),\n                                aa: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                    <ExternalLink\n                                        location='signup-newsletter-checkmark'\n                                        href={HostedCustomerLinks.NEWSLETTER_UNSUBSCRIBE_LINK}\n                                    >\n                                        {chunks}\n                                    </ExternalLink>\n                                ),\n                                span: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                    <span className='header'>{chunks}</span>\n                                ),\n                            },\n                        )}\n                    checked={subscribeToSecurityNewsletter}\n                />\n            );\n        }\n        return (\n            <div className='newsletter'>\n                <span className='interested'>\n                    {formatMessage({id: 'newsletter_optin.title', defaultMessage: 'Interested in receiving Mattermost security, product, promotions, and company updates updates via newsletter?'})}\n                </span>\n                <span className='link'>\n                    {formatMessage(\n                        {id: 'newsletter_optin.desc', defaultMessage: 'Sign up at <a>{link}</a>.'},\n                        {\n                            link: HostedCustomerLinks.SECURITY_UPDATES,\n                            a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                                <ExternalLink\n                                    location='signup'\n                                    href={HostedCustomerLinks.SECURITY_UPDATES}\n                                >\n                                    {chunks}\n                                </ExternalLink>\n                            ),\n                        },\n                    )}\n                </span>\n            </div>\n        );\n    };\n\n    const handleOnBlur = (e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>, inputId: string) => {\n        const text = e.target.value;\n        if (!text) {\n            return;\n        }\n        sendSignUpTelemetryEvents(`typed_input_${inputId}`);\n    };\n\n    const getContent = () => {\n        if (!enableSignUpWithEmail && !enableExternalSignup) {\n            return (\n                <ColumnLayout\n                    title={formatMessage({id: 'login.noMethods.title', defaultMessage: 'This server doesn’t have any sign-in methods enabled'})}\n                    message={formatMessage({id: 'login.noMethods.subtitle', defaultMessage: 'Please contact your System Administrator to resolve this.'})}\n                />\n            );\n        }\n\n        if (!isWaiting && (noOpenServer || serverError || usedBefore)) {\n            const titleColumn = noOpenServer ? (\n                formatMessage({id: 'signup_user_completed.no_open_server.title', defaultMessage: 'This server doesn’t allow open signups'})\n            ) : (\n                serverError ||\n                formatMessage({id: 'signup_user_completed.invalid_invite.title', defaultMessage: 'This invite link is invalid'})\n            );\n\n            return (\n                <ColumnLayout\n                    title={titleColumn}\n                    message={formatMessage({id: 'signup_user_completed.invalid_invite.message', defaultMessage: 'Please speak with your Administrator to receive an invitation.'})}\n                    extraContent={(\n                        <div className='signup-body-content-button-container'>\n                            <button\n                                className='signup-body-content-button-return'\n                                onClick={handleReturnButtonOnClick}\n                            >\n                                {formatMessage({id: 'signup_user_completed.return', defaultMessage: 'Return to log in'})}\n                            </button>\n                        </div>\n                    )}\n                />\n            );\n        }\n\n        if (desktopLoginLink) {\n            return (\n                <Route\n                    path={'/signup_user_complete/desktop'}\n                    render={() => (\n                        <DesktopAuthToken\n                            href={desktopLoginLink}\n                            onLogin={postSignupSuccess}\n                        />\n                    )}\n                />\n            );\n        }\n\n        let employeeIdCustomLabelForInput: CustomMessageInputType = parsedEmployeeId ? {\n            type: ItemStatus.INFO,\n            value: formatMessage(\n                {\n                    id: 'signup_user_completed.employeeIdIs',\n                    defaultMessage: \"You'll use this address to sign in to {siteName}.\",\n                },\n                {siteName: SiteName},\n            ),\n        } : null;\n\n        // error will have preference over info message\n        if (employeeIdError) {\n            employeeIdCustomLabelForInput = {type: ItemStatus.ERROR, value: employeeIdError};\n        }\n\n        return (\n            <>\n                <div\n                    className={classNames(\n                        'signup-body-message',\n                        {\n                            'custom-branding': enableCustomBrand,\n                            'with-brand-image': enableCustomBrand && !brandImageError,\n                            'with-alternate-link': !isMobileView,\n                        },\n                    )}\n                >\n                    {enableCustomBrand && !brandImageError ? (\n                        <img\n                            className={classNames('signup-body-custom-branding-image')}\n                            alt='brand image'\n                            src={Client4.getBrandImageUrl('0')}\n                            onError={handleBrandImageError}\n                        />\n                    ) : (\n                        <h1 className='signup-body-message-title'>\n                            {formatMessage({id: 'signup_user_completed.title', defaultMessage: 'Let’s get started'})}\n                        </h1>\n                    )}\n                    {getMessageSubtitle()}\n                </div>\n                <div className='signup-body-action'>\n                    {!isMobileView && getAlternateLink()}\n                    <div className={classNames('signup-body-card', {'custom-branding': enableCustomBrand, 'with-error': hasError})}>\n                        <div\n                            className='signup-body-card-content'\n                        >\n                            <p className='signup-body-card-title'>\n                                {getCardTitle()}\n                            </p>\n                            {enableCustomBrand && getMessageSubtitle()}\n                            {alertBanner && (\n                                <AlertBanner\n                                    className='login-body-card-banner'\n                                    mode={alertBanner.mode}\n                                    title={alertBanner.title}\n                                    onDismiss={alertBanner.onDismiss}\n                                />\n                            )}\n                            {enableSignUpWithEmail && (\n                                <form className='signup-body-card-form'>\n                                    <Input\n                                        data-testid='signup-body-card-form-employeeId-input'\n                                        ref={employeeIdInput}\n                                        name='employeeId'\n                                        label={formatMessage({id: 'signup_user_completed.employeeIdLabel', defaultMessage: '사번'})}\n                                        value={employeeId}\n                                        inputSize={SIZE.LARGE}\n                                        onChange={handleEmployeeIdOnChange}\n                                        placeholder={formatMessage({\n                                            id: 'signup_user_completed.employeeIdLabel',\n                                            defaultMessage: '사번',\n                                        })}\n                                        disabled={isWaiting || Boolean(parsedEmployeeId)}\n                                        autoFocus={true}\n                                        customMessage={employeeIdCustomLabelForInput}\n                                        onBlur={(e) => handleOnBlur(e, 'employeeId')}\n                                    />\n                                    <Input\n                                        data-testid='signup-body-card-form-name-input'\n                                        ref={fullNameInput}\n                                        name='fullName'\n                                        label={formatMessage({id: 'signup_user_completed.fullNameLabel', defaultMessage: '성명'})}\n                                        value={fullName}\n                                        inputSize={SIZE.LARGE}\n                                        onChange={handleFullNameOnChange}\n                                        placeholder={formatMessage({\n                                            id: 'signup_user_completed.fullNameLabel',\n                                            defaultMessage: '성명',\n                                        })}\n                                        disabled={isWaiting}\n                                        autoFocus={Boolean(parsedEmployeeId)}\n                                        customMessage={\n                                            fullNameError ? {type: ItemStatus.ERROR, value: fullNameError} : {\n                                                type: ItemStatus.INFO,\n                                                value: formatMessage({id: 'signup_user_completed.userHelp', defaultMessage: 'You can use lowercase letters, numbers, periods, dashes, and underscores.'}),\n                                            }\n                                        }\n                                        onBlur={(e) => handleOnBlur(e, 'fullName')}\n                                    />\n                                    <PasswordInput\n                                        data-testid='signup-body-card-form-password-input'\n                                        ref={passwordInput}\n                                        className='signup-body-card-form-password-input'\n                                        value={password}\n                                        inputSize={SIZE.LARGE}\n                                        onChange={handlePasswordInputOnChange}\n                                        disabled={isWaiting}\n                                        createMode={true}\n                                        info={passwordInfo as string}\n                                        error={passwordError}\n                                        onBlur={(e) => handleOnBlur(e, 'password')}\n                                    />\n                                    {getNewsletterCheck()}\n                                    <SaveButton\n                                        extraClasses='signup-body-card-form-button-submit large'\n                                        saving={isWaiting}\n                                        disabled={!canSubmit}\n                                        onClick={handleSubmit}\n                                        defaultMessage={formatMessage({id: 'signup_user_completed.create', defaultMessage: 'Create account'})}\n                                        savingMessage={formatMessage({id: 'signup_user_completed.saving', defaultMessage: 'Creating account…'})}\n                                    />\n                                </form>\n                            )}\n                            {enableSignUpWithEmail && enableExternalSignup && (\n                                <div className='signup-body-card-form-divider'>\n                                    <span className='signup-body-card-form-divider-label'>\n                                        {formatMessage({id: 'signup_user_completed.or', defaultMessage: 'or create an account with'})}\n                                    </span>\n                                </div>\n                            )}\n                            {enableExternalSignup && (\n                                <div className={classNames('signup-body-card-form-login-options', {column: !enableSignUpWithEmail})}>\n                                    {getExternalSignupOptions().map((option) => (\n                                        <ExternalLoginButton\n                                            key={option.id}\n                                            direction={enableSignUpWithEmail ? undefined : 'column'}\n                                            {...option}\n                                        />\n                                    ))}\n                                </div>\n                            )}\n                            {enableSignUpWithEmail && !serverError && (\n                                <p className='signup-body-card-agreement'>\n                                    <FormattedMessage\n                                        id='signup.agreement'\n                                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our <termsOfUseLink>Terms of Use</termsOfUseLink> and <privacyPolicyLink>Privacy Policy</privacyPolicyLink>.  If you do not agree, you cannot use {siteName}.'\n                                        values={{\n                                            siteName: SiteName,\n                                            termsOfUseLink: (chunks: string) => (\n                                                <ExternalLink\n                                                    href={TermsOfServiceLink as string}\n                                                    location='signup-terms-of-use'\n                                                >\n                                                    {chunks}\n                                                </ExternalLink>\n                                            ),\n                                            privacyPolicyLink: (chunks: string) => (\n                                                <ExternalLink\n                                                    href={PrivacyPolicyLink as string}\n                                                    location='signup-privacy-policy'\n                                                >\n                                                    {chunks}\n                                                </ExternalLink>\n                                            ),\n                                        }}\n                                    />\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <div className='signup-body'>\n            <div className='signup-body-content'>\n                {getContent()}\n            </div>\n        </div>\n    );\n};\n\nexport default Signup;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport Constants from 'utils/constants';\n\nexport function isValidPassword(password: string, passwordConfig: PasswordConfig, intl?: IntlShape) {\n    let errorId = passwordErrors.passwordError.id;\n    const telemetryErrorIds = [];\n    let valid = true;\n    const minimumLength = passwordConfig.minimumLength || Constants.MIN_PASSWORD_LENGTH;\n\n    if (password.length < minimumLength || password.length > Constants.MAX_PASSWORD_LENGTH) {\n        valid = false;\n        telemetryErrorIds.push({field: 'password', rule: 'error_length'});\n    }\n\n    if (passwordConfig.requireLowercase) {\n        if (!password.match(/[a-z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Lowercase';\n        telemetryErrorIds.push({field: 'password', rule: 'lowercase'});\n    }\n\n    if (passwordConfig.requireUppercase) {\n        if (!password.match(/[A-Z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Uppercase';\n        telemetryErrorIds.push({field: 'password', rule: 'uppercase'});\n    }\n\n    if (passwordConfig.requireNumber) {\n        if (!password.match(/[0-9]/)) {\n            valid = false;\n        }\n\n        errorId += 'Number';\n        telemetryErrorIds.push({field: 'password', rule: 'number'});\n    }\n\n    if (passwordConfig.requireSymbol) {\n        if (!password.match(/[ !\"\\\\#$%&'()*+,-./:;<=>?@[\\]^_`|~]/)) {\n            valid = false;\n        }\n\n        errorId += 'Symbol';\n        telemetryErrorIds.push({field: 'password', rule: 'symbol'});\n    }\n\n    let error;\n    if (!valid) {\n        error = intl ? (\n            intl.formatMessage(\n                {\n                    id: errorId,\n                    defaultMessage: 'Must be {min}-{max} characters long.',\n                },\n                {\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                },\n            )\n        ) : (\n            <FormattedMessage\n                id={errorId}\n                defaultMessage='Must be {min}-{max} characters long.'\n                values={{\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    return {valid, error, telemetryErrorIds};\n}\n\nexport const passwordErrors = defineMessages({\n    passwordError: {id: 'user.settings.security.passwordError', defaultMessage: 'Your password must be {min}-{max} characters long.'},\n    passwordErrorLowercase: {id: 'user.settings.security.passwordErrorLowercase', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters.'},\n    passwordErrorLowercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters and numbers.'},\n    passwordErrorLowercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters and special characters.'},\n    passwordErrorLowercaseUppercase: {id: 'user.settings.security.passwordErrorLowercaseUppercase', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters.'},\n    passwordErrorLowercaseUppercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, and numbers.'},\n    passwordErrorLowercaseUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseUppercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, and special characters.'},\n    passwordErrorNumber: {id: 'user.settings.security.passwordErrorNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include numbers.'},\n    passwordErrorNumberSymbol: {id: 'user.settings.security.passwordErrorNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include numbers and special characters.'},\n    passwordErrorSymbol: {id: 'user.settings.security.passwordErrorSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include special characters.'},\n    passwordErrorUppercase: {id: 'user.settings.security.passwordErrorUppercase', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters.'},\n    passwordErrorUppercaseNumber: {id: 'user.settings.security.passwordErrorUppercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, and numbers.'},\n    passwordErrorUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorUppercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, numbers, and special characters.'},\n    passwordErrorUppercaseSymbol: {id: 'user.settings.security.passwordErrorUppercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, and special characters.'},\n});\n"],"names":["props","id","ariaLabel","text","rest","_objectWithoutProperties","_excluded","React","className","Object","assign","type","htmlFor","_ref","_params$get","_params$get2","_parsedEmployeeId","_parsedFullName","onCustomizeHeader","intl","useIntl","formatMessage","dispatch","useDispatch","history","useHistory","search","useLocation","params","URLSearchParams","token","get","inviteId","data","parsedData","JSON","parse","email","parsedEmail","name","parsedTeamName","reminder_interval","reminderInterval","config","useSelector","getConfig","EnableOpenServer","EnableUserCreation","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableSignUpWithOpenId","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","CustomDescriptionText","GitLabButtonText","GitLabButtonColor","OpenIdButtonText","OpenIdButtonColor","EnableCustomBrand","CustomBrandText","TermsOfServiceLink","PrivacyPolicyLink","IsLicensed","getLicense","loggedIn","Boolean","getCurrentUserId","onboardingFlowEnabled","getIsOnboardingFlowEnabled","usedBefore","state","undefined","getGlobalItem","passwordInput","useRef","isLicensed","enableUserCreation","noAccounts","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLDAP","enableSAML","enableCustomBrand","noOpenServer","employeeId","setEmployeeId","useState","parsedEmployeeId","fullName","setFullName","parsedFullName","password","setPassword","loading","setLoading","isWaiting","setIsWaiting","employeeIdError","setEmployeeIdError","fullNameError","setFullNameError","passwordError","setPasswordError","brandImageError","setBrandImageError","serverError","setServerError","teamName","setTeamName","alertBanner","setAlertBanner","isMobileView","setIsMobileView","subscribeToSecurityNewsletter","setSubscribeToSecurityNewsletter","submitClicked","setSubmitClicked","cwsAvailability","useCWSAvailabilityCheck","enableExternalSignup","hasError","canSubmit","passwordConfig","getPasswordConfig","error","passwordInfo","isValidPassword","desktopLoginLink","setDesktopLoginLink","handleHeaderBackButtonOnClick","useCallback","trackEvent","goBack","handleInvalidInvite","_ref2","errorMessage","server_error_id","message","defaultMessage","getAlternateLink","AlternateLinkLayout","alternateMessage","alternateLinkPath","alternateLinkLabel","onWindowResize","throttle","window","innerWidth","desktopExternalAuth","href","event","isDesktopApp","preventDefault","push","concat","useEffect","removeGlobalItem","_objectSpread","getRoleFromTrackFlow","getMediumFromTrackFlow","addEventListener","async","team","addUserToTeamFromInvite","Constants","DEFAULT_CHANNEL","handleAddUserToTeamFromInvite","getTeamInviteInfo","getInviteInfo","redirectUserToDefaultTeam","removeEventListener","document","title","siteName","onBackButtonClick","alternateLink","employeeIdInput","current","focus","fullNameInput","LoadingScreen","handleBrandImageError","getMessageSubtitle","Markdown","options","mentionHighlight","handleEmployeeIdOnChange","_ref3","target","value","dismissAlert","handleFullNameOnChange","_ref4","handlePasswordInputOnChange","_ref5","postSignupSuccess","redirectTo","loadMe","setGlobalItem","stringify","sendSignUpTelemetryEvents","telemetryId","handleSubmit","e","isUserValid","_employeeIdInput$curr","_fullNameInput$curren","_passwordInput$curren","_passwordInput$curren2","isValid","telemetryEvents","errors","success","trim","field","rule","providedPassword","telemetryErrorIds","length","_employeeIdInput$curr2","_fullNameInput$curren2","_passwordInput$curren3","user","username","createUser","mode","onDismiss","loginById","verifyUrl","encodeURIComponent","handleSignupSuccess","subscribeToSecurityNewsletterFunc","Client4","subscribeToNewsletter","subscribed_content","console","handleReturnButtonOnClick","replace","handleOnBlur","inputId","getContent","ColumnLayout","titleColumn","extraContent","onClick","Route","path","render","DesktopAuthToken","onLogin","employeeIdCustomLabelForInput","ItemStatus","INFO","ERROR","classNames","alt","src","getBrandImageUrl","onError","AlertBanner","Input","ref","label","inputSize","SIZE","LARGE","onChange","placeholder","disabled","autoFocus","customMessage","onBlur","PasswordInput","createMode","info","CSWAvailabilityCheckTypes","Available","CheckInput","a","chunks","ExternalLink","location","HostedCustomerLinks","PRIVACY","aa","NEWSLETTER_UNSUBSCRIBE_LINK","span","checked","link","SECURITY_UPDATES","SaveButton","extraClasses","saving","savingMessage","column","getExternalSignupOptions","externalLoginOptions","url","getOAuthRoute","icon","LoginGitlabIcon","style","color","borderColor","LoginGoogleIcon","EntraIdIcon","LoginOpenIDIcon","newSearchParam","set","CREATE_LDAP","getUrl","toString","LockIcon","map","option","ExternalLoginButton","key","direction","FormattedMessage","values","termsOfUseLink","privacyPolicyLink","errorId","passwordErrors","valid","minimumLength","MIN_PASSWORD_LENGTH","MAX_PASSWORD_LENGTH","requireLowercase","match","requireUppercase","requireNumber","requireSymbol","min","max","defineMessages","passwordErrorLowercase","passwordErrorLowercaseNumber","passwordErrorLowercaseNumberSymbol","passwordErrorLowercaseSymbol","passwordErrorLowercaseUppercase","passwordErrorLowercaseUppercaseNumber","passwordErrorLowercaseUppercaseNumberSymbol","passwordErrorLowercaseUppercaseSymbol","passwordErrorNumber","passwordErrorNumberSymbol","passwordErrorSymbol","passwordErrorUppercase","passwordErrorUppercaseNumber","passwordErrorUppercaseNumberSymbol","passwordErrorUppercaseSymbol"],"sourceRoot":""}