{"version":3,"file":"7422.d2029b6d506f60433c46.js","mappings":"gRA0EA,QAhDuBA,KACnB,MAAMC,GAAQC,EAAAA,EAAAA,iBACRC,GAAWC,EAAAA,EAAAA,eAEXC,EAAWJ,EAAMK,OAAOC,KACxBC,EAAaP,EAAMK,OAAOE,WAE1BD,GAAOE,EAAAA,EAAAA,cAAaC,IAAuBC,EAAAA,EAAAA,IAAcD,EAAOL,KAEhEO,GAAwBH,EAAAA,EAAAA,cAAaC,IAAuBG,EAAAA,EAAAA,IAAmCH,EAAOL,KACtGS,GAAoBL,EAAAA,EAAAA,cAAaC,IAAuBK,EAAAA,EAAAA,IAAiCL,GAAOH,aAAI,EAAJA,EAAMS,KAAM,GAAIJ,KAatH,OAXAK,EAAAA,EAAAA,YAAU,KAC6BC,WAC/B,MAAMC,EAAoBL,QAAAA,QAA2BM,EAAAA,GAAQC,kBAAiBd,aAAI,EAAJA,EAAMS,KAAM,GAAI,eAE9Fb,GAASmB,EAAAA,EAAAA,IAAgBH,IACzBhB,EASZ,SAA8BoB,EAAyBC,EAAgBhB,GACnE,OAAOU,UAEH,MAAMO,GAAWC,EAAAA,EAAAA,MACjBvB,EAAS,CAACwB,KAAM,0BAA2BF,aAE3C,MAAMG,EAAU,0BAAHC,OAA6BrB,EAAU,KAAAqB,OAAIJ,GAElDK,EAAO,CACTC,WAAYR,EAAeP,GAC3BgB,QAASR,GAGb,IACI,MAAMS,QAAab,EAAAA,GAAQc,eAAeN,EAASE,GACnD3B,EAAS,CAACwB,KAAMQ,EAAAA,GAAiBC,2BAA4BH,KAAMA,aAAI,EAAJA,EAAMI,YAC7E,CAAE,MAAOC,GACLC,QAAQD,MAAMA,EAClB,EAER,CA7BqBE,CAAqBrB,GAAmBZ,aAAI,EAAJA,EAAMS,KAAM,GAAIR,GAAY,EAGjFiC,EAA4B,GAC7B,IAEI,IAAI,C","sources":["webpack://mattermost-webapp/./src/components/channel_layout/playbook_runner.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useRouteMatch} from 'react-router-dom';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {IntegrationTypes} from 'mattermost-redux/action_types';\nimport {Client4} from 'mattermost-redux/client';\nimport {getChannelByTeamIdAndChannelName} from 'mattermost-redux/selectors/entities/channels';\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {generateId} from 'mattermost-redux/utils/helpers';\n\nimport {switchToChannel} from 'actions/views/channel';\nimport {getLastViewedChannelNameByTeamName} from 'selectors/local_storage';\n\nimport type {GlobalState} from 'types/store';\n\ninterface MatchParams {\n    team: string;\n    playbookId: string;\n}\n\nconst PlaybookRunner = () => {\n    const match = useRouteMatch<MatchParams>();\n    const dispatch = useDispatch();\n\n    const teamName = match.params.team;\n    const playbookId = match.params.playbookId;\n\n    const team = useSelector((state: GlobalState) => getTeamByName(state, teamName));\n\n    const lastViewedChannelName = useSelector((state: GlobalState) => getLastViewedChannelNameByTeamName(state, teamName));\n    const lastViewedChannel = useSelector((state: GlobalState) => getChannelByTeamIdAndChannelName(state, team?.id || '', lastViewedChannelName));\n\n    useEffect(() => {\n        const switchToChannelAndStartRun = async () => {\n            const channelToSwitchTo = lastViewedChannel ?? await Client4.getChannelByName(team?.id || '', 'town-square');\n\n            dispatch(switchToChannel(channelToSwitchTo));\n            dispatch(startPlaybookRunById(channelToSwitchTo, team?.id || '', playbookId));\n        };\n\n        switchToChannelAndStartRun();\n    }, []);\n\n    return null;\n};\n\nfunction startPlaybookRunById(currentChannel: Channel, teamId: string, playbookId: string) {\n    return async (dispatch: Dispatch<AnyAction>) => {\n        // Generate a unique id for the command and send it to Playbooks\n        const clientId = generateId();\n        dispatch({type: 'playbooks_set_client_id', clientId});\n\n        const command = `/playbook run-playbook ${playbookId} ${clientId}`;\n\n        const args = {\n            channel_id: currentChannel.id,\n            team_id: teamId,\n        };\n\n        try {\n            const data = await Client4.executeCommand(command, args);\n            dispatch({type: IntegrationTypes.RECEIVED_DIALOG_TRIGGER_ID, data: data?.trigger_id});\n        } catch (error) {\n            console.error(error); //eslint-disable-line no-console\n        }\n    };\n}\n\nexport default PlaybookRunner;\n"],"names":["PlaybookRunner","match","useRouteMatch","dispatch","useDispatch","teamName","params","team","playbookId","useSelector","state","getTeamByName","lastViewedChannelName","getLastViewedChannelNameByTeamName","lastViewedChannel","getChannelByTeamIdAndChannelName","id","useEffect","async","channelToSwitchTo","Client4","getChannelByName","switchToChannel","currentChannel","teamId","clientId","generateId","type","command","concat","args","channel_id","team_id","data","executeCommand","IntegrationTypes","RECEIVED_DIALOG_TRIGGER_ID","trigger_id","error","console","startPlaybookRunById","switchToChannelAndStartRun"],"sourceRoot":""}