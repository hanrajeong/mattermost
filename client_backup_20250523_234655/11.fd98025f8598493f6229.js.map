{"version":3,"file":"11.fd98025f8598493f6229.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/file_info_preview/file_info_preview.tsx","webpack://mattermost-webapp/./src/components/file_info_preview/index.ts","webpack://mattermost-webapp/./src/components/archived_preview.tsx","webpack://mattermost-webapp/./src/components/audio_video_preview/audio_video_preview.tsx","webpack://mattermost-webapp/./src/components/audio_video_preview/index.ts","webpack://mattermost-webapp/./src/components/code_preview.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_info/file_preview_modal_info.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/types.ts","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_main_actions/file_preview_modal_main_actions.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_footer/file_preview_modal_footer.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_main_nav/file_preview_modal_main_nav.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_header/file_preview_modal_header.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/image_preview.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/popover_bar/popover_bar.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/popover_bar/index.ts","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    canDownloadFiles: boolean;\n};\n\nconst FileInfoPreview = ({\n    fileInfo,\n    fileUrl,\n    canDownloadFiles,\n}: Props) => {\n    const intl = useIntl();\n\n    // non-image files include a section providing details about the file\n    const infoParts = [];\n\n    if (fileInfo.extension !== '') {\n        infoParts.push(\n            intl.formatMessage({id: 'file_info_preview.type', defaultMessage: 'File type '}) +\n        fileInfo.extension.toUpperCase(),\n        );\n    }\n\n    if (fileInfo.size) {\n        infoParts.push(\n            intl.formatMessage({id: 'file_info_preview.size', defaultMessage: 'Size '}) +\n        Utils.fileSizeToString(fileInfo.size),\n        );\n    }\n\n    const infoString = infoParts.join(', ');\n\n    let preview = null;\n    if (canDownloadFiles) {\n        preview = (\n            <a\n                className='file-details__preview'\n                href={fileUrl}\n            >\n                <span className='file-details__preview-helper'/>\n                <img\n                    alt={'file preview'}\n                    src={Utils.getFileIconPath(fileInfo)}\n                />\n            </a>\n        );\n    } else {\n        preview = (\n            <span className='file-details__preview'>\n                <span className='file-details__preview-helper'/>\n                <img\n                    alt={'file preview'}\n                    src={Utils.getFileIconPath(fileInfo)}\n                />\n            </span>\n        );\n    }\n\n    return (\n        <div className='file-details__container'>\n            {preview}\n            <div className='file-details'>\n                <div className='file-details__name'>{fileInfo.name}</div>\n                <div className='file-details__info'>{infoString}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {canDownloadFiles} from 'utils/file_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport FileInfoPreview from './file_info_preview';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n    };\n}\n\nexport default connect(mapStateToProps)(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {ArchiveOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {FileInfo} from '@mattermost/types/files';\n\ninterface Props {\n    fileInfo: FileInfo;\n}\n\nexport default function FileInfoPreview(props: Props) {\n    const intl = useIntl();\n\n    const infoString = intl.formatMessage({\n        id: 'workspace_limits.archived_file.archived',\n        defaultMessage: 'This file is archived',\n    });\n\n    const preview = (\n        <span className='file-details__preview file-details__preview--archived'>\n            <ArchiveOutlineIcon\n                size={80}\n                color={'rgba(var(--center-channel-color-rgb), 0.48)'}\n                data-testid='archived-file-icon'\n            />\n        </span>\n    );\n\n    return (\n        <div className='file-details__container'>\n            {preview}\n            <div className='file-details'>\n                <div className='file-details__name'>{props.fileInfo.name}</div>\n                <div className='file-details__info'>{infoString}</div>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    isMobileView: boolean;\n}\n\ntype State = {\n    canPlay: boolean;\n}\n\nexport default class AudioVideoPreview extends React.PureComponent<Props, State> {\n    sourceRef = React.createRef<HTMLSourceElement>();\n    videoRef = React.createRef<HTMLVideoElement>();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            canPlay: true,\n        };\n    }\n\n    componentDidMount() {\n        this.handleFileInfoChanged();\n\n        if (this.sourceRef.current) {\n            this.sourceRef.current.addEventListener('error', this.handleLoadError, {once: true});\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.handleFileInfoChanged();\n        }\n\n        if (this.sourceRef.current) {\n            this.sourceRef.current.addEventListener('error', this.handleLoadError, {once: true});\n        }\n    }\n\n    handleFileInfoChanged = () => {\n        let video = this.videoRef.current;\n        if (!video) {\n            video = document.createElement('video');\n        }\n\n        this.setState({\n            canPlay: true,\n        });\n    };\n\n    handleLoadError = () => {\n        this.setState({\n            canPlay: false,\n        });\n    };\n\n    stop = () => {\n        if (this.videoRef.current) {\n            const video = this.videoRef.current;\n            video.pause();\n            video.currentTime = 0;\n        }\n    };\n\n    render() {\n        if (!this.state.canPlay) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        let width = Constants.WEB_VIDEO_WIDTH;\n        let height = Constants.WEB_VIDEO_HEIGHT;\n        if (this.props.isMobileView) {\n            width = Constants.MOBILE_VIDEO_WIDTH;\n            height = Constants.MOBILE_VIDEO_HEIGHT;\n        }\n\n        // add a key to the video to prevent React from using an old video source while a new one is loading\n        return (\n            <video\n                key={this.props.fileInfo.id}\n                ref={this.videoRef}\n                data-setup='{}'\n                controls={true}\n                width={width}\n                height={height}\n            >\n                <source\n                    ref={this.sourceRef}\n                    src={this.props.fileUrl}\n                />\n            </video>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport AudioVideoPreview from './audio_video_preview';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AudioVideoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport FileInfoPreview from 'components/file_info_preview';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport Constants from 'utils/constants';\nimport * as SyntaxHighlighting from 'utils/syntax_highlighting';\n\nimport type {LinkInfo} from './file_preview_modal/types';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    className: string;\n    getContent?: (code: string) => void;\n};\n\ntype State = {\n    code: string;\n    lang: string;\n    highlighted: string;\n    loading: boolean;\n    success: boolean;\n    prevFileUrl?: string;\n}\n\nexport default class CodePreview extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            code: '',\n            lang: '',\n            highlighted: '',\n            loading: true,\n            success: true,\n        };\n    }\n\n    componentDidMount() {\n        this.getCode();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.fileUrl !== state.prevFileUrl) {\n            const usedLanguage = SyntaxHighlighting.getLanguageFromFileExtension(props.fileInfo.extension);\n\n            if (!usedLanguage || props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n                return {\n                    code: '',\n                    lang: '',\n                    loading: false,\n                    success: false,\n                    prevFileUrl: props.fileUrl,\n                };\n            }\n\n            return {\n                code: '',\n                lang: usedLanguage,\n                loading: true,\n                prevFileUrl: props.fileUrl,\n            };\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.getCode();\n        }\n    }\n\n    getCode = async () => {\n        if (!this.state.lang || this.props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n            return;\n        }\n        try {\n            const data = await fetch(this.props.fileUrl);\n            const text = await data.text();\n            this.handleReceivedCode(text);\n        } catch (e) {\n            this.handleReceivedError();\n        }\n    };\n\n    handleReceivedCode = async (data: string | Node) => {\n        let code = data as string;\n        const Data = data as Node;\n        if (Data.nodeName === '#document') {\n            code = new XMLSerializer().serializeToString(Data);\n        }\n        this.props.getContent?.(code);\n        this.setState({\n            code,\n            highlighted: await SyntaxHighlighting.highlight(this.state.lang, code),\n            loading: false,\n            success: true,\n        });\n    };\n\n    handleReceivedError = () => {\n        this.setState({loading: false, success: false});\n    };\n\n    static supports(fileInfo: FileInfo | LinkInfo) {\n        return Boolean(SyntaxHighlighting.getLanguageFromFileExtension(fileInfo.extension));\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const language = SyntaxHighlighting.getLanguageName(this.state.lang);\n\n        return (\n            <div className='post-code code-preview'>\n                <span className='post-code__language'>\n                    {`${this.props.fileInfo.name} - ${language}`}\n                </span>\n                <div className='hljs'>\n                    <div className='post-code__line-numbers'>\n                        {SyntaxHighlighting.renderLineNumbers(this.state.code)}\n                    </div>\n                    <code dangerouslySetInnerHTML={{__html: this.state.highlighted}}/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Post} from '@mattermost/types/posts';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {\n    getUser as selectUser,\n    makeGetDisplayName,\n} from 'mattermost-redux/selectors/entities/users';\n\nimport Avatar from 'components/widgets/users/avatar/avatar';\n\nimport {imageURLForUser} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport './file_preview_modal_info.scss';\n\ninterface Props {\n    showFileName: boolean;\n    filename: string;\n    post?: Post;\n}\n\nconst displayNameGetter = makeGetDisplayName();\n\nconst FilePreviewModalInfo: React.FC<Props> = (props: Props) => {\n    const user = useSelector((state: GlobalState) => selectUser(state, props.post?.user_id ?? '')) as UserProfile | undefined;\n    const channel = useSelector((state: GlobalState) => {\n        const getChannel = makeGetChannel();\n        return getChannel(state, props.post?.channel_id ?? '');\n    });\n    const name = useSelector((state: GlobalState) => displayNameGetter(state, props.post?.user_id ?? '', true));\n\n    let info;\n    const channelName = channel ? (\n        <FormattedMessage\n            id='file_preview_modal_info.shared_in'\n            defaultMessage='Shared in ~{name}'\n            values={{\n                name: channel.display_name || channel.name,\n            }}\n        />\n    ) : null;\n    if (props.showFileName) {\n        info = (\n            <>\n                <h5 className='file-preview-modal__file-name'>{props.filename}\n                </h5>\n                <span className='file-preview-modal__file-details'>\n                    <span className='file-preview-modal__file-details-user-name'>{name}</span>\n                    <span className='file-preview-modal__channel'>{channelName}</span>\n                </span>\n            </>\n        );\n    } else {\n        info = (\n            <>\n                <h5 className='file-preview-modal__user-name'>{name}\n                </h5>\n                <span className='file-preview-modal__channel'>{channelName}\n                </span>\n            </>\n        );\n    }\n\n    return (\n        <div className='file-preview-modal__info'>\n            {\n                (props.post && Object.keys(props.post).length > 0) &&\n                <Avatar\n                    size='lg'\n                    url={imageURLForUser(props.post.user_id, user?.last_picture_update)}\n                    className='file-preview-modal__avatar'\n                />\n            }\n\n            <div className='file-preview-modal__info-details'>\n                {info}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalInfo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nexport type LinkInfo = {\n    has_preview_image: boolean;\n    link: string;\n    extension: string;\n    name: string;\n}\n\nexport function isFileInfo(info: FileInfo | LinkInfo): info is FileInfo {\n    return Boolean((info as FileInfo).id);\n}\n\nexport function isLinkInfo(info: FileInfo | LinkInfo): info is LinkInfo {\n    return Boolean((info as LinkInfo).link) && !isFileInfo(info);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getFilePublicLink} from 'mattermost-redux/actions/files';\nimport {getFilePublicLink as selectFilePublicLink} from 'mattermost-redux/selectors/entities/files';\n\nimport CopyButton from 'components/copy_button';\nimport ExternalLink from 'components/external_link';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {FileTypes} from 'utils/constants';\nimport {copyToClipboard, getFileType} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport {isFileInfo} from '../types';\nimport type {LinkInfo} from '../types';\n\nimport './file_preview_modal_main_actions.scss';\n\nconst COPIED_TOOLTIP_DURATION = 2000;\n\ninterface Props {\n    showOnlyClose?: boolean;\n    showClose?: boolean;\n    showPublicLink?: boolean;\n    filename: string;\n    fileURL: string;\n    fileInfo: FileInfo | LinkInfo;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    canCopyContent: boolean;\n    handleModalClose: () => void;\n    content: string;\n}\n\nconst FilePreviewModalMainActions: React.FC<Props> = (props: Props) => {\n    const intl = useIntl();\n\n    const selectedFilePublicLink = useSelector((state: GlobalState) => selectFilePublicLink(state)?.link);\n    const dispatch = useDispatch();\n    const [publicLinkCopied, setPublicLinkCopied] = useState(false);\n\n    useEffect(() => {\n        if (isFileInfo(props.fileInfo) && props.enablePublicLink) {\n            dispatch(getFilePublicLink(props.fileInfo.id));\n        }\n    }, [props.fileInfo, props.enablePublicLink]);\n\n    useEffect(() => {\n        if (publicLinkCopied) {\n            setTimeout(() => {\n                setPublicLinkCopied(false);\n            }, COPIED_TOOLTIP_DURATION);\n        }\n    }, [publicLinkCopied]);\n\n    const copyPublicLink = () => {\n        copyToClipboard(selectedFilePublicLink ?? '');\n        setPublicLinkCopied(true);\n    };\n\n    const closeMessage = intl.formatMessage({\n        id: 'full_screen_modal.close',\n        defaultMessage: 'Close',\n    });\n    const closeButton = (\n        <WithTooltip\n            title={closeMessage}\n            key='publicLink'\n        >\n            <button\n                className='file-preview-modal-main-actions__action-item'\n                onClick={props.handleModalClose}\n                aria-label={closeMessage}\n            >\n                <i className='icon icon-close'/>\n            </button>\n        </WithTooltip>\n    );\n\n    let publicTooltipMessage;\n    if (publicLinkCopied) {\n        publicTooltipMessage = intl.formatMessage({\n            id: 'file_preview_modal_main_actions.public_link-copied',\n            defaultMessage: 'Public link copied',\n        });\n    } else {\n        publicTooltipMessage = intl.formatMessage({\n            id: 'view_image_popover.publicLink',\n            defaultMessage: 'Get a public link',\n        });\n    }\n    const publicLink = (\n        <WithTooltip\n            key='filePreviewPublicLink'\n            title={publicTooltipMessage}\n        >\n            <a\n                href='#'\n                className='file-preview-modal-main-actions__action-item'\n                onClick={copyPublicLink}\n                aria-label={publicTooltipMessage}\n            >\n                <i className='icon icon-link-variant'/>\n            </a>\n        </WithTooltip>\n    );\n\n    const downloadMessage = intl.formatMessage({\n        id: 'view_image_popover.download',\n        defaultMessage: 'Download',\n    });\n    const download = (\n        <WithTooltip\n            key='download'\n            title={downloadMessage}\n        >\n            <ExternalLink\n                href={props.fileURL}\n                className='file-preview-modal-main-actions__action-item'\n                location='file_preview_modal_main_actions'\n                download={props.filename}\n                aria-label={downloadMessage}\n            >\n                <i className='icon icon-download-outline'/>\n            </ExternalLink>\n        </WithTooltip>\n    );\n\n    const copy = (\n        <CopyButton\n            className='file-preview-modal-main-actions__action-item'\n            isForText={getFileType(props.fileInfo.extension) === FileTypes.TEXT}\n            content={props.content}\n        />\n    );\n    return (\n        <div className='file-preview-modal-main-actions__actions'>\n            {!props.showOnlyClose && props.canCopyContent && copy}\n            {!props.showOnlyClose && props.enablePublicLink && props.showPublicLink && publicLink}\n            {!props.showOnlyClose && props.canDownloadFiles && download}\n            {props.showClose && closeButton}\n        </div>\n    );\n};\n\nFilePreviewModalMainActions.defaultProps = {\n    showOnlyClose: false,\n    showClose: true,\n    showPublicLink: true,\n};\n\nexport default memo(FilePreviewModalMainActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport FilePreviewModalInfo from '../file_preview_modal_info/file_preview_modal_info';\nimport FilePreviewModalMainActions from '../file_preview_modal_main_actions/file_preview_modal_main_actions';\nimport type {LinkInfo} from '../types';\n\nimport './file_preview_modal_footer.scss';\n\ninterface Props {\n    fileInfo: FileInfo | LinkInfo;\n    filename: string;\n    post?: Post;\n    fileURL: string;\n    showPublicLink?: boolean;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    isExternalFile: boolean;\n    handleModalClose: () => void;\n    canCopyContent: boolean;\n    content: string;\n}\n\nconst FilePreviewModalFooter: React.FC<Props> = ({post, ...actionProps}: Props) => {\n    return (\n        <div className='file-preview-modal-footer'>\n            <FilePreviewModalInfo\n                showFileName={false}\n                post={post}\n                filename={actionProps.filename}\n            />\n            <FilePreviewModalMainActions\n                {...actionProps}\n                showClose={false}\n                showOnlyClose={false}\n            />\n        </div>\n    );\n};\nexport default memo(FilePreviewModalFooter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport './file_preview_modal_main_nav.scss';\n\nimport WithTooltip from 'components/with_tooltip';\n\ninterface Props {\n    fileIndex: number;\n    totalFiles: number;\n    handlePrev: () => void;\n    handleNext: () => void;\n}\n\nconst FilePreviewModalMainNav: React.FC<Props> = (props: Props) => {\n    const leftArrow = (\n        <WithTooltip\n            key='previewArrowLeft'\n            title={\n                <FormattedMessage\n                    id='generic.close'\n                    defaultMessage='Close'\n                />\n            }\n        >\n            <button\n                id='previewArrowLeft'\n                className='file_preview_modal_main_nav__prev'\n                onClick={props.handlePrev}\n            >\n                <i className='icon icon-chevron-left'/>\n            </button>\n        </WithTooltip>\n    );\n\n    const rightArrow = (\n        <WithTooltip\n            key='publicLink'\n            title={\n                <FormattedMessage\n                    id='generic.next'\n                    defaultMessage='Next'\n                />\n            }\n        >\n            <button\n                id='previewArrowRight'\n                className='file_preview_modal_main_nav__next'\n                onClick={props.handleNext}\n            >\n                <i className='icon icon-chevron-right'/>\n            </button>\n        </WithTooltip>\n    );\n    return (\n        <div className='file_preview_modal_main_nav'>\n            {leftArrow}\n            <span className='modal-bar-file-count'>\n                <FormattedMessage\n                    id='file_preview_modal_main_nav.file'\n                    defaultMessage='{count, number} of {total, number}'\n                    values={{\n                        count: (props.fileIndex + 1),\n                        total: props.totalFiles,\n                    }}\n                />\n            </span>\n            {rightArrow}\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalMainNav);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport FilePreviewModalInfo from '../file_preview_modal_info/file_preview_modal_info';\nimport FilePreviewModalMainActions from '../file_preview_modal_main_actions/file_preview_modal_main_actions';\nimport FilePreviewModalMainNav from '../file_preview_modal_main_nav/file_preview_modal_main_nav';\nimport type {LinkInfo} from '../types';\n\nimport './file_preview_modal_header.scss';\n\ninterface Props {\n    isMobileView: boolean;\n    fileIndex: number;\n    fileInfo: FileInfo | LinkInfo;\n    totalFiles: number;\n    filename: string;\n    post: Post;\n    fileURL: string;\n    showPublicLink?: boolean;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    canCopyContent: boolean;\n    isExternalFile: boolean;\n    handlePrev: () => void;\n    handleNext: () => void;\n    handleModalClose: () => void;\n    content: string;\n}\n\nconst FilePreviewModalHeader: React.FC<Props> = ({post, totalFiles, fileIndex, ...actionProps}: Props) => {\n    let mainActions = (<div/>);\n    if (totalFiles > 1) {\n        mainActions = (\n            <FilePreviewModalMainNav\n                totalFiles={totalFiles}\n                fileIndex={fileIndex}\n                handlePrev={actionProps.handlePrev}\n                handleNext={actionProps.handleNext}\n            />\n        );\n    }\n    const actions = (\n        <FilePreviewModalMainActions\n            {...actionProps}\n            showOnlyClose={actionProps.isMobileView}\n        />);\n    return (\n        <div className='file-preview-modal-header'>\n            {actionProps.isMobileView && actions}\n            {!actionProps.isMobileView &&\n            <FilePreviewModalInfo\n                showFileName={true}\n                post={post}\n                filename={actionProps.filename}\n            />\n            }\n            {mainActions}\n            {!actionProps.isMobileView && actions}\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalHeader);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getFilePreviewUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {FileTypes} from 'utils/constants';\nimport {getFileType} from 'utils/utils';\n\nimport './image_preview.scss';\n\ninterface Props {\n    fileInfo: FileInfo;\n    canDownloadFiles: boolean;\n}\n\nexport default function ImagePreview({fileInfo, canDownloadFiles}: Props) {\n    const isExternalFile = !fileInfo.id;\n\n    let fileUrl;\n    let previewUrl;\n    if (isExternalFile) {\n        fileUrl = fileInfo.link;\n        previewUrl = fileInfo.link;\n    } else {\n        fileUrl = getFileDownloadUrl(fileInfo.id);\n        previewUrl = fileInfo.has_preview_image ? getFilePreviewUrl(fileInfo.id) : fileUrl;\n    }\n\n    if (!canDownloadFiles) {\n        return <img src={previewUrl}/>;\n    }\n\n    let conditionalSVGStyleAttribute;\n    if (getFileType(fileInfo.extension) === FileTypes.SVG) {\n        conditionalSVGStyleAttribute = {\n            width: fileInfo.width,\n            height: 'auto',\n        };\n    }\n\n    return (\n        <a\n            className='image_preview'\n            href='#'\n        >\n            <img\n                className='image_preview__image'\n                loading='lazy'\n                data-testid='imagePreview'\n                alt={'preview url image'}\n                src={previewUrl}\n                style={conditionalSVGStyleAttribute}\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport {ZoomSettings} from 'utils/constants';\n\nexport interface Props {\n    scale?: number;\n    showZoomControls?: boolean;\n    handleZoomIn?: () => void;\n    handleZoomOut?: () => void;\n    handleZoomReset?: () => void;\n}\n\nexport default class PopoverBar extends React.PureComponent<Props> {\n    render() {\n        const zoomControls: React.ReactNode[] = [];\n        let wrappedZoomControls: React.ReactNode = null;\n        if (this.props.showZoomControls) {\n            let zoomResetButton;\n            let zoomOutButton;\n            let zoomInButton;\n\n            if (this.props.scale && this.props.scale > ZoomSettings.MIN_SCALE) {\n                zoomOutButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomOut && debounce(this.props.handleZoomOut, 300, {maxWait: 300})}>\n                            <i className='icon icon-minus'/>\n                        </a>\n                    </span>\n                );\n            } else {\n                zoomOutButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-minus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <WithTooltip\n                    key='zoomOut'\n                    title={\n                        <FormattedMessage\n                            id='view_image.zoom_out'\n                            defaultMessage='Zoom Out'\n                        />\n                    }\n                >\n                    {zoomOutButton}\n                </WithTooltip>,\n            );\n\n            if (this.props.scale && this.props.scale > ZoomSettings.DEFAULT_SCALE) {\n                zoomResetButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomReset}>\n                            <i className='icon icon-magnify-minus'/>\n                        </a>\n                    </span>\n                );\n            } else if (this.props.scale && this.props.scale < ZoomSettings.DEFAULT_SCALE) {\n                zoomResetButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomReset}>\n                            <i className='icon icon-magnify-plus'/>\n                        </a>\n                    </span>\n                );\n            } else {\n                zoomResetButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-magnify-minus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <WithTooltip\n                    key='zoomReset'\n                    title={\n                        <FormattedMessage\n                            id='view_image.zoom_reset'\n                            defaultMessage='Reset Zoom'\n                        />\n                    }\n                >\n                    {zoomResetButton}\n                </WithTooltip>,\n            );\n\n            if (this.props.scale && this.props.scale < ZoomSettings.MAX_SCALE) {\n                zoomInButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomIn && debounce(this.props.handleZoomIn, 300, {maxWait: 300})}>\n                            <i className='icon icon-plus'/>\n                        </a>\n                    </span>\n\n                );\n            } else {\n                zoomInButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-plus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <WithTooltip\n                    key='zoomIn'\n                    title={\n                        <FormattedMessage\n                            id='view_image.zoom_in'\n                            defaultMessage='Zoom In'\n                        />\n                    }\n                >\n                    {zoomInButton}\n                </WithTooltip>,\n            );\n\n            wrappedZoomControls = (\n                <div className='modal-column'>\n                    {zoomControls}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='fileCountFooter'\n                className='modal-button-bar file-preview-modal__zoom-bar'\n            >\n                {wrappedZoomControls}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PopoverBar from './popover_bar';\n\nexport default PopoverBar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getFileDownloadUrl, getFilePreviewUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport ArchivedPreview from 'components/archived_preview';\nimport AudioVideoPreview from 'components/audio_video_preview';\nimport CodePreview from 'components/code_preview';\nimport FileInfoPreview from 'components/file_info_preview';\nimport LoadingImagePreview from 'components/loading_image_preview';\nimport type {Props as PDFPreviewComponentProps} from 'components/pdf_preview';\n\nimport Constants, {FileTypes, ZoomSettings} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport * as Utils from 'utils/utils';\n\nimport type {FilePreviewComponent} from 'types/store/plugins';\n\nimport FilePreviewModalFooter from './file_preview_modal_footer/file_preview_modal_footer';\nimport FilePreviewModalHeader from './file_preview_modal_header/file_preview_modal_header';\nimport ImagePreview from './image_preview';\nimport PopoverBar from './popover_bar';\nimport {isFileInfo, isLinkInfo} from './types';\nimport type {LinkInfo} from './types';\n\nimport './file_preview_modal.scss';\n\nconst PDFPreview = React.lazy<React.ComponentType<PDFPreviewComponentProps>>(() => import('components/pdf_preview'));\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport type Props = {\n    canDownloadFiles: boolean;\n    enablePublicLink: boolean;\n\n    /**\n     * List of FileInfo to view\n     **/\n    fileInfos: Array<FileInfo | LinkInfo>;\n\n    isMobileView: boolean;\n    pluginFilePreviewComponents: FilePreviewComponent[];\n    onExited: () => void;\n\n    /**\n     * The id of the post the files are attached to\n     */\n    postId?: string;\n\n    /**\n     * The post the files are attached to\n     * Either postId or post can be passed to FilePreviewModal\n     */\n    post?: Post;\n\n    /**\n     * The index number of starting image\n     **/\n    startIndex: number;\n}\n\ntype State = {\n    show: boolean;\n    imageIndex: number;\n    imageHeight: number | string;\n    loaded: Record<number, boolean>;\n    prevFileInfosCount: number;\n    progress: Record<number, number>;\n    showCloseBtn: boolean;\n    showZoomControls: boolean;\n    scale: Record<number, number>;\n    content: string;\n}\n\nexport default class FilePreviewModal extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        fileInfos: [],\n        startIndex: 0,\n        pluginFilePreviewComponents: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n            imageIndex: this.props.startIndex,\n            imageHeight: '100%',\n            loaded: Utils.fillRecord(false, this.props.fileInfos.length),\n            prevFileInfosCount: 0,\n            progress: Utils.fillRecord(0, this.props.fileInfos.length),\n            showCloseBtn: false,\n            showZoomControls: false,\n            scale: Utils.fillRecord(ZoomSettings.DEFAULT_SCALE, this.props.fileInfos.length),\n            content: '',\n        };\n    }\n\n    handleNext = () => {\n        let id = this.state.imageIndex + 1;\n        if (id > this.props.fileInfos.length - 1) {\n            id = 0;\n        }\n        this.showImage(id);\n    };\n\n    handlePrev = () => {\n        let id = this.state.imageIndex - 1;\n        if (id < 0) {\n            id = this.props.fileInfos.length - 1;\n        }\n        this.showImage(id);\n    };\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        if (Keyboard.isKeyPressed(e, KeyCodes.RIGHT)) {\n            this.handleNext();\n        } else if (Keyboard.isKeyPressed(e, KeyCodes.LEFT)) {\n            this.handlePrev();\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        this.showImage(this.props.startIndex);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keyup', this.handleKeyPress);\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const updatedState: Partial<State> = {};\n        if (props.fileInfos[state.imageIndex] && props.fileInfos[state.imageIndex].extension === FileTypes.PDF) {\n            updatedState.showZoomControls = true;\n        } else {\n            updatedState.showZoomControls = false;\n        }\n        if (props.fileInfos.length !== state.prevFileInfosCount) {\n            updatedState.loaded = Utils.fillRecord(false, props.fileInfos.length);\n            updatedState.progress = Utils.fillRecord(0, props.fileInfos.length);\n            updatedState.prevFileInfosCount = props.fileInfos.length;\n        }\n        return Object.keys(updatedState).length ? updatedState : null;\n    }\n\n    showImage = (id: number) => {\n        this.setState({imageIndex: id});\n\n        const imageHeight = window.innerHeight - 100;\n        this.setState({imageHeight});\n\n        if (!this.state.loaded[id]) {\n            this.loadImage(id);\n        }\n    };\n\n    isImageUrl = (url: string): boolean => {\n        const fileType = Utils.getFileType(url);\n        return fileType === FileTypes.IMAGE || fileType === FileTypes.SVG;\n    };\n\n    private getFileTypeFromFileInfo = (fileInfo: FileInfo | LinkInfo): typeof FileTypes[keyof typeof FileTypes] => {\n        if (isFileInfo(fileInfo)) {\n            return Utils.getFileType(fileInfo.extension);\n        }\n\n        if (isLinkInfo(fileInfo)) {\n            // if extension is not available or is longer than 5 characters, use the link to determine the file type\n            const maxLenghtExtension = 11; // applescript is the longest extension\n            const extensionOrLink = fileInfo.extension && fileInfo.extension.length <= maxLenghtExtension ? fileInfo.extension : fileInfo.link;\n            return Utils.getFileType(extensionOrLink);\n        }\n\n        return FileTypes.OTHER;\n    };\n\n    loadImage = (index: number) => {\n        const fileInfo = this.props.fileInfos[index];\n        if (isFileInfo(fileInfo) && fileInfo.archived) {\n            this.handleImageLoaded(index);\n            return;\n        }\n\n        // Determine file type using helper method\n        const fileType = this.getFileTypeFromFileInfo(fileInfo);\n\n        // Check if this is an image\n        const isImage = fileType === FileTypes.IMAGE;\n\n        if (isImage) {\n            let previewUrl = '';\n            if (isFileInfo(fileInfo)) {\n                if (fileInfo.has_preview_image) {\n                    previewUrl = getFilePreviewUrl(fileInfo.id);\n                } else {\n                    // some images (eg animated gifs) just show the file itself and not a preview\n                    previewUrl = getFileUrl(fileInfo.id);\n                }\n            } else if (isLinkInfo(fileInfo)) {\n                // For LinkInfo, use the link directly\n                previewUrl = fileInfo.link;\n            }\n\n            Utils.loadImage(\n                previewUrl,\n                () => this.handleImageLoaded(index),\n                (completedPercentage) => this.handleImageProgress(index, completedPercentage),\n            );\n        } else {\n            // there's nothing to load for non-image files\n            this.handleImageLoaded(index);\n        }\n    };\n\n    handleImageLoaded = (index: number) => {\n        this.setState((prevState) => {\n            return {\n                loaded: {\n                    ...prevState.loaded,\n                    [index]: true,\n                },\n            };\n        });\n    };\n\n    handleImageProgress = (index: number, completedPercentage: number) => {\n        this.setState((prevState) => {\n            return {\n                progress: {\n                    ...prevState.progress,\n                    [index]: completedPercentage,\n                },\n            };\n        });\n    };\n\n    onMouseEnterImage = () => {\n        this.setState({showCloseBtn: true});\n    };\n\n    onMouseLeaveImage = () => {\n        this.setState({showCloseBtn: false});\n    };\n\n    setScale = (index: number, scale: number) => {\n        this.setState((prevState) => {\n            return {\n                scale: {\n                    ...prevState.scale,\n                    [index]: scale,\n                },\n            };\n        });\n    };\n\n    handleZoomIn = () => {\n        let newScale = this.state.scale[this.state.imageIndex];\n        newScale = Math.min(newScale + ZoomSettings.SCALE_DELTA, ZoomSettings.MAX_SCALE);\n        this.setScale(this.state.imageIndex, newScale);\n    };\n\n    handleZoomOut = () => {\n        let newScale = this.state.scale[this.state.imageIndex];\n        newScale = Math.max(newScale - ZoomSettings.SCALE_DELTA, ZoomSettings.MIN_SCALE);\n        this.setScale(this.state.imageIndex, newScale);\n    };\n\n    handleZoomReset = () => {\n        this.setScale(this.state.imageIndex, ZoomSettings.DEFAULT_SCALE);\n    };\n\n    handleModalClose = () => {\n        this.setState({show: false});\n    };\n\n    getContent = (content: string) => {\n        this.setState({content});\n    };\n\n    handleBgClose = (e: React.MouseEvent) => {\n        if (e.currentTarget === e.target) {\n            this.handleModalClose();\n        }\n    };\n\n    render() {\n        if (this.props.fileInfos.length < 1 || this.props.fileInfos.length - 1 < this.state.imageIndex) {\n            return null;\n        }\n\n        const fileInfo = this.props.fileInfos[this.state.imageIndex];\n\n        // Determine file type using helper method\n        const fileType = this.getFileTypeFromFileInfo(fileInfo);\n\n        let showPublicLink;\n        let fileName;\n        let fileUrl;\n        let fileDownloadUrl;\n        let isExternalFile;\n        let canCopyContent = false;\n        if (isFileInfo(fileInfo)) {\n            showPublicLink = true;\n            fileName = fileInfo.name;\n            fileUrl = getFileUrl(fileInfo.id);\n            fileDownloadUrl = getFileDownloadUrl(fileInfo.id);\n            isExternalFile = false;\n        } else {\n            showPublicLink = false;\n            fileName = fileInfo.name || fileInfo.link;\n            fileUrl = fileInfo.link;\n            fileDownloadUrl = fileInfo.link;\n            isExternalFile = true;\n        }\n\n        let dialogClassName = 'a11y__modal modal-image file-preview-modal';\n\n        let content;\n        let zoomBar;\n\n        if (isFileInfo(fileInfo) && fileInfo.archived) {\n            content = (\n                <ArchivedPreview\n                    fileInfo={fileInfo}\n                />\n            );\n        }\n\n        if (!isFileInfo(fileInfo) || !fileInfo.archived) {\n            if (this.state.loaded[this.state.imageIndex]) {\n                if (fileType === FileTypes.IMAGE || fileType === FileTypes.SVG) {\n                    content = (\n                        <ImagePreview\n                            fileInfo={fileInfo as FileInfo}\n                            canDownloadFiles={this.props.canDownloadFiles}\n                        />\n                    );\n                } else if (fileType === FileTypes.VIDEO || fileType === FileTypes.AUDIO) {\n                    content = (\n                        <AudioVideoPreview\n                            fileInfo={fileInfo as FileInfo}\n                            fileUrl={fileUrl}\n                        />\n                    );\n                } else if (fileType === FileTypes.PDF) {\n                    content = (\n                        <div\n                            className='file-preview-modal__scrollable'\n                            onClick={this.handleBgClose}\n                        >\n                            <React.Suspense fallback={null}>\n                                <PDFPreview\n                                    fileInfo={fileInfo as FileInfo}\n                                    fileUrl={fileUrl}\n                                    scale={this.state.scale[this.state.imageIndex]}\n                                    handleBgClose={this.handleBgClose}\n                                />\n                            </React.Suspense>\n                        </div>\n                    );\n                    zoomBar = (\n                        <PopoverBar\n                            scale={this.state.scale[this.state.imageIndex]}\n                            showZoomControls={this.state.showZoomControls}\n                            handleZoomIn={this.handleZoomIn}\n                            handleZoomOut={this.handleZoomOut}\n                            handleZoomReset={this.handleZoomReset}\n                        />\n                    );\n                } else if (CodePreview.supports(fileInfo)) {\n                    dialogClassName += ' modal-code';\n                    canCopyContent = true;\n                    content = (\n                        <CodePreview\n                            fileInfo={fileInfo as FileInfo}\n                            fileUrl={fileUrl}\n                            getContent={this.getContent}\n                            className='file-preview-modal__code-preview'\n                        />\n                    );\n                } else {\n                    content = (\n                        <FileInfoPreview\n                            fileInfo={fileInfo as FileInfo}\n                            fileUrl={fileUrl}\n                        />\n                    );\n                }\n            } else {\n                // display a progress indicator when the preview for an image is still loading\n                const progress = Math.floor(this.state.progress[this.state.imageIndex]);\n\n                content = (\n                    <LoadingImagePreview\n                        loading={\n                            <FormattedMessage\n                                id='view_image.loading'\n                                defaultMessage='Loading'\n                            />\n                        }\n                        progress={progress}\n                    />\n                );\n            }\n        }\n\n        if (isFileInfo(fileInfo) && !fileInfo.archived) {\n            for (const preview of this.props.pluginFilePreviewComponents) {\n                if (preview.override(fileInfo, this.props.post)) {\n                    content = (\n                        <preview.component\n                            fileInfo={fileInfo}\n                            post={this.props.post}\n                            onModalDismissed={this.handleModalClose}\n                        />\n                    );\n                    break;\n                }\n            }\n        }\n\n        return (\n            <Modal\n                show={this.state.show}\n                onHide={this.handleModalClose}\n                onExited={this.props.onExited}\n                className='modal-image file-preview-modal'\n                dialogClassName={dialogClassName}\n                animation={true}\n                backdrop={false}\n                role='none'\n                style={{paddingLeft: 0}}\n                aria-labelledby='viewImageModalLabel'\n            >\n                <Modal.Body className='file-preview-modal__body'>\n                    <div\n                        className={'modal-image__wrapper'}\n                        onClick={this.handleModalClose}\n                    >\n                        <div\n                            className='file-preview-modal__main-ctr'\n                            onMouseEnter={this.onMouseEnterImage}\n                            onMouseLeave={this.onMouseLeaveImage}\n                            onClick={(e) => e.stopPropagation()}\n                        >\n                            <Modal.Title\n                                componentClass='div'\n                                id='viewImageModalLabel'\n                                className='file-preview-modal__title'\n                            >\n                                <FilePreviewModalHeader\n                                    isMobileView={this.props.isMobileView}\n                                    post={this.props.post!}\n                                    showPublicLink={showPublicLink}\n                                    fileIndex={this.state.imageIndex}\n                                    totalFiles={this.props.fileInfos?.length}\n                                    filename={fileName}\n                                    fileURL={fileDownloadUrl}\n                                    fileInfo={fileInfo}\n                                    enablePublicLink={this.props.enablePublicLink}\n                                    canDownloadFiles={this.props.canDownloadFiles}\n                                    canCopyContent={canCopyContent}\n                                    isExternalFile={isExternalFile}\n                                    handlePrev={this.handlePrev}\n                                    handleNext={this.handleNext}\n                                    handleModalClose={this.handleModalClose}\n                                    content={this.state.content}\n                                />\n                                {zoomBar}\n                            </Modal.Title>\n                            <div\n                                className={classNames(\n                                    'file-preview-modal__content',\n                                    {\n                                        'file-preview-modal__content-scrollable': (!isFileInfo(fileInfo) || !fileInfo.archived) && this.state.loaded[this.state.imageIndex] && (fileType === FileTypes.PDF),\n                                    },\n                                )}\n                                onClick={this.handleBgClose}\n                            >\n                                {content}\n                            </div>\n                            { this.props.isMobileView &&\n                                <FilePreviewModalFooter\n                                    post={this.props.post}\n                                    showPublicLink={showPublicLink}\n                                    filename={fileName}\n                                    fileURL={fileDownloadUrl}\n                                    fileInfo={fileInfo}\n                                    enablePublicLink={this.props.enablePublicLink}\n                                    canDownloadFiles={this.props.canDownloadFiles}\n                                    canCopyContent={canCopyContent}\n                                    isExternalFile={isExternalFile}\n                                    handleModalClose={this.handleModalClose}\n                                    content={this.state.content}\n                                />\n                            }\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n"],"names":["FileInfoPreview","_ref","fileInfo","fileUrl","canDownloadFiles","intl","useIntl","infoParts","extension","push","formatMessage","id","defaultMessage","toUpperCase","size","Utils","infoString","join","preview","React","className","href","alt","src","name","propTypes","_pt","isRequired","connect","state","config","getConfig","props","ArchiveOutlineIcon","color","AudioVideoPreview","constructor","super","_defineProperty","video","this","videoRef","current","document","createElement","setState","canPlay","pause","currentTime","componentDidMount","handleFileInfoChanged","sourceRef","addEventListener","handleLoadError","once","componentDidUpdate","prevProps","render","width","Constants","WEB_VIDEO_WIDTH","height","WEB_VIDEO_HEIGHT","isMobileView","MOBILE_VIDEO_WIDTH","MOBILE_VIDEO_HEIGHT","key","ref","controls","getIsMobileView","CodePreview","async","lang","CODE_PREVIEW_MAX_FILE_SIZE","data","fetch","text","handleReceivedCode","e","handleReceivedError","_this$props$getConten","_this$props","code","Data","nodeName","XMLSerializer","serializeToString","getContent","call","highlighted","SyntaxHighlighting","loading","success","getCode","getDerivedStateFromProps","prevFileUrl","usedLanguage","supports","Boolean","LoadingSpinner","language","concat","dangerouslySetInnerHTML","__html","displayNameGetter","makeGetDisplayName","FilePreviewModalInfo","user","useSelector","_props$post$user_id","_props$post","selectUser","post","user_id","channel","_props$post$channel_i","_props$post2","makeGetChannel","getChannel","channel_id","_props$post$user_id2","_props$post3","info","channelName","FormattedMessage","values","display_name","showFileName","filename","Object","keys","length","Avatar","url","imageURLForUser","last_picture_update","memo","isFileInfo","isLinkInfo","link","FilePreviewModalMainActions","selectedFilePublicLink","_selectFilePublicLink","selectFilePublicLink","dispatch","useDispatch","publicLinkCopied","setPublicLinkCopied","useState","useEffect","enablePublicLink","getFilePublicLink","setTimeout","closeMessage","closeButton","WithTooltip","title","onClick","handleModalClose","publicTooltipMessage","publicLink","copyPublicLink","copyToClipboard","downloadMessage","download","ExternalLink","fileURL","location","copy","CopyButton","isForText","getFileType","FileTypes","TEXT","content","showOnlyClose","canCopyContent","showPublicLink","showClose","defaultProps","FilePreviewModalFooter","actionProps","_objectWithoutProperties","_excluded","assign","isExternalFile","FilePreviewModalMainNav","leftArrow","handlePrev","rightArrow","handleNext","count","fileIndex","total","totalFiles","FilePreviewModalHeader","mainActions","actions","ImagePreview","previewUrl","conditionalSVGStyleAttribute","getFileDownloadUrl","has_preview_image","getFilePreviewUrl","SVG","style","PopoverBar","zoomControls","wrappedZoomControls","showZoomControls","zoomResetButton","zoomOutButton","zoomInButton","scale","ZoomSettings","MIN_SCALE","handleZoomOut","debounce","maxWait","DEFAULT_SCALE","handleZoomReset","MAX_SCALE","handleZoomIn","PDFPreview","KeyCodes","FilePreviewModal","imageIndex","fileInfos","showImage","Keyboard","RIGHT","LEFT","imageHeight","window","innerHeight","loaded","loadImage","fileType","IMAGE","maxLenghtExtension","extensionOrLink","OTHER","index","archived","handleImageLoaded","getFileTypeFromFileInfo","getFileUrl","completedPercentage","handleImageProgress","prevState","_objectSpread","progress","showCloseBtn","newScale","Math","min","SCALE_DELTA","setScale","max","show","currentTarget","target","startIndex","prevFileInfosCount","handleKeyPress","componentWillUnmount","removeEventListener","updatedState","PDF","_this$props$fileInfos","fileName","fileDownloadUrl","zoomBar","dialogClassName","ArchivedPreview","VIDEO","AUDIO","handleBgClose","fallback","floor","LoadingImagePreview","pluginFilePreviewComponents","override","component","onModalDismissed","Modal","onHide","onExited","animation","backdrop","role","paddingLeft","Body","onMouseEnter","onMouseEnterImage","onMouseLeave","onMouseLeaveImage","stopPropagation","Title","componentClass","classNames","postId"],"sourceRoot":""}