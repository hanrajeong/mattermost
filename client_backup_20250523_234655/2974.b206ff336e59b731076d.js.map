{"version":3,"file":"2974.b206ff336e59b731076d.js","mappings":"0LAUA,MAAMA,EAAqB,CACvBC,yBCNG,SAAkCC,GACrC,IAAIC,EAAgBD,EACpB,IAAKA,EAAY,CACb,MAAME,EAAQC,OAAOC,WAErB,QAAQ,GACR,KAAKF,EAAQG,EAAAA,GAAUC,qBAAuBJ,GAASG,EAAAA,GAAUE,qBAC7DN,EAAgBO,EAAAA,GAAYC,mBAC5B,MAEJ,KAAKP,EAAQG,EAAAA,GAAUK,qBAAuBR,GAASG,EAAAA,GAAUC,oBAC7DL,EAAgBO,EAAAA,GAAYG,YAC5B,MAEJ,KAAKT,GAASG,EAAAA,GAAUK,oBACpBT,EAAgBO,EAAAA,GAAYI,YAC5B,MAEJ,QACIX,EAAgBO,EAAAA,GAAYK,aAGpC,CACA,MAAO,CACHC,KAAMC,EAAAA,GAAYC,uBAClBC,KAAMhB,EAEd,GDhBA,GAFkBiB,EAAAA,EAAAA,SAAQ,KAAMpB,EAEhC,EELe,SAA2BqB,GACtC,MAAMC,GAAoBC,EAAAA,EAAAA,QAAOlB,OAAOmB,WAAW,eAADC,OAAgBlB,EAAAA,GAAUE,qBAAuB,EAAC,SAC9FiB,GAAyBH,EAAAA,EAAAA,QAAOlB,OAAOmB,WAAW,eAADC,OAAgBlB,EAAAA,GAAUC,oBAAsB,EAAC,wBAAAiB,OAAuBlB,EAAAA,GAAUE,qBAAoB,SACvJkB,GAAmBJ,EAAAA,EAAAA,QAAOlB,OAAOmB,WAAW,eAADC,OAAgBlB,EAAAA,GAAUK,oBAAsB,EAAC,wBAAAa,OAAuBlB,EAAAA,GAAUC,oBAAmB,SAChJoB,GAAmBL,EAAAA,EAAAA,QAAOlB,OAAOmB,WAAW,eAADC,OAAgBlB,EAAAA,GAAUK,oBAAmB,SAExFiB,GAAmBC,EAAAA,EAAAA,cAAY,KAC7BR,EAAkBS,QAAQC,QAC1BX,EAAMpB,yBAAyBS,EAAAA,GAAYK,cACpCW,EAAuBK,QAAQC,QACtCX,EAAMpB,yBAAyBS,EAAAA,GAAYC,oBACpCgB,EAAiBI,QAAQC,QAChCX,EAAMpB,yBAAyBS,EAAAA,GAAYG,aACpCe,EAAiBG,QAAQC,SAChCX,EAAMpB,yBAAyBS,EAAAA,GAAYI,YAC/C,GACD,IA0BH,OAxBAmB,EAAAA,EAAAA,kBAAgB,KACZJ,GAAkB,GACnB,CAACA,KAEJK,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAA+BC,IAC7BA,EAAEJ,SACFH,GACJ,EAQJ,OALAP,EAAkBS,QAAQM,iBAAiB,SAAUF,GACrDT,EAAuBK,QAAQM,iBAAiB,SAAUF,GAC1DR,EAAiBI,QAAQM,iBAAiB,SAAUF,GACpDP,EAAiBG,QAAQM,iBAAiB,SAAUF,GAE7C,KACHb,EAAkBS,QAAQO,oBAAoB,SAAUH,GACxDT,EAAuBK,QAAQO,oBAAoB,SAAUH,GAC7DR,EAAiBI,QAAQO,oBAAoB,SAAUH,GACvDP,EAAiBG,QAAQO,oBAAoB,SAAUH,EAA4B,CACtF,GACF,CAACN,IAEG,IACX,G","sources":["webpack://mattermost-webapp/./src/components/mobile_view_watcher/index.ts","webpack://mattermost-webapp/./src/actions/views/browser.ts","webpack://mattermost-webapp/./src/components/mobile_view_watcher/mobile_view_watcher.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {emitBrowserWindowResized} from 'actions/views/browser';\n\nimport MobileViewWatcher from './mobile_view_watcher';\n\nconst mapDispatchToProps = {\n    emitBrowserWindowResized,\n};\n\nconst connector = connect(null, mapDispatchToProps);\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\nexport default connector(MobileViewWatcher);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Constants, ActionTypes, WindowSizes} from 'utils/constants';\n\nexport function emitBrowserWindowResized(windowSize?: string) {\n    let newWindowSize = windowSize;\n    if (!windowSize) {\n        const width = window.innerWidth;\n\n        switch (true) {\n        case width > Constants.TABLET_SCREEN_WIDTH && width <= Constants.DESKTOP_SCREEN_WIDTH: {\n            newWindowSize = WindowSizes.SMALL_DESKTOP_VIEW;\n            break;\n        }\n        case width > Constants.MOBILE_SCREEN_WIDTH && width <= Constants.TABLET_SCREEN_WIDTH: {\n            newWindowSize = WindowSizes.TABLET_VIEW;\n            break;\n        }\n        case width <= Constants.MOBILE_SCREEN_WIDTH: {\n            newWindowSize = WindowSizes.MOBILE_VIEW;\n            break;\n        }\n        default: {\n            newWindowSize = WindowSizes.DESKTOP_VIEW; // width > Constants.DESKTOP_SCREEN_WIDTH\n        }\n        }\n    }\n    return {\n        type: ActionTypes.BROWSER_WINDOW_RESIZED,\n        data: newWindowSize,\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useCallback, useEffect, useLayoutEffect, useRef} from 'react';\n\nimport Constants, {WindowSizes} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\ntype Props = PropsFromRedux;\n\nexport default function MobileViewWatcher(props: Props) {\n    const desktopMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.DESKTOP_SCREEN_WIDTH + 1}px)`));\n    const smallDesktopMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.TABLET_SCREEN_WIDTH + 1}px) and (max-width: ${Constants.DESKTOP_SCREEN_WIDTH}px)`));\n    const tabletMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.MOBILE_SCREEN_WIDTH + 1}px) and (max-width: ${Constants.TABLET_SCREEN_WIDTH}px)`));\n    const mobileMediaQuery = useRef(window.matchMedia(`(max-width: ${Constants.MOBILE_SCREEN_WIDTH}px)`));\n\n    const updateWindowSize = useCallback(() => {\n        if (desktopMediaQuery.current.matches) {\n            props.emitBrowserWindowResized(WindowSizes.DESKTOP_VIEW);\n        } else if (smallDesktopMediaQuery.current.matches) {\n            props.emitBrowserWindowResized(WindowSizes.SMALL_DESKTOP_VIEW);\n        } else if (tabletMediaQuery.current.matches) {\n            props.emitBrowserWindowResized(WindowSizes.TABLET_VIEW);\n        } else if (mobileMediaQuery.current.matches) {\n            props.emitBrowserWindowResized(WindowSizes.MOBILE_VIEW);\n        }\n    }, []);\n\n    useLayoutEffect(() => {\n        updateWindowSize();\n    }, [updateWindowSize]);\n\n    useEffect(() => {\n        const handleMediaQueryChangeEvent = (e: MediaQueryListEvent) => {\n            if (e.matches) {\n                updateWindowSize();\n            }\n        };\n\n        desktopMediaQuery.current.addEventListener('change', handleMediaQueryChangeEvent);\n        smallDesktopMediaQuery.current.addEventListener('change', handleMediaQueryChangeEvent);\n        tabletMediaQuery.current.addEventListener('change', handleMediaQueryChangeEvent);\n        mobileMediaQuery.current.addEventListener('change', handleMediaQueryChangeEvent);\n\n        return () => {\n            desktopMediaQuery.current.removeEventListener('change', handleMediaQueryChangeEvent);\n            smallDesktopMediaQuery.current.removeEventListener('change', handleMediaQueryChangeEvent);\n            tabletMediaQuery.current.removeEventListener('change', handleMediaQueryChangeEvent);\n            mobileMediaQuery.current.removeEventListener('change', handleMediaQueryChangeEvent);\n        };\n    }, [updateWindowSize]);\n\n    return null;\n}\n"],"names":["mapDispatchToProps","emitBrowserWindowResized","windowSize","newWindowSize","width","window","innerWidth","Constants","TABLET_SCREEN_WIDTH","DESKTOP_SCREEN_WIDTH","WindowSizes","SMALL_DESKTOP_VIEW","MOBILE_SCREEN_WIDTH","TABLET_VIEW","MOBILE_VIEW","DESKTOP_VIEW","type","ActionTypes","BROWSER_WINDOW_RESIZED","data","connect","props","desktopMediaQuery","useRef","matchMedia","concat","smallDesktopMediaQuery","tabletMediaQuery","mobileMediaQuery","updateWindowSize","useCallback","current","matches","useLayoutEffect","useEffect","handleMediaQueryChangeEvent","e","addEventListener","removeEventListener"],"sourceRoot":""}