{"version":3,"file":"9163.f4ca5e3fa224864982d7.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/settings_sidebar/settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/settings_sidebar/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nexport type Tab = {\n    icon: string | {url: string};\n    iconTitle: string;\n    name: string;\n    uiName: string;\n    newGroup?: boolean;\n    display?: boolean; // Controls whether the tab is displayed, defaults to true\n}\n\nexport type Props = {\n    activeTab?: string;\n    tabs: Tab[];\n    pluginTabs?: Tab[];\n    updateTab: (name: string) => void;\n    isMobileView: boolean;\n};\n\nexport default class SettingsSidebar extends React.PureComponent<Props> {\n    buttonRefs: Map<string, RefObject<HTMLButtonElement>>;\n\n    constructor(props: Props) {\n        super(props);\n\n        // Initialize an empty Map for button refs\n        this.buttonRefs = new Map();\n\n        // Initialize refs for all tabs\n        this.initializeButtonRefs(props.tabs, props.pluginTabs);\n    }\n\n    // Initialize or update button refs for all tabs\n    private initializeButtonRefs(tabs: Tab[], pluginTabs?: Tab[]) {\n        // Clear existing refs if reinitializing\n        this.buttonRefs.clear();\n\n        // Create refs for all tabs, regardless of display status\n        tabs.forEach((tab) => {\n            this.buttonRefs.set(tab.name, React.createRef());\n        });\n\n        // Create refs for plugin tabs if they exist\n        if (pluginTabs?.length) {\n            pluginTabs.forEach((tab) => {\n                this.buttonRefs.set(tab.name, React.createRef());\n            });\n        }\n    }\n\n    // Update refs when props change\n    componentDidUpdate(prevProps: Props) {\n        // Check if tabs or pluginTabs have changed\n        if (prevProps.tabs !== this.props.tabs || prevProps.pluginTabs !== this.props.pluginTabs) {\n            this.initializeButtonRefs(this.props.tabs, this.props.pluginTabs);\n        }\n    }\n\n    // Get all visible tabs in the correct order\n    private getVisibleTabs(): Tab[] {\n        const visibleTabs = this.props.tabs.filter((tab) => tab.display !== false);\n        const visiblePluginTabs = this.props.pluginTabs?.filter((tab) => tab.display !== false) || [];\n        return [...visibleTabs, ...visiblePluginTabs];\n    }\n\n    public handleClick = (tab: Tab, e: React.MouseEvent) => {\n        e.preventDefault();\n        this.props.updateTab(tab.name);\n        (e.target as Element).closest('.settings-modal')?.classList.add('display--content');\n    };\n\n    public handleKeyUp = (tab: Tab, e: React.KeyboardEvent) => {\n        // Only handle UP and DOWN arrow keys\n        if (!isKeyPressed(e, Constants.KeyCodes.UP) && !isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n            return;\n        }\n\n        // Prevent default behavior\n        e.preventDefault();\n\n        // Get all visible tabs\n        const visibleTabs = this.getVisibleTabs();\n\n        // If no tabs are visible, do nothing\n        if (visibleTabs.length === 0) {\n            return;\n        }\n\n        // Find the current tab's position in the visible tabs\n        const currentIndex = visibleTabs.findIndex((t) => t.name === tab.name);\n\n        // If tab not found in visible tabs, do nothing\n        if (currentIndex === -1) {\n            return;\n        }\n\n        let nextIndex: number;\n\n        // Determine which tab to focus based on the key pressed\n        if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n            // UP arrow key - move to previous tab or wrap to last\n            nextIndex = currentIndex > 0 ? currentIndex - 1 : visibleTabs.length - 1;\n        } else {\n            // DOWN arrow key - move to next tab or wrap to first\n            nextIndex = currentIndex < visibleTabs.length - 1 ? currentIndex + 1 : 0;\n        }\n\n        // Get the target tab\n        const targetTab = visibleTabs[nextIndex];\n\n        // Update the active tab\n        this.props.updateTab(targetTab.name);\n\n        // Focus the target tab button directly\n        const targetButton = this.buttonRefs.get(targetTab.name)?.current;\n        if (targetButton) {\n            // Use direct focus instead of a11yFocus to ensure Cypress tests can detect the focus change\n            targetButton.focus();\n        }\n    };\n\n    private renderTab(tab: Tab) {\n        const key = `${tab.name}_li`;\n        const isActive = this.props.activeTab === tab.name;\n\n        let icon;\n        if (typeof tab.icon === 'string') {\n            icon = (\n                <i\n                    className={tab.icon}\n                    title={tab.iconTitle}\n                />\n            );\n        } else {\n            icon = (\n                <img\n                    src={tab.icon.url}\n                    alt={tab.iconTitle}\n                    className='icon'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment key={key}>\n                {tab.newGroup && <hr/>}\n                <button\n                    data-testid={`${tab.name}-tab-button`}\n                    ref={this.buttonRefs.get(tab.name)}\n                    id={`${tab.name}Button`}\n                    className={classNames('cursor--pointer style--none nav-pills__tab', {active: isActive})}\n                    onClick={this.handleClick.bind(null, tab)}\n                    onKeyUp={this.handleKeyUp.bind(null, tab)}\n                    aria-label={tab.uiName.toLowerCase()}\n                    role='tab'\n                    aria-selected={isActive}\n                    tabIndex={!isActive && !this.props.isMobileView ? -1 : 0}\n                    aria-controls={`${tab.name}Settings`}\n                >\n                    {icon}\n                    {tab.uiName}\n                </button>\n            </React.Fragment>\n        );\n    }\n\n    public render() {\n        // Filter regular tabs and plugin tabs separately for rendering\n        const visibleTabs = this.props.tabs.filter((tab) => tab.display !== false);\n\n        // Map regular tabs\n        const tabList = visibleTabs.map((tab) => this.renderTab(tab));\n\n        let pluginTabList: React.ReactNode;\n        if (this.props.pluginTabs?.length) {\n            const visiblePluginTabs = this.props.pluginTabs.filter((tab) => tab.display !== false);\n            if (visiblePluginTabs.length) {\n                pluginTabList = (\n                    <>\n                        <hr/>\n                        <div\n                            role='group'\n                            aria-labelledby='userSettingsModal.pluginPreferences.header'\n                        >\n                            <div\n                                key={'plugin preferences heading'}\n                                role='heading'\n                                className={'header'}\n                                aria-level={3}\n                                id='userSettingsModal_pluginPreferences_header'\n                            >\n                                <FormattedMessage\n                                    id={'userSettingsModal.pluginPreferences.header'}\n                                    defaultMessage={'PLUGIN PREFERENCES'}\n                                />\n                            </div>\n                            {visiblePluginTabs.map((tab) => this.renderTab(tab))}\n                        </div>\n                    </>\n                );\n            }\n        }\n\n        return (\n            <div\n                id='tabList'\n                className='nav nav-pills nav-stacked'\n                role='tablist'\n                aria-orientation='vertical'\n            >\n                <div role='group'>\n                    {tabList}\n                </div>\n                {pluginTabList}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport SettingsSidebar from './settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SettingsSidebar);\n"],"names":["SettingsSidebar","React","constructor","props","super","_defineProperty","tab","e","_closest","preventDefault","this","updateTab","name","target","closest","classList","add","_this$buttonRefs$get","isKeyPressed","Constants","KeyCodes","UP","DOWN","visibleTabs","getVisibleTabs","length","currentIndex","findIndex","t","nextIndex","targetTab","targetButton","buttonRefs","get","current","focus","Map","initializeButtonRefs","tabs","pluginTabs","clear","forEach","set","componentDidUpdate","prevProps","_this$props$pluginTab","filter","display","renderTab","key","concat","isActive","activeTab","icon","className","title","iconTitle","src","url","alt","newGroup","ref","id","classNames","active","onClick","handleClick","bind","onKeyUp","handleKeyUp","uiName","toLowerCase","role","tabIndex","isMobileView","render","_this$props$pluginTab2","tabList","map","pluginTabList","visiblePluginTabs","FormattedMessage","defaultMessage","connect","state","getIsMobileView"],"sourceRoot":""}