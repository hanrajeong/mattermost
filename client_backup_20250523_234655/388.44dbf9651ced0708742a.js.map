{"version":3,"file":"388.44dbf9651ced0708742a.js","mappings":"wRAoBA,MAAMA,EAA2D,CAC7DC,YAAY,EACZC,kBAAkB,GAOP,SAASC,EAAaC,GAAqB,IAApB,UAACC,GAAiBD,EACpD,MAAME,GAAoBC,EAAAA,EAAAA,cAAaC,IAAuBC,EAAAA,EAAAA,IAAiBD,EAAOH,KAChFK,GAAoBH,EAAAA,EAAAA,cAAaC,IAAuBG,EAAAA,EAAAA,GAAwBH,EAAOH,KACvFO,GAAmBC,EAAAA,EAAAA,QAAwB,OAC1CC,EAAeC,GAAoBC,IAAAA,UAAwB,IAElEC,EAAAA,EAAAA,YAAU,KACN,IAAKL,EAAiBM,QAClB,OAGJ,MAAMC,EAA4BP,EAAiBM,QAAQE,YAAcR,EAAiBM,QAAQG,YAC5FC,EAA0BV,EAAiBM,QAAQK,aAAeX,EAAiBM,QAAQM,aAEjGT,EAAiBI,GAA6BG,EAAwB,GACvE,CAAChB,aAAiB,EAAjBA,EAAmBmB,OAEvB,MACMC,GADOC,EAAAA,EAAAA,WAC2BC,cAAc,CAACC,GAAI,4BAA6BC,eAAgB,wBAElGC,EACFf,IAAAA,cAACgB,EAAAA,EAAQ,CACLC,QAAS3B,aAAiB,EAAjBA,EAAmBmB,KAC5BS,QAASlC,IAIXmC,GAAqBC,EAAAA,EAAAA,UAAQ,KACxB,CACHC,gBAAiB/B,aAAiB,EAAjBA,EAAmBgC,oBAEzC,CAAChC,IAEEiC,GAAyBH,EAAAA,EAAAA,UAAQ,KAEnC,IAAK9B,IAAsBA,EAAkBgC,iBACzC,MAAO,CAAC,EAGZ,MAAME,GAAQC,EAAAA,EAAAA,IAA0BnC,EAAkBgC,kBAM1D,MAAO,CACHE,QACA,8BAA+BA,EAClC,GACF,CAAClC,IAEJ,OAAKA,GAAsBI,EAKvBM,IAAAA,cAAC0B,EAAAA,EAAW,CACRC,MAAOZ,EACPa,UAAU,uBACVC,YAAY,EACZC,gBAAgB,SAChBC,UAAWjC,GAEXE,IAAAA,cAAA,OACI4B,UAAU,iBACV,cAAY,2BACZI,MAAOb,GAEPnB,IAAAA,cAAA,QACI,cAAY,sBACZ4B,UAAU,sBACV,aAAYlB,EACZsB,MAAOT,EACPU,IAAKrC,GAEJmB,KAvBN,IA4Bf,CAAC5B,EAAA+C,UAAA,CAnFG7C,UAAS8C,IAAAA,OAAAC,W,2FChBN,MAAMC,EAA8B7C,IACvC,MAAM8C,GAAUC,EAAAA,EAAAA,IAAW/C,GAC3B,OAAO8C,aAAO,EAAPA,EAASE,gBAAiBC,EAAAA,GAAQC,qBAAqB,EAGrD/C,EAA0BA,CAACH,EAAoBH,KAGxD,IAFgBgD,EAA2B7C,GAGvC,OAAO,EAGX,MAAMF,GAAoBG,EAAAA,EAAAA,IAAiBD,EAAOH,GAC5CsD,GAAUC,EAAAA,EAAAA,GAAWpD,EAAOH,GAElC,OAD2BwD,QAAQF,IAAYA,EAAQG,OAASL,EAAAA,GAAQM,cAAgBJ,EAAQG,OAASL,EAAAA,GAAQO,oBACpFC,EAAAA,EAAAA,GAAqB3D,EAAkB,C,gBCrBxE4D,EAAQ,EACR,SAA8BC,GAC1B,QAAKA,IAGEN,QAAQM,EAAOC,UAAYP,QAAQM,EAAO1C,OAASoC,QAAQM,EAAO7B,kBAC7E,C","sources":["webpack://mattermost-webapp/./src/components/channel_banner/channel_banner.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/selectors/entities/channel_banner.ts","webpack://mattermost-webapp/../platform/types/lib/channels.js"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useMemo, useRef} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {selectShowChannelBanner} from 'mattermost-redux/selectors/entities/channel_banner';\nimport {getChannelBanner} from 'mattermost-redux/selectors/entities/channels';\nimport {getContrastingSimpleColor} from 'mattermost-redux/utils/theme_utils';\n\nimport Markdown from 'components/markdown';\nimport WithTooltip from 'components/with_tooltip';\n\nimport type {TextFormattingOptions} from 'utils/text_formatting';\n\nimport type {GlobalState} from 'types/store';\n\nimport './style.scss';\n\nconst markdownRenderingOptions: Partial<TextFormattingOptions> = {\n    singleline: true,\n    mentionHighlight: false,\n};\n\ntype Props = {\n    channelId: string;\n}\n\nexport default function ChannelBanner({channelId}: Props) {\n    const channelBannerInfo = useSelector((state: GlobalState) => getChannelBanner(state, channelId));\n    const showChannelBanner = useSelector((state: GlobalState) => selectShowChannelBanner(state, channelId));\n    const textContainerRef = useRef<HTMLSpanElement>(null);\n    const [tooltipNeeded, setTooltipNeeded] = React.useState<boolean>(false);\n\n    useEffect(() => {\n        if (!textContainerRef.current) {\n            return;\n        }\n\n        const isOverflowingHorizontally = textContainerRef.current.offsetWidth < textContainerRef.current.scrollWidth;\n        const isOverflowingVertically = textContainerRef.current.offsetHeight < textContainerRef.current.scrollHeight;\n\n        setTooltipNeeded(isOverflowingHorizontally || isOverflowingVertically);\n    }, [channelBannerInfo?.text]);\n\n    const intl = useIntl();\n    const channelBannerTextAriaLabel = intl.formatMessage({id: 'channel_banner.aria_label', defaultMessage: 'Channel banner text'});\n\n    const content = (\n        <Markdown\n            message={channelBannerInfo?.text}\n            options={markdownRenderingOptions}\n        />\n    );\n\n    const channelBannerStyle = useMemo(() => {\n        return {\n            backgroundColor: channelBannerInfo?.background_color,\n        };\n    }, [channelBannerInfo]);\n\n    const channelBannerTextStyle = useMemo(() => {\n        // this is just to satisfy type checks.\n        if (!channelBannerInfo || !channelBannerInfo.background_color) {\n            return {};\n        }\n\n        const color = getContrastingSimpleColor(channelBannerInfo.background_color);\n\n        // The CSS variable is declared here, and is being used in the stylesheet being imported in this component.\n        // This is needed because if the user sets background color a share of blue similar to the default link color,\n        // the markdown link will become almost invisible. So, the CSS variable declared here is used\n        // to set the color of the text in anchor tag in the stylesheet.\n        return {\n            color,\n            '--channel-banner-text-color': color,\n        };\n    }, [channelBannerInfo]);\n\n    if (!channelBannerInfo || !showChannelBanner) {\n        return null;\n    }\n\n    return (\n        <WithTooltip\n            title={content}\n            className='channelBannerTooltip'\n            delayClose={true}\n            forcedPlacement='bottom'\n            disabled={!tooltipNeeded}\n        >\n            <div\n                className='channel_banner'\n                data-testid='channel_banner_container'\n                style={channelBannerStyle}\n            >\n                <span\n                    data-testid='channel_banner_text'\n                    className='channel_banner_text'\n                    aria-label={channelBannerTextAriaLabel}\n                    style={channelBannerTextStyle}\n                    ref={textContainerRef}\n                >\n                    {content}\n                </span>\n            </div>\n        </WithTooltip>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {channelBannerEnabled} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {General} from 'mattermost-redux/constants';\nimport {getChannel, getChannelBanner} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nexport const selectChannelBannerEnabled = (state: GlobalState): boolean => {\n    const license = getLicense(state);\n    return license?.SkuShortName === General.SKUEnterpriseAdvanced;\n};\n\nexport const selectShowChannelBanner = (state: GlobalState, channelId: string): boolean => {\n    const enabled = selectChannelBannerEnabled(state);\n\n    if (!enabled) {\n        return false;\n    }\n\n    const channelBannerInfo = getChannelBanner(state, channelId);\n    const channel = getChannel(state, channelId);\n    const isValidChannelType = Boolean(channel && (channel.type === General.OPEN_CHANNEL || channel.type === General.PRIVATE_CHANNEL));\n    return isValidChannelType && channelBannerEnabled(channelBannerInfo);\n};\n","\"use strict\";\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.channelBannerEnabled = channelBannerEnabled;\nfunction channelBannerEnabled(banner) {\n    if (!banner) {\n        return false;\n    }\n    return Boolean(banner.enabled) && Boolean(banner.text) && Boolean(banner.background_color);\n}\n"],"names":["markdownRenderingOptions","singleline","mentionHighlight","ChannelBanner","_ref","channelId","channelBannerInfo","useSelector","state","getChannelBanner","showChannelBanner","selectShowChannelBanner","textContainerRef","useRef","tooltipNeeded","setTooltipNeeded","React","useEffect","current","isOverflowingHorizontally","offsetWidth","scrollWidth","isOverflowingVertically","offsetHeight","scrollHeight","text","channelBannerTextAriaLabel","useIntl","formatMessage","id","defaultMessage","content","Markdown","message","options","channelBannerStyle","useMemo","backgroundColor","background_color","channelBannerTextStyle","color","getContrastingSimpleColor","WithTooltip","title","className","delayClose","forcedPlacement","disabled","style","ref","propTypes","_pt","isRequired","selectChannelBannerEnabled","license","getLicense","SkuShortName","General","SKUEnterpriseAdvanced","channel","getChannel","Boolean","type","OPEN_CHANNEL","PRIVATE_CHANNEL","channelBannerEnabled","exports","banner","enabled"],"sourceRoot":""}