{"version":3,"file":"7392.9c0e4bc4376304dcc35a.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/app_bar/new_channel_with_board_tour_tip.tsx","webpack://mattermost-webapp/./src/components/channel_header/components/header_icon_wrapper.tsx","webpack://mattermost-webapp/./src/components/common/hooks/useCopyText.ts","webpack://mattermost-webapp/./src/components/common/svg_images_components/alert_svg.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/components/editable_area.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/components/linelimiter.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area_channel.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area_dm.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area_gm.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/header.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/menu.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/top_buttons.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/channel_info_rhs.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/index.ts","webpack://mattermost-webapp/./src/components/channel_members_rhs/action_bar.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/header.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/search.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/channel_members_rhs.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/index.ts","webpack://mattermost-webapp/./src/components/search_results_header/search_results_header.tsx","webpack://mattermost-webapp/./src/components/search_results_header/index.tsx","webpack://mattermost-webapp/./src/components/info_toast/info_toast.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/restore_post_modal.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/edited_post_item/edited_post_item.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/edited_post_item/index.ts","webpack://mattermost-webapp/./src/components/post_edit_history/post_edit_history.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/index.ts","webpack://mattermost-webapp/./src/components/resizable_sidebar/resizable_rhs/index.tsx","webpack://mattermost-webapp/./src/components/rhs_card_header/rhs_card_header.tsx","webpack://mattermost-webapp/./src/components/rhs_card_header/index.tsx","webpack://mattermost-webapp/./src/components/rhs_card/rhs_card.tsx","webpack://mattermost-webapp/./src/components/rhs_card/index.ts","webpack://mattermost-webapp/./src/components/tours/crt_tour/crt_threads_pane_tutorial_tip.tsx","webpack://mattermost-webapp/./src/components/rhs_header_post/rhs_header_post.tsx","webpack://mattermost-webapp/./src/components/rhs_header_post/index.ts","webpack://mattermost-webapp/./src/components/rhs_thread/rhs_thread.tsx","webpack://mattermost-webapp/./src/components/rhs_thread/index.ts","webpack://mattermost-webapp/./src/components/suggestion/search_suggestion_list.tsx","webpack://mattermost-webapp/./src/components/suggestion/suggestion_date.tsx","webpack://mattermost-webapp/./src/components/search_bar/search_bar.tsx","webpack://mattermost-webapp/./src/components/search_hint/search_hint.tsx","webpack://mattermost-webapp/./src/components/file_search_results/file_search_result_item.tsx","webpack://mattermost-webapp/./src/components/file_search_results/index.tsx","webpack://mattermost-webapp/./src/components/search_results/files_filter_menu.tsx","webpack://mattermost-webapp/./src/components/search_results/messages_or_files_selector.tsx","webpack://mattermost-webapp/./src/components/search_results/post_search_results_item.tsx","webpack://mattermost-webapp/./src/components/search_results/search_limits_banner.tsx","webpack://mattermost-webapp/./src/components/search_results/search_results.tsx","webpack://mattermost-webapp/./src/components/search_results/index.tsx","webpack://mattermost-webapp/./src/components/search/search.tsx","webpack://mattermost-webapp/./src/components/search/index.tsx","webpack://mattermost-webapp/./src/plugins/rhs_plugin/rhs_plugin.tsx","webpack://mattermost-webapp/./src/plugins/rhs_plugin/index.ts","webpack://mattermost-webapp/./src/components/sidebar_right/sidebar_right.tsx","webpack://mattermost-webapp/./src/components/sidebar_right/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/search_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport type {Placement} from 'tippy.js';\n\nimport {TourTip, useMeasurePunchouts} from '@mattermost/components';\n\nimport {setNewChannelWithBoardPreference} from 'mattermost-redux/actions/boards';\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {showNewChannelWithBoardPulsatingDot} from 'selectors/plugins';\n\ntype Props = {\n    pulsatingDotPlacement?: Omit<Placement, 'auto'| 'auto-end'>;\n    pulsatingDotTranslate?: {x: number; y: number};\n}\n\nconst NewChannelWithBoardTourTip = ({\n    pulsatingDotPlacement = 'left',\n    pulsatingDotTranslate,\n}: Props): JSX.Element | null => {\n    const dispatch = useDispatch();\n    const showTip = useSelector(showNewChannelWithBoardPulsatingDot);\n\n    const title = (\n        <FormattedMessage\n            id='newChannelWithBoard.tutorialTip.title'\n            defaultMessage='Access linked boards from the App Bar'\n        />\n    );\n\n    const screen = (\n        <FormattedMessage\n            id='newChannelWithBoard.tutorialTip.description'\n            defaultMessage='The board you just created can be quickly accessed by clicking on the Boards icon in the App bar. You can view the boards that are linked to this channel in the right-hand sidebar and open one in full view.'\n        />\n    );\n\n    const [tipOpened, setTipOpened] = useState(showTip);\n\n    const handleDismiss = useCallback((e: React.MouseEvent) => {\n        e.stopPropagation();\n        setTipOpened(false);\n        dispatch(setNewChannelWithBoardPreference({[Preferences.NEW_CHANNEL_WITH_BOARD_TOUR_SHOWED]: true}));\n    }, []);\n\n    const handleOpen = useCallback((e: React.MouseEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (tipOpened) {\n            dispatch(setNewChannelWithBoardPreference({[Preferences.NEW_CHANNEL_WITH_BOARD_TOUR_SHOWED]: true}));\n            setTipOpened(false);\n        } else {\n            setTipOpened(true);\n        }\n    }, []);\n\n    const overlayPunchOut = useMeasurePunchouts(['app-bar-icon-focalboard'], [], {y: -2, height: 4, x: 0, width: 0});\n\n    if (!showTip) {\n        return null;\n    }\n\n    return (\n        <TourTip\n            show={true}\n            screen={screen}\n            title={title}\n            overlayPunchOut={overlayPunchOut}\n            placement='right-start'\n            pulsatingDotPlacement={pulsatingDotPlacement}\n            step={1}\n            singleTip={true}\n            showOptOut={false}\n            interactivePunchOut={true}\n            handleDismiss={handleDismiss}\n            handleOpen={handleOpen}\n            handlePrevious={handleDismiss}\n            offset={[-30, 5]}\n            pulsatingDotTranslate={pulsatingDotTranslate}\n        />\n    );\n};\n\nexport default NewChannelWithBoardTourTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport NewChannelWithBoardTourTip from 'components/app_bar/new_channel_with_board_tour_tip';\nimport WithTooltip from 'components/with_tooltip';\nimport type {ShortcutDefinition} from 'components/with_tooltip/tooltip_shortcut';\n\nimport {suitePluginIds} from 'utils/constants';\n\ntype Props = {\n\n    /**\n     * ariaLabelOverride lets you override the aria-label which would otherwise use the tooltip text. This typically\n     * shouldn't be needed.\n     */\n    ariaLabelOverride?: string;\n\n    buttonClass?: string;\n    buttonId: string;\n    children: React.ReactNode;\n    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    tooltip: string;\n    tooltipShortcut?: ShortcutDefinition;\n    isRhsOpen?: boolean;\n    pluginId?: string;\n}\n\nconst HeaderIconWrapper = (props: Props) => {\n    const {\n        ariaLabelOverride,\n        buttonClass,\n        buttonId,\n        children,\n        onClick,\n        tooltip: tooltipText,\n        tooltipShortcut,\n        isRhsOpen,\n        pluginId,\n    } = props;\n\n    const boardsEnabled = pluginId === suitePluginIds.focalboard;\n\n    const ariaLabelText = ariaLabelOverride ?? tooltipText;\n\n    return (\n        <>\n            <WithTooltip\n                title={isRhsOpen ? '' : tooltipText}\n                shortcut={tooltipShortcut}\n            >\n                <button\n                    id={buttonId}\n                    aria-label={ariaLabelText}\n                    className={buttonClass || 'channel-header__icon'}\n                    onClick={onClick}\n                >\n                    {children}\n                </button>\n            </WithTooltip>\n            {boardsEnabled &&\n                <NewChannelWithBoardTourTip\n                    pulsatingDotPlacement={'start'}\n                    pulsatingDotTranslate={{x: 0, y: -22}}\n                />\n            }\n        </>\n    );\n};\n\nexport default HeaderIconWrapper;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useRef, useCallback, useState} from 'react';\nimport {defineMessages} from 'react-intl';\n\ntype CopyOptions = {\n    successCopyTimeout?: number;\n    text: string;\n    trackCallback?: () => void;\n};\n\ntype CopyResponse = {\n    copiedRecently: boolean;\n    copyError: boolean;\n    onClick: () => void;\n};\n\nconst DEFAULT_COPY_TIMEOUT = 4000;\n\nexport default function useCopyText({\n    text,\n    successCopyTimeout: successCopyTimeoutReceived,\n    trackCallback,\n}: CopyOptions): CopyResponse {\n    const [copiedRecently, setCopiedRecently] = useState(false);\n    const [copyError, setCopyError] = useState(false);\n    const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n    let successCopyTimeout = DEFAULT_COPY_TIMEOUT;\n    if (successCopyTimeoutReceived || successCopyTimeoutReceived === 0) {\n        successCopyTimeout = successCopyTimeoutReceived;\n    }\n\n    const onClick = useCallback(() => {\n        trackCallback?.();\n\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n            timerRef.current = null;\n        }\n        const clipboard = navigator.clipboard;\n        if (clipboard) {\n            clipboard.writeText(text).\n                then(() => {\n                    setCopiedRecently(true);\n                    setCopyError(false);\n                }).\n                catch(() => {\n                    setCopiedRecently(false);\n                    setCopyError(true);\n                });\n        } else {\n            const textField = document.createElement('textarea');\n            textField.innerText = text;\n            textField.style.position = 'fixed';\n            textField.style.opacity = '0';\n\n            document.body.appendChild(textField);\n            textField.select();\n\n            try {\n                const success = document.execCommand('copy');\n                setCopiedRecently(success);\n                setCopyError(!success);\n            } catch (err) {\n                setCopiedRecently(false);\n                setCopyError(true);\n            }\n            textField.remove();\n        }\n\n        timerRef.current = setTimeout(() => {\n            setCopiedRecently(false);\n            setCopyError(false);\n        }, successCopyTimeout);\n    }, [successCopyTimeout, text, trackCallback]);\n\n    return {\n        copiedRecently,\n        copyError,\n        onClick,\n    };\n}\n\nexport const messages = defineMessages({\n    copy: {id: 'copy_text.copy', defaultMessage: 'Copy'},\n    copied: {id: 'copy_text.copied', defaultMessage: 'Copied'},\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width: number;\n    height: number;\n};\n\nconst AlertSvg = (props: SvgProps) => (\n    <svg\n        width={props.width ? props.width.toString() : '87'}\n        height={props.height ? props.height.toString() : '70'}\n        viewBox='0 0 87 70'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <rect\n            x='8.00098'\n            y='7'\n            width='72'\n            height='24'\n            rx='3.75'\n            fill='var(--button-bg)'\n            fillOpacity='0.12'\n        />\n        <rect\n            x='0.000976562'\n            y='34'\n            width='87'\n            height='25'\n            rx='3.75'\n            fill='var(--button-bg)'\n            fillOpacity='0.12'\n        />\n        <path\n            d='M38.3214 2.31098C39.4303 0.112261 42.5697 0.112256 43.6786 2.31098L71.7146 57.899C72.7209 59.8943 71.2707 62.25 69.0359 62.25H12.9641C10.7294 62.25 9.27912 59.8943 10.2854 57.899L38.3214 2.31098Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M40.3214 4.31098C41.4303 2.11226 44.5697 2.11226 45.6786 4.31098L73.7146 59.899C74.7209 61.8943 73.2707 64.25 71.0359 64.25H14.9641C12.7294 64.25 11.2791 61.8943 12.2854 59.899L40.3214 4.31098Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M43.2322 2.53614L71.2681 58.1242C72.1067 59.7869 70.8982 61.75 69.0359 61.75H12.9641C11.1018 61.75 9.89327 59.7869 10.7319 58.1242L38.7678 2.53614C39.6919 0.703873 42.3081 0.703871 43.2322 2.53614Z'\n            stroke='var(--center-channel-color)'\n        />\n        <path\n            d='M49.542 4.23999L52.8888 10.72M74.922 53.38L68.5073 40.96L66.8339 37.72L64.6027 33.4L61.5348 27.46M59.3036 23.14L55.12 15.04'\n            stroke='var(--center-channel-color)'\n            strokeOpacity='0.56'\n            strokeWidth='1.08'\n            strokeLinecap='round'\n        />\n        <path\n            d='M38.0164 25.2833L40.2971 39.9301C40.3191 40.2208 40.4554 40.4927 40.6786 40.6912C40.9018 40.8897 41.1954 41 41.5002 41C41.8051 41 42.0986 40.8897 42.3219 40.6912C42.5451 40.4927 42.6814 40.2208 42.7034 39.9301L44.984 25.2833C45.3987 19.5722 37.5955 19.5722 38.0164 25.2833Z'\n            fill='#3F4350'\n        />\n        <path\n            d='M41.0072 47C41.798 47.0014 42.5706 47.2372 43.2275 47.6776C43.8843 48.118 44.396 48.7432 44.6976 49.4742C44.9993 50.2053 45.0774 51.0093 44.9222 51.7848C44.7671 52.5602 44.3856 53.2723 43.8259 53.831C43.2662 54.3897 42.5535 54.7699 41.7777 54.9237C41.002 55.0774 40.1981 54.9978 39.4676 54.6948C38.7371 54.3919 38.1128 53.8792 37.6736 53.2215C37.2344 52.5639 37 51.7908 37 51C37 50.4741 37.1036 49.9534 37.3051 49.4676C37.5066 48.9818 37.8019 48.5406 38.1741 48.169C38.5463 47.7975 38.9881 47.503 39.4743 47.3024C39.9604 47.1018 40.4813 46.9991 41.0072 47Z'\n            fill='#3F4350'\n        />\n        <path\n            d='M48.4619 68.5H70.0619'\n            stroke='var(--center-channel-color)'\n            strokeOpacity='0.56'\n            strokeWidth='1.08'\n            strokeLinecap='round'\n        />\n        <path\n            d='M10.001 50L26.001 19'\n            stroke='var(--center-channel-color)'\n            strokeOpacity='0.56'\n            strokeWidth='1.08'\n            strokeLinecap='round'\n        />\n    </svg>\n\n);\n\nexport default AlertSvg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nconst EditButton = styled.button`\n    border: 0;\n    margin: 0px;\n    padding: 0px;\n    border-radius: 4px;\n    background: rgba(var(--center-channel-color-rgb), 0.04);\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    &:hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n    }\n    width: 24px;\n    height: 24px;\n    i.icon {\n        font-size: 14.4px;\n    }\n`;\n\nconst EmptyPlace = styled.button`\n    padding: 0px;\n    background: transparent;\n    border: 0px;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    i {\n        display: none;\n        font-size: 14px;\n        margin-left: 4px;\n    }\n    &:hover {\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        i {\n            display: inline-block;\n        }\n    }\n`;\n\ninterface EditableAreaProps {\n    editable: boolean;\n    content: React.ReactNode;\n    emptyLabel: string;\n    onEdit: () => void;\n    className?: string;\n}\n\nconst EditableAreaBase = ({editable, content, emptyLabel, onEdit, className}: EditableAreaProps) => {\n    const {formatMessage} = useIntl();\n\n    const allowEditArea = editable && content;\n\n    return (\n        <div className={className}>\n            <div className='EditableArea__content'>\n                {content}\n                {!content && editable && (\n                    <EmptyPlace\n                        onClick={onEdit}\n                        aria-label={formatMessage({id: 'channel_info_rhs.edit_link', defaultMessage: 'Edit'})}\n                    >\n                        {emptyLabel}\n                        <i className='icon icon-pencil-outline edit-icon'/>\n                    </EmptyPlace>\n                )}\n            </div>\n            <div className='EditableArea__edit'>\n                {allowEditArea ? (\n                    <EditButton\n                        onClick={onEdit}\n                        aria-label={formatMessage({id: 'channel_info_rhs.edit_link', defaultMessage: 'Edit'})}\n                    >\n                        <i className='icon icon-pencil-outline'/>\n                    </EditButton>\n                ) : ''}\n            </div>\n        </div>\n    );\n};\n\nconst EditableArea = styled(EditableAreaBase)`\n    display: flex;\n    &>.EditableArea__content {\n        flex: 1;\n        p:last-child {\n            margin-bottom:0;\n        }\n    }\n    &:hover {\n        &>.EditableArea__edit {\n            visibility: visible;\n        }\n    }\n\n    &>.EditableArea__edit {\n        visibility: hidden;\n        width: 24px;\n    }\n`;\n\nexport default EditableArea;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useRef, useState} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport styled from 'styled-components';\n\ninterface LineLimiterProps {\n    children: React.ReactNode;\n    maxLines: number;\n    lineHeight: number;\n    moreText: string;\n    lessText: string;\n    className?: string;\n    errorMargin?: number;\n}\n\nconst LineLimiterBase = ({children, maxLines, lineHeight, moreText, lessText, errorMargin = 0.1, className}: LineLimiterProps) => {\n    const maxLineHeight = maxLines * lineHeight;\n\n    const [needLimiter, setNeedLimiter] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [maxHeight, setMaxHeight] = useState('inherit');\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref === null || ref.current === null) {\n            return;\n        }\n\n        const contentHeight = ref.current.scrollHeight;\n        const margin = maxLineHeight * errorMargin;\n        if (contentHeight > (maxLineHeight + margin)) {\n            setNeedLimiter(true);\n\n            if (open) {\n                setMaxHeight(`${contentHeight}px`);\n            } else {\n                setMaxHeight(`${maxLineHeight}px`);\n            }\n        } else {\n            setNeedLimiter(false);\n            setMaxHeight('inherit');\n        }\n    }, [children, open]);\n\n    return (\n        <CSSTransition\n            in={open}\n            timeout={500}\n            classNames='LineLimiter--Transition-'\n        >\n            <>\n                <div\n                    className={className}\n                    style={{maxHeight}}\n                >\n                    <div>\n                        <div ref={ref}>{children}</div>\n                    </div>\n                </div>\n                {needLimiter && (\n                    <ToggleButton\n                        className='LineLimiter__toggler'\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? lessText : moreText}\n                    </ToggleButton>\n                )}\n            </>\n        </CSSTransition>\n    );\n};\n\nconst ToggleButton = styled.button`\n    border: 0px;\n    background-color: var(--center-channel-bg);\n    color: var(--button-bg);\n    padding: 0;\n    margin: 0;\n`;\n\nconst LineLimiter = styled(LineLimiterBase)<LineLimiterProps>`\n    transition: max-height 0.5s ease;\n    line-height: ${(props) => props.lineHeight}px;\n    overflow: hidden;\n\n    p {\n        margin-bottom: ${(props) => props.lineHeight}px;\n    }\n\n    span[data-emoticon] {\n        max-height: ${(props) => props.lineHeight}px;\n        .emoticon {\n            max-height: ${(props) => props.lineHeight}px;\n            min-height: ${(props) => props.lineHeight}px;\n         }\n    }\n\n    .markdown-inline-img__container img.markdown-inline-img {\n        max-height: ${(props) => props.lineHeight}px !important;\n        margin-top: 0 !important;\n        margin-bottom: 0 !important;\n    }\n\n    & > * {\n       overflow: hidden;\n    }\n`;\n\nexport default LineLimiter;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Markdown from 'components/markdown';\n\nimport EditableArea from './components/editable_area';\nimport LineLimiter from './components/linelimiter';\n\nconst ChannelId = styled.div`\n    margin-bottom: 12px;\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.02em;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\nconst ChannelPurpose = styled.div`\n    margin-bottom: 12px;\n    &.ChannelPurpose--is-dm {\n        margin-bottom: 16px;\n    }\n`;\n\nconst ChannelDescriptionHeading = styled.div`\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 16px;\n    letter-spacing: 0.24px;\n    text-transform: uppercase;\n    padding: 6px 0px;\n`;\n\nconst ChannelHeader = styled.div`\n    margin-bottom: 12px;\n`;\n\ninterface Props {\n    channel: Channel;\n    canEditChannelProperties: boolean;\n    actions: {\n        editChannelPurpose: () => void;\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutAreaChannel = ({channel, canEditChannelProperties, actions}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            {(channel.purpose || canEditChannelProperties) && (\n                <ChannelPurpose>\n                    <ChannelDescriptionHeading>\n                        {formatMessage({id: 'channel_info_rhs.about_area.channel_purpose.heading', defaultMessage: 'Channel Purpose'})}\n                    </ChannelDescriptionHeading>\n                    <EditableArea\n                        editable={canEditChannelProperties}\n                        content={channel.purpose && (\n                            <LineLimiter\n                                maxLines={4}\n                                lineHeight={20}\n                                moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_purpose.line_limiter.more', defaultMessage: 'more'})}\n                                lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_purpose.line_limiter.less', defaultMessage: 'less'})}\n                            >\n                                <Markdown message={channel.purpose}/>\n                            </LineLimiter>\n                        )}\n                        onEdit={actions.editChannelPurpose}\n                        emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_purpose', defaultMessage: 'Add a channel purpose'})}\n                    />\n                </ChannelPurpose>\n            )}\n\n            {(channel.header || canEditChannelProperties) && (\n                <ChannelHeader>\n                    <ChannelDescriptionHeading>\n                        {formatMessage({id: 'channel_info_rhs.about_area.channel_header.heading', defaultMessage: 'Channel Header'})}\n                    </ChannelDescriptionHeading>\n                    <EditableArea\n                        content={channel.header && (\n                            <LineLimiter\n                                maxLines={4}\n                                lineHeight={20}\n                                moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.more', defaultMessage: 'more'})}\n                                lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.less', defaultMessage: 'less'})}\n                            >\n                                <Markdown message={channel.header}/>\n                            </LineLimiter>\n                        )}\n                        editable={canEditChannelProperties}\n                        onEdit={actions.editChannelHeader}\n                        emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_header', defaultMessage: 'Add a channel header'})}\n                    />\n                </ChannelHeader>\n            )}\n\n            <ChannelId>\n                {formatMessage({id: 'channel_info_rhs.about_area_id', defaultMessage: 'ID:'})} {channel.id}\n            </ChannelId>\n        </>\n    );\n};\n\nexport default AboutAreaChannel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport Markdown from 'components/markdown';\nimport ProfilePicture from 'components/profile_picture';\nimport BotTag from 'components/widgets/tag/bot_tag';\nimport GuestTag from 'components/widgets/tag/guest_tag';\n\nimport type {DMUser} from './channel_info_rhs';\nimport EditableArea from './components/editable_area';\nimport LineLimiter from './components/linelimiter';\n\nconst Username = styled.p`\n    font-family: Metropolis, sans-serif;\n    font-size: 18px;\n    line-height: 24px;\n    color: rgb(var(--center-channel-color-rgb));\n    font-weight: 600;\n    margin: 0;\n`;\n\nconst ChannelHeader = styled.div`\n    margin-bottom: 12px;\n`;\n\nconst UserInfoContainer = styled.div`\n    display: flex;\n    align-items: center;\n    margin-bottom: 12px;\n`;\n\nconst UserAvatar = styled.div`\n    .status {\n        bottom: 0;\n        right: 0;\n        height: 18px;\n        width: 18px;\n        & svg {\n            min-height: 14.4px;\n        }\n    }\n`;\n\nconst UserInfo = styled.div`\n    margin-left: 12px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst UsernameContainer = styled.div`\n    display: flex;\n    gap: 8px\n`;\n\nconst UserPosition = styled.div`\n    line-height: 20px;\n\n    p {\n        margin-bottom: 0;\n    }\n`;\n\nconst ChannelId = styled.div`\n    margin-bottom: 12px;\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.02em;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\ninterface Props {\n    channel: Channel;\n    dmUser: DMUser;\n    actions: {\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutAreaDM = ({channel, dmUser, actions}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            <UserInfoContainer>\n                <UserAvatar>\n                    <ProfilePicture\n                        src={Client4.getProfilePictureUrl(dmUser.user.id, dmUser.user.last_picture_update)}\n                        isBot={dmUser.user.is_bot}\n                        status={dmUser.status ? dmUser.status : undefined}\n                        username={dmUser.display_name}\n                        userId={dmUser.user.id}\n                        channelId={channel.id}\n                        size='xl'\n                    />\n                </UserAvatar>\n                <UserInfo>\n                    <UsernameContainer>\n                        <Username>{dmUser.display_name}</Username>\n                        {dmUser.user.is_bot && <BotTag/>}\n                        {dmUser.is_guest && <GuestTag/>}\n                    </UsernameContainer>\n                    <UserPosition>\n                        <Markdown message={dmUser.user.is_bot ? dmUser.user.bot_description : dmUser.user.position}/>\n                    </UserPosition>\n                </UserInfo>\n            </UserInfoContainer>\n\n            {!dmUser.user.is_bot && (\n                <ChannelHeader>\n                    <EditableArea\n                        content={channel.header && (\n                            <LineLimiter\n                                maxLines={4}\n                                lineHeight={20}\n                                moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.more', defaultMessage: 'more'})}\n                                lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.less', defaultMessage: 'less'})}\n                            >\n                                <Markdown message={channel.header}/>\n                            </LineLimiter>\n                        )}\n                        editable={true}\n                        onEdit={actions.editChannelHeader}\n                        emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_header', defaultMessage: 'Add a channel header'})}\n                    />\n                </ChannelHeader>\n            )}\n\n            <ChannelId>\n                {formatMessage({id: 'channel_info_rhs.about_area_id', defaultMessage: 'ID:'})} {channel.id}\n            </ChannelId>\n        </>\n    );\n};\n\nexport default AboutAreaDM;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport Markdown from 'components/markdown';\nimport ProfilePicture from 'components/profile_picture';\nimport UserProfileElement from 'components/user_profile';\n\nimport EditableArea from './components/editable_area';\nimport LineLimiter from './components/linelimiter';\n\nconst Usernames = styled.p`\n    font-family: Metropolis, sans-serif;\n    font-size: 18px;\n    line-height: 24px;\n    color: rgb(var(--center-channel-color-rgb));\n    font-weight: 600;\n    margin: 0;\n`;\n\nconst ProfilePictures = styled.div`\n    margin-bottom: 10px;\n`;\n\ninterface ProfilePictureContainerProps {\n    position: number;\n}\n\nconst ProfilePictureContainer = styled.div<ProfilePictureContainerProps>`\n    display: inline-block;\n    position: relative;\n    left: ${(props) => props.position * -15}px;\n\n    & img {\n        border: 2px solid white;\n    }\n`;\n\nconst UsersArea = styled.div`\n    margin-bottom: 12px;\n    &.ChannelPurpose--is-dm {\n        margin-bottom: 16px;\n    }\n`;\n\nconst ChannelHeader = styled.div`\n    margin-bottom: 12px;\n`;\n\nconst ChannelId = styled.div`\n    margin-bottom: 12px;\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.02em;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\ninterface Props {\n    channel: Channel;\n    gmUsers: UserProfile[];\n    actions: {\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutAreaGM = ({channel, gmUsers, actions}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            <UsersArea>\n                <ProfilePictures>\n                    {gmUsers.map((user, idx) => (\n                        <ProfilePictureContainer\n                            key={user.id}\n                            position={idx}\n                        >\n                            <ProfilePicture\n                                src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                                size='xl'\n                                userId={user.id}\n                                username={user.username}\n                                channelId={channel.id}\n                            />\n                        </ProfilePictureContainer>\n                    ))}\n                </ProfilePictures>\n                <Usernames>\n                    {gmUsers.map((user, i, {length}) => (\n                        <React.Fragment key={user.id}>\n                            <UserProfileElement\n                                userId={user.id}\n                                channelId={channel.id}\n                            />\n                            {(i + 1 !== length) && (<span>{', '}</span>)}\n                        </React.Fragment>\n                    ))}\n                </Usernames>\n            </UsersArea>\n\n            <ChannelHeader>\n                <EditableArea\n                    content={channel.header && (\n                        <LineLimiter\n                            maxLines={4}\n                            lineHeight={20}\n                            moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.more', defaultMessage: 'more'})}\n                            lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.less', defaultMessage: 'less'})}\n                        >\n                            <Markdown message={channel.header}/>\n                        </LineLimiter>\n                    )}\n                    editable={true}\n                    onEdit={actions.editChannelHeader}\n                    emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_header', defaultMessage: 'Add a channel header'})}\n                />\n            </ChannelHeader>\n\n            <ChannelId>\n                {formatMessage({id: 'channel_info_rhs.about_area_id', defaultMessage: 'ID:'})} {channel.id}\n            </ChannelId>\n        </>\n    );\n};\n\nexport default AboutAreaGM;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport Constants from 'utils/constants';\n\nimport AboutAreaChannel from './about_area_channel';\nimport AboutAreaDM from './about_area_dm';\nimport AboutAreaGM from './about_area_gm';\nimport type {DMUser} from './channel_info_rhs';\n\nconst Container = styled.div`\n    overflow-wrap: anywhere;\n    padding: 24px;\n    padding-bottom: 12px;\n\n    font-size: 14px;\n    line-height: 20px;\n\n    & .status-wrapper {\n        height: 50px;\n    }\n\n    & .text-empty {\n        padding: 0px;\n        background: transparent;\n        border: 0px;\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n    }\n`;\n\ninterface Props {\n    channel: Channel;\n    dmUser?: DMUser;\n    gmUsers?: UserProfile[];\n    canEditChannelProperties: boolean;\n    actions: {\n        editChannelPurpose: () => void;\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutArea = ({channel, dmUser, gmUsers, canEditChannelProperties, actions}: Props) => {\n    return (\n        <Container>\n            {channel.type === Constants.DM_CHANNEL && dmUser && (\n                <AboutAreaDM\n                    channel={channel}\n                    dmUser={dmUser}\n                    actions={{editChannelHeader: actions.editChannelHeader}}\n                />\n            )}\n            {channel.type === Constants.GM_CHANNEL && gmUsers && (\n                <AboutAreaGM\n                    channel={channel}\n                    gmUsers={gmUsers!}\n                    actions={{editChannelHeader: actions.editChannelHeader}}\n                />\n            )}\n            {[Constants.OPEN_CHANNEL, Constants.PRIVATE_CHANNEL].includes(channel.type) && (\n                <AboutAreaChannel\n                    channel={channel}\n                    canEditChannelProperties={canEditChannelProperties}\n                    actions={actions}\n                />\n            )}\n        </Container>\n    );\n};\n\nexport default AboutArea;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport WithTooltip from 'components/with_tooltip';\n\ninterface Props {\n    channel: Channel;\n    isArchived: boolean;\n    isMobile: boolean;\n    onClose: () => void;\n}\n\nconst Icon = styled.i`\n    font-size:12px;\n`;\n\nconst HeaderTitle = styled.span`\n    line-height: 2.4rem;\n`;\n\nconst Header = ({channel, isArchived, isMobile, onClose}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div className='sidebar--right__header'>\n            <span className='sidebar--right__title'>\n                {isMobile && (\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={onClose}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                )}\n                <HeaderTitle\n                    id='rhsPanelTitle'\n                >\n                    <FormattedMessage\n                        id='channel_info_rhs.header.title'\n                        defaultMessage='Info'\n                    />\n                </HeaderTitle>\n\n                {channel.display_name &&\n                <span\n                    className='style--none sidebar--right__title__subtitle'\n                >\n                    {isArchived && (<Icon className='icon icon-archive-outline'/>)}\n                    {channel.display_name}\n                </span>\n                }\n            </span>\n\n            <WithTooltip\n                title={\n                    <FormattedMessage\n                        id='rhs_header.closeSidebarTooltip'\n                        defaultMessage='Close'\n                    />\n                }\n            >\n                <button\n                    id='rhsCloseButton'\n                    type='button'\n                    className='sidebar--right__close btn btn-icon btn-sm'\n                    aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                    onClick={onClose}\n                >\n                    <i\n                        className='icon icon-close'\n                    />\n                </button>\n            </WithTooltip>\n        </div>\n    );\n};\n\nexport default Header;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel, ChannelStats} from '@mattermost/types/channels';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport {Constants} from 'utils/constants';\n\nconst MenuContainer = styled.nav`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 16px 0;\n\n    font-size: 14px;\n    line-height: 20px;\n    color: rgb(var(--center-channel-color-rgb));\n`;\n\nconst MenuItemButton = styled.button`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    width: 100%;\n    height: 40px;\n    padding: 8px 16px;\n\n    background: none;\n    border: none;\n    text-align: left;\n    cursor: pointer;\n\n    &:hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n    }\n`;\n\nconst Icon = styled.div`\n    color: rgba(var(--center-channel-color-rgb), var(--icon-opacity));\n`;\n\nconst MenuItemText = styled.div`\n    padding-left: 8px;\n    flex: 1;\n`;\n\nconst RightSide = styled.div`\n    display: flex;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\nconst Badge = styled.div`\n    font-size: 12px;\n    line-height: 18px;\n    width: 20px;\n    display: flex;\n    place-content: center;\n`;\n\ninterface MenuItemProps {\n    icon: JSX.Element;\n    text: string;\n    opensSubpanel?: boolean;\n    badge?: string | number | JSX.Element;\n    onClick: () => void;\n    id?: string;\n}\n\nfunction MenuItem(props: MenuItemProps) {\n    const {icon, text, opensSubpanel, badge, onClick, id} = props;\n    const hasRightSide = (badge !== undefined) || opensSubpanel;\n\n    return (\n        <MenuItemButton\n            onClick={onClick}\n            aria-label={text}\n            type='button'\n            id={id || ''}\n        >\n            <Icon>{icon}</Icon>\n            <MenuItemText>{text}</MenuItemText>\n            {hasRightSide && (\n                <RightSide>\n                    {badge !== undefined && (\n                        <Badge>{badge}</Badge>\n                    )}\n                    {opensSubpanel && (\n                        <Icon><i className='icon icon-chevron-right'/></Icon>\n                    )}\n                </RightSide>\n            )}\n        </MenuItemButton>\n    );\n}\n\ninterface MenuProps {\n    channel: Channel;\n    channelStats: ChannelStats;\n    isArchived: boolean;\n\n    className?: string;\n\n    actions: {\n        openNotificationSettings: () => void;\n        showChannelFiles: (channelId: string) => void;\n        showPinnedPosts: (channelId: string | undefined) => void;\n        showChannelMembers: (channelId: string) => void;\n        getChannelStats: (channelId: string, includeFileCount: boolean) => Promise<{data: ChannelStats}>;\n    };\n}\n\nexport default function Menu(props: MenuProps) {\n    const {formatMessage} = useIntl();\n    const {\n        channel,\n        channelStats,\n        isArchived,\n        className,\n        actions,\n    } = props;\n\n    const [loadingStats, setLoadingStats] = useState(true);\n\n    const showNotificationPreferences = channel.type !== Constants.DM_CHANNEL && !isArchived;\n    const showMembers = channel.type !== Constants.DM_CHANNEL;\n    const fileCount = channelStats?.files_count >= 0 ? channelStats?.files_count : 0;\n\n    useEffect(() => {\n        actions.getChannelStats(channel.id, true).then(() => {\n            setLoadingStats(false);\n        });\n        return () => {\n            setLoadingStats(true);\n        };\n    }, [channel.id]);\n\n    return (\n        <MenuContainer\n            className={className}\n            data-testid='channel_info_rhs-menu'\n            aria-label={formatMessage({\n                id: 'channel_info_rhs.menu.title',\n                defaultMessage: 'Channel Info Actions',\n            })}\n        >\n            {showNotificationPreferences && (\n                <MenuItem\n                    id='channelInfoRHSNotificationSettings'\n                    icon={<i className='icon icon-bell-outline'/>}\n                    text={formatMessage({\n                        id: 'channel_info_rhs.menu.notification_preferences',\n                        defaultMessage: 'Notification Preferences',\n                    })}\n                    onClick={actions.openNotificationSettings}\n                />\n            )}\n            {showMembers && (\n                <MenuItem\n                    icon={<i className='icon icon-account-outline'/>}\n                    text={formatMessage({\n                        id: 'channel_info_rhs.menu.members',\n                        defaultMessage: 'Members',\n                    })}\n                    opensSubpanel={true}\n                    badge={channelStats.member_count}\n                    onClick={() => actions.showChannelMembers(channel.id)}\n                />\n            )}\n            <MenuItem\n                icon={<i className='icon icon-pin-outline'/>}\n                text={formatMessage({\n                    id: 'channel_info_rhs.menu.pinned',\n                    defaultMessage: 'Pinned messages',\n                })}\n                opensSubpanel={true}\n                badge={channelStats?.pinnedpost_count}\n                onClick={() => actions.showPinnedPosts(channel.id)}\n            />\n            <MenuItem\n                icon={<i className='icon icon-file-text-outline'/>}\n                text={formatMessage({\n                    id: 'channel_info_rhs.menu.files',\n                    defaultMessage: 'Files',\n                })}\n                opensSubpanel={true}\n                badge={loadingStats ? <LoadingSpinner/> : fileCount}\n                onClick={() => actions.showChannelFiles(channel.id)}\n            />\n        </MenuContainer>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl, FormattedMessage} from 'react-intl';\nimport styled from 'styled-components';\n\nimport useCopyText from 'components/common/hooks/useCopyText';\nimport WithTooltip from 'components/with_tooltip';\n\nimport Constants from 'utils/constants';\n\nconst ChannelInfoRhsTopButtons = styled.div`\n    display: flex;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    margin-top: 24px;\n    padding: 0 18px;\n`;\n\nconst Button = styled.button`\n    flex: 1;\n    padding: 12px 0 10px 0;\n    border: 0;\n    margin: 0 6px;\n    background: rgba(var(--center-channel-color-rgb), 0.04);\n    border-radius: 4px;\n\n    &:hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.8);\n\n        & i {\n            color: rgba(var(--center-channel-color-rgb), var(--icon-opacity-hover));\n        }\n    }\n\n    &:active,\n    &.active {\n        background: rgba(var(--button-bg-rgb), 0.08);\n        color: var(--button-bg);\n\n        & i {\n            color: var(--button-bg-rgb);\n        }\n    }\n\n    & i {\n        color: rgba(var(--center-channel-color-rgb), var(--icon-opacity));\n        font-size: 24px;\n    }\n\n    & span {\n        font-size: 10px;\n        font-weight: 600;\n        line-height: 16px;\n    }\n`;\n\nconst CopyButton = styled(Button)`\n    transition: background-color 0.5s ease;\n\n    &:active,\n    &.active {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        transition: none;\n    }\n\n    &.success {\n        background: var(--denim-status-online);\n        color: var(--button-color);\n\n        & i {\n            color: var(--button-color);\n        }\n    }\n`;\n\nexport interface Props {\n    channelType: string;\n    channelURL?: string;\n\n    isFavorite: boolean;\n    isMuted: boolean;\n    isInvitingPeople: boolean;\n\n    canAddPeople: boolean;\n\n    actions: {\n        toggleFavorite: () => void;\n        toggleMute: () => void;\n        addPeople: () => void;\n    };\n}\n\nexport default function TopButtons({\n    channelType,\n    channelURL,\n    isFavorite,\n    isMuted,\n    isInvitingPeople,\n    canAddPeople: propsCanAddPeople,\n    actions,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const copyLink = useCopyText({\n        text: channelURL || '',\n        successCopyTimeout: 1000,\n    });\n\n    const canAddPeople = ([Constants.OPEN_CHANNEL, Constants.PRIVATE_CHANNEL].includes(channelType) && propsCanAddPeople) || channelType === Constants.GM_CHANNEL;\n\n    const canCopyLink = [Constants.OPEN_CHANNEL, Constants.PRIVATE_CHANNEL].includes(channelType);\n\n    // Favorite Button State\n    const favoriteIcon = isFavorite ? 'icon-star' : 'icon-star-outline';\n    const favoriteText = isFavorite ? formatMessage({id: 'channel_info_rhs.top_buttons.favorited', defaultMessage: 'Favorited'}) : formatMessage({id: 'channel_info_rhs.top_buttons.favorite', defaultMessage: 'Favorite'});\n\n    // Mute Button State\n    const mutedIcon = isMuted ? 'icon-bell-off-outline' : 'icon-bell-outline';\n    const mutedText = isMuted ? formatMessage({id: 'channel_info_rhs.top_buttons.muted', defaultMessage: 'Muted'}) : formatMessage({id: 'channel_info_rhs.top_buttons.mute', defaultMessage: 'Mute'});\n\n    // Copy Button State\n    const copyIcon = copyLink.copiedRecently ? 'icon-check' : 'icon-link-variant';\n    const copyText = copyLink.copiedRecently ? formatMessage({id: 'channel_info_rhs.top_buttons.copied', defaultMessage: 'Copied'}) : formatMessage({id: 'channel_info_rhs.top_buttons.copy', defaultMessage: 'Copy Link'});\n\n    return (\n        <ChannelInfoRhsTopButtons>\n            <WithTooltip\n                title={\n                    <FormattedMessage\n                        id='channel_info_rhs.top_buttons.favorite.tooltip'\n                        defaultMessage='Add this channel to favorites'\n                    />\n                }\n            >\n                <Button\n                    onClick={actions.toggleFavorite}\n                    className={isFavorite ? 'active' : ''}\n                    aria-label={favoriteText}\n                    id='channelInfoRHSAddFavoriteButton'\n                >\n                    <div>\n                        <i className={'icon ' + favoriteIcon}/>\n                    </div>\n                    <span>{favoriteText}</span>\n                </Button>\n            </WithTooltip>\n            <WithTooltip\n                title={\n                    <FormattedMessage\n                        id='channel_info_rhs.top_buttons.mute.tooltip'\n                        defaultMessage='Mute notifications for this channel'\n                    />\n                }\n            >\n                <Button\n                    onClick={actions.toggleMute}\n                    className={isMuted ? 'active' : ''}\n                    aria-label={mutedText}\n                    id='channelInfoRHSMuteChannelButton'\n                >\n                    <div>\n                        <i className={'icon ' + mutedIcon}/>\n                    </div>\n                    <span>{mutedText}</span>\n                </Button>\n            </WithTooltip>\n            {canAddPeople && (\n                <WithTooltip\n                    title={\n                        <FormattedMessage\n                            id='channel_info_rhs.top_buttons.add_people.tooltip'\n                            defaultMessage='Add team members to this channel'\n                        />\n                    }\n                >\n                    <Button\n                        onClick={actions.addPeople}\n                        className={isInvitingPeople ? 'active' : ''}\n                        id='channelInfoRHSAddPeopleButton'\n                    >\n                        <div>\n                            <i className='icon icon-account-plus-outline'/>\n                        </div>\n                        <span>\n                            <FormattedMessage\n                                id='channel_info_rhs.top_buttons.add_people'\n                                defaultMessage='Add People'\n                            />\n                        </span>\n                    </Button>\n                </WithTooltip>\n            )}\n            {canCopyLink && (\n                <WithTooltip\n                    title={\n                        <FormattedMessage\n                            id='channel_info_rhs.top_buttons.copy_link.tooltip'\n                            defaultMessage='Copy link to this channel'\n                        />\n                    }\n                >\n                    <CopyButton\n                        onClick={copyLink.onClick}\n                        className={copyLink.copiedRecently ? 'success' : ''}\n                        aria-label={copyText}\n                    >\n                        <div>\n                            <i className={'icon ' + copyIcon}/>\n                        </div>\n                        <span>{copyText}</span>\n                    </CopyButton>\n                </WithTooltip>\n            )}\n        </ChannelInfoRhsTopButtons>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport styled from 'styled-components';\n\nimport type {Channel, ChannelStats} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport EditChannelPurposeModal from 'components/edit_channel_purpose_modal';\nimport MoreDirectChannels from 'components/more_direct_channels';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\n\nimport type {ModalData} from 'types/actions';\n\nimport AboutArea from './about_area';\nimport Header from './header';\nimport Menu from './menu';\nimport TopButtons from './top_buttons';\n\nconst Divider = styled.div`\n    width: 88%;\n    border: 1px solid rgba(var(--center-channel-color-rgb), 0.04);\n    margin: 0 auto;\n`;\n\nexport interface DMUser {\n    user: UserProfile;\n    display_name: string;\n    is_guest: boolean;\n    status: string;\n}\n\nexport interface Props {\n    channel: Channel;\n    channelStats: ChannelStats;\n    currentUser: UserProfile;\n    currentTeam: Team;\n    isArchived: boolean;\n    isFavorite: boolean;\n    isMuted: boolean;\n    isInvitingPeople: boolean;\n    isMobile: boolean;\n    canManageMembers: boolean;\n    canManageProperties: boolean;\n    dmUser?: DMUser;\n    channelMembers: UserProfile[];\n    actions: {\n        closeRightHandSide: () => void;\n        unfavoriteChannel: (channelId: string) => void;\n        favoriteChannel: (channelId: string) => void;\n        unmuteChannel: (userId: string, channelId: string) => void;\n        muteChannel: (userId: string, channelId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n        showChannelFiles: (channelId: string) => void;\n        showPinnedPosts: (channelId: string | undefined) => void;\n        showChannelMembers: (channelId: string) => void;\n        getChannelStats: (channelId: string) => Promise<{data: ChannelStats}>;\n    };\n}\n\nconst ChannelInfoRhs = ({\n    channel,\n    channelStats,\n    isArchived,\n    isFavorite,\n    isMuted,\n    isInvitingPeople,\n    isMobile,\n    currentTeam,\n    currentUser,\n    dmUser,\n    channelMembers,\n    canManageMembers,\n    canManageProperties,\n    actions,\n}: Props) => {\n    const currentUserId = currentUser.id;\n    const channelURL = getSiteURL() + '/' + currentTeam.name + '/channels/' + channel.name;\n\n    const toggleFavorite = () => {\n        if (isFavorite) {\n            actions.unfavoriteChannel(channel.id);\n            return;\n        }\n        actions.favoriteChannel(channel.id);\n    };\n\n    const toggleMute = () => {\n        if (isMuted) {\n            actions.unmuteChannel(currentUserId, channel.id);\n            return;\n        }\n        actions.muteChannel(currentUserId, channel.id);\n    };\n\n    const addPeople = () => {\n        if (channel.type === Constants.GM_CHANNEL) {\n            return actions.openModal({\n                modalId: ModalIdentifiers.CREATE_DM_CHANNEL,\n                dialogType: MoreDirectChannels,\n                dialogProps: {isExistingChannel: true, focusOriginElement: 'channelInfoRHSAddPeopleButton'},\n            });\n        }\n\n        return actions.openModal({\n            modalId: ModalIdentifiers.CHANNEL_INVITE,\n            dialogType: ChannelInviteModal,\n            dialogProps: {channel},\n        });\n    };\n\n    const editChannelPurpose = () => actions.openModal({\n        modalId: ModalIdentifiers.EDIT_CHANNEL_PURPOSE,\n        dialogType: EditChannelPurposeModal,\n        dialogProps: {channel},\n    });\n\n    const editChannelHeader = () => actions.openModal({\n        modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n        dialogType: EditChannelHeaderModal,\n        dialogProps: {channel},\n    });\n\n    const openNotificationSettings = () => actions.openModal({\n        modalId: ModalIdentifiers.CHANNEL_NOTIFICATIONS,\n        dialogType: ChannelNotificationsModal,\n        dialogProps: {channel, currentUser, focusOriginElement: 'channelInfoRHSNotificationSettings'},\n    });\n\n    const gmUsers = channelMembers.filter((user) => {\n        return user.id !== currentUser.id;\n    });\n\n    const canEditChannelProperties = !isArchived && canManageProperties;\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n            <Header\n                channel={channel}\n                isArchived={isArchived}\n                isMobile={isMobile}\n                onClose={actions.closeRightHandSide}\n            />\n            <TopButtons\n                channelType={channel.type}\n                channelURL={channelURL}\n                isFavorite={isFavorite}\n                isMuted={isMuted}\n                isInvitingPeople={isInvitingPeople}\n                canAddPeople={canManageMembers}\n                actions={{toggleFavorite, toggleMute, addPeople}}\n            />\n            <AboutArea\n                channel={channel}\n                dmUser={dmUser}\n                gmUsers={gmUsers}\n                canEditChannelProperties={canEditChannelProperties}\n                actions={{\n                    editChannelHeader,\n                    editChannelPurpose,\n                }}\n            />\n            <Divider/>\n            <Menu\n                channel={channel}\n                channelStats={channelStats}\n                isArchived={isArchived}\n                actions={{\n                    openNotificationSettings,\n                    showChannelFiles: actions.showChannelFiles,\n                    showPinnedPosts: actions.showPinnedPosts,\n                    showChannelMembers: actions.showChannelMembers,\n                    getChannelStats: actions.getChannelStats,\n                }}\n            />\n        </div>\n    );\n};\n\nexport default memo(ChannelInfoRhs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport {unfavoriteChannel, favoriteChannel, getChannelStats} from 'mattermost-redux/actions/channels';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentChannel, isCurrentChannelFavorite, isCurrentChannelMuted, isCurrentChannelArchived, getCurrentChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/common';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentChannel, getStatusForUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport {muteChannel, unmuteChannel} from 'actions/channel_actions';\nimport {openModal} from 'actions/views/modals';\nimport {closeRightHandSide, showChannelFiles, showChannelMembers, showPinnedPosts} from 'actions/views/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {getDisplayNameByUser, getUserIdFromChannelId} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport RHS from './channel_info_rhs';\nimport type {Props} from './channel_info_rhs';\n\nconst EMPTY_CHANNEL_STATS = {\n    member_count: 0,\n    guest_count: 0,\n    pinnedpost_count: 0,\n    files_count: 0,\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    const channel = getCurrentChannel(state);\n    const currentUser = getCurrentUser(state);\n    const currentTeam = getCurrentTeam(state);\n    const channelStats = getCurrentChannelStats(state) || EMPTY_CHANNEL_STATS;\n    const isArchived = isCurrentChannelArchived(state);\n    const isFavorite = isCurrentChannelFavorite(state);\n    const isMuted = isCurrentChannelMuted(state);\n    const isInvitingPeople = isModalOpen(state, ModalIdentifiers.CHANNEL_INVITE) || isModalOpen(state, ModalIdentifiers.CREATE_DM_CHANNEL);\n    const isMobile = getIsMobileView(state);\n\n    const isPrivate = channel?.type === Constants.PRIVATE_CHANNEL;\n    const canManageMembers = haveIChannelPermission(state, currentTeam?.id, channel?.id, isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS);\n    const canManageProperties = haveIChannelPermission(state, currentTeam?.id, channel?.id, isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES);\n\n    const channelMembers = getProfilesInCurrentChannel(state);\n\n    const props = {\n        channel,\n        currentUser,\n        currentTeam,\n        isArchived,\n        isFavorite,\n        isMuted,\n        isInvitingPeople,\n        isMobile,\n        canManageMembers,\n        canManageProperties,\n        channelStats,\n        channelMembers,\n    } as Props;\n\n    if (channel?.type === Constants.DM_CHANNEL) {\n        const user = getUser(state, getUserIdFromChannelId(channel.name, currentUser.id));\n        props.dmUser = {\n            user,\n            display_name: getDisplayNameByUser(state, user),\n            is_guest: isGuest(user.roles),\n            status: getStatusForUserId(state, user.id),\n        };\n    }\n\n    return props;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            unfavoriteChannel,\n            favoriteChannel,\n            unmuteChannel,\n            muteChannel,\n            openModal,\n            showChannelFiles,\n            showPinnedPosts,\n            showChannelMembers,\n            getChannelStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RHS);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport styled from 'styled-components';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nconst Title = styled.div`\n    flex:1;\n    font-family: 'Open Sans', sans-serif;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 20px;\n`;\n\nconst Actions = styled.div`\n    button + button {\n        margin-left: 8px;\n    }\n`;\n\nconst Button = styled.button`\n    border: none;\n    background: transparent;\n    width: fit-content;\n    padding: 8px 16px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 600;\n    line-height: 16px;\n    &.add-members, &.manage-members-done {\n        background-color: var(--button-bg);\n        color: var(--button-color);\n        &:hover, &:active, &:focus {\n            background: linear-gradient(0deg, rgba(var(--center-channel-color-rgb), 0.16), rgba(var(--center-channel-color-rgb), 0.16)), var(--button-bg);\n            color: var(--button-color);\n        }\n    }\n    &.manage-members {\n        background: rgba(var(--button-bg-rgb),0.08);\n        color: var(--button-bg);\n        &:hover, &:focus {\n            background: rgba(var(--button-bg-rgb),0.12);\n        }\n        &:active {\n            background: rgba(var(--button-bg-rgb),0.16);\n        }\n    }\n`;\n\nconst ButtonIcon = styled.i`\n    font-size: 14.4px;\n`;\n\nexport interface Props {\n    className?: string;\n    channelType: string;\n    membersCount: number;\n    canManageMembers: boolean;\n    editing: boolean;\n    actions: {\n        startEditing: () => void;\n        stopEditing: () => void;\n        inviteMembers: () => void;\n    };\n}\n\nconst ActionBar = ({className, channelType, membersCount, canManageMembers, editing, actions}: Props) => {\n    const showManageButton = channelType !== Constants.GM_CHANNEL && membersCount > 1;\n\n    const handleShortcut = useCallback((e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && editing) {\n            actions.stopEditing();\n        }\n    }, [editing, actions]);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleShortcut);\n        return () => {\n            document.removeEventListener('keydown', handleShortcut);\n        };\n    }, [handleShortcut]);\n\n    return (\n        <div className={className}>\n            <Title>\n                {editing ? (\n                    <FormattedMessage\n                        id='channel_members_rhs.action_bar.managing_title'\n                        defaultMessage='Managing Members'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='channel_members_rhs.action_bar.members_count_title'\n                        defaultMessage='{members_count} members'\n                        values={{members_count: membersCount}}\n                    />\n                )}\n\n            </Title>\n\n            {canManageMembers && (\n                <Actions>\n                    {editing ? (\n                        <Button\n                            onClick={actions.stopEditing}\n                            className='manage-members-done'\n                        >\n                            <FormattedMessage\n                                id='channel_members_rhs.action_bar.done_button'\n                                defaultMessage='Done'\n                            />\n                        </Button>\n                    ) : (\n                        <>\n                            {showManageButton && (\n                                <Button\n                                    className='manage-members'\n                                    onClick={actions.startEditing}\n                                >\n                                    <FormattedMessage\n                                        id='channel_members_rhs.action_bar.manage_button'\n                                        defaultMessage='Manage'\n                                    />\n                                </Button>\n                            )}\n                            <Button\n                                onClick={actions.inviteMembers}\n                                className='add-members'\n                            >\n                                <ButtonIcon\n                                    className='icon-account-plus-outline'\n                                    title='Add Icon'\n                                />\n                                <FormattedMessage\n                                    id='channel_members_rhs.action_bar.add_button'\n                                    defaultMessage='Add'\n                                />\n                            </Button>\n                        </>\n                    )}\n\n                </Actions>\n            )}\n        </div>\n    );\n};\n\nexport default styled(ActionBar)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 16px 20px;\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport WithTooltip from 'components/with_tooltip';\n\ninterface Props {\n    channel: Channel;\n    canGoBack: boolean;\n\n    onClose: () => void;\n    goBack: () => void;\n}\n\nconst HeaderTitle = styled.span`\n    line-height: 2.4rem;\n`;\n\nconst Header = ({channel, canGoBack, onClose, goBack}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div className='sidebar--right__header'>\n            <span className='sidebar--right__title'>\n\n                {canGoBack && (\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={goBack}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                )}\n\n                <HeaderTitle\n                    id='rhsPanelTitle'\n                >\n                    <FormattedMessage\n                        id='channel_members_rhs.header.title'\n                        defaultMessage='Members'\n                    />\n                </HeaderTitle>\n\n                {channel.display_name &&\n                    <span\n                        className='style--none sidebar--right__title__subtitle'\n                    >\n                        {channel.display_name}\n                    </span>\n                }\n            </span>\n\n            <WithTooltip\n                title={\n                    <FormattedMessage\n                        id='rhs_header.closeSidebarTooltip'\n                        defaultMessage='Close'\n                    />\n                }\n            >\n                <button\n                    id='rhsCloseButton'\n                    type='button'\n                    className='sidebar--right__close btn btn-icon btn-sm'\n                    aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                    onClick={onClose}\n                >\n                    <i\n                        className='icon icon-close'\n                    />\n                </button>\n            </WithTooltip>\n        </div>\n    );\n};\n\nexport default Header;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport Input from 'components/widgets/inputs/input/input';\n\ninterface Props {\n    className?: string;\n    terms: string;\n    onInput: (terms: string) => void;\n}\n\nconst SearchBar = ({className, terms, onInput}: Props) => {\n    const {formatMessage} = useIntl();\n\n    let inputSuffix;\n    if (terms.length > 0) {\n        inputSuffix = (\n            <button\n                className='style--none'\n                onClick={() => onInput('')}\n                aria-label={formatMessage({\n                    id: 'channel_members_rhs.search_bar.aria.cancel_search_button',\n                    defaultMessage: 'cancel members search',\n                })}\n            >\n                <i className={'icon icon-close-circle'}/>\n            </button>\n        );\n    }\n\n    return (\n        <div className={className}>\n            <Input\n                data-testid='channel-member-rhs-search'\n                value={terms}\n                onInput={(e) => onInput(e.currentTarget.value)}\n                inputPrefix={<i className={'icon icon-magnify'}/>}\n                inputSuffix={inputSuffix}\n                placeholder={formatMessage({\n                    id: 'channel_members_rhs.search_bar.placeholder',\n                    defaultMessage: 'Search members',\n                })}\n                useLegend={false}\n            />\n        </div>\n    );\n};\n\nexport default styled(SearchBar)`\n    display: flex;\n    padding: 0px 20px 12px;\n\n    .Input_container .Input_wrapper {\n        padding: 0 8px;\n    }\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {ProfilesInChannelSortBy} from 'mattermost-redux/actions/users';\n\nimport AlertBanner from 'components/alert_banner';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport useAccessControlAttributes, {EntityType} from 'components/common/hooks/useAccessControlAttributes';\nimport ExternalLink from 'components/external_link';\nimport MoreDirectChannels from 'components/more_direct_channels';\nimport AlertTag from 'components/widgets/tag/alert_tag';\nimport TagGroup from 'components/widgets/tag/tag_group';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport type {ModalData} from 'types/actions';\n\nimport ActionBar from './action_bar';\nimport Header from './header';\nimport MemberList, {ListItemType} from './member_list';\nimport type {ChannelMember, ListItem} from './member_list';\nimport SearchBar from './search';\n\nimport './channel_members_rhs.scss';\n\nconst USERS_PER_PAGE = 100;\n\nexport interface Props {\n    channel: Channel;\n    currentUserIsChannelAdmin: boolean;\n    membersCount: number;\n    searchTerms: string;\n    canGoBack: boolean;\n    teamUrl: string;\n    channelMembers: ChannelMember[];\n    canManageMembers: boolean;\n    editing: boolean;\n\n    actions: {\n        openModal: <P>(modalData: ModalData<P>) => void;\n        openDirectChannelToUserId: (userId: string) => Promise<{data: Channel}>;\n        closeRightHandSide: () => void;\n        goBack: () => void;\n        setChannelMembersRhsSearchTerm: (terms: string) => void;\n        loadProfilesAndReloadChannelMembers: (page: number, perParge: number, channelId: string, sort: string) => void;\n        loadMyChannelMemberAndRole: (channelId: string) => void;\n        setEditChannelMembers: (active: boolean) => void;\n        searchProfilesAndChannelMembers: (term: string, options: any) => Promise<{data: UserProfile[]}>;\n    };\n}\n\nexport default function ChannelMembersRHS({\n    channel,\n    currentUserIsChannelAdmin,\n    searchTerms,\n    membersCount,\n    canGoBack,\n    teamUrl,\n    channelMembers,\n    canManageMembers,\n    editing = false,\n    actions,\n}: Props) {\n    const history = useHistory();\n\n    const [list, setList] = useState<ListItem[]>([]);\n\n    const [page, setPage] = useState(0);\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\n    const {formatMessage} = useIntl();\n\n    const {structuredAttributes, loading} = useAccessControlAttributes(\n        EntityType.Channel,\n        channel.id,\n        channel.policy_enforced,\n    );\n\n    // Helper function to format attribute names for tooltips\n    const formatAttributeName = (name: string): string => {\n        // Convert snake_case or camelCase to Title Case with spaces\n        return name.\n            replace(/_/g, ' ').\n            replace(/([A-Z])/g, ' $1').\n            replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase());\n    };\n\n    const searching = searchTerms !== '';\n\n    const isDefaultChannel = channel.name === Constants.DEFAULT_CHANNEL;\n\n    // show search if there's more than 20 or if the user have an active search.\n    const showSearch = searching || membersCount >= 20;\n\n    useEffect(() => {\n        return () => {\n            actions.setChannelMembersRhsSearchTerm('');\n        };\n    }, []);\n\n    useEffect(() => {\n        const listcp: ListItem[] = [];\n        let memberDone = false;\n\n        for (let i = 0; i < channelMembers.length; i++) {\n            const member = channelMembers[i];\n            if (listcp.length === 0) {\n                let text = null;\n                if (member.membership?.scheme_admin === true) {\n                    text = (\n                        <FormattedMessage\n                            id='channel_members_rhs.list.channel_admin_title'\n                            defaultMessage='CHANNEL ADMINS'\n                        />\n                    );\n                } else {\n                    text = (\n                        <FormattedMessage\n                            id='channel_members_rhs.list.channel_members_title'\n                            defaultMessage='MEMBERS'\n                        />\n                    );\n                    memberDone = true;\n                }\n\n                listcp.push({\n                    type: ListItemType.FirstSeparator,\n                    data: <div className='channel-members-rhs__member-list-separator channel-members-rhs__member-list-separator--first'>{text}</div>,\n                });\n            } else if (!memberDone && member.membership?.scheme_admin === false) {\n                listcp.push({\n                    type: ListItemType.Separator,\n                    data: <div className='channel-members-rhs__member-list-separator'>\n                        <FormattedMessage\n                            id='channel_members_rhs.list.channel_members_title'\n                            defaultMessage='MEMBERS'\n                        />\n                    </div>,\n                });\n                memberDone = true;\n            }\n\n            listcp.push({type: ListItemType.Member, data: member});\n        }\n        if (JSON.stringify(list) !== JSON.stringify(listcp)) {\n            setList(listcp);\n        }\n    }, [channelMembers]);\n\n    useEffect(() => {\n        if (channel.type === Constants.DM_CHANNEL) {\n            let rhsAction = actions.closeRightHandSide;\n            if (canGoBack) {\n                rhsAction = actions.goBack;\n            }\n            rhsAction();\n            return;\n        }\n\n        setPage(0);\n        setIsNextPageLoading(false);\n        actions.setChannelMembersRhsSearchTerm('');\n        actions.loadProfilesAndReloadChannelMembers(0, USERS_PER_PAGE, channel.id, ProfilesInChannelSortBy.Admin);\n        actions.loadMyChannelMemberAndRole(channel.id);\n    }, [channel.id, channel.type]);\n\n    const setSearchTerms = async (terms: string) => {\n        actions.setChannelMembersRhsSearchTerm(terms);\n    };\n\n    const doSearch = useCallback(debounce(async (terms: string) => {\n        await actions.searchProfilesAndChannelMembers(terms, {in_team_id: channel.team_id, in_channel_id: channel.id});\n    }, Constants.SEARCH_TIMEOUT_MILLISECONDS), [actions.searchProfilesAndChannelMembers]);\n\n    useEffect(() => {\n        if (searchTerms) {\n            doSearch(searchTerms);\n        }\n    }, [searchTerms]);\n\n    const inviteMembers = () => {\n        if (channel.type === Constants.GM_CHANNEL) {\n            return actions.openModal({\n                modalId: ModalIdentifiers.CREATE_DM_CHANNEL,\n                dialogType: MoreDirectChannels,\n                dialogProps: {isExistingChannel: true, focusOriginElement: 'channelInfoRHSAddPeopleButton'},\n            });\n        }\n\n        return actions.openModal({\n            modalId: ModalIdentifiers.CHANNEL_INVITE,\n            dialogType: ChannelInviteModal,\n            dialogProps: {channel},\n        });\n    };\n\n    const openDirectMessage = useCallback(async (user: UserProfile) => {\n        // we first prepare the DM channel...\n        await actions.openDirectChannelToUserId(user.id);\n\n        // ... and then redirect to it\n        history.push(teamUrl + '/messages/@' + user.username);\n\n        await actions.closeRightHandSide();\n    }, [actions.openDirectChannelToUserId, history, teamUrl, actions.closeRightHandSide]);\n\n    const loadMore = useCallback(async () => {\n        setIsNextPageLoading(true);\n\n        await actions.loadProfilesAndReloadChannelMembers(page + 1, USERS_PER_PAGE, channel.id, ProfilesInChannelSortBy.Admin);\n        setPage(page + 1);\n\n        setIsNextPageLoading(false);\n    }, [actions.loadProfilesAndReloadChannelMembers, page, channel.id],\n    );\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body channel-members-rhs'\n        >\n\n            <Header\n                channel={channel}\n                canGoBack={canGoBack}\n                onClose={actions.closeRightHandSide}\n                goBack={actions.goBack}\n            />\n            {/* Show banner for policy-enforced channels */}\n            {channel.policy_enforced && (\n                <div className='channel-members-rhs__alert-container policy-enforced'>\n                    <AlertBanner\n                        mode='info'\n                        variant='app'\n                        title={formatMessage({\n                            id: 'channel_members_rhs.policy_enforced_restrictions',\n                            defaultMessage: 'Channel access is restricted by user attributes',\n                        })}\n                    >\n                        {structuredAttributes.length > 0 && (\n                            <TagGroup>\n                                {structuredAttributes.flatMap((attribute) =>\n                                    attribute.values.map((value) => (\n                                        <AlertTag\n                                            key={`${attribute.name}-${value}`}\n                                            tooltipTitle={formatAttributeName(attribute.name)}\n                                            text={value}\n                                        />\n                                    )),\n                                )}\n                            </TagGroup>\n                        )}\n                        {loading && <span className='loading-indicator'>{'Loading...'}</span>}\n                    </AlertBanner>\n                </div>\n            )}\n\n            <ActionBar\n                channelType={channel.type}\n                membersCount={membersCount}\n                canManageMembers={canManageMembers}\n                editing={editing}\n                actions={{\n                    startEditing: () => actions.setEditChannelMembers(true),\n                    stopEditing: () => actions.setEditChannelMembers(false),\n                    inviteMembers,\n                }}\n            />\n\n            {/* Users with user management permissions have special restrictions in the default channel */}\n            {(editing && isDefaultChannel && !currentUserIsChannelAdmin) && (\n                <div className='channel-members-rhs__alert-container'>\n                    <AlertBanner\n                        mode='info'\n                        variant='app'\n                        message={formatMessage({\n                            id: 'channel_members_rhs.default_channel_moderation_restrictions',\n                            defaultMessage: 'In this channel, you can only remove guests. Only <link>channel admins</link> can manage other members.',\n                        }, {\n                            link: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://docs.mattermost.com/welcome/about-user-roles.html#channel-admin'\n                                    location='channel_members_rhs'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        })}\n                    />\n                </div>\n            )}\n\n            {showSearch && (\n                <SearchBar\n                    terms={searchTerms}\n                    onInput={setSearchTerms}\n                />\n            )}\n\n            <div className='channel-members-rhs__members-container'>\n                {channelMembers.length > 0 && (\n                    <MemberList\n                        searchTerms={searchTerms}\n                        members={list}\n                        editing={editing}\n                        channel={channel}\n                        openDirectMessage={openDirectMessage}\n                        loadMore={loadMore}\n                        hasNextPage={channelMembers.length < membersCount}\n                        isNextPageLoading={isNextPageLoading}\n                    />\n                )}\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {loadMyChannelMemberAndRole} from 'mattermost-redux/actions/channels';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    getCurrentChannel,\n    getCurrentChannelStats,\n    getMembersInCurrentChannel,\n    getMyCurrentChannelMembership,\n    isCurrentChannelArchived,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentRelativeTeamUrl, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getActiveProfilesInCurrentChannelWithoutSorting,\n    getUserStatuses, searchActiveProfilesInCurrentChannel,\n} from 'mattermost-redux/selectors/entities/users';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions';\nimport {loadProfilesAndReloadChannelMembers, searchProfilesAndChannelMembers} from 'actions/user_actions';\nimport {openModal} from 'actions/views/modals';\nimport {closeRightHandSide, goBack, setEditChannelMembers} from 'actions/views/rhs';\nimport {setChannelMembersRhsSearchTerm} from 'actions/views/search';\nimport {getIsEditingMembers, getPreviousRhsState} from 'selectors/rhs';\n\nimport {Constants, RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelMembersRHS from './channel_members_rhs';\nimport type {Props} from './channel_members_rhs';\nimport type {ChannelMember} from './member_list';\n\nconst buildProfileList = (\n    profilesInCurrentChannel: UserProfile[],\n    userStatuses: RelationOneToOne<UserProfile, string>,\n    teammateNameDisplaySetting: string,\n    membersInCurrentChannel: Record<string, ChannelMembership>,\n) => {\n    const channelMembers: ChannelMember[] = [];\n    profilesInCurrentChannel.forEach((profile) => {\n        if (!membersInCurrentChannel[profile.id]) {\n            return;\n        }\n\n        channelMembers.push({\n            user: profile,\n            membership: membersInCurrentChannel[profile.id],\n            status: userStatuses[profile.id],\n            displayName: displayUsername(profile, teammateNameDisplaySetting),\n        });\n    });\n\n    channelMembers.sort((a, b) => {\n        if (a.membership?.scheme_admin === b.membership?.scheme_admin) {\n            return a.displayName.localeCompare(b.displayName);\n        }\n\n        if (a.membership?.scheme_admin === true) {\n            return -1;\n        }\n        return 1;\n    });\n\n    return channelMembers;\n};\n\nconst getProfiles = createSelector(\n    'getProfiles',\n    getActiveProfilesInCurrentChannelWithoutSorting,\n    getUserStatuses,\n    getTeammateNameDisplaySetting,\n    getMembersInCurrentChannel,\n    buildProfileList,\n);\n\nconst searchProfiles = createSelector(\n    'searchProfiles',\n    (state: GlobalState, search: string) => searchActiveProfilesInCurrentChannel(state, search, false),\n    getUserStatuses,\n    getTeammateNameDisplaySetting,\n    getMembersInCurrentChannel,\n    buildProfileList,\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const channel = getCurrentChannel(state);\n    const currentTeam = getCurrentTeam(state);\n    const currentUser = getMyCurrentChannelMembership(state);\n    const {member_count: membersCount} = getCurrentChannelStats(state) || {member_count: 0};\n\n    if (!channel) {\n        return {\n            channel: {} as Channel,\n            currentUserIsChannelAdmin: false,\n            channelMembers: [],\n            channelAdmins: [],\n            searchTerms: '',\n            membersCount,\n            canManageMembers: false,\n            canGoBack: false,\n            teamUrl: '',\n        } as unknown as Props;\n    }\n\n    const isArchived = isCurrentChannelArchived(state);\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const canManageMembers = haveIChannelPermission(\n        state,\n        currentTeam?.id,\n        channel.id,\n        isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS,\n    ) && !isArchived;\n\n    const searchTerms = state.views.search.channelMembersRhsSearch || '';\n\n    let channelMembers: ChannelMember[] = [];\n    if (searchTerms === '') {\n        channelMembers = getProfiles(state);\n    } else {\n        channelMembers = searchProfiles(state, searchTerms.trim());\n    }\n\n    const teamUrl = getCurrentRelativeTeamUrl(state);\n    const prevRhsState = getPreviousRhsState(state);\n    const hasInfoPrevState = prevRhsState === RHSStates.CHANNEL_INFO ||\n        prevRhsState === RHSStates.CHANNEL_FILES ||\n        prevRhsState === RHSStates.PIN;\n\n    const canGoBack = Boolean(hasInfoPrevState);\n    const editing = getIsEditingMembers(state);\n\n    const currentUserIsChannelAdmin = currentUser && currentUser.scheme_admin;\n\n    return {\n        channel,\n        currentUserIsChannelAdmin,\n        membersCount,\n        searchTerms,\n        teamUrl,\n        canGoBack,\n        canManageMembers,\n        channelMembers,\n        editing,\n    } as Props;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            openDirectChannelToUserId,\n            closeRightHandSide,\n            goBack,\n            setChannelMembersRhsSearchTerm,\n            loadProfilesAndReloadChannelMembers,\n            loadMyChannelMemberAndRole,\n            setEditChannelMembers,\n            searchProfilesAndChannelMembers,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelMembersRHS);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport KeyboardShortcutSequence, {KEYBOARD_SHORTCUTS} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\nexport interface Props extends PropsFromRedux {\n    children: React.ReactNode;\n}\n\nfunction SearchResultsHeader(props: Props) {\n    const {formatMessage} = useIntl();\n\n    const showExpand = props.previousRhsState !== RHSStates.CHANNEL_INFO;\n\n    // sidebarTooltipContent contains tooltips content for expand or shrink sidebarTooltip.\n    // if props.isExpanded is true, defaultMessage would feed from 'shrinkTooltip', else 'expandTooltip'\n    const sidebarTooltipContent = props.isExpanded ? (\n        <>\n            <FormattedMessage\n                id='rhs_header.collapseSidebarTooltip'\n                defaultMessage='Collapse the right sidebar'\n            />\n            <KeyboardShortcutSequence\n                shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                hideDescription={true}\n                isInsideTooltip={true}\n            />\n        </>\n    ) : (\n        <>\n            <FormattedMessage\n                id='rhs_header.expandSidebarTooltip'\n                defaultMessage='Expand the right sidebar'\n            />\n            <KeyboardShortcutSequence\n                shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                hideDescription={true}\n                isInsideTooltip={true}\n            />\n        </>\n    );\n\n    const expandOrCollapseSidebarButtonAriaLabel = props.isExpanded ? formatMessage({id: 'rhs_header.collapseSidebarTooltip.icon', defaultMessage: 'Collapse Sidebar Icon'}) : formatMessage({id: 'rhs_header.expandSidebarTooltip.icon', defaultMessage: 'Expand Sidebar Icon'});\n\n    return (\n        <div className='sidebar--right__header'>\n            <span\n                className='sidebar--right__title'\n                id='rhsPanelTitle'\n            >\n                {props.canGoBack && (\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={props.actions.goBack}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i className='icon icon-arrow-back-ios'/>\n                    </button>\n                )}\n                {props.children}\n            </span>\n            <div className='pull-right'>\n                {showExpand && (\n                    <WithTooltip\n                        title={sidebarTooltipContent}\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__expand btn btn-icon btn-sm'\n                            onClick={props.actions.toggleRhsExpanded}\n                            aria-label={expandOrCollapseSidebarButtonAriaLabel}\n                        >\n                            <i\n                                className='icon icon-arrow-expand'\n                                aria-hidden='true'\n                            />\n                            <i\n                                className='icon icon-arrow-collapse'\n                                aria-hidden='true'\n                            />\n                        </button>\n                    </WithTooltip>\n                )}\n                <WithTooltip\n                    title={\n                        <FormattedMessage\n                            id='rhs_header.closeSidebarTooltip'\n                            defaultMessage='Close'\n                        />\n                    }\n                >\n                    <button\n                        id='searchResultsCloseButton'\n                        type='button'\n                        className='sidebar--right__close btn btn-icon btn-sm'\n                        aria-label='Close'\n                        onClick={props.actions.closeRightHandSide}\n                    >\n                        <i\n                            className='icon icon-close'\n                            aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                        />\n                    </button>\n                </WithTooltip>\n            </div>\n        </div>\n    );\n}\n\nexport default SearchResultsHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ConnectedProps} from 'react-redux';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/common';\n\nimport {\n    closeRightHandSide,\n    toggleRhsExpanded,\n    goBack,\n} from 'actions/views/rhs';\nimport {getIsRhsExpanded, getPreviousRhsState} from 'selectors/rhs';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store/index.js';\n\nimport SearchResultsHeader from './search_results_header';\n\nfunction mapStateToProps(state: GlobalState) {\n    const previousRhsState = getPreviousRhsState(state);\n    const canGoBack = previousRhsState === RHSStates.CHANNEL_INFO ||\n        previousRhsState === RHSStates.CHANNEL_MEMBERS ||\n        previousRhsState === RHSStates.CHANNEL_FILES ||\n        previousRhsState === RHSStates.PIN;\n\n    return {\n        isExpanded: getIsRhsExpanded(state),\n        channelId: getCurrentChannelId(state),\n        previousRhsState,\n        canGoBack,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            toggleRhsExpanded,\n            goBack,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(SearchResultsHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useEffect, useCallback} from 'react';\nimport {useIntl} from 'react-intl';\nimport {CSSTransition} from 'react-transition-group';\n\nimport './info_toast.scss';\n\ntype Props = {\n    content: {\n        icon?: JSX.Element;\n        message: string;\n        undo?: () => void;\n    };\n    className?: string;\n    onExited: () => void;\n}\n\nfunction InfoToast({content, onExited, className}: Props): JSX.Element {\n    const {formatMessage} = useIntl();\n    const closeToast = useCallback(() => {\n        onExited();\n    }, [onExited]);\n\n    const undoTodo = useCallback(() => {\n        content.undo?.();\n        onExited();\n    }, [content.undo, onExited]);\n\n    const toastContainerClassname = classNames('info-toast', className);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            onExited();\n        }, 5000);\n\n        return () => clearTimeout(timer);\n    }, [onExited]);\n\n    return (\n        <CSSTransition\n            in={Boolean(content)}\n            classNames='toast'\n            mountOnEnter={true}\n            unmountOnExit={true}\n            timeout={300}\n            appear={true}\n        >\n            <div className={toastContainerClassname}>\n                {content.icon}\n                <span>{content.message}</span>\n                {content.undo && (\n                    <button\n                        onClick={undoTodo}\n                        className='info-toast__undo'\n                    >\n                        {formatMessage({\n                            id: 'post_info.edit.undo',\n                            defaultMessage: 'Undo',\n                        })}\n                    </button>\n                )}\n                <button\n                    className='info-toast__icon_button'\n                    onClick={closeToast}\n                    aria-label={formatMessage({id: 'general_button.close', defaultMessage: 'Close'})}\n                >\n                    <i className='icon icon-close'/>\n                </button>\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default React.memo(InfoToast);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {defineMessages, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Post} from '@mattermost/types/posts';\n\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport PostMessageView from 'components/post_view/post_message_view';\n\nimport './restore_post_history.scss';\n\nconst modalMessages = defineMessages({\n    title: {\n        id: 'post_info.edit.restore',\n        defaultMessage: 'Restore this version',\n    },\n    titleQuestion: {\n        id: 'post_info.edit.restore_question',\n        defaultMessage: 'Restore this version?',\n    },\n});\n\ntype Props = {\n    post: Post;\n    postHeader: JSX.Element;\n    actions: {\n        handleRestore: (post: Post) => void;\n    };\n    onExited: () => void;\n}\n\nconst RestorePostModal = ({post, postHeader, actions, onExited}: Props) => {\n    const {formatMessage} = useIntl();\n    const onHide = () => onExited();\n\n    const handleRestore = async () => {\n        await actions.handleRestore(post);\n        onHide();\n    };\n\n    const modalHeaderText = (\n        <div className='edit-post-history__restore__modal__header'>\n            {formatMessage(modalMessages.titleQuestion)}\n        </div>\n    );\n\n    return (\n        <GenericModal\n            compassDesign={true}\n            onExited={onHide}\n            enforceFocus={false}\n            id='restorePostModal'\n            aria-labelledby='restorePostModalLabel'\n            modalHeaderText={modalHeaderText}\n            handleCancel={onHide}\n            cancelButtonClassName='cancel-button'\n            handleConfirm={handleRestore}\n        >\n            <div className='edit-post-history__restore__modal__content'>\n                {postHeader}\n                <PostMessageView\n                    post={post}\n                    overflowType='ellipsis'\n                    maxHeight={100}\n                    showPostEditedIndicator={false}\n                />\n                <FileAttachmentListContainer\n                    post={post}\n                    isEditHistory={true}\n                    disableDownload={true}\n                    disableActions={true}\n                />\n            </div>\n        </GenericModal>\n    );\n};\n\nexport default memo(RestorePostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useState} from 'react';\nimport {defineMessages, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {CheckIcon} from '@mattermost/compass-icons/components';\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getPostEditHistory, restorePostVersion} from 'mattermost-redux/actions/posts';\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {ensureString} from 'mattermost-redux/utils/post_utils';\n\nimport {removeDraft} from 'actions/views/drafts';\nimport {getConnectionId} from 'selectors/general';\n\nimport CompassThemeProvider from 'components/compass_theme_provider/compass_theme_provider';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport InfoToast from 'components/info_toast/info_toast';\nimport PostAriaLabelDiv from 'components/post_view/post_aria_label_div';\nimport PostMessageContainer from 'components/post_view/post_message_view';\nimport Timestamp, {RelativeRanges} from 'components/timestamp';\nimport UserProfileComponent from 'components/user_profile';\nimport Avatar from 'components/widgets/users/avatar';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {ModalIdentifiers, StoragePrefixes} from 'utils/constants';\nimport {imageURLForUser} from 'utils/utils';\n\nimport RestorePostModal from '../restore_post_modal';\n\nimport './edited_post_items.scss';\n\nimport type {PropsFromRedux} from './index';\n\nconst DATE_RANGES = [\n    RelativeRanges.TODAY_TITLE_CASE,\n    RelativeRanges.YESTERDAY_TITLE_CASE,\n];\n\nconst itemMessages = defineMessages({\n    helpText: {\n        id: 'post_info.edit.restore',\n        defaultMessage: 'Restore this version',\n    },\n    currentVersionText: {\n        id: 'post_info.edit.current_version',\n        defaultMessage: 'Current Version',\n    },\n    ariaLabelMessage: {\n        id: 'post_info.edit.aria_label',\n        defaultMessage: 'Select to restore an old message.',\n    },\n});\n\nexport type Props = PropsFromRedux & {\n    post: Post;\n    isCurrent?: boolean;\n    theme: Theme;\n}\n\nconst EditedPostItem = ({post, isCurrent = false, postCurrentVersion, theme, actions}: Props) => {\n    const {formatMessage} = useIntl();\n    const [open, setOpen] = useState(isCurrent);\n\n    const dispatch = useDispatch();\n\n    const connectionId = useSelector(getConnectionId);\n\n    const openRestorePostModal = useCallback((e) => {\n        // this prevents history item from\n        // collapsing and closing when clicking on restore button\n        e.stopPropagation();\n\n        const restorePostModalData = {\n            modalId: ModalIdentifiers.RESTORE_POST_MODAL,\n            dialogType: RestorePostModal,\n            dialogProps: {\n                post,\n                postHeader,\n                actions: {\n                    handleRestore,\n                },\n            },\n        };\n\n        actions.openModal(restorePostModalData);\n    }, [actions, post]);\n\n    const togglePost = () => {\n        setOpen((prevState) => !prevState);\n    };\n\n    if (!post) {\n        return null;\n    }\n\n    const showInfoTooltip = () => {\n        const infoToastModalData = {\n            modalId: ModalIdentifiers.INFO_TOAST,\n            dialogType: InfoToast,\n            dialogProps: {\n                content: {\n                    icon: <CheckIcon size={18}/>,\n                    message: 'Restored Message',\n                    undo: handleUndo,\n                },\n            },\n        };\n\n        actions.openModal(infoToastModalData);\n    };\n\n    const handleRestore = async () => {\n        if (!postCurrentVersion || !post) {\n            actions.closeRightHandSide();\n            return;\n        }\n\n        const result = await dispatch(restorePostVersion(post.original_id, post.id, connectionId));\n        if (result.data) {\n            actions.closeRightHandSide();\n            showInfoTooltip();\n        }\n\n        const key = StoragePrefixes.EDIT_DRAFT + post.original_id;\n        dispatch(removeDraft(key, post.channel_id, post.root_id));\n    };\n\n    const handleUndo = async () => {\n        if (!postCurrentVersion) {\n            actions.closeRightHandSide();\n            return;\n        }\n\n        // To undo a recent restore, you need to restore the previous version of the post right before this restore.\n        // That would be the first history item in post's edit history as it is the most recent edit\n        // and edit history is sorted from most recent first to oldest.\n        const result = await dispatch(getPostEditHistory(post.original_id));\n        if (!result.data || result.data.length === 0) {\n            return;\n        }\n\n        const previousPostVersion = result.data[0];\n        await dispatch(restorePostVersion(previousPostVersion.original_id, previousPostVersion.id, connectionId));\n    };\n\n    const currentVersionIndicator = isCurrent ? (\n        <div className='edit-post-history__current__indicator'>\n            {formatMessage(itemMessages.currentVersionText)}\n        </div>\n    ) : null;\n\n    const profileSrc = imageURLForUser(post.user_id);\n\n    const overwriteName = ensureString(post.props?.override_username);\n    const postHeader = (\n        <div className='edit-post-history__header'>\n            <span className='profile-icon'>\n                <Avatar\n                    size={'sm'}\n                    url={profileSrc}\n                    className={'avatar-post-preview'}\n                />\n            </span>\n            <div className={'edit-post-history__header__username'}>\n                <UserProfileComponent\n                    userId={post.user_id}\n                    disablePopover={true}\n                    overwriteName={overwriteName}\n                />\n            </div>\n        </div>\n    );\n\n    const message = (\n        <PostMessageContainer\n            post={post}\n            isRHS={true}\n            showPostEditedIndicator={false}\n        />\n    );\n\n    const isFileDeleted = post.delete_at > 0;\n\n    const messageContainer = (\n        <div className='edit-post-history__content_container'>\n            {postHeader}\n            <div className='post__content'>\n                <div className='search-item-snippet post__body'>\n                    {message}\n                </div>\n            </div>\n            <FileAttachmentListContainer\n                post={post}\n                isEditHistory={isFileDeleted}\n                disableDownload={isFileDeleted}\n                disableActions={isFileDeleted}\n            />\n        </div>\n    );\n\n    const restoreButton = isCurrent ? null : (\n        <WithTooltip\n            title={formatMessage(itemMessages.helpText)}\n        >\n            <button\n                className='edit-post-history__icon__button restore-icon'\n                onClick={openRestorePostModal}\n                aria-label={formatMessage(itemMessages.ariaLabelMessage)}\n            >\n                <i className={'icon icon-restore'}/>\n            </button>\n        </WithTooltip>\n    );\n\n    const postContainerClass = classNames('edit-post-history__container', {'edit-post-history__container__background': open});\n    const timeStampValue = post.edit_at === 0 ? post.create_at : post.edit_at;\n\n    return (\n        <CompassThemeProvider theme={theme}>\n            <div\n                className={postContainerClass}\n                onClick={togglePost}\n            >\n                <PostAriaLabelDiv\n                    className={'a11y__section post'}\n                    id={'searchResult_' + post.id}\n                    post={post}\n                >\n                    <div\n                        className='edit-post-history__title__container'\n                    >\n                        <div className='edit-post-history__date__badge__container'>\n                            <button\n                                aria-label='Toggle to see an old message.'\n                                className='edit-post-history__icon__button toggleCollapseButton'\n                            >\n                                <i className={`icon ${open ? 'icon-chevron-down' : 'icon-chevron-right'}`}/>\n                            </button>\n                            <span className='edit-post-history__date'>\n                                <Timestamp\n                                    value={timeStampValue}\n                                    ranges={DATE_RANGES}\n                                />\n                            </span>\n                            {currentVersionIndicator}\n                        </div>\n                        {restoreButton}\n                    </div>\n                    {open && messageContainer}\n                </PostAriaLabelDiv>\n            </div>\n        </CompassThemeProvider>\n    );\n};\n\nexport default memo(EditedPostItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\nimport {editPost} from 'actions/views/posts';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getSelectedPostId} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport EditedPostItem from './edited_post_item';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selectedPostId = getSelectedPostId(state) || '';\n    const theme = getTheme(state);\n\n    return {\n        theme,\n        postCurrentVersion: getPost(state, selectedPostId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            editPost,\n            closeRightHandSide,\n            openModal,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(EditedPostItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect, useRef, useState} from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getPostEditHistory} from 'mattermost-redux/actions/posts';\n\nimport AlertIcon from 'components/common/svg_images_components/alert_svg';\nimport LoadingScreen from 'components/loading_screen';\nimport SearchResultsHeader from 'components/search_results_header';\n\nimport EditedPostItem from './edited_post_item';\n\nimport type {PropsFromRedux} from './index';\nimport './post_edit_history.scss';\n\nconst renderView = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--view'\n    />\n);\n\nconst renderThumbHorizontal = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--horizontal'\n    />\n);\n\nconst renderThumbVertical = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--vertical'\n    />\n);\n\nconst PostEditHistory = ({\n    channelDisplayName,\n    originalPost,\n}: PropsFromRedux) => {\n    const [postEditHistory, setPostEditHistory] = useState<Post[]>([]);\n    const [hasError, setHasError] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const dispatch = useDispatch();\n    const scrollbars = useRef<Scrollbars | null>(null);\n    const {formatMessage} = useIntl();\n    const retrieveErrorHeading = formatMessage({\n        id: 'post_info.edit.history.retrieveError',\n        defaultMessage: 'Unable to load edit history',\n    });\n    const retrieveErrorSubheading = formatMessage({\n        id: 'post_info.edit.history.retrieveErrorVerbose',\n        defaultMessage: 'There was an error loading the history for this message. Check your network connection or try again later.',\n    });\n\n    useEffect(() => {\n        const fetchPostEditHistory = async () => {\n            setIsLoading(true);\n            const result = await dispatch(getPostEditHistory(originalPost.id));\n            if (result.data) {\n                setPostEditHistory(result.data);\n                setHasError(false);\n            } else {\n                setHasError(true);\n                setPostEditHistory([]);\n            }\n            setIsLoading(false);\n        };\n        fetchPostEditHistory();\n        scrollbars.current?.scrollToTop();\n    }, [originalPost, dispatch]);\n\n    useEffect(() => {\n        setPostEditHistory([]);\n        setHasError(false);\n    }, [originalPost.id]);\n\n    const title = formatMessage({\n        id: 'search_header.title_edit.history',\n        defaultMessage: 'Edit History',\n    });\n\n    const errorContainer: JSX.Element = (\n        <div className='edit-post-history__error_container'>\n            <div className='edit-post-history__error_item'>\n                <AlertIcon\n                    width={127}\n                    height={127}\n                />\n                <p className='edit-post-history__error_heading'>\n                    {retrieveErrorHeading}\n                </p>\n                <p className='edit-post-history__error_subheading'>\n                    {retrieveErrorSubheading}\n                </p>\n            </div>\n        </div>\n    );\n\n    if (isLoading && postEditHistory.length === 0) {\n        return (\n            <div\n                id='rhsContainer'\n                className='sidebar-right__body sidebar-right__edit-post-history'\n            >\n                <LoadingScreen\n                    style={{\n                        display: 'grid',\n                        placeContent: 'center',\n                        flex: '1',\n                    }}\n                />\n            </div>\n        );\n    }\n\n    const currentItem = (\n        <EditedPostItem\n            post={originalPost}\n            key={originalPost.id}\n            isCurrent={true}\n        />\n    );\n\n    const postEditItems = [currentItem, ...postEditHistory.map((postEdited) => (\n        <EditedPostItem\n            key={postEdited.id}\n            post={postEdited}\n        />\n    ))];\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body sidebar-right__edit-post-history'\n        >\n            <Scrollbars\n                ref={scrollbars}\n                autoHide={true}\n                autoHideTimeout={500}\n                autoHideDuration={500}\n                renderThumbHorizontal={renderThumbHorizontal}\n                renderThumbVertical={renderThumbVertical}\n                renderView={renderView}\n            >\n                <SearchResultsHeader>\n                    {title}\n                    <div className='sidebar--right__title__channel'>{channelDisplayName}</div>\n                </SearchResultsHeader>\n                {hasError ? errorContainer : postEditItems}\n            </Scrollbars>\n        </div>\n    );\n};\n\nexport default memo(PostEditHistory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {getChannel, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {getSelectedPostId} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostEditHistory from './post_edit_history';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selectedPostId = getSelectedPostId(state) || '';\n    const originalPost = getPost(state, selectedPostId);\n    const channel = getCurrentChannel(state) ?? getChannel(state, originalPost.channel_id);\n    const channelDisplayName = channel?.display_name || '';\n\n    return {\n        channelDisplayName,\n        originalPost,\n    };\n}\n\nconst connector = connect(mapStateToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PostEditHistory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {HTMLAttributes} from 'react';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {getIsRhsExpanded, getRhsSize} from 'selectors/rhs';\n\nimport {CssVarKeyForResizable, RHS_MIN_MAX_WIDTH, ResizeDirection} from '../constants';\nimport ResizableDivider from '../resizable_divider';\nimport {shouldRhsOverlapChannelView} from '../utils';\n\ninterface Props extends HTMLAttributes<'div'> {\n    children: React.ReactNode;\n    rightWidthHolderRef: React.RefObject<HTMLDivElement>;\n    ariaLabel?: string;\n    ariaLabeledby?: string;\n}\n\nfunction ResizableRhs({\n    role,\n    children,\n    id,\n    className,\n    rightWidthHolderRef,\n    ariaLabel,\n    ariaLabeledby,\n}: Props) {\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const rhsSize = useSelector(getRhsSize);\n    const isRhsExpanded = useSelector(getIsRhsExpanded);\n\n    const [previousRhsExpanded, setPreviousRhsExpanded] = useState(false);\n\n    const defaultWidth = RHS_MIN_MAX_WIDTH[rhsSize].default;\n\n    const shouldRhsOverlap = shouldRhsOverlapChannelView(rhsSize);\n\n    const handleResize = (_: number, cssVarProp: string, cssVarValue: string) => {\n        const rightWidthHolderRefElement = rightWidthHolderRef.current;\n\n        if (!rightWidthHolderRefElement) {\n            return;\n        }\n\n        if (!shouldRhsOverlap) {\n            rightWidthHolderRefElement.style.setProperty(cssVarProp, cssVarValue);\n        }\n    };\n\n    const handleResizeEnd = (_: number, cssVarProp: string) => {\n        const rightWidthHolderRefElement = rightWidthHolderRef.current;\n\n        if (!rightWidthHolderRefElement) {\n            return;\n        }\n\n        rightWidthHolderRefElement.style.removeProperty(cssVarProp);\n    };\n\n    const handleDividerDoubleClick = (_: number, cssVarProp: string) => {\n        handleResizeEnd(_, cssVarProp);\n\n        document.body.classList.add('layout-changing');\n\n        setTimeout(() => {\n            document.body.classList.remove('layout-changing');\n        }, 1000);\n    };\n\n    // If max-width is applied immediately when expanded is collapsed, the transition will not work correctly.\n    useEffect(() => {\n        const containerRefElement = containerRef.current;\n\n        if (!containerRefElement) {\n            return;\n        }\n\n        setPreviousRhsExpanded(isRhsExpanded);\n\n        if (previousRhsExpanded && !isRhsExpanded) {\n            containerRefElement.classList.add('resize-disabled');\n\n            setTimeout(() => {\n                containerRefElement.classList.remove('resize-disabled');\n            }, 1000);\n        }\n    }, [isRhsExpanded]);\n\n    return (\n        <div\n            id={id}\n            className={className}\n            role={role}\n            ref={containerRef}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabeledby || 'rhsPanelTitle'}\n        >\n            {children}\n            <ResizableDivider\n                name='rhsResizeHandle'\n                globalCssVar={CssVarKeyForResizable.RHS}\n                defaultWidth={defaultWidth}\n                dir={ResizeDirection.RIGHT}\n                disabled={isRhsExpanded}\n                containerRef={containerRef}\n                onResize={handleResize}\n                onResizeEnd={handleResizeEnd}\n                onDividerDoubleClick={handleDividerDoubleClick}\n            />\n        </div>\n    );\n}\n\nexport default ResizableRhs;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type IntlShape} from 'react-intl';\n\nimport KeyboardShortcutSequence, {\n    KEYBOARD_SHORTCUTS,\n} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {RhsState} from 'types/store/rhs';\n\ntype Props = {\n    intl: IntlShape;\n    previousRhsState?: RhsState;\n    isExpanded: boolean;\n    actions: {\n        showMentions: () => void;\n        showSearchResults: () => void;\n        showFlaggedPosts: () => void;\n        showPinnedPosts: () => void;\n        closeRightHandSide: () => void;\n        toggleRhsExpanded: () => void;\n    };\n};\n\nclass RhsCardHeader extends React.PureComponent<Props> {\n    handleBack = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.CHANNEL_FILES:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.SEARCH:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.MENTION:\n            this.props.actions.showMentions();\n            break;\n        case RHSStates.FLAG:\n            this.props.actions.showFlaggedPosts();\n            break;\n        case RHSStates.PIN:\n            this.props.actions.showPinnedPosts();\n            break;\n        default:\n            break;\n        }\n    };\n\n    render(): React.ReactNode {\n        let back;\n        let title;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            title = (\n                <FormattedMessage\n                    id='rhs_header.backToResultsTooltip'\n                    defaultMessage='Back to search results'\n                />\n            );\n            break;\n        case RHSStates.FLAG:\n            title = (\n                <FormattedMessage\n                    id='rhs_header.backToFlaggedTooltip'\n                    defaultMessage='Back to saved messages'\n                />\n            );\n            break;\n        case RHSStates.PIN:\n            title = (\n                <FormattedMessage\n                    id='rhs_header.backToPinnedTooltip'\n                    defaultMessage='Back to pinned messages'\n                />\n            );\n            break;\n        }\n\n        const expandSidebarTooltip = (\n            <>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        );\n\n        const shrinkSidebarTooltip = (\n            <>\n                <FormattedMessage\n                    id='rhs_header.collapseSidebarTooltip'\n                    defaultMessage='Collapse the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        );\n\n        if (title) {\n            back = (\n                <WithTooltip\n                    title={title}\n                >\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={this.handleBack}\n                        aria-label={this.props.intl.formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                </WithTooltip>\n            );\n        }\n\n        const collapseIconLabel = this.props.intl.formatMessage({id: 'rhs_header.collapseSidebarTooltip.icon', defaultMessage: 'Collapse Sidebar Icon'});\n        const expandIconLabel = this.props.intl.formatMessage({id: 'rhs_header.expandSidebarTooltip.icon', defaultMessage: 'Expand Sidebar Icon'});\n\n        return (\n            <div className='sidebar--right__header'>\n                <span\n                    className='sidebar--right__title'\n                    id='rhsPanelTitle'\n                >\n                    {back}\n                    <FormattedMessage\n                        id='search_header.title5'\n                        defaultMessage='Extra information'\n                    />\n                </span>\n                <div className='pull-right'>\n                    <WithTooltip\n                        title={this.props.isExpanded ? shrinkSidebarTooltip : expandSidebarTooltip}\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__expand btn btn-icon btn-sm'\n                            aria-label={this.props.isExpanded ? collapseIconLabel : expandIconLabel}\n                            onClick={this.props.actions.toggleRhsExpanded}\n                        >\n                            <i\n                                className='icon icon-arrow-expand'\n                            />\n                            <i\n                                className='icon icon-arrow-collapse'\n                            />\n                        </button>\n                    </WithTooltip>\n                    <WithTooltip\n                        title={\n                            <FormattedMessage\n                                id='rhs_header.closeSidebarTooltip'\n                                defaultMessage='Close'\n                            />\n                        }\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__close btn btn-icon btn-sm'\n                            aria-label='Close'\n                            onClick={this.props.actions.closeRightHandSide}\n                        >\n                            <i\n                                className='icon icon-close'\n                                aria-label={this.props.intl.formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                            />\n                        </button>\n                    </WithTooltip>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(RhsCardHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport {\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\nimport {getIsRhsExpanded} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsCardHeader from './rhs_card_header';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isExpanded: getIsRhsExpanded(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            showMentions,\n            showSearchResults,\n            showFlaggedPosts,\n            showPinnedPosts,\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RhsCardHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport {ensureString} from 'mattermost-redux/utils/post_utils';\n\nimport {emitCloseRightHandSide} from 'actions/global_actions';\n\nimport Markdown from 'components/markdown';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport RhsCardHeader from 'components/rhs_card_header';\nimport UserProfile from 'components/user_profile';\n\nimport Constants from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\n\nimport type {PostPluginComponent} from 'types/store/plugins';\nimport type {RhsState} from 'types/store/rhs';\n\ntype Props = {\n    isMobileView: boolean;\n    selected?: Post;\n    pluginPostCardTypes?: Record<string, PostPluginComponent>;\n    previousRhsState?: RhsState;\n    enablePostUsernameOverride?: boolean;\n    teamUrl?: string;\n};\n\ntype State = {\n    isScrolling: boolean;\n};\n\nexport function renderView(props: Props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />\n    );\n}\n\nexport function renderThumbHorizontal(props: Props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />\n    );\n}\n\nexport function renderThumbVertical(props: Props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />\n    );\n}\n\nexport default class RhsCard extends React.Component<Props, State> {\n    scrollStopAction: DelayedAction;\n\n    static defaultProps = {\n        pluginPostCardTypes: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        this.state = {\n            isScrolling: false,\n        };\n    }\n\n    shouldComponentUpdate(nextProps: Props, nextState: State) {\n        if (!deepEqual(nextProps.selected?.props?.card, this.props.selected?.props?.card)) {\n            return true;\n        }\n        if (nextState.isScrolling !== this.state.isScrolling) {\n            return true;\n        }\n        return false;\n    }\n\n    handleScroll = () => {\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    };\n\n    handleScrollStop = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    };\n\n    handleClick = () => {\n        if (this.props.isMobileView) {\n            emitCloseRightHandSide();\n        }\n    };\n\n    render() {\n        if (this.props.selected == null) {\n            return (<div/>);\n        }\n\n        const {selected, pluginPostCardTypes, teamUrl} = this.props;\n        const postType = selected.type;\n        let content: ReactNode = null;\n        if (pluginPostCardTypes && Object.hasOwn(pluginPostCardTypes, postType)) {\n            const PluginComponent = pluginPostCardTypes[postType].component;\n            content = <PluginComponent post={selected}/>;\n        }\n\n        if (!content) {\n            const message = ensureString(selected.props?.card);\n            content = (\n                <div className='info-card'>\n                    <Markdown message={message}/>\n                </div>\n            );\n        }\n\n        let user = (\n            <UserProfile\n                userId={selected.user_id}\n                hideStatus={true}\n                disablePopover={true}\n            />\n        );\n        const overrideUsername = ensureString(selected.props.override_username);\n        if (overrideUsername && this.props.enablePostUsernameOverride) {\n            user = (\n                <UserProfile\n                    userId={selected.user_id}\n                    hideStatus={true}\n                    disablePopover={true}\n                    overwriteName={overrideUsername}\n                />\n            );\n        }\n        const avatar = (\n            <PostProfilePicture\n                compactDisplay={false}\n                post={selected}\n                userId={selected.user_id}\n            />\n        );\n\n        return (\n            <div className='sidebar-right__body sidebar-right__card'>\n                <RhsCardHeader previousRhsState={this.props.previousRhsState}/>\n                <Scrollbars\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-right__scroll'>\n                        {content}\n                        <div className='d-flex post-card--info'>\n                            <div className='post-card--post-by overflow--ellipsis'>\n                                <FormattedMessage\n                                    id='rhs_card.message_by'\n                                    defaultMessage='Message by {avatar} {user}'\n                                    values={{user, avatar}}\n                                />\n                            </div>\n                            <div className='post-card--view-post'>\n                                <Link\n                                    to={`${teamUrl}/pl/${selected.id}`}\n                                    className='post__permalink'\n                                    onClick={this.handleClick}\n                                >\n                                    <FormattedMessage\n                                        id='rhs_card.jump'\n                                        defaultMessage='Jump'\n                                    />\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSelectedPostCard} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsCard from './rhs_card';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selected = getSelectedPostCard(state);\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    return {\n        enablePostUsernameOverride,\n        isMobileView: getIsMobileView(state),\n        selected,\n        pluginPostCardTypes: state.plugins.postCardTypes,\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(RhsCard);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {TourTip, useFollowElementDimensions, useMeasurePunchouts} from '@mattermost/components';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\n\nimport {Constants, Preferences} from 'utils/constants';\n\nconst translate = {x: 2, y: 25};\n\nconst CRTThreadsPaneTutorialTip = () => {\n    const dispatch = useDispatch();\n    const {formatMessage} = useIntl();\n    const currentUserId = useSelector(getCurrentUserId);\n\n    const dimensions = useFollowElementDimensions('sidebar-right');\n\n    const title = (\n        <FormattedMessage\n            id='tutorial_threads.threads_pane.title'\n            defaultMessage={'Viewing a thread in the sidebar'}\n        />\n    );\n\n    const screen = (\n        <p>\n            {formatMessage<ReactNode>(\n                {\n                    id: 'tutorial_threads.threads_pane.description',\n                    defaultMessage: 'Click the <b>Follow</b> button to be notified about replies and see it in your <b>Threads</b> view. Within a thread, the <b>New Messages</b> line shows you where you left off.',\n                },\n                {\n                    b: (value: string) => <b>{value}</b>,\n                },\n            )}\n        </p>\n    );\n\n    const nextBtn = (): JSX.Element => {\n        return (\n            <FormattedMessage\n                id={'tutorial_tip.got_it'}\n                defaultMessage={'Got it'}\n            />\n        );\n    };\n\n    const onDismiss = (e: React.MouseEvent) => {\n        e.preventDefault();\n        const preferences = [\n            {\n                user_id: currentUserId,\n                category: Preferences.CRT_THREAD_PANE_STEP,\n                name: currentUserId,\n                value: Constants.CrtThreadPaneSteps.FINISHED.toString(),\n            },\n        ];\n        dispatch(savePreferences(currentUserId, preferences));\n    };\n\n    const overlayPunchOut = useMeasurePunchouts(['rhsContainer'], [dimensions?.width]);\n\n    return (\n        <TourTip\n            show={true}\n            screen={screen}\n            title={title}\n            overlayPunchOut={overlayPunchOut}\n            placement='left'\n            pulsatingDotPlacement='top-start'\n            pulsatingDotTranslate={translate}\n            step={1}\n            singleTip={true}\n            showOptOut={false}\n            handleDismiss={onDismiss}\n            handleNext={onDismiss}\n            interactivePunchOut={true}\n            nextBtn={nextBtn()}\n        />\n    );\n};\n\nexport default CRTThreadsPaneTutorialTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport KeyboardShortcutSequence, {\n    KEYBOARD_SHORTCUTS,\n} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport FollowButton from 'components/threading/common/follow_button';\nimport CRTThreadsPaneTutorialTip\n    from 'components/tours/crt_tour/crt_threads_pane_tutorial_tip';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {getHistory} from 'utils/browser_history';\nimport {RHSStates} from 'utils/constants';\n\nimport type {RhsState} from 'types/store/rhs';\n\ntype Props = WrappedComponentProps & {\n    isExpanded: boolean;\n    isMobileView: boolean;\n    rootPostId: string;\n    previousRhsState?: RhsState;\n    relativeTeamUrl: string;\n    channel: Channel;\n    isCollapsedThreadsEnabled: boolean;\n    isFollowingThread?: boolean;\n    currentTeamId: string;\n    showThreadsTutorialTip: boolean;\n    currentUserId: string;\n    setRhsExpanded: (b: boolean) => void;\n    showMentions: () => void;\n    showSearchResults: () => void;\n    showFlaggedPosts: () => void;\n    showPinnedPosts: () => void;\n    goBack: () => void;\n    closeRightHandSide: (e?: React.MouseEvent) => void;\n    toggleRhsExpanded: (e: React.MouseEvent) => void;\n    setThreadFollow: (userId: string, teamId: string, threadId: string, newState: boolean) => void;\n};\n\nclass RhsHeaderPost extends React.PureComponent<Props> {\n    handleBack = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n        case RHSStates.FLAG:\n        case RHSStates.PIN:\n            this.props.goBack();\n            break;\n        default:\n            break;\n        }\n    };\n\n    handleJumpClick = () => {\n        if (this.props.isMobileView) {\n            this.props.closeRightHandSide();\n        }\n\n        this.props.setRhsExpanded(false);\n        const teamUrl = this.props.relativeTeamUrl;\n        getHistory().push(`${teamUrl}/pl/${this.props.rootPostId}`);\n    };\n\n    handleFollowChange = () => {\n        const {currentTeamId, currentUserId, rootPostId, isFollowingThread} = this.props;\n        this.props.setThreadFollow(currentUserId, currentTeamId, rootPostId, !isFollowingThread);\n    };\n\n    render() {\n        let back;\n        const {isFollowingThread} = this.props;\n        const {formatMessage} = this.props.intl;\n        const closeSidebarTooltip = (\n            <FormattedMessage\n                id='rhs_header.closeSidebarTooltip'\n                defaultMessage='Close'\n            />\n        );\n\n        let backToResultsTooltip;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            backToResultsTooltip = (\n                <FormattedMessage\n                    id='rhs_header.backToResultsTooltip'\n                    defaultMessage='Back to search results'\n                />\n            );\n            break;\n        case RHSStates.FLAG:\n            backToResultsTooltip = (\n                <FormattedMessage\n                    id='rhs_header.backToFlaggedTooltip'\n                    defaultMessage='Back to saved messages'\n                />\n            );\n            break;\n        case RHSStates.PIN:\n            backToResultsTooltip = (\n                <FormattedMessage\n                    id='rhs_header.backToPinnedTooltip'\n                    defaultMessage='Back to pinned messages'\n                />\n            );\n            break;\n        }\n\n        //rhsHeaderTooltipContent contains tooltips content for expand or shrink sidebarTooltip.\n        // if props.isExpanded is true, defaultMessage would feed from 'shrinkTooltip', else 'expandTooltip'\n        const rhsHeaderTooltipContent = this.props.isExpanded ? (\n            <>\n                <FormattedMessage\n                    id='rhs_header.collapseSidebarTooltip'\n                    defaultMessage='Collapse the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        ) : (\n            <>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        );\n\n        const channelName = this.props.channel.display_name;\n\n        if (backToResultsTooltip) {\n            back = (\n                <WithTooltip\n                    title={backToResultsTooltip}\n                >\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={this.handleBack}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                </WithTooltip>\n            );\n        }\n\n        const collapseIconLabel = formatMessage({id: 'rhs_header.collapseSidebarTooltip.icon', defaultMessage: 'Collapse Sidebar Icon'});\n        const expandIconLabel = formatMessage({id: 'rhs_header.expandSidebarTooltip.icon', defaultMessage: 'Expand Sidebar Icon'});\n\n        return (\n            <div className='sidebar--right__header'>\n                <span\n                    className='sidebar--right__title'\n                    id='rhsPanelTitle'\n                >\n                    {back}\n                    <FormattedMessage\n                        id='rhs_header.details'\n                        defaultMessage='Thread'\n                    />\n                    {channelName &&\n                        <button\n                            onClick={this.handleJumpClick}\n                            className='style--none sidebar--right__title__channel'\n                        >\n                            {channelName}\n                        </button>\n                    }\n                </span>\n                <div className='controls'>\n                    {this.props.isCollapsedThreadsEnabled ? (\n                        <FollowButton\n                            className='sidebar--right__follow__thread'\n                            isFollowing={isFollowingThread}\n                            onClick={this.handleFollowChange}\n                        />\n                    ) : null}\n\n                    <WithTooltip\n                        title={rhsHeaderTooltipContent}\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__expand btn btn-icon btn-sm'\n                            aria-label={this.props.isExpanded ? collapseIconLabel : expandIconLabel}\n                            onClick={this.props.toggleRhsExpanded}\n                        >\n                            <i\n                                className='icon icon-arrow-expand'\n                            />\n                            <i\n                                className='icon icon-arrow-collapse'\n                            />\n                        </button>\n                    </WithTooltip>\n\n                    <WithTooltip\n                        title={closeSidebarTooltip}\n                    >\n                        <button\n                            id='rhsCloseButton'\n                            type='button'\n                            className='sidebar--right__close btn btn-icon btn-sm'\n                            aria-label='Close'\n                            onClick={this.props.closeRightHandSide}\n                        >\n                            <i\n                                className='icon icon-close'\n                                aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                            />\n                        </button>\n                    </WithTooltip>\n                </div>\n                {this.props.showThreadsTutorialTip && <CRTThreadsPaneTutorialTip/>}\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(RhsHeaderPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ComponentProps} from 'react';\nimport {connect} from 'react-redux';\n\nimport {setThreadFollow} from 'mattermost-redux/actions/threads';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getInt, isCollapsedThreadsEnabled, onboardingTourTipsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetThreadOrSynthetic} from 'mattermost-redux/selectors/entities/threads';\nimport {getCurrentUserId, getCurrentUserMentionKeys} from 'mattermost-redux/selectors/entities/users';\n\nimport {\n    setRhsExpanded,\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    showChannelFiles,\n    closeRightHandSide,\n    toggleRhsExpanded,\n    goBack,\n} from 'actions/views/rhs';\nimport {getIsRhsExpanded} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {CrtThreadPaneSteps, Preferences} from 'utils/constants';\nimport {matchUserMentionTriggersWithMessageMentions} from 'utils/post_utils';\nimport {allAtMentions} from 'utils/text_formatting';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsHeaderPost from './rhs_header_post';\n\ntype OwnProps = Pick<ComponentProps<typeof RhsHeaderPost>, 'rootPostId'>\n\nfunction makeMapStateToProps() {\n    const getThreadOrSynthetic = makeGetThreadOrSynthetic();\n\n    return function mapStateToProps(state: GlobalState, {rootPostId}: OwnProps) {\n        let isFollowingThread = false;\n\n        const collapsedThreads = isCollapsedThreadsEnabled(state);\n        const root = getPost(state, rootPostId);\n        const currentUserId = getCurrentUserId(state);\n        const tipStep = getInt(state, Preferences.CRT_THREAD_PANE_STEP, currentUserId);\n\n        if (root && collapsedThreads) {\n            const thread = getThreadOrSynthetic(state, root);\n            isFollowingThread = thread.is_following;\n\n            if (isFollowingThread === null && thread.reply_count === 0) {\n                const currentUserMentionKeys = getCurrentUserMentionKeys(state);\n                const rootMessageMentionKeys = allAtMentions(root.message);\n\n                isFollowingThread = matchUserMentionTriggersWithMessageMentions(currentUserMentionKeys, rootMessageMentionKeys);\n            }\n        }\n\n        const showThreadsTutorialTip = tipStep === CrtThreadPaneSteps.THREADS_PANE_POPOVER && isCollapsedThreadsEnabled(state) && onboardingTourTipsEnabled(state);\n\n        return {\n            isExpanded: getIsRhsExpanded(state),\n            isMobileView: getIsMobileView(state),\n            relativeTeamUrl: getCurrentRelativeTeamUrl(state),\n            currentTeamId: getCurrentTeamId(state),\n            currentUserId,\n            isCollapsedThreadsEnabled: collapsedThreads,\n            isFollowingThread,\n            showThreadsTutorialTip,\n        };\n    };\n}\n\nconst actions = {\n    setRhsExpanded,\n    showSearchResults,\n    showMentions,\n    showFlaggedPosts,\n    showPinnedPosts,\n    showChannelFiles,\n    closeRightHandSide,\n    toggleRhsExpanded,\n    setThreadFollow,\n    goBack,\n};\n\nexport default connect(makeMapStateToProps, actions)(RhsHeaderPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Post} from '@mattermost/types/posts';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {closeRightHandSide} from 'actions/views/rhs';\n\nimport RhsHeaderPost from 'components/rhs_header_post';\nimport ThreadViewer from 'components/threading/thread_viewer';\n\nimport type {FakePost, RhsState} from 'types/store/rhs';\n\ntype Props = {\n    currentTeam?: Team;\n    channel?: Channel;\n    selected: Post | FakePost;\n    previousRhsState?: RhsState;\n}\n\nconst RhsThread = ({\n    currentTeam,\n    channel,\n    selected,\n    previousRhsState,\n}: Props) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (channel?.team_id && channel.team_id !== currentTeam?.id) {\n            // if team-scoped and mismatched team, close rhs\n            dispatch(closeRightHandSide());\n        }\n    }, [currentTeam, channel, dispatch]);\n\n    if (selected == null || !channel) {\n        return (\n            <div/>\n        );\n    }\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n            <RhsHeaderPost\n                rootPostId={selected.id}\n                channel={channel}\n                previousRhsState={previousRhsState}\n            />\n            <ThreadViewer\n                rootPostId={selected.id}\n                useRelativeTimestamp={true}\n                isThreadView={false}\n            />\n        </div>\n    );\n};\n\nexport default memo(RhsThread);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSelectedChannel, getSelectedPost} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsThread from './rhs_thread';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selected = getSelectedPost(state);\n    const channel = getSelectedChannel(state);\n    const currentTeam = getCurrentTeam(state);\n\n    return {\n        selected,\n        channel,\n        currentTeam,\n    };\n}\nexport default connect(mapStateToProps)(RhsThread);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {Popover as BSPopover} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Popover from 'components/widgets/popover';\n\nimport Constants from 'utils/constants';\n\nimport type {UserProfile} from './command_provider/app_command_parser/app_command_parser_dependencies';\nimport type {Props} from './suggestion_list';\nimport SuggestionList from './suggestion_list';\n\ninterface Item extends UserProfile {\n    type: string;\n    display_name: string;\n    name: string;\n}\n\nexport default class SearchSuggestionList extends SuggestionList {\n    popoverRef: React.RefObject<BSPopover>;\n    itemsContainerRef: React.RefObject<HTMLDivElement>;\n    suggestionReadOut: React.RefObject<HTMLDivElement>;\n    currentLabel: string;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.popoverRef = React.createRef();\n        this.itemsContainerRef = React.createRef();\n        this.suggestionReadOut = React.createRef();\n        this.currentLabel = '';\n    }\n\n    generateLabel(item: Item) {\n        if (item.username) {\n            this.currentLabel = item.username;\n            if ((item.first_name || item.last_name) && item.nickname) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name} ${item.nickname}`;\n            } else if (item.nickname) {\n                this.currentLabel += ` ${item.nickname}`;\n            } else if (item.first_name || item.last_name) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name}`;\n            }\n        } else if (item.type === Constants.DM_CHANNEL || item.type === Constants.GM_CHANNEL) {\n            this.currentLabel = item.display_name;\n        } else {\n            this.currentLabel = item.name;\n        }\n\n        if (this.currentLabel) {\n            this.currentLabel = this.currentLabel.toLowerCase();\n        }\n\n        this.announceLabel();\n    }\n\n    getContent = () => {\n        return this.itemsContainerRef?.current?.parentNode as HTMLUListElement | null;\n    };\n\n    renderChannelDivider(type: string) {\n        let text;\n        if (type === Constants.OPEN_CHANNEL) {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.public'\n                    defaultMessage='Public Channels'\n                />\n            );\n        } else if (type === Constants.PRIVATE_CHANNEL) {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.private'\n                    defaultMessage='Private Channels'\n                />\n            );\n        } else {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.direct'\n                    defaultMessage='Direct Messages'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={type + '-divider'}\n                className='search-autocomplete__divider'\n            >\n                <span>{text}</span>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.items.length === 0) {\n            return null;\n        }\n\n        const items: JSX.Element[] = [];\n        let haveDMDivider = false;\n        for (let i = 0; i < this.props.items.length; i++) {\n            const item: any = this.props.items[i];\n            const term = this.props.terms[i];\n            const isSelection = term === this.props.selection;\n\n            // ReactComponent names need to be upper case when used in JSX\n            const Component = this.props.components[i];\n\n            // temporary hack to add dividers between public and private channels in the search suggestion list\n            if (this.props.renderDividers) {\n                if (i === 0 || item.type !== this.props.items[i - 1].type) {\n                    if (item.type === Constants.DM_CHANNEL || item.type === Constants.GM_CHANNEL) {\n                        if (!haveDMDivider) {\n                            items.push(this.renderChannelDivider(Constants.DM_CHANNEL));\n                        }\n                        haveDMDivider = true;\n                    } else if (item.type === Constants.PRIVATE_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.PRIVATE_CHANNEL));\n                    } else if (item.type === Constants.OPEN_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.OPEN_CHANNEL));\n                    }\n                }\n            }\n\n            if (isSelection) {\n                this.currentItem = item;\n            }\n\n            items.push(\n                <Component\n                    key={term}\n                    ref={(ref: React.RefObject<HTMLDivElement>) => this.itemRefs.set(term, ref)}\n                    item={item}\n                    term={term}\n                    matchedPretext={this.props.matchedPretext[i]}\n                    isSelection={isSelection}\n                    onClick={this.props.onCompleteWord}\n                    onMouseMove={this.props.onItemHover}\n                />,\n            );\n        }\n\n        return (\n            <Popover\n                ref={this.popoverRef}\n                id='search-autocomplete__popover'\n                className='search-help-popover autocomplete visible'\n                placement='bottom'\n            >\n                <div\n                    ref={this.suggestionReadOut}\n                    aria-live='polite'\n                    className='hidden-label'\n                />\n                <div ref={this.itemsContainerRef}>\n                    {items}\n                </div>\n            </Popover>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport Popover from 'components/widgets/popover';\n\ntype SuggestionItem = {\n    date: string;\n    label: string;\n}\n\ntype SuggestionItemProps = {\n    key: string;\n    item: SuggestionItem;\n    term: string;\n    matchedPretext: string;\n    preventClose: () => void;\n    handleEscape: () => void;\n    isSelection: boolean;\n    onClick: (term: string, matchedPretext: string[], e?: React.MouseEvent<HTMLDivElement>) => boolean;\n}\n\ntype Props = {\n    onCompleteWord: (term: string, matchedPretext: string[], e?: React.MouseEvent<HTMLDivElement>) => boolean;\n    matchedPretext: string[];\n    items: SuggestionItem[];\n    terms: string[];\n    preventClose: () => void;\n    handleEscape: () => void;\n    components: Array<React.ComponentType<SuggestionItemProps>>;\n}\n\nconst SuggestionDate = ({\n    items,\n    terms,\n    components,\n    matchedPretext,\n    onCompleteWord,\n    preventClose,\n    handleEscape,\n}: Props) => {\n    if (items.length === 0) {\n        return null;\n    }\n\n    const item = items[0];\n    const term = terms[0];\n\n    // ReactComponent names need to be upper case when used in JSX\n    const Component = components[0];\n\n    return (\n        <Popover\n            id='search-autocomplete__popover'\n            className='search-help-popover autocomplete visible'\n            placement='bottom'\n        >\n            <Component\n                key={term}\n                item={item}\n                term={term}\n                matchedPretext={matchedPretext[0]}\n                isSelection={false}\n                onClick={onCompleteWord}\n                preventClose={preventClose}\n                handleEscape={handleEscape}\n            />\n        </Popover>\n    );\n};\n\nexport default memo(SuggestionDate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useEffect, useRef} from 'react';\nimport type {ChangeEvent, CSSProperties, FormEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport type Provider from 'components/suggestion/provider';\nimport SearchSuggestionList from 'components/suggestion/search_suggestion_list';\nimport SuggestionBox from 'components/suggestion/suggestion_box';\nimport type SuggestionBoxComponent from 'components/suggestion/suggestion_box/suggestion_box';\nimport SuggestionDate from 'components/suggestion/suggestion_date';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport Constants from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\n\nconst {KeyCodes} = Constants;\n\nconst style: Record<string, CSSProperties> = {\n    searchForm: {overflow: 'visible'},\n};\n\ntype Props = {\n    searchTerms: string;\n    updateHighlightedSearchHint: (indexDelta: number, changedViaKeyPress?: boolean) => void;\n    handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void;\n    handleEnterKey: (e: ChangeEvent<HTMLInputElement>) => void;\n    handleClear: () => void;\n    handleFocus: () => void;\n    handleBlur: () => void;\n    keepFocused: boolean;\n    setKeepFocused: (value: boolean) => void;\n    isFocused: boolean;\n    suggestionProviders: Provider[];\n    isSearchingTerm: boolean;\n    isSideBarRight?: boolean;\n    searchType: string;\n    clearSearchType?: () => void;\n    getFocus?: (searchBarFocus: () => void) => void;\n    children?: React.ReactNode;\n}\n\nconst defaultProps: Partial<Props> = {\n    isSideBarRight: false,\n    getFocus: (): void => {},\n    children: null,\n};\n\nconst SearchBar: React.FunctionComponent<Props> = (props: Props): JSX.Element => {\n    const {isFocused, keepFocused, searchTerms, suggestionProviders} = props;\n\n    const searchRef = useRef<SuggestionBoxComponent>();\n    const intl = useIntl();\n\n    useEffect((): void => {\n        const shouldFocus = isFocused || keepFocused;\n        if (shouldFocus) {\n            // let redux handle changes before focussing the input\n            setTimeout(() => searchRef.current?.focus(), 0);\n        } else {\n            setTimeout(() => searchRef.current?.blur(), 0);\n        }\n    }, [isFocused, keepFocused]);\n\n    useEffect((): void => {\n        if (isFocused && !keepFocused && searchTerms.endsWith('\"\"')) {\n            setTimeout(() => searchRef.current?.focus(), 0);\n        }\n    }, [searchTerms]);\n\n    const handleKeyDown = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (Keyboard.isKeyPressed(e as any, KeyCodes.ESCAPE)) {\n            searchRef.current?.blur();\n            e.stopPropagation();\n            e.preventDefault();\n        }\n\n        if (Keyboard.isKeyPressed(e as any, KeyCodes.DOWN)) {\n            e.preventDefault();\n            props.updateHighlightedSearchHint(1, true);\n        }\n\n        if (Keyboard.isKeyPressed(e as any, KeyCodes.UP)) {\n            e.preventDefault();\n            props.updateHighlightedSearchHint(-1, true);\n        }\n\n        if (Keyboard.isKeyPressed(e as any, KeyCodes.ENTER)) {\n            props.handleEnterKey(e);\n        }\n\n        if (Keyboard.isKeyPressed(e as any, KeyCodes.BACKSPACE) && !searchTerms) {\n            if (props.clearSearchType) {\n                props.clearSearchType();\n            }\n        }\n    };\n\n    const getSearch = (node: SuggestionBoxComponent): void => {\n        searchRef.current = node;\n        if (props.getFocus) {\n            props.getFocus(props.handleFocus);\n        }\n    };\n\n    return (\n        <div\n            id={props.isSideBarRight ? 'sbrSearchFormContainer' : 'searchFormContainer'}\n            className='search-form__container'\n        >\n            <form\n                role='search'\n                className={classNames(['search__form', {'search__form--focused': isFocused}])}\n                onSubmit={props.handleSubmit}\n                style={style.searchForm}\n                autoComplete='off'\n                aria-labelledby='searchBox'\n            >\n                <div className='search__font-icon'>\n                    <i className='icon icon-magnify icon-16'/>\n                </div>\n\n                {props.searchType !== '' && (\n                    <div\n                        className='searchTypeBadge'\n                        onMouseDown={props.handleFocus}\n                    >\n                        {props.searchType === 'messages' && (\n                            <FormattedMessage\n                                id='search_bar.search_types.messages'\n                                defaultMessage='MESSAGES'\n                            />\n                        )}\n                        {props.searchType === 'files' && (\n                            <FormattedMessage\n                                id='search_bar.search_types.files'\n                                defaultMessage='FILES'\n                            />\n                        )}\n                        <i\n                            className='icon icon-close icon-12'\n                            onMouseDown={() => {\n                                props.setKeepFocused(true);\n                            }}\n                            onClick={() => props.clearSearchType && props.clearSearchType()}\n                        />\n                    </div>\n                )}\n                <SuggestionBox\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    ref={getSearch}\n                    id={props.isSideBarRight ? 'sbrSearchBox' : 'searchBox'}\n                    tabIndex='0'\n                    className={'search-bar form-control a11y__region'}\n                    containerClass='w-full'\n                    data-a11y-sort-order='9'\n                    aria-describedby={props.isSideBarRight ? 'sbr-searchbar-help-popup' : 'searchbar-help-popup'}\n                    aria-label={intl.formatMessage({id: 'search_bar.search', defaultMessage: 'Search'})}\n                    placeholder={intl.formatMessage({id: 'search_bar.search', defaultMessage: 'Search'})}\n                    value={props.searchTerms}\n                    onFocus={props.handleFocus}\n                    onBlur={props.handleBlur}\n                    onChange={props.handleChange}\n                    onKeyDown={handleKeyDown}\n                    listComponent={SearchSuggestionList}\n                    dateComponent={SuggestionDate}\n                    providers={suggestionProviders}\n                    type='search'\n                    delayInputUpdate={true}\n                    renderDividers={['all']}\n                    clearable={true}\n                    onClear={props.handleClear}\n                />\n                {props.isSearchingTerm && <LoadingSpinner/>}\n                {props.children}\n            </form>\n        </div>\n    );\n};\n\nSearchBar.defaultProps = defaultProps;\n\nexport default SearchBar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport ExternalLink from 'components/external_link';\n\nimport {isFileAttachmentsEnabled} from 'utils/file_utils';\n\ninterface SearchTerm {\n    searchTerm: string;\n    message: MessageDescriptor;\n    additionalDisplay?: string;\n}\n\ntype Props = {\n    withTitle?: boolean;\n    onOptionSelected: (term: string) => void;\n    onMouseDown?: () => void | undefined;\n    options: SearchTerm[];\n    highlightedIndex?: number;\n    onOptionHover?: (index: number) => void;\n    onSearchTypeSelected?: (searchType: 'files' | 'messages') => void;\n    onElementBlur?: () => void;\n    onElementFocus?: () => void;\n    searchType?: 'files' | 'messages' | '';\n}\n\nconst SearchHint = (props: Props): JSX.Element => {\n    const handleOnOptionHover = (optionIndex: number) => {\n        if (props.onOptionHover) {\n            props.onOptionHover(optionIndex);\n        }\n    };\n    const config = useSelector(getConfig);\n    const isFileAttachmentEnabled = isFileAttachmentsEnabled(config);\n\n    if (props.onSearchTypeSelected) {\n        if (!props.searchType) {\n            return (\n                <div\n                    className='search-hint__search-type-selector'\n                    onMouseDown={props.onMouseDown}\n                >\n                    <div className='search-hint_text-container'>\n                        <FormattedMessage\n                            id='search_bar.usage.search_type_question'\n                            defaultMessage='What are you searching for?'\n                        />\n                        <FormattedMessage\n                            id='search_bar.usage.searchLearn'\n                            defaultMessage='<a>Learn about search</a>'\n                            values={{\n                                a: (chunks) => (\n                                    <ExternalLink\n                                        location='search_hint'\n                                        className='search-hint_learn-search'\n                                        href='https://mattermost.com/pl/mattermost-academy-search-training'\n                                    >\n                                        <span>{chunks}</span>\n                                        <i className='icon icon-lightbulb-outline'/>\n                                    </ExternalLink>\n                                ),\n                            }}\n                        />\n\n                    </div>\n                    <div className='button-container'>\n                        <button\n                            className={classNames({highlighted: props.highlightedIndex === 0})}\n                            onClick={() => props.onSearchTypeSelected && props.onSearchTypeSelected('messages')}\n                            onBlur={() => props.onElementBlur && props.onElementBlur()}\n                            onFocus={() => props.onElementFocus && props.onElementFocus()}\n                        >\n                            <i className='icon icon-message-text-outline'/>\n                            <FormattedMessage\n                                id='search_bar.usage.search_type_messages'\n                                defaultMessage='Messages'\n                            />\n                        </button>\n                        {isFileAttachmentEnabled &&\n                            <button\n                                className={classNames({highlighted: props.highlightedIndex === 1})}\n                                onClick={() => props.onSearchTypeSelected && props.onSearchTypeSelected('files')}\n                                onBlur={() => props.onElementBlur && props.onElementBlur()}\n                                onFocus={() => props.onElementFocus && props.onElementFocus()}\n                            >\n                                <i className='icon icon-file-text-outline'/>\n                                <FormattedMessage\n                                    id='search_bar.usage.search_type_files'\n                                    defaultMessage='Files'\n                                />\n                            </button>}\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <>\n            {props.withTitle && (!props.searchType) &&\n                <h4 className='search-hint__title'>\n                    <FormattedMessage\n                        id='search_bar.usage.title'\n                        defaultMessage='Search options'\n                    />\n                </h4>\n            }\n            {props.withTitle && props.searchType === 'files' &&\n                <h4 className='search-hint__title'>\n                    <FormattedMessage\n                        id='search_bar.usage.title_files'\n                        defaultMessage='File search options'\n                    />\n                </h4>\n            }\n            {props.withTitle && props.searchType === 'messages' &&\n                <h4 className='search-hint__title'>\n                    <FormattedMessage\n                        id='search_bar.usage.title_messages'\n                        defaultMessage='Message search options'\n                    />\n                </h4>\n            }\n            <ul\n                role='list'\n                className='search-hint__suggestions-list'\n                onMouseDown={props.onMouseDown}\n                onTouchEnd={props.onMouseDown}\n            >\n                {props.options.map((option, optionIndex) => (\n                    <li\n                        className={classNames('search-hint__suggestions-list__option', {highlighted: optionIndex === props.highlightedIndex})}\n                        key={option.searchTerm}\n                        onMouseDown={() => props.onOptionSelected(option.searchTerm)}\n                        onTouchEnd={() => props.onOptionSelected(option.searchTerm)}\n                        onMouseOver={() => handleOnOptionHover(optionIndex)}\n                    >\n                        <div className='search-hint__suggestion-list__flex-wrap'>\n                            <span className='search-hint__suggestion-list__label'>{option.additionalDisplay ? option.additionalDisplay : option.searchTerm}</span>\n                        </div>\n                        <div className='search-hint__suggestion-list__value'>\n                            <FormattedMessage\n                                id={option.message.id}\n                                defaultMessage={option.message.defaultMessage}\n                            />\n                        </div>\n                    </li>))}\n            </ul>\n        </>\n    );\n};\n\nexport default SearchHint;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\n\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport FileThumbnail from 'components/file_attachment/file_thumbnail';\nimport FilePreviewModal from 'components/file_preview_modal';\nimport Timestamp, {RelativeRanges} from 'components/timestamp';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Tag from 'components/widgets/tag/tag';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\nimport {fileSizeToString, copyToClipboard, localizeMessage} from 'utils/utils';\n\nimport type {PropsFromRedux, OwnProps} from './index';\n\nimport './file_search_result_item.scss';\n\ntype Props = OwnProps & PropsFromRedux;\n\ntype State = {\n    keepOpen: boolean;\n}\n\nconst FILE_TOOLTIP_RANGES = [\n    RelativeRanges.TODAY_TITLE_CASE,\n    RelativeRanges.YESTERDAY_TITLE_CASE,\n];\n\nexport default class FileSearchResultItem extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {keepOpen: false};\n    }\n\n    private jumpToConv = (e: MouseEvent) => {\n        e.stopPropagation();\n        getHistory().push(`/${this.props.teamName}/pl/${this.props.fileInfo.post_id}`);\n    };\n\n    private copyLink = () => {\n        copyToClipboard(`${getSiteURL()}/${this.props.teamName}/pl/${this.props.fileInfo.post_id}`);\n    };\n\n    private stopPropagation = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        e.stopPropagation();\n    };\n\n    private keepOpen = (open: boolean) => {\n        this.setState({keepOpen: open});\n    };\n\n    private renderPluginItems = () => {\n        const {fileInfo} = this.props;\n        const pluginItems = this.props.pluginMenuItems?.filter((item) => item?.match(fileInfo)).map((item) => {\n            return (\n                <Menu.ItemAction\n                    id={item.id + '_pluginmenuitem'}\n                    key={item.id + '_pluginmenuitem'}\n                    onClick={() => item.action?.(fileInfo)}\n                    text={item.text}\n                />\n            );\n        });\n\n        if (!pluginItems?.length) {\n            return null;\n        }\n\n        return (\n            <>\n                <li\n                    id={`divider_file_${this.props.fileInfo.id}_plugins`}\n                    className='MenuItem__divider'\n                    role='menuitem'\n                />\n                {pluginItems}\n            </>\n        );\n    };\n\n    private showPreview = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.FILE_PREVIEW_MODAL,\n            dialogType: FilePreviewModal,\n            dialogProps: {\n                fileInfos: [this.props.fileInfo],\n                postId: this.props.fileInfo.post_id,\n                startIndex: 0,\n            },\n        });\n    };\n\n    public render(): React.ReactNode {\n        const {fileInfo, channelDisplayName, channelType} = this.props;\n        let channelName: React.ReactNode = channelDisplayName;\n        if (channelType === Constants.DM_CHANNEL) {\n            channelName = (\n                <FormattedMessage\n                    id='search_item.file_tag.direct_message'\n                    defaultMessage='Direct Message'\n                />\n            );\n        } else if (channelType === Constants.GM_CHANNEL) {\n            channelName = (\n                <FormattedMessage\n                    id='search_item.file_tag.group_message'\n                    defaultMessage='Group Message'\n                />\n            );\n        }\n\n        return (\n            <div\n                data-testid='search-item-container'\n                className='search-item__container'\n            >\n                <button\n                    className={'FileSearchResultItem' + (this.state.keepOpen ? ' keep-open' : '')}\n                    onClick={this.showPreview}\n                >\n                    <FileThumbnail fileInfo={fileInfo}/>\n                    <div className='fileData'>\n                        <div className='fileDataName'>{fileInfo.name}</div>\n                        <div className='fileMetadata'>\n                            {channelName && (\n                                <Tag\n                                    className='file-search-channel-name'\n                                    text={channelName}\n                                />\n                            )}\n                            <span>{fileSizeToString(fileInfo.size)}</span>\n                            <span>{' • '}</span>\n                            <Timestamp\n                                value={fileInfo.create_at}\n                                ranges={FILE_TOOLTIP_RANGES}\n                            />\n                        </div>\n                    </div>\n                    {this.props.fileInfo.post_id && (\n                        <WithTooltip\n                            title={defineMessage({id: 'file_search_result_item.more_actions', defaultMessage: 'More Actions'})}\n                        >\n                            <MenuWrapper\n                                onToggle={this.keepOpen}\n                                stopPropagationOnToggle={true}\n                            >\n                                <a\n                                    href='#'\n                                    className='action-icon dots-icon btn btn-icon btn-sm'\n                                >\n                                    <i className='icon icon-dots-vertical'/>\n                                </a>\n                                <Menu\n                                    ariaLabel={'file menu'}\n                                    openLeft={true}\n                                >\n                                    <Menu.ItemAction\n                                        onClick={this.jumpToConv}\n                                        ariaLabel={localizeMessage({id: 'file_search_result_item.open_in_channel', defaultMessage: 'Open in channel'})}\n                                        text={localizeMessage({id: 'file_search_result_item.open_in_channel', defaultMessage: 'Open in channel'})}\n                                    />\n                                    <Menu.ItemAction\n                                        onClick={this.copyLink}\n                                        ariaLabel={localizeMessage({id: 'file_search_result_item.copy_link', defaultMessage: 'Copy link'})}\n                                        text={localizeMessage({id: 'file_search_result_item.copy_link', defaultMessage: 'Copy link'})}\n                                    />\n                                    {this.renderPluginItems()}\n                                </Menu>\n                            </MenuWrapper>\n                        </WithTooltip>\n                    )}\n                    <WithTooltip\n                        title={defineMessage({id: 'file_search_result_item.download', defaultMessage: 'Download'})}\n                    >\n                        <a\n                            className='action-icon download-icon btn btn-icon btn-sm'\n                            href={getFileDownloadUrl(fileInfo.id)}\n                            onClick={this.stopPropagation}\n                        >\n                            <i className='icon icon-download-outline'/>\n                        </a>\n                    </WithTooltip>\n                </button>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport type {GlobalState} from 'types/store';\nimport type {FilesDropdownAction} from 'types/store/plugins';\n\nimport FileSearchResultItem from './file_search_result_item';\n\nexport type OwnProps = {\n    channelId: string;\n    fileInfo: FileInfo;\n    teamName: string;\n    pluginMenuItems?: FilesDropdownAction[];\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const channel = getChannel(state, ownProps.channelId);\n\n    return {\n        channelDisplayName: '',\n        channelType: channel?.type,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(FileSearchResultItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {FilterVariantIcon} from '@mattermost/compass-icons/components';\n\nimport {IconContainer} from 'components/advanced_text_editor/formatting_bar/formatting_icon';\nimport type {SearchFilterType} from 'components/search/types';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport WithTooltip from 'components/with_tooltip';\n\nimport './files_filter_menu.scss';\n\ntype Props = {\n    selectedFilter: string;\n    onFilter: (filter: SearchFilterType) => void;\n};\n\nexport default function FilesFilterMenu(props: Props): JSX.Element {\n    const intl = useIntl();\n    return (\n        <div className='FilesFilterMenu'>\n            <MenuWrapper>\n                <WithTooltip\n                    title={\n                        <FormattedMessage\n                            id='channel_info_rhs.menu.files.filter'\n                            defaultMessage='Filter'\n                        />}\n                >\n                    <IconContainer\n                        id='filesFilterButton'\n                        className='action-icon dots-icon'\n                        type='button'\n                    >\n                        {props.selectedFilter !== 'all' && <i className='icon-dot'/>}\n                        <FilterVariantIcon\n                            size={18}\n                            color='currentColor'\n                        />\n                    </IconContainer>\n                </WithTooltip>\n\n                <Menu\n                    ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.file_menu', defaultMessage: 'file menu'})}\n                    openLeft={true}\n                >\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.all_file_types', defaultMessage: 'All file types'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.all_file_types', defaultMessage: 'All file types'})}\n                        onClick={() => props.onFilter('all')}\n                        icon={props.selectedFilter === 'all' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.documents', defaultMessage: 'Documents'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.documents', defaultMessage: 'Documents'})}\n                        onClick={() => props.onFilter('documents')}\n                        icon={props.selectedFilter === 'documents' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.spreadsheets', defaultMessage: 'Spreadsheets'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.spreadsheets', defaultMessage: 'Spreadsheets'})}\n                        onClick={() => props.onFilter('spreadsheets')}\n                        icon={props.selectedFilter === 'spreadsheets' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.presentations', defaultMessage: 'Presentations'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.presentations', defaultMessage: 'Presentations'})}\n                        onClick={() => props.onFilter('presentations')}\n                        icon={props.selectedFilter === 'presentations' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.code', defaultMessage: 'Code'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.code', defaultMessage: 'Code'})}\n                        onClick={() => props.onFilter('code')}\n                        icon={props.selectedFilter === 'code' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.images', defaultMessage: 'Images'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.images', defaultMessage: 'Images'})}\n                        onClick={() => props.onFilter('images')}\n                        icon={props.selectedFilter === 'images' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.audio', defaultMessage: 'Audio'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.audio', defaultMessage: 'Audio'})}\n                        onClick={() => props.onFilter('audio')}\n                        icon={props.selectedFilter === 'audio' ? <i className='icon icon-check'/> : null}\n                    />\n                    <Menu.ItemAction\n                        ariaLabel={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.videos', defaultMessage: 'Videos'})}\n                        text={intl.formatMessage({id: 'channel_info_rhs.menu.files.filter.videos', defaultMessage: 'Videos'})}\n                        onClick={() => props.onFilter('video')}\n                        icon={props.selectedFilter === 'video' ? <i className='icon icon-check'/> : null}\n                    />\n                </Menu>\n            </MenuWrapper>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useRef} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {getMyTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSearchTeam} from 'selectors/rhs';\n\nimport SelectTeam from 'components/new_search/select_team';\nimport type {SearchFilterType} from 'components/search/types';\n\nimport type {A11yFocusEventDetail} from 'utils/constants';\nimport Constants, {A11yCustomEventTypes, DataSearchTypes} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\n\nimport type {GlobalState} from 'types/store';\nimport type {SearchType} from 'types/store/rhs';\n\nimport FilesFilterMenu from './files_filter_menu';\n\nconst {KeyCodes} = Constants;\n\nimport './messages_or_files_selector.scss';\n\ntype Props = {\n    selected: string;\n    selectedFilter: SearchFilterType;\n    messagesCounter: string;\n    filesCounter: string;\n    isFileAttachmentsEnabled: boolean;\n    crossTeamSearchEnabled: boolean;\n    onChange: (value: SearchType) => void;\n    onFilter: (filter: SearchFilterType) => void;\n    onTeamChange: (teamId: string) => void;\n};\n\ntype DataSearchLiteral = typeof DataSearchTypes[keyof typeof DataSearchTypes];\n\nexport default function MessagesOrFilesSelector(props: Props): JSX.Element {\n    const searchTeam = useSelector((state: GlobalState) => getSearchTeam(state));\n    const myTeams = useSelector(getMyTeams);\n    const hasMoreThanOneTeam = myTeams.length > 1;\n\n    // REFS to the tabs so there is ability to pass the custom A11y focus event\n    const messagesTabRef = useRef<HTMLButtonElement>(null);\n    const filesTabRef = useRef<HTMLButtonElement>(null);\n\n    // Enhanced arrow key handling to focus the new select tab and also send the a11y custom event\n    const handleTabKeyDown = (\n        e: React.KeyboardEvent<HTMLButtonElement>,\n        currentTab: DataSearchLiteral,\n    ) => {\n        if (Keyboard.isKeyPressed(e, KeyCodes.LEFT) || Keyboard.isKeyPressed(e, KeyCodes.RIGHT)) {\n            e.preventDefault();\n            e.stopPropagation();\n            let nextTab: SearchType;\n            let nextTabRef: React.RefObject<HTMLButtonElement>;\n\n            if (currentTab === DataSearchTypes.MESSAGES_SEARCH_TYPE && props.isFileAttachmentsEnabled) {\n                nextTab = DataSearchTypes.FILES_SEARCH_TYPE;\n                nextTabRef = filesTabRef;\n            } else {\n                nextTab = DataSearchTypes.MESSAGES_SEARCH_TYPE;\n                nextTabRef = messagesTabRef;\n            }\n\n            props.onChange(nextTab);\n\n            // Dispatch the custom a11y focus event to focus the selected tab\n            if (nextTabRef.current) {\n                setTimeout(() => {\n                    document.dispatchEvent(\n                        new CustomEvent<A11yFocusEventDetail>(A11yCustomEventTypes.FOCUS, {\n                            detail: {\n                                target: nextTabRef.current,\n                                keyboardOnly: true,\n                            },\n                        }),\n                    );\n                }, 0);\n            }\n            return;\n        }\n\n        if (Keyboard.isKeyPressed(e, KeyCodes.ENTER)) {\n            props.onChange(currentTab);\n        }\n    };\n\n    return (\n        <div className='MessagesOrFilesSelector'>\n            <div\n                className='buttons-container'\n                role='tablist'\n                aria-label='Messages or Files'\n            >\n                <button\n                    ref={messagesTabRef}\n                    role='tab'\n                    aria-selected={props.selected === DataSearchTypes.MESSAGES_SEARCH_TYPE ? 'true' : 'false'}\n                    tabIndex={props.selected === DataSearchTypes.MESSAGES_SEARCH_TYPE ? 0 : -1}\n                    aria-controls='messagesPanel'\n                    id='messagesTab'\n                    onClick={() => props.onChange(DataSearchTypes.MESSAGES_SEARCH_TYPE)}\n                    onKeyDown={(e) => handleTabKeyDown(e, DataSearchTypes.MESSAGES_SEARCH_TYPE)}\n                    className={props.selected === DataSearchTypes.MESSAGES_SEARCH_TYPE ? 'active tab messages-tab' : 'tab messages-tab'}\n                >\n                    <FormattedMessage\n                        id='search_bar.messages_tab'\n                        defaultMessage='Messages'\n                    />\n                    <span className='counter'>{props.messagesCounter}</span>\n                </button>\n                {props.isFileAttachmentsEnabled && (\n                    <button\n                        ref={filesTabRef}\n                        role='tab'\n                        aria-selected={props.selected === DataSearchTypes.FILES_SEARCH_TYPE ? 'true' : 'false'}\n                        tabIndex={props.selected === DataSearchTypes.FILES_SEARCH_TYPE ? 0 : -1}\n                        aria-controls='filesPanel'\n                        id='filesTab'\n                        onClick={() => props.onChange(DataSearchTypes.FILES_SEARCH_TYPE)}\n                        onKeyDown={(e) => handleTabKeyDown(e, DataSearchTypes.FILES_SEARCH_TYPE)}\n                        className={props.selected === DataSearchTypes.FILES_SEARCH_TYPE ? 'active tab files-tab' : 'tab files-tab'}\n                    >\n                        <FormattedMessage\n                            id='search_bar.files_tab'\n                            defaultMessage='Files'\n                        />\n                        <span className='counter'>{props.filesCounter}</span>\n                    </button>\n                )}\n            </div>\n            {props.crossTeamSearchEnabled && hasMoreThanOneTeam && (\n                <div className='team-selector-container'>\n                    <SelectTeam\n                        selectedTeamId={searchTeam}\n                        onTeamSelected={props.onTeamChange}\n                    />\n                </div>\n            )}\n            {props.selected === DataSearchTypes.FILES_SEARCH_TYPE && (\n                <FilesFilterMenu\n                    selectedFilter={props.selectedFilter}\n                    onFilter={props.onFilter}\n                />\n            )}\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport PostComponent from 'components/post';\n\nimport {Locations} from 'utils/constants';\n\ntype Props = {\n    a11yIndex: number;\n    isFlaggedPosts: boolean;\n    isMentionSearch: boolean;\n    isPinnedPosts: boolean;\n    matches: string[];\n    post: Post;\n    searchTerm: string;\n}\n\nexport default function PostSearchResultsItem(props: Props) {\n    return (\n        <div\n            className='search-item__container'\n            data-testid='search-item-container'\n        >\n            <PostComponent\n                post={props.post}\n                matches={props.matches}\n                term={(!props.isFlaggedPosts && !props.isPinnedPosts && !props.isMentionSearch) ? props.searchTerm : ''}\n                isMentionSearch={props.isMentionSearch}\n                a11yIndex={props.a11yIndex}\n                location={Locations.SEARCH}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\nimport styled from 'styled-components';\n\nimport {isCurrentLicenseCloud} from 'mattermost-redux/selectors/entities/cloud';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {isAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport useGetLimits from 'components/common/hooks/useGetLimits';\nimport useGetUsage from 'components/common/hooks/useGetUsage';\nimport useOpenPricingModal from 'components/common/hooks/useOpenPricingModal';\n\nimport {DataSearchTypes} from 'utils/constants';\nimport {asGBString} from 'utils/limits';\n\nconst StyledDiv = styled.div`\nwidth: 100%;\n`;\n\nconst StyledA = styled.a`\ncolor: var(--denim-button-bg) !important;\n`;\n\nconst InnerDiv = styled.div`\ndisplay: flex;\ngap: 8px;\nborder: 1px solid rgba(var(--center-channel-color-rgb), 0.08);\nborder-radius: 4px;\nbackground-color: rgba(var(--center-channel-color-rgb), 0.04);\npadding: 10px;\nmargin: 10px;\ncolor: rgba(var(--center-channel-color-rgb), 0.75);\nfont-weight: 400;\nfont-size: 11px;\nline-height: 16px;\nletter-spacing: 0.02em;\n`;\n\ntype Props = {\n    searchType: string;\n}\n\nfunction SearchLimitsBanner(props: Props) {\n    const {formatMessage, formatNumber} = useIntl();\n    const openPricingModal = useOpenPricingModal();\n    const usage = useGetUsage();\n    const [cloudLimits] = useGetLimits();\n    const isAdminUser = isAdmin(useSelector(getCurrentUser).roles);\n    const isCloud = useSelector(isCurrentLicenseCloud);\n\n    if (!isCloud) {\n        return null;\n    }\n\n    const currentFileStorageUsage = usage.files.totalStorage;\n    const fileStorageLimit = cloudLimits?.files?.total_storage;\n    const currentMessagesUsage = usage.messages.history;\n    const messagesLimit = cloudLimits?.messages?.history;\n\n    let ctaAction = formatMessage({\n        id: 'workspace_limits.search_limit.view_plans',\n        defaultMessage: 'View plans',\n    });\n\n    if (isAdminUser) {\n        ctaAction = formatMessage({\n            id: 'workspace_limits.search_limit.upgrade_now',\n            defaultMessage: 'Upgrade now',\n        });\n    }\n\n    const renderBanner = (bannerText: React.ReactNode, id: string) => {\n        return (<StyledDiv id={id}>\n            <InnerDiv>\n                <i className='icon-eye-off-outline'/>\n                <span>{bannerText}</span>\n            </InnerDiv>\n        </StyledDiv>);\n    };\n\n    switch (props.searchType) {\n    case DataSearchTypes.FILES_SEARCH_TYPE:\n        if ((fileStorageLimit === undefined) || !(currentFileStorageUsage > fileStorageLimit)) {\n            return null;\n        }\n        return renderBanner(formatMessage({\n            id: 'workspace_limits.search_files_limit.banner_text',\n            defaultMessage: 'Some older files may not be shown because your workspace has met its file storage limit of {storage}. <a>{ctaAction}</a>',\n        }, {\n            ctaAction,\n            storage: asGBString(fileStorageLimit, formatNumber),\n            a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                <StyledA\n                    onClick={() => openPricingModal({trackingLocation: 'file_search_limits_banner'})}\n                >\n                    {chunks}\n                </StyledA>\n            ),\n        }), `${DataSearchTypes.FILES_SEARCH_TYPE}_search_limits_banner`);\n\n    case DataSearchTypes.MESSAGES_SEARCH_TYPE:\n        if ((messagesLimit === undefined) || !(currentMessagesUsage > messagesLimit)) {\n            return null;\n        }\n        return renderBanner(formatMessage({\n            id: 'workspace_limits.search_message_limit.banner_text',\n            defaultMessage: 'Some older messages may not be shown because your workspace has over {messages} messages. <a>{ctaAction}</a>',\n        }, {\n            ctaAction,\n            messages: formatNumber(messagesLimit),\n            a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                <StyledA\n                    onClick={() => openPricingModal({trackingLocation: 'messages_search_limits_banner'})}\n                >\n                    {chunks}\n                </StyledA>\n            ),\n        }), `${DataSearchTypes.MESSAGES_SEARCH_TYPE}_search_limits_banner`);\n    default:\n        return null;\n    }\n}\n\nexport default SearchLimitsBanner;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useEffect, useRef, useState} from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {useIntl, FormattedMessage, defineMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {FileSearchResultItem as FileSearchResultItemType} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport {debounce} from 'mattermost-redux/actions/helpers';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getFilesDropdownPluginMenuItems} from 'selectors/plugins';\n\nimport FileSearchResultItem from 'components/file_search_results';\nimport NoResultsIndicator from 'components/no_results_indicator/no_results_indicator';\nimport {NoResultsVariant} from 'components/no_results_indicator/types';\nimport SearchHint from 'components/search_hint/search_hint';\nimport SearchResultsHeader from 'components/search_results_header';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {searchHintOptions, DataSearchTypes} from 'utils/constants';\nimport {isFileAttachmentsEnabled} from 'utils/file_utils';\n\nimport FilesFilterMenu from './files_filter_menu';\nimport MessageOrFileSelector from './messages_or_files_selector';\nimport PostSearchResultsItem from './post_search_results_item';\nimport SearchLimitsBanner from './search_limits_banner';\nimport type {Props} from './types';\n\nimport './search_results.scss';\n\nconst GET_MORE_BUFFER = 30;\n\nconst renderView = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--view'\n    />\n);\n\nconst renderThumbHorizontal = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--horizontal scrollbar--thumb--RHS'\n    />\n);\n\nconst renderThumbVertical = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--vertical scrollbar--thumb--RHS'\n    />\n);\n\nconst renderTrackVertical = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--vertical--RHS'\n    />\n);\n\ninterface NoResultsProps {\n    variant: NoResultsVariant;\n    titleValues?: Record<string, React.ReactNode>;\n    subtitleValues?: Record<string, React.ReactNode>;\n}\n\nconst defaultProps: Partial<Props> = {\n    isCard: false,\n    isOpened: false,\n    channelDisplayName: '',\n    children: null,\n};\n\nconst SearchResults: React.FC<Props> = (props: Props): JSX.Element => {\n    const scrollbars = useRef<Scrollbars|null>(null);\n    const [searchType, setSearchType] = useState<string>(props.searchType);\n    const filesDropdownPluginMenuItems = useSelector(getFilesDropdownPluginMenuItems);\n    const config = useSelector(getConfig);\n    const intl = useIntl();\n\n    useEffect(() => {\n        if (props.searchFilterType !== 'all') {\n            props.setSearchFilterType('all');\n        }\n        setSearchType(props.searchType);\n        scrollbars.current?.scrollToTop();\n    }, [props.searchTerms]);\n\n    useEffect(() => {\n        setSearchType(props.searchSelectedType);\n    }, [props.searchSelectedType]);\n\n    useEffect(() => {\n        // reset search type when switching views\n        setSearchType(props.searchType);\n    }, [props.isFlaggedPosts, props.isPinnedPosts, props.isMentionSearch]);\n\n    useEffect(() => {\n        // after the first page of search results, there is no way to\n        // know if the search has more results to return, so we search\n        // for the second page and stop if it yields no results\n        if (props.searchPage === 0 && !props.isChannelFiles && !props.isSearchingTerm) {\n            setTimeout(() => {\n                props.getMorePostsForSearch();\n                props.getMoreFilesForSearch();\n            }, 100);\n        }\n    }, [props.searchPage, props.searchTerms, props.isSearchingTerm]);\n\n    const handleScroll = (): void => {\n        if (!props.isFlaggedPosts && !props.isPinnedPosts && !props.isSearchingTerm && !props.isSearchGettingMore && !props.isChannelFiles) {\n            const scrollHeight = scrollbars.current?.getScrollHeight() || 0;\n            const scrollTop = scrollbars.current?.getScrollTop() || 0;\n            const clientHeight = scrollbars.current?.getClientHeight() || 0;\n            if ((scrollTop + clientHeight + GET_MORE_BUFFER) >= scrollHeight) {\n                if (searchType === DataSearchTypes.FILES_SEARCH_TYPE) {\n                    loadMoreFiles();\n                } else {\n                    loadMorePosts();\n                }\n            }\n        }\n    };\n\n    const setSearchTeam = (teamId: string): void => {\n        props.updateSearchTeam(teamId);\n    };\n\n    const loadMorePosts = debounce(\n        () => {\n            props.getMorePostsForSearch();\n        },\n        100,\n        false,\n        (): void => {},\n    );\n\n    const loadMoreFiles = debounce(\n        () => {\n            props.getMoreFilesForSearch();\n        },\n        100,\n        false,\n        (): void => {},\n    );\n\n    const {\n        results,\n        fileResults,\n        searchTerms,\n        isCard,\n        isSearchAtEnd,\n        isSearchFilesAtEnd,\n        isSearchingTerm,\n        isFlaggedPosts,\n        isSearchingFlaggedPost,\n        isPinnedPosts,\n        isChannelFiles,\n        isSearchingPinnedPost,\n        isSideBarExpanded,\n        isMentionSearch,\n        isOpened,\n        updateSearchTerms,\n        handleSearchHintSelection,\n        searchFilterType,\n        setSearchFilterType,\n    } = props;\n\n    const noResults = (!results || !Array.isArray(results) || results.length === 0);\n    const noFileResults = (!fileResults || !Array.isArray(fileResults) || fileResults.length === 0);\n    const isLoading = isSearchingTerm || isSearchingFlaggedPost || isSearchingPinnedPost || !isOpened;\n    const isAtEnd = (searchType === DataSearchTypes.MESSAGES_SEARCH_TYPE && isSearchAtEnd) || (searchType === DataSearchTypes.FILES_SEARCH_TYPE && isSearchFilesAtEnd);\n    const showLoadMore = !isAtEnd && !isChannelFiles && !isFlaggedPosts && !isPinnedPosts;\n    const isMessagesSearch = (!isFlaggedPosts && !isMentionSearch && !isCard && !isPinnedPosts && !isChannelFiles);\n\n    let contentItems;\n    let loadingMorePostsComponent;\n\n    let sortedResults: any = results;\n\n    let titleDescriptor;\n    const noResultsProps: NoResultsProps = {\n        variant: NoResultsVariant.ChannelSearch,\n    };\n\n    if (isMentionSearch) {\n        noResultsProps.variant = NoResultsVariant.Mentions;\n\n        titleDescriptor = defineMessage({\n            id: 'search_header.title2',\n            defaultMessage: 'Recent Mentions',\n        });\n    } else if (isFlaggedPosts) {\n        noResultsProps.variant = NoResultsVariant.FlaggedPosts;\n        noResultsProps.subtitleValues = {buttonText: <strong>{\n            intl.formatMessage({\n                id: 'flag_post.flag',\n                defaultMessage: 'Save Message'},\n            )}</strong>};\n        titleDescriptor = defineMessage({\n            id: 'search_header.title3',\n            defaultMessage: 'Saved messages',\n        });\n    } else if (isPinnedPosts) {\n        noResultsProps.variant = NoResultsVariant.PinnedPosts;\n        noResultsProps.subtitleValues = {text: <strong>{\n            intl.formatMessage({\n                id: 'post_info.pin',\n                defaultMessage: 'Pin to Channel',\n            })}</strong>};\n\n        sortedResults = [...results];\n        sortedResults.sort((postA: Post|FileSearchResultItemType, postB: Post|FileSearchResultItemType) => postB.create_at - postA.create_at);\n\n        titleDescriptor = defineMessage({\n            id: 'search_header.pinnedMessages',\n            defaultMessage: 'Pinned messages',\n        });\n    } else if (isChannelFiles) {\n        if (searchFilterType === 'all') {\n            noResultsProps.variant = NoResultsVariant.ChannelFiles;\n        } else {\n            noResultsProps.variant = NoResultsVariant.ChannelFilesFiltered;\n        }\n\n        titleDescriptor = defineMessage({\n            id: 'search_header.channelFiles',\n            defaultMessage: 'Files',\n        });\n    } else if (isCard) {\n        titleDescriptor = defineMessage({\n            id: 'search_header.title5',\n            defaultMessage: 'Extra information',\n        });\n    } else if (!searchTerms && noResults && noFileResults) {\n        titleDescriptor = defineMessage({\n            id: 'search_header.search',\n            defaultMessage: 'Search',\n        });\n    } else if (searchType === DataSearchTypes.FILES_SEARCH_TYPE && !isChannelFiles) {\n        noResultsProps.variant = NoResultsVariant.Files;\n        noResultsProps.titleValues = {searchTerm: `${searchTerms}`};\n        titleDescriptor = defineMessage({\n            id: 'search_header.results',\n            defaultMessage: 'Search Results',\n        });\n    } else {\n        noResultsProps.titleValues = {channelName: `${searchTerms}`};\n\n        titleDescriptor = defineMessage({\n            id: 'search_header.results',\n            defaultMessage: 'Search Results',\n        });\n    }\n\n    const formattedTitle = intl.formatMessage(titleDescriptor);\n\n    const handleOptionSelection = (term: string): void => {\n        handleSearchHintSelection();\n        updateSearchTerms(term);\n    };\n\n    switch (true) {\n    case isLoading:\n        contentItems = (\n            <div className='sidebar--right__subheader a11y__section'>\n                <div className='sidebar--right__loading'>\n                    <LoadingWrapper text={defineMessage({id: 'search_header.loading', defaultMessage: 'Searching'})}/>\n                </div>\n            </div>\n        );\n        break;\n    case (noResults && !searchTerms && !isMentionSearch && !isPinnedPosts && !isFlaggedPosts && !isChannelFiles):\n        contentItems = (\n            <div className='sidebar--right__subheader search__hints a11y__section'>\n                <SearchHint\n                    onOptionSelected={handleOptionSelection}\n                    options={searchHintOptions}\n                />\n            </div>\n        );\n        break;\n    case noResults && (searchType === DataSearchTypes.MESSAGES_SEARCH_TYPE && !isChannelFiles):\n        contentItems = (\n            <div\n                className={classNames([\n                    'sidebar--right__subheader a11y__section',\n                    {'sidebar-expanded': isSideBarExpanded},\n                ])}\n                aria-live='polite'\n            >\n                <NoResultsIndicator\n                    style={{padding: '48px'}}\n                    {...noResultsProps}\n                />\n            </div>\n        );\n        break;\n    case noFileResults && (searchType === DataSearchTypes.FILES_SEARCH_TYPE || isChannelFiles):\n        contentItems = (\n            <div\n                className={classNames([\n                    'sidebar--right__subheader a11y__section',\n                    {'sidebar-expanded': isSideBarExpanded},\n                ])}\n                aria-live='polite'\n            >\n                <NoResultsIndicator\n                    style={{padding: '48px'}}\n                    {...noResultsProps}\n                />\n            </div>\n        );\n        break;\n    default:\n        if (searchType === DataSearchTypes.FILES_SEARCH_TYPE || isChannelFiles) {\n            sortedResults = fileResults;\n        }\n\n        contentItems = sortedResults.map((item: Post|FileSearchResultItemType, index: number) => {\n            if (searchType === DataSearchTypes.MESSAGES_SEARCH_TYPE && !props.isChannelFiles) {\n                return (\n                    <PostSearchResultsItem\n                        key={item.id}\n                        post={item as Post}\n                        matches={props.matches[item.id]}\n                        searchTerm={searchTerms}\n                        isFlaggedPosts={props.isFlaggedPosts}\n                        isMentionSearch={props.isMentionSearch}\n                        isPinnedPosts={props.isPinnedPosts}\n                        a11yIndex={index}\n                    />\n                );\n            }\n            return (\n                <FileSearchResultItem\n                    key={item.id}\n                    channelId={item.channel_id}\n                    fileInfo={item as FileSearchResultItemType}\n                    teamName={props.currentTeamName}\n                    pluginMenuItems={filesDropdownPluginMenuItems}\n                />\n            );\n        });\n\n        loadingMorePostsComponent = (showLoadMore) ? (\n            <div className='loading-screen'>\n                <div className='loading__content'>\n                    <div className='round round-1'/>\n                    <div className='round round-2'/>\n                    <div className='round round-3'/>\n                </div>\n            </div>\n        ) : null;\n    }\n\n    return (\n        <div\n            id='searchContainer'\n            className='SearchResults sidebar-right__body'\n        >\n            <SearchResultsHeader>\n                <h2 id='rhsPanelTitle'>\n                    {formattedTitle}\n                </h2>\n                {props.channelDisplayName && <div className='sidebar--right__title__channel'>{props.channelDisplayName}</div>}\n            </SearchResultsHeader>\n            {isMessagesSearch &&\n                <MessageOrFileSelector\n                    selected={searchType}\n                    selectedFilter={searchFilterType}\n                    isFileAttachmentsEnabled={isFileAttachmentsEnabled(config)}\n                    messagesCounter={isSearchAtEnd || props.searchPage === 0 ? `${results.length}` : `${results.length}+`}\n                    filesCounter={isSearchFilesAtEnd || props.searchPage === 0 ? `${fileResults.length}` : `${fileResults.length}+`}\n                    onChange={setSearchType}\n                    onFilter={setSearchFilterType}\n                    onTeamChange={setSearchTeam}\n                    crossTeamSearchEnabled={props.crossTeamSearchEnabled}\n                />}\n            {isChannelFiles &&\n                <div className='channel-files__header'>\n                    <div className='channel-files__title'>\n                        <FormattedMessage\n                            id='search_results.channel-files-header'\n                            defaultMessage='Recent files'\n                        />\n                    </div>\n                    <FilesFilterMenu\n                        selectedFilter={searchFilterType}\n                        onFilter={setSearchFilterType}\n                    />\n                </div>\n            }\n            <SearchLimitsBanner searchType={searchType}/>\n            <Scrollbars\n                ref={scrollbars}\n                autoHide={true}\n                autoHideTimeout={500}\n                autoHideDuration={500}\n                renderTrackVertical={renderTrackVertical}\n                renderThumbHorizontal={renderThumbHorizontal}\n                renderThumbVertical={renderThumbVertical}\n                renderView={renderView}\n                onScroll={handleScroll}\n            >\n                <div\n                    id='search-items-container'\n                    className={classNames([\n                        'search-items-container post-list__table a11y__region',\n                        {\n                            'no-results': (noResults && searchType === DataSearchTypes.MESSAGES_SEARCH_TYPE) || (noFileResults && (searchType === DataSearchTypes.FILES_SEARCH_TYPE || isChannelFiles)),\n                            'channel-files-container': isChannelFiles,\n                        },\n                    ])}\n                    data-a11y-sort-order='3'\n                    data-a11y-focus-child={true}\n                    data-a11y-loop-navigation={false}\n                    aria-label={intl.formatMessage({\n                        id: 'accessibility.sections.rhs',\n                        defaultMessage: '{regionTitle} complementary region',\n                    }, {\n                        regionTitle: formattedTitle,\n                    })}\n                >\n                    <div\n                        id={`${searchType}Panel`}\n                        className='files-or-messages-panel'\n                    >\n                        {contentItems}\n                    </div>\n                    {loadingMorePostsComponent}\n                </div>\n            </Scrollbars>\n        </div>\n    );\n};\n\nSearchResults.defaultProps = defaultProps;\n\nexport const arePropsEqual = (props: Props, nextProps: Props): boolean => {\n    // Shallow compare for all props except 'results' and 'fileResults'\n    for (const key in nextProps) {\n        if (!Object.hasOwn(nextProps, key) || key === 'results') {\n            continue;\n        }\n\n        if (!Object.hasOwn(nextProps, key) || key === 'fileResults') {\n            continue;\n        }\n\n        if (nextProps[key] !== props[key]) {\n            return false;\n        }\n    }\n\n    // Here we do a slightly deeper compare on 'results' because it is frequently a new\n    // array but without any actual changes\n    const {results} = props;\n    const {results: nextResults} = nextProps;\n\n    if (results.length !== nextResults.length) {\n        return false;\n    }\n\n    for (let i = 0; i < results.length; i++) {\n        // Only need a shallow compare on each post\n        if (results[i] !== nextResults[i]) {\n            return false;\n        }\n    }\n\n    // Here we do a slightly deeper compare on 'fileResults' because it is frequently a new\n    // array but without any actual changes\n    const {fileResults} = props;\n    const {fileResults: nextFileResults} = nextProps;\n\n    if (fileResults.length !== nextFileResults.length) {\n        return false;\n    }\n\n    for (let i = 0; i < fileResults.length; i++) {\n        // Only need a shallow compare on each file\n        if (fileResults[i] !== nextFileResults[i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport default React.memo(SearchResults, arePropsEqual);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {FileSearchResultItem} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getSearchFilesResults} from 'mattermost-redux/selectors/entities/files';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getSearchMatches, getSearchResults} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {\n    getSearchResultsTerms,\n    getSearchResultsType,\n    getIsSearchingTerm,\n    getIsSearchingFlaggedPost,\n    getIsSearchingPinnedPost,\n    getIsSearchGettingMore,\n    getCurrentSearchForSearchTeam,\n} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport SearchResults from './search_results';\nimport type {StateProps, OwnProps} from './types';\n\nfunction makeMapStateToProps() {\n    let results: Post[];\n    let fileResults: FileSearchResultItem[];\n    let files: FileSearchResultItem[] = [];\n    let posts: Post[];\n\n    return function mapStateToProps(state: GlobalState) {\n        const config = getConfig(state);\n\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        const newResults = getSearchResults(state);\n\n        // Cache posts and channels\n        if (newResults && newResults !== results) {\n            results = newResults;\n\n            posts = [];\n            results.forEach((post) => {\n                if (!post) {\n                    return;\n                }\n\n                posts.push(post);\n            });\n        }\n\n        const newFilesResults = getSearchFilesResults(state);\n\n        // Cache files and channels\n        if (newFilesResults && newFilesResults !== fileResults) {\n            fileResults = newFilesResults;\n\n            files = [];\n            fileResults.forEach((file) => {\n                if (!file) {\n                    return;\n                }\n\n                const channel = getChannel(state, file.channel_id);\n                if (channel && channel.delete_at !== 0 && !viewArchivedChannels) {\n                    return;\n                }\n\n                files.push(file);\n            });\n        }\n\n        // this is basically a hack to make ts compiler happy\n        // add correct type when it is known what exactly is returned from the function\n        const currentSearch = (getCurrentSearchForSearchTeam(state) as unknown as Record<string, any>) || {};\n        const currentTeamName = getCurrentTeam(state)?.name ?? '';\n\n        return {\n            results: posts,\n            fileResults: files,\n            matches: getSearchMatches(state),\n            searchTerms: getSearchResultsTerms(state),\n            searchSelectedType: getSearchResultsType(state),\n            isSearchingTerm: getIsSearchingTerm(state),\n            isSearchingFlaggedPost: getIsSearchingFlaggedPost(state),\n            isSearchingPinnedPost: getIsSearchingPinnedPost(state),\n            isSearchGettingMore: getIsSearchGettingMore(state),\n            isSearchAtEnd: currentSearch.isEnd,\n            isSearchFilesAtEnd: currentSearch.isFilesEnd,\n            searchPage: currentSearch.params?.page,\n            currentTeamName,\n        };\n    };\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default connect<StateProps, {}, OwnProps, GlobalState>(makeMapStateToProps)(SearchResults);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState, useRef, useCallback} from 'react';\nimport type {ChangeEvent, FormEvent} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {getCurrentChannelNameForSearchShortcut} from 'mattermost-redux/selectors/entities/channels';\n\nimport HeaderIconWrapper from 'components/channel_header/components/header_icon_wrapper';\nimport SearchBar from 'components/search_bar/search_bar';\nimport SearchHint from 'components/search_hint/search_hint';\nimport SearchResults from 'components/search_results';\nimport type Provider from 'components/suggestion/provider';\nimport SearchChannelProvider from 'components/suggestion/search_channel_provider';\nimport SearchDateProvider from 'components/suggestion/search_date_provider';\nimport SearchUserProvider from 'components/suggestion/search_user_provider';\nimport SearchIcon from 'components/widgets/icons/search_icon';\nimport Popover from 'components/widgets/popover';\n\nimport Constants, {searchHintOptions, RHSStates, searchFilesHintOptions} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport {isServerVersionGreaterThanOrEqualTo} from 'utils/server_version';\nimport {isDesktopApp, getDesktopVersion, isMacApp} from 'utils/user_agent';\n\nimport type {SearchType} from 'types/store/rhs';\n\nimport type {Props, SearchFilterType} from './types';\n\ninterface SearchHintOption {\n    searchTerm: string;\n    message: {\n        id: string;\n        defaultMessage: string;\n    };\n}\n\nconst determineVisibleSearchHintOptions = (searchTerms: string, searchType: SearchType): SearchHintOption[] => {\n    let newVisibleSearchHintOptions: SearchHintOption[] = [];\n    let options = searchHintOptions;\n    if (searchType === 'files') {\n        options = searchFilesHintOptions;\n    }\n\n    if (searchTerms.trim() === '') {\n        return options;\n    }\n\n    const pretextArray = searchTerms.split(/\\s+/g);\n    const pretext = pretextArray[pretextArray.length - 1];\n    const penultimatePretext = pretextArray[pretextArray.length - 2];\n\n    let shouldShowHintOptions: boolean;\n\n    if (penultimatePretext) {\n        shouldShowHintOptions = !(options.some(({searchTerm}) => penultimatePretext.toLowerCase().endsWith(searchTerm.toLowerCase())) && penultimatePretext !== '@');\n    } else {\n        shouldShowHintOptions = !options.some(({searchTerm}) => searchTerms.toLowerCase().endsWith(searchTerm.toLowerCase())) || searchTerms === '@';\n    }\n\n    if (shouldShowHintOptions) {\n        try {\n            newVisibleSearchHintOptions = options.filter((option) => {\n                if (pretext === '@' && option.searchTerm === 'From:') {\n                    return true;\n                }\n\n                return new RegExp(pretext, 'ig').\n                    test(option.searchTerm) && option.searchTerm.toLowerCase() !== pretext.toLowerCase();\n            });\n        } catch {\n            newVisibleSearchHintOptions = [];\n        }\n    }\n\n    return newVisibleSearchHintOptions;\n};\n\nconst Search = ({\n    actions: {\n        autocompleteChannelsForSearch,\n        autocompleteUsersInTeam,\n        closeRightHandSide,\n        filterFilesSearchByExt,\n        getMoreFilesForSearch,\n        getMorePostsForSearch,\n        openRHSSearch,\n        setRhsExpanded,\n        showChannelFiles,\n        showSearchResults,\n        updateRhsState,\n        updateSearchTeam,\n        updateSearchTerms,\n        updateSearchTermsForShortcut,\n        updateSearchType,\n    },\n    crossTeamSearchEnabled,\n    hideMobileSearchBarInRHS,\n    isChannelFiles,\n    isFlaggedPosts,\n    isMentionSearch,\n    isMobileView,\n    isPinnedPosts,\n    isRhsExpanded,\n    isSearchingTerm,\n    searchTeam,\n    searchTerms,\n    searchType,\n    searchVisible,\n    channelDisplayName,\n    children,\n    currentChannel,\n    enableFindShortcut,\n    getFocus,\n    hideSearchBar,\n    isSideBarRight,\n    isSideBarRightOpen,\n}: Props): JSX.Element => {\n    const intl = useIntl();\n    const currentChannelName = useSelector(getCurrentChannelNameForSearchShortcut);\n\n    // generate intial component state and setters\n    const [focused, setFocused] = useState<boolean>(false);\n    const [dropdownFocused, setDropdownFocused] = useState<boolean>(false);\n    const [keepInputFocused, setKeepInputFocused] = useState<boolean>(false);\n    const [indexChangedViaKeyPress, setIndexChangedViaKeyPress] = useState<boolean>(false);\n    const [highlightedSearchHintIndex, setHighlightedSearchHintIndex] = useState<number>(-1);\n    const [visibleSearchHintOptions, setVisibleSearchHintOptions] = useState<SearchHintOption[]>(\n        determineVisibleSearchHintOptions(searchTerms, searchType),\n    );\n    const [searchFilterType, setSearchFilterType] = useState<SearchFilterType>('all');\n\n    const suggestionProviders = useRef<Provider[]>([\n        new SearchDateProvider(),\n        new SearchChannelProvider(autocompleteChannelsForSearch),\n        new SearchUserProvider(autocompleteUsersInTeam),\n    ]);\n\n    const isDesktop = isDesktopApp() && isServerVersionGreaterThanOrEqualTo(getDesktopVersion(), '4.7.0');\n    useEffect(() => {\n        if (!enableFindShortcut) {\n            return undefined;\n        }\n\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (Keyboard.cmdOrCtrlPressed(e) && Keyboard.isKeyPressed(e, Constants.KeyCodes.F)) {\n                if (!isDesktop && !e.shiftKey) {\n                    return;\n                }\n\n                // Special case for Mac Desktop xApp where Ctrl+Cmd+F triggers full screen view\n                if (isMacApp() && e.ctrlKey) {\n                    return;\n                }\n\n                e.preventDefault();\n                if (hideSearchBar) {\n                    openRHSSearch();\n                    setKeepInputFocused(true);\n                }\n                if (currentChannelName) {\n                    updateSearchTermsForShortcut();\n                }\n                handleFocus();\n            }\n        };\n\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [hideSearchBar, currentChannelName]);\n\n    useEffect((): void => {\n        if (isMobileView && isSideBarRight) {\n            handleFocus();\n        }\n    }, [isMobileView, isSideBarRight]);\n\n    useEffect((): void => {\n        if (!isMobileView) {\n            setVisibleSearchHintOptions(determineVisibleSearchHintOptions(searchTerms, searchType));\n        }\n    }, [isMobileView, searchTerms, searchType]);\n\n    useEffect((): void => {\n        if (!isMobileView && focused && keepInputFocused) {\n            handleBlur();\n        }\n    }, [isMobileView, searchTerms]);\n\n    const getMorePostsForSearchCallback = useCallback(() => {\n        let team = searchTeam;\n        if (isMentionSearch) {\n            team = '';\n        }\n        getMorePostsForSearch(team);\n    }, [searchTeam, isMentionSearch, getMorePostsForSearch]);\n\n    const getMoreFilesForSearchCallback = useCallback(() => {\n        let team = searchTeam;\n        if (isMentionSearch) {\n            team = '';\n        }\n        getMoreFilesForSearch(team);\n    }, [searchTeam, isMentionSearch, getMoreFilesForSearch]);\n\n    // handle cloding of rhs-flyout\n    const handleClose = (): void => closeRightHandSide();\n\n    // focus the search input\n    const handleFocus = (): void => setFocused(true);\n\n    // release focus from the search input or unset `keepInputFocused` value\n    // `keepInputFocused` is used to keep the search input focused when a\n    // user selects a suggestion from `SearchHint` with a click\n    const handleBlur = (): void => {\n        // add time out so that the pinned and member buttons are clickable\n        // when focus is released from the search box.\n        setTimeout((): void => {\n            if (keepInputFocused) {\n                setKeepInputFocused(false);\n            } else {\n                setFocused(false);\n            }\n        }, 0);\n        updateHighlightedSearchHint();\n    };\n\n    const handleDropdownBlur = () => setDropdownFocused(false);\n\n    const handleDropdownFocus = () => setDropdownFocused(true);\n\n    const handleSearchHintSelection = (): void => {\n        if (focused) {\n            setKeepInputFocused(true);\n        } else {\n            setFocused(true);\n        }\n    };\n\n    const handleAddSearchTerm = (term: string): void => {\n        const pretextArray = searchTerms?.split(' ') || [];\n        pretextArray.pop();\n        pretextArray.push(term.toLowerCase());\n        handleUpdateSearchTerms(pretextArray.join(' '));\n    };\n\n    const handleUpdateSearchTeamFromResult = async (teamId: string) => {\n        updateSearchTeam(teamId);\n        const newTerms = searchTerms.\n            replace(/\\bin:[^\\s]*/gi, '').replace(/\\s{2,}/g, ' ').\n            replace(/\\bfrom:[^\\s]*/gi, '').replace(/\\s{2,}/g, ' ');\n\n        if (newTerms.trim() !== searchTerms.trim()) {\n            updateSearchTerms(newTerms);\n        }\n\n        handleSearch().then(() => {\n            setKeepInputFocused(false);\n            setFocused(false);\n        });\n    };\n\n    const handleUpdateSearchTerms = (terms: string): void => {\n        updateSearchTerms(terms);\n        updateHighlightedSearchHint();\n    };\n\n    const handleOnSearchTypeSelected = (searchType || searchTerms) ? undefined : (value: SearchType) => {\n        updateSearchType(value);\n        if (!searchType) {\n            setDropdownFocused(false);\n        }\n        setFocused(true);\n    };\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const term = e.target.value;\n        updateSearchTerms(term);\n    };\n\n    // call this function without parameters to reset `SearchHint`\n    const updateHighlightedSearchHint = (indexDelta = 0, changedViaKeyPress = false): void => {\n        if (Math.abs(indexDelta) > 1) {\n            return;\n        }\n\n        let newIndex = highlightedSearchHintIndex + indexDelta;\n\n        switch (indexDelta) {\n        case 1:\n            // KEY.DOWN\n            // is it at the end of the list?\n            newIndex = newIndex === visibleSearchHintOptions.length ? 0 : newIndex;\n            break;\n        case -1:\n            // KEY.UP\n            // is it at the start of the list (or initial value)?\n            newIndex = newIndex < 0 ? visibleSearchHintOptions.length - 1 : newIndex;\n            break;\n        case 0:\n        default:\n            // reset the index (e.g. on blur)\n            newIndex = -1;\n        }\n\n        setHighlightedSearchHintIndex(newIndex);\n        setIndexChangedViaKeyPress(changedViaKeyPress);\n    };\n\n    const handleEnterKey = (e: ChangeEvent<HTMLInputElement>): void => {\n        e.preventDefault();\n\n        if (indexChangedViaKeyPress) {\n            setKeepInputFocused(true);\n            if (!searchType && !searchTerms) {\n                updateSearchType(highlightedSearchHintIndex === 0 ? 'messages' : 'files');\n                setHighlightedSearchHintIndex(-1);\n            } else {\n                handleAddSearchTerm(visibleSearchHintOptions[highlightedSearchHintIndex].searchTerm);\n            }\n            return;\n        }\n\n        if (isMentionSearch) {\n            updateRhsState(RHSStates.SEARCH);\n        }\n\n        handleSearch().then(() => {\n            setKeepInputFocused(false);\n            setFocused(false);\n        });\n    };\n\n    const handleSubmit = (e: FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n\n        handleSearch().then(() => {\n            setKeepInputFocused(false);\n            setFocused(false);\n        });\n    };\n\n    const handleSearch = async (): Promise<void> => {\n        const terms = searchTerms.trim();\n\n        if (terms.length === 0) {\n            return;\n        }\n\n        const {error} = await showSearchResults(Boolean(isMentionSearch)) as any;\n\n        if (!error) {\n            handleSearchOnSuccess();\n        }\n    };\n\n    const handleSearchOnSuccess = (): void => {\n        if (isMobileView) {\n            handleClear();\n        }\n    };\n\n    const handleClear = (): void => {\n        if (isMentionSearch) {\n            setFocused(false);\n            updateRhsState(RHSStates.SEARCH);\n        }\n        updateSearchTerms('');\n        updateSearchTeam(null);\n        updateSearchType('');\n    };\n\n    const handleShrink = (): void => {\n        setRhsExpanded(false);\n    };\n\n    const handleSetSearchFilter = (filterType: SearchFilterType): void => {\n        switch (filterType) {\n        case 'documents':\n            filterFilesSearchByExt(['doc', 'pdf', 'docx', 'odt', 'rtf', 'txt']);\n            break;\n        case 'spreadsheets':\n            filterFilesSearchByExt(['xls', 'xlsx', 'ods']);\n            break;\n        case 'presentations':\n            filterFilesSearchByExt(['ppt', 'pptx', 'odp']);\n            break;\n        case 'code':\n            filterFilesSearchByExt(['py', 'go', 'java', 'kt', 'c', 'cpp', 'h', 'html', 'js', 'ts', 'cs', 'vb', 'php', 'pl', 'r', 'rb', 'sql', 'swift', 'json']);\n            break;\n        case 'images':\n            filterFilesSearchByExt(['png', 'jpg', 'jpeg', 'bmp', 'tiff', 'svg', 'psd', 'xcf']);\n            break;\n        case 'audio':\n            filterFilesSearchByExt(['ogg', 'mp3', 'wav', 'flac']);\n            break;\n        case 'video':\n            filterFilesSearchByExt(['ogm', 'mp4', 'avi', 'webm', 'mov', 'mkv', 'mpeg', 'mpg']);\n            break;\n        default:\n            filterFilesSearchByExt([]);\n        }\n        setSearchFilterType(filterType);\n        if (isChannelFiles && currentChannel) {\n            showChannelFiles(currentChannel.id);\n        } else {\n            showSearchResults(false);\n        }\n    };\n\n    const setHoverHintIndex = (_highlightedSearchHintIndex: number): void => {\n        setHighlightedSearchHintIndex(_highlightedSearchHintIndex);\n        setIndexChangedViaKeyPress(false);\n    };\n\n    const searchButtonClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        openRHSSearch();\n    };\n\n    const renderHintPopover = (): JSX.Element => {\n        let termsUsed = 0;\n\n        searchTerms?.split(/[: ]/g).forEach((word: string): void => {\n            let options = searchHintOptions;\n            if (searchType === 'files') {\n                options = searchFilesHintOptions;\n            }\n            if (options.some(({searchTerm}) => searchTerm.toLowerCase() === word.toLowerCase())) {\n                termsUsed++;\n            }\n        });\n\n        if (visibleSearchHintOptions.length === 0 || isMentionSearch) {\n            return <></>;\n        }\n\n        const helpClass = `search-help-popover${((dropdownFocused || focused) && termsUsed <= 2) ? ' visible' : ''}`;\n\n        return (\n            <Popover\n                id={`${isSideBarRight ? 'sbr-' : ''}searchbar-help-popup`}\n                placement='bottom'\n                className={helpClass}\n            >\n                <SearchHint\n                    options={visibleSearchHintOptions}\n                    withTitle={true}\n                    onOptionSelected={handleAddSearchTerm}\n                    onMouseDown={handleSearchHintSelection}\n                    highlightedIndex={highlightedSearchHintIndex}\n                    onOptionHover={setHoverHintIndex}\n                    onSearchTypeSelected={handleOnSearchTypeSelected}\n                    onElementBlur={handleDropdownBlur}\n                    onElementFocus={handleDropdownFocus}\n                    searchType={searchType}\n                />\n            </Popover>\n        );\n    };\n\n    const renderSearchBar = (): JSX.Element => (\n        <>\n            <div className='sidebar-collapse__container'>\n                <div\n                    id={isSideBarRight ? 'sbrSidebarCollapse' : 'sidebarCollapse'}\n                    className='sidebar-collapse'\n                    onClick={handleClose}\n                >\n                    <span\n                        className='fa fa-2x fa-angle-left'\n                        title={intl.formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n                    />\n                </div>\n            </div>\n            <SearchBar\n                updateHighlightedSearchHint={updateHighlightedSearchHint}\n                handleEnterKey={handleEnterKey}\n                handleClear={handleClear}\n                handleChange={handleChange}\n                handleSubmit={handleSubmit}\n                handleFocus={handleFocus}\n                handleBlur={handleBlur}\n                keepFocused={keepInputFocused}\n                setKeepFocused={setKeepInputFocused}\n                isFocused={focused}\n                suggestionProviders={suggestionProviders.current}\n                isSideBarRight={isSideBarRight}\n                isSearchingTerm={isSearchingTerm}\n                getFocus={getFocus}\n                searchTerms={searchTerms}\n                searchType={searchType}\n                clearSearchType={() => updateSearchType('')}\n            >\n                {!isMobileView && renderHintPopover()}\n            </SearchBar>\n        </>\n    );\n\n    // when inserted in RHSSearchNav component, just return SearchBar\n    if (!isSideBarRight) {\n        if (hideSearchBar) {\n            return (\n                <HeaderIconWrapper\n                    buttonId={'channelHeaderSearchButton'}\n                    onClick={searchButtonClick}\n                    tooltip={intl.formatMessage({id: 'channel_header.search', defaultMessage: 'Search'})}\n                >\n                    <SearchIcon\n                        className='icon icon--standard'\n                        aria-hidden='true'\n                    />\n                </HeaderIconWrapper>\n            );\n        }\n\n        return (\n            <div\n                id='searchbarContainer'\n                className={'search-bar-container--global'}\n            >\n                <div className='sidebar-right__table'>\n                    {renderSearchBar()}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className='sidebar--right__content'>\n            {!hideMobileSearchBarInRHS && (\n                <div className='search-bar__container channel-header alt'>\n                    <div className='sidebar-right__table'>\n                        {renderSearchBar()}\n                    </div>\n                </div>\n            )}\n            {searchVisible ? (\n                <SearchResults\n                    isMentionSearch={isMentionSearch}\n                    isFlaggedPosts={isFlaggedPosts}\n                    isPinnedPosts={isPinnedPosts}\n                    isChannelFiles={isChannelFiles}\n                    shrink={handleShrink}\n                    channelDisplayName={channelDisplayName}\n                    isOpened={isSideBarRightOpen}\n                    updateSearchTerms={handleAddSearchTerm}\n                    updateSearchTeam={handleUpdateSearchTeamFromResult}\n                    handleSearchHintSelection={handleSearchHintSelection}\n                    isSideBarExpanded={isRhsExpanded}\n                    getMorePostsForSearch={getMorePostsForSearchCallback}\n                    getMoreFilesForSearch={getMoreFilesForSearchCallback}\n                    setSearchFilterType={handleSetSearchFilter}\n                    searchFilterType={searchFilterType}\n                    setSearchType={(value: SearchType) => updateSearchType(value)}\n                    searchType={searchType || 'messages'}\n                    crossTeamSearchEnabled={crossTeamSearchEnabled}\n                />\n            ) : children}\n        </div>\n    );\n};\n\nconst defaultProps: Partial<Props> = {\n    searchTerms: '',\n    channelDisplayName: '',\n    isSideBarRight: false,\n    hideMobileSearchBarInRHS: false,\n    getFocus: () => {},\n};\n\nSearch.defaultProps = defaultProps;\n\nexport default React.memo(Search);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ServerError} from '@mattermost/types/errors';\n\nimport {getMorePostsForSearch, getMoreFilesForSearch} from 'mattermost-redux/actions/search';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getIsCrossTeamSearchEnabled} from 'mattermost-redux/selectors/entities/general';\n\nimport {autocompleteChannelsForSearch} from 'actions/channel_actions';\nimport {autocompleteUsersInCurrentTeam} from 'actions/user_actions';\nimport {\n    updateSearchTerms,\n    updateSearchTeam,\n    updateSearchTermsForShortcut,\n    showSearchResults,\n    showChannelFiles,\n    closeRightHandSide,\n    updateRhsState,\n    setRhsExpanded,\n    openRHSSearch,\n    filterFilesSearchByExt,\n    updateSearchType,\n} from 'actions/views/rhs';\nimport {getRhsState, getSearchTeam, getSearchTerms, getSearchType, getIsSearchingTerm, getIsRhsOpen, getIsRhsExpanded} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport Search from './search';\n\nfunction mapStateToProps(state: GlobalState) {\n    const rhsState = getRhsState(state);\n    const currentChannel = getCurrentChannel(state);\n    const isMobileView = getIsMobileView(state);\n    const isRhsOpen = getIsRhsOpen(state);\n    const crossTeamSearchEnabled = getIsCrossTeamSearchEnabled(state);\n\n    return {\n        currentChannel,\n        isRhsExpanded: getIsRhsExpanded(state),\n        isSearchingTerm: getIsSearchingTerm(state),\n        searchTerms: getSearchTerms(state),\n        searchTeam: getSearchTeam(state),\n        searchType: getSearchType(state),\n        searchVisible: rhsState !== null && (![\n            RHSStates.PLUGIN,\n            RHSStates.CHANNEL_INFO,\n            RHSStates.CHANNEL_MEMBERS,\n            RHSStates.EDIT_HISTORY,\n        ].includes(rhsState)),\n        hideMobileSearchBarInRHS: isMobileView && isRhsOpen && rhsState === RHSStates.CHANNEL_INFO,\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        isFlaggedPosts: rhsState === RHSStates.FLAG,\n        isPinnedPosts: rhsState === RHSStates.PIN,\n        isChannelFiles: rhsState === RHSStates.CHANNEL_FILES,\n        isMobileView,\n        crossTeamSearchEnabled,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    const autocompleteChannels = (term: string, teamId: string, success?: (channels: Channel[]) => void, error?: (err: ServerError) => void): void => {\n        autocompleteChannelsForSearch(term, success, error);\n    };\n\n    return {\n        actions: bindActionCreators({\n            updateSearchTerms,\n            updateSearchTeam,\n            updateSearchTermsForShortcut,\n            updateSearchType,\n            showSearchResults,\n            showChannelFiles,\n            setRhsExpanded,\n            closeRightHandSide,\n            autocompleteChannelsForSearch: autocompleteChannels,\n            autocompleteUsersInTeam: autocompleteUsersInCurrentTeam,\n            updateRhsState,\n            getMorePostsForSearch,\n            openRHSSearch,\n            getMoreFilesForSearch,\n            filterFilesSearchByExt,\n        }, dispatch),\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport SearchResultsHeader from 'components/search_results_header';\n\nimport Pluggable from 'plugins/pluggable';\n\nexport type Props = {\n    showPluggable: boolean;\n    pluggableId: string;\n    title: React.ReactNode;\n}\n\nconst RhsPlugin = ({showPluggable, pluggableId, title}: Props) => {\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n            <SearchResultsHeader>\n                {title}\n            </SearchResultsHeader>\n            {\n                showPluggable &&\n                <Pluggable\n                    pluggableName='RightHandSidebarComponent'\n                    pluggableId={pluggableId}\n                />\n            }\n        </div>\n    );\n};\n\nexport default React.memo(RhsPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getPluggableId} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport RHSPlugin from './rhs_plugin';\n\nfunction mapStateToProps(state: GlobalState) {\n    const rhsPlugins = state.plugins.components.RightHandSidebarComponent;\n    const pluggableId = getPluggableId(state);\n    const pluginComponent = rhsPlugins.find((element) => element.id === pluggableId);\n    const pluginTitle = pluginComponent ? pluginComponent.title : '';\n\n    return {\n        showPluggable: Boolean(pluginComponent),\n        pluggableId,\n        title: pluginTitle,\n    };\n}\n\nexport default connect(mapStateToProps)(RHSPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ProductIdentifier} from '@mattermost/types/products';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport ChannelInfoRhs from 'components/channel_info_rhs';\nimport ChannelMembersRhs from 'components/channel_members_rhs';\nimport FileUploadOverlay from 'components/file_upload_overlay';\nimport {DropOverlayIdRHS} from 'components/file_upload_overlay/file_upload_overlay';\nimport LoadingScreen from 'components/loading_screen';\nimport PostEditHistory from 'components/post_edit_history';\nimport ResizableRhs from 'components/resizable_sidebar/resizable_rhs';\nimport RhsCard from 'components/rhs_card';\nimport RhsThread from 'components/rhs_thread';\nimport Search from 'components/search/index';\n\nimport RhsPlugin from 'plugins/rhs_plugin';\nimport a11yController from 'utils/a11y_controller_instance';\nimport {focusElement, getFirstFocusableChild} from 'utils/a11y_utils';\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {isMac} from 'utils/user_agent';\n\nimport type {RhsState} from 'types/store/rhs';\n\nexport type Props = {\n    isExpanded: boolean;\n    isOpen: boolean;\n    channel?: Channel;\n    team?: Team;\n    teamId: Team['id'];\n    productId: ProductIdentifier;\n    postRightVisible: boolean;\n    postCardVisible: boolean;\n    searchVisible: boolean;\n    isPinnedPosts: boolean;\n    isChannelFiles: boolean;\n    isChannelInfo: boolean;\n    isChannelMembers: boolean;\n    isPluginView: boolean;\n    isPostEditHistory: boolean;\n    previousRhsState: RhsState;\n    rhsChannel?: Channel;\n    selectedPostId: string;\n    selectedPostCardId: string;\n    isSavedPosts?: boolean;\n    isRecentMentions?: boolean;\n    ariaLabel?: string;\n    ariaLabeledby?: string;\n    actions: {\n        setRhsExpanded: (expanded: boolean) => void;\n        showPinnedPosts: (channelId: string) => void;\n        openRHSSearch: () => void;\n        closeRightHandSide: () => void;\n        openAtPrevious: (previous: Partial<Props> | undefined) => void;\n        updateSearchTerms: (terms: string) => void;\n        showChannelFiles: (channelId: string) => void;\n        showChannelInfo: (channelId: string) => void;\n    };\n}\n\ntype State = {\n    isOpened: boolean;\n}\n\nexport default class SidebarRight extends React.PureComponent<Props, State> {\n    sidebarRight: React.RefObject<HTMLDivElement>;\n    sidebarRightWidthHolder: React.RefObject<HTMLDivElement>;\n    previous: Partial<Props> | undefined = undefined;\n    focusSearchBar?: () => void;\n    private previousActiveElement: HTMLElement | null = null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.sidebarRightWidthHolder = React.createRef<HTMLDivElement>();\n        this.sidebarRight = React.createRef<HTMLDivElement>();\n        this.state = {\n            isOpened: false,\n        };\n    }\n\n    setPrevious = () => {\n        if (!this.props.isOpen) {\n            return;\n        }\n\n        this.previous = {\n            searchVisible: this.props.searchVisible,\n            isPinnedPosts: this.props.isPinnedPosts,\n            isRecentMentions: this.props.isRecentMentions,\n            isSavedPosts: this.props.isSavedPosts,\n            isChannelFiles: this.props.isChannelFiles,\n            isChannelInfo: this.props.isChannelInfo,\n            isChannelMembers: this.props.isChannelMembers,\n            isPostEditHistory: this.props.isPostEditHistory,\n            selectedPostId: this.props.selectedPostId,\n            selectedPostCardId: this.props.selectedPostCardId,\n            previousRhsState: this.props.previousRhsState,\n        };\n    };\n\n    handleShortcut = (e: KeyboardEvent) => {\n        const channelInfoShortcutMac = isMac() && e.shiftKey;\n        const channelInfoShortcut = !isMac() && e.altKey;\n\n        if (cmdOrCtrlPressed(e, true)) {\n            if (e.shiftKey && isKeyPressed(e, Constants.KeyCodes.PERIOD)) {\n                e.preventDefault();\n                if (this.props.isOpen) {\n                    if (this.props.isExpanded) {\n                        this.props.actions.setRhsExpanded(false);\n                    } else {\n                        this.props.actions.setRhsExpanded(true);\n                    }\n                } else {\n                    this.props.actions.openAtPrevious(this.previous);\n                }\n            } else if (isKeyPressed(e, Constants.KeyCodes.PERIOD)) {\n                e.preventDefault();\n                if (this.props.isOpen) {\n                    this.props.actions.closeRightHandSide();\n                } else {\n                    this.props.actions.openAtPrevious(this.previous);\n                }\n            } else if (isKeyPressed(e, Constants.KeyCodes.I) && (channelInfoShortcutMac || channelInfoShortcut)) {\n                e.preventDefault();\n                if (this.props.isOpen && this.props.isChannelInfo) {\n                    this.props.actions.closeRightHandSide();\n                } else if (this.props.channel) {\n                    this.props.actions.showChannelInfo(this.props.channel.id);\n                }\n            }\n        }\n    };\n\n    handleRHSFocus(prevProps: Props) {\n        const wasOpen = prevProps.isOpen;\n        const isOpen = this.props.isOpen;\n\n        const contentChanged = (\n            (this.props.isPinnedPosts !== prevProps.isPinnedPosts) ||\n            (this.props.isRecentMentions !== prevProps.isRecentMentions) ||\n            (this.props.isSavedPosts !== prevProps.isSavedPosts) ||\n            (this.props.isChannelFiles !== prevProps.isChannelFiles) ||\n            (this.props.isChannelInfo !== prevProps.isChannelInfo) ||\n            (this.props.isChannelMembers !== prevProps.isChannelMembers) ||\n            (this.props.isPostEditHistory !== prevProps.isPostEditHistory) ||\n            (this.props.rhsChannel?.id !== prevProps.rhsChannel?.id) ||\n            (this.props.teamId !== prevProps.teamId)\n        );\n\n        if (this.props.isOpen && (contentChanged || (!wasOpen && isOpen))) {\n            this.previousActiveElement = document.activeElement as HTMLElement;\n\n            // Focus the sidebar after a tick\n            setTimeout(() => {\n                if (this.sidebarRight.current) {\n                    const rhsContainer = this.sidebarRight.current.querySelector('#rhsContainer') as HTMLElement;\n                    const searchContainer = this.sidebarRight.current.querySelector('#searchContainer') as HTMLElement;\n                    if (rhsContainer || searchContainer) {\n                        const firstFocusable = getFirstFocusableChild(rhsContainer || searchContainer);\n                        focusElement(firstFocusable || rhsContainer, true);\n                    } else {\n                        // Fallback: if rhsContainer isn't found, use sidebarRight.current directly.\n                        const firstFocusable = getFirstFocusableChild(this.sidebarRight.current);\n                        focusElement(firstFocusable || this.sidebarRight.current, true);\n                    }\n                }\n            }, 0);\n        } else if (!this.props.isOpen && wasOpen) {\n            // RHS just was closed, restore focus to the previous element had it\n            if (a11yController.originElement) {\n                a11yController.restoreOriginFocus();\n            } else {\n                setTimeout(() => {\n                    if (this.previousActiveElement) {\n                        focusElement(this.previousActiveElement, true);\n                        this.previousActiveElement = null;\n                    }\n                }, 0);\n            }\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleShortcut);\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const wasOpen = prevProps.searchVisible || prevProps.postRightVisible;\n        const isOpen = this.props.searchVisible || this.props.postRightVisible;\n\n        if (!wasOpen && isOpen) {\n            trackEvent('ui', 'ui_rhs_opened');\n        }\n\n        this.handleRHSFocus(prevProps);\n\n        const {actions, isChannelFiles, isPinnedPosts, rhsChannel, channel} = this.props;\n        if (isPinnedPosts && prevProps.isPinnedPosts === isPinnedPosts && rhsChannel && rhsChannel.id !== prevProps.rhsChannel?.id) {\n            actions.showPinnedPosts(rhsChannel.id);\n        }\n\n        if (isChannelFiles && prevProps.isChannelFiles === isChannelFiles && rhsChannel && rhsChannel.id !== prevProps.rhsChannel?.id) {\n            actions.showChannelFiles(rhsChannel.id);\n        }\n\n        // in the case of navigating to another channel\n        // or from global threads to a channel\n        // we shrink the sidebar\n        if (\n            (channel && prevProps.channel && (channel.id !== prevProps.channel.id)) ||\n            (channel && !prevProps.channel)\n        ) {\n            this.props.actions.setRhsExpanded(false);\n        }\n\n        // close when changing products or teams\n        if (\n            (prevProps.teamId && this.props.teamId !== prevProps.teamId) ||\n            this.props.productId !== prevProps.productId\n        ) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        this.setPrevious();\n    }\n\n    handleClickOutside = (e: MouseEvent) => {\n        if (\n            (this.props.isOpen && this.props.isExpanded) && // can be collapsed\n            e.target && // has target\n            document.getElementById('root')?.contains(e.target as Element) &&//  within Root\n            !this.sidebarRight.current?.contains(e.target as Element) && // not within RHS\n            !document.getElementById('global-header')?.contains(e.target as Element) && // not within Global Header\n            !document.querySelector('.app-bar')?.contains(e.target as Element) // not within App Bar\n        ) {\n            this.props.actions.setRhsExpanded(false);\n        }\n    };\n\n    handleUpdateSearchTerms = (term: string) => {\n        this.props.actions.updateSearchTerms(term);\n        this.focusSearchBar?.();\n    };\n\n    getSearchBarFocus = (focusSearchBar: () => void) => {\n        this.focusSearchBar = focusSearchBar;\n    };\n\n    render() {\n        const {\n            team,\n            channel,\n            rhsChannel,\n            postRightVisible,\n            postCardVisible,\n            previousRhsState,\n            searchVisible,\n            isPluginView,\n            isOpen,\n            isChannelInfo,\n            isChannelMembers,\n            isExpanded,\n            isPostEditHistory,\n        } = this.props;\n\n        if (!isOpen) {\n            return null;\n        }\n\n        const teamNeeded = true;\n        let selectedChannelNeeded;\n        let currentChannelNeeded;\n        let content = null;\n\n        if (postRightVisible) {\n            selectedChannelNeeded = true;\n            content = (\n                <div className='post-right__container'>\n                    <FileUploadOverlay\n                        overlayType='right'\n                        id={DropOverlayIdRHS}\n                    />\n                    <RhsThread previousRhsState={previousRhsState}/>\n                </div>\n            );\n        } else if (postCardVisible) {\n            content = <RhsCard previousRhsState={previousRhsState}/>;\n        } else if (isPluginView) {\n            content = <RhsPlugin/>;\n        } else if (isChannelInfo) {\n            currentChannelNeeded = true;\n            content = <ChannelInfoRhs/>;\n        } else if (isChannelMembers) {\n            currentChannelNeeded = true;\n            content = <ChannelMembersRhs/>;\n        } else if (isPostEditHistory) {\n            content = <PostEditHistory/>;\n        }\n\n        const isRHSLoading = Boolean(\n            (teamNeeded && !team) ||\n            (selectedChannelNeeded && !rhsChannel) ||\n            (currentChannelNeeded && !channel),\n        );\n\n        const channelDisplayName = rhsChannel ? rhsChannel.display_name : '';\n\n        const isSidebarRightExpanded = (postRightVisible || postCardVisible || isPluginView || searchVisible || isPostEditHistory) && isExpanded;\n        const containerClassName = classNames('sidebar--right', 'move--left is-open', {\n            'sidebar--right--expanded expanded': isSidebarRightExpanded,\n        });\n\n        return (\n            <>\n                <div\n                    className={'sidebar--right sidebar--right--width-holder'}\n                    ref={this.sidebarRightWidthHolder}\n                />\n                <ResizableRhs\n                    className={containerClassName}\n                    id='sidebar-right'\n                    role='region'\n                    rightWidthHolderRef={this.sidebarRightWidthHolder}\n                    ariaLabel={this.props.ariaLabel}\n                    ariaLabeledby={this.props.ariaLabeledby}\n                >\n                    <div\n                        tabIndex={-1}\n                        className='sidebar-right-container'\n                        ref={this.sidebarRight}\n                    >\n                        {isRHSLoading ? (\n                            <div className='sidebar-right__body'>\n                                {/* Sometimes the channel/team is not loaded yet, so we need to wait for it */}\n                                <LoadingScreen centered={true}/>\n                            </div>\n                        ) : (\n                            <Search\n                                isSideBarRight={true}\n                                isSideBarRightOpen={true}\n                                getFocus={this.getSearchBarFocus}\n                                channelDisplayName={channelDisplayName}\n                            >\n                                {content}\n                            </Search>\n                        )}\n                    </div>\n                </ResizableRhs>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setRhsExpanded, showChannelInfo, showPinnedPosts, showChannelFiles, openRHSSearch, closeRightHandSide, openAtPrevious, updateSearchTerms} from 'actions/views/rhs';\nimport {selectCurrentProductId} from 'selectors/products';\nimport {\n    getIsRhsExpanded,\n    getIsRhsOpen,\n    getRhsState,\n    getSelectedChannel,\n    getSelectedPostId,\n    getSelectedPostCardId,\n    getPreviousRhsState,\n} from 'selectors/rhs';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarRight from './sidebar_right';\n\nfunction mapStateToProps(state: GlobalState, props: RouteComponentProps) {\n    const rhsState = getRhsState(state);\n    const channel = getCurrentChannel(state);\n    const team = getCurrentTeam(state);\n    const teamId = team?.id ?? '';\n    const productId = selectCurrentProductId(state, props.location.pathname);\n\n    const selectedPostId = getSelectedPostId(state);\n    const selectedPostCardId = getSelectedPostCardId(state);\n\n    return {\n        isExpanded: getIsRhsExpanded(state),\n        isOpen: getIsRhsOpen(state),\n        channel,\n        postRightVisible: Boolean(selectedPostId) && rhsState !== RHSStates.EDIT_HISTORY,\n        postCardVisible: Boolean(selectedPostCardId),\n        searchVisible: Boolean(rhsState) && rhsState !== RHSStates.PLUGIN,\n        previousRhsState: getPreviousRhsState(state),\n        isPinnedPosts: rhsState === RHSStates.PIN,\n        isChannelFiles: rhsState === RHSStates.CHANNEL_FILES,\n        isChannelInfo: rhsState === RHSStates.CHANNEL_INFO,\n        isChannelMembers: rhsState === RHSStates.CHANNEL_MEMBERS,\n        isPluginView: rhsState === RHSStates.PLUGIN,\n        isPostEditHistory: rhsState === RHSStates.EDIT_HISTORY,\n        isRecentMention: rhsState === RHSStates.MENTION,\n        isSavedPosts: rhsState === RHSStates.FLAG,\n        rhsChannel: getSelectedChannel(state),\n        selectedPostId,\n        selectedPostCardId,\n        team,\n        teamId,\n        productId,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            setRhsExpanded,\n            showPinnedPosts,\n            openRHSSearch,\n            closeRightHandSide,\n            openAtPrevious,\n            updateSearchTerms,\n            showChannelFiles,\n            showChannelInfo,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SidebarRight));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function SearchIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='16px'\n                height='16px'\n                viewBox='0 0 17 17'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.search', defaultMessage: 'Search Icon'})}\n            >\n                <path d='M16.398 15.138L13.014 11.754C13.458 11.178 13.8 10.548 14.04 9.86399C14.28 9.14399 14.4 8.40599 14.4 7.64999C14.4 6.42599 14.094 5.29199 13.482 4.24799C12.882 3.22799 12.072 2.41799 11.052 1.81799C10.008 1.20599 8.874 0.899988 7.65 0.899988C6.426 0.899988 5.292 1.20599 4.248 1.81799C3.228 2.41799 2.418 3.22799 1.818 4.24799C1.206 5.29199 0.9 6.42599 0.9 7.64999C0.9 8.87399 1.206 10.008 1.818 11.052C2.418 12.072 3.228 12.882 4.248 13.482C5.292 14.094 6.426 14.4 7.65 14.4C8.406 14.4 9.138 14.274 9.846 14.022C10.53 13.794 11.16 13.458 11.736 13.014L15.138 16.398C15.306 16.566 15.516 16.65 15.768 16.65C16.02 16.65 16.23 16.56 16.398 16.38C16.566 16.212 16.65 16.008 16.65 15.768C16.65 15.528 16.566 15.318 16.398 15.138ZM2.7 7.64999C2.7 6.74999 2.922 5.92199 3.366 5.16599C3.81 4.40999 4.41 3.80999 5.166 3.36599C5.922 2.92199 6.75 2.69999 7.65 2.69999C8.55 2.69999 9.378 2.92199 10.134 3.36599C10.89 3.80999 11.49 4.40999 11.934 5.16599C12.378 5.92199 12.6 6.74999 12.6 7.64999C12.6 8.54999 12.378 9.37799 11.934 10.134C11.49 10.89 10.89 11.49 10.134 11.934C9.378 12.378 8.55 12.6 7.65 12.6C6.75 12.6 5.922 12.378 5.166 11.934C4.41 11.49 3.81 10.89 3.366 10.134C2.922 9.37799 2.7 8.54999 2.7 7.64999Z'/>\n            </svg>\n        </span>\n    );\n}\n"],"names":["NewChannelWithBoardTourTip","_ref","pulsatingDotPlacement","pulsatingDotTranslate","dispatch","useDispatch","showTip","useSelector","showNewChannelWithBoardPulsatingDot","title","React","FormattedMessage","id","defaultMessage","screen","tipOpened","setTipOpened","useState","handleDismiss","useCallback","e","stopPropagation","setNewChannelWithBoardPreference","Preferences","NEW_CHANNEL_WITH_BOARD_TOUR_SHOWED","handleOpen","preventDefault","overlayPunchOut","useMeasurePunchouts","y","height","x","width","TourTip","show","placement","step","singleTip","showOptOut","interactivePunchOut","handlePrevious","offset","propTypes","_pt","isRequired","HeaderIconWrapper","props","ariaLabelOverride","buttonClass","buttonId","children","onClick","tooltip","tooltipText","tooltipShortcut","isRhsOpen","pluginId","boardsEnabled","suitePluginIds","focalboard","ariaLabelText","WithTooltip","shortcut","className","DEFAULT_COPY_TIMEOUT","useCopyText","text","successCopyTimeout","successCopyTimeoutReceived","trackCallback","copiedRecently","setCopiedRecently","copyError","setCopyError","timerRef","useRef","current","clearTimeout","clipboard","navigator","writeText","then","catch","textField","document","createElement","innerText","style","position","opacity","body","appendChild","select","success","execCommand","err","remove","setTimeout","messages","defineMessages","copy","copied","AlertSvg","toString","viewBox","fill","xmlns","rx","fillOpacity","d","stroke","strokeOpacity","strokeWidth","strokeLinecap","EditButton","styled","withConfig","displayName","EmptyPlace","EditableAreaBase","editable","content","emptyLabel","onEdit","formatMessage","useIntl","allowEditArea","LineLimiterBase","maxLines","lineHeight","moreText","lessText","errorMargin","maxLineHeight","needLimiter","setNeedLimiter","open","setOpen","maxHeight","setMaxHeight","ref","useEffect","contentHeight","scrollHeight","concat","CSSTransition","in","timeout","classNames","ToggleButton","ChannelId","ChannelPurpose","ChannelDescriptionHeading","ChannelHeader","AboutAreaChannel","channel","canEditChannelProperties","actions","purpose","EditableArea","LineLimiter","Markdown","message","editChannelPurpose","header","editChannelHeader","Username","UserInfoContainer","UserAvatar","UserInfo","UsernameContainer","UserPosition","AboutAreaDM","dmUser","ProfilePicture","src","Client4","getProfilePictureUrl","user","last_picture_update","isBot","is_bot","status","undefined","username","display_name","userId","channelId","size","BotTag","is_guest","GuestTag","bot_description","Usernames","ProfilePictures","ProfilePictureContainer","UsersArea","AboutAreaGM","gmUsers","map","idx","key","i","_ref2","length","UserProfileElement","Container","AboutArea","type","Constants","DM_CHANNEL","GM_CHANNEL","OPEN_CHANNEL","PRIVATE_CHANNEL","includes","Icon","HeaderTitle","Header","isArchived","isMobile","onClose","MenuContainer","MenuItemButton","MenuItemText","RightSide","Badge","MenuItem","icon","opensSubpanel","badge","hasRightSide","Menu","channelStats","loadingStats","setLoadingStats","showNotificationPreferences","showMembers","fileCount","files_count","getChannelStats","openNotificationSettings","member_count","showChannelMembers","pinnedpost_count","showPinnedPosts","LoadingSpinner","showChannelFiles","ChannelInfoRhsTopButtons","Button","CopyButton","TopButtons","channelType","channelURL","isFavorite","isMuted","isInvitingPeople","canAddPeople","propsCanAddPeople","copyLink","canCopyLink","favoriteIcon","favoriteText","mutedIcon","mutedText","copyIcon","copyText","toggleFavorite","toggleMute","addPeople","Divider","ChannelInfoRhs","currentTeam","currentUser","channelMembers","canManageMembers","canManageProperties","currentUserId","getSiteURL","name","filter","closeRightHandSide","unfavoriteChannel","favoriteChannel","unmuteChannel","muteChannel","openModal","modalId","ModalIdentifiers","CREATE_DM_CHANNEL","dialogType","MoreDirectChannels","dialogProps","isExistingChannel","focusOriginElement","CHANNEL_INVITE","ChannelInviteModal","EDIT_CHANNEL_HEADER","EditChannelHeaderModal","EDIT_CHANNEL_PURPOSE","EditChannelPurposeModal","CHANNEL_NOTIFICATIONS","ChannelNotificationsModal","memo","EMPTY_CHANNEL_STATS","guest_count","connect","state","getCurrentChannel","getCurrentUser","getCurrentTeam","getCurrentChannelStats","isCurrentChannelArchived","isCurrentChannelFavorite","isCurrentChannelMuted","isModalOpen","getIsMobileView","isPrivate","haveIChannelPermission","Permissions","MANAGE_PRIVATE_CHANNEL_MEMBERS","MANAGE_PUBLIC_CHANNEL_MEMBERS","MANAGE_PRIVATE_CHANNEL_PROPERTIES","MANAGE_PUBLIC_CHANNEL_PROPERTIES","getProfilesInCurrentChannel","getUser","getUserIdFromChannelId","getDisplayNameByUser","isGuest","roles","getStatusForUserId","bindActionCreators","RHS","Title","Actions","ButtonIcon","ActionBar","membersCount","editing","showManageButton","handleShortcut","isKeyPressed","KeyCodes","ESCAPE","stopEditing","addEventListener","removeEventListener","values","members_count","startEditing","inviteMembers","canGoBack","goBack","SearchBar","terms","onInput","inputSuffix","Input","value","currentTarget","inputPrefix","placeholder","useLegend","ChannelMembersRHS","currentUserIsChannelAdmin","searchTerms","teamUrl","history","useHistory","list","setList","page","setPage","isNextPageLoading","setIsNextPageLoading","structuredAttributes","loading","useAccessControlAttributes","EntityType","Channel","policy_enforced","searching","isDefaultChannel","DEFAULT_CHANNEL","showSearch","setChannelMembersRhsSearchTerm","listcp","memberDone","_member$membership2","member","_member$membership","membership","scheme_admin","push","ListItemType","FirstSeparator","data","Separator","Member","JSON","stringify","rhsAction","loadProfilesAndReloadChannelMembers","ProfilesInChannelSortBy","Admin","loadMyChannelMemberAndRole","doSearch","debounce","async","searchProfilesAndChannelMembers","in_team_id","team_id","in_channel_id","SEARCH_TIMEOUT_MILLISECONDS","openDirectMessage","openDirectChannelToUserId","loadMore","AlertBanner","mode","variant","TagGroup","flatMap","attribute","AlertTag","tooltipTitle","replace","txt","charAt","toUpperCase","substring","toLowerCase","setEditChannelMembers","link","msg","ExternalLink","href","location","MemberList","members","hasNextPage","buildProfileList","profilesInCurrentChannel","userStatuses","teammateNameDisplaySetting","membersInCurrentChannel","forEach","profile","displayUsername","sort","a","b","_a$membership","_b$membership","_a$membership2","localeCompare","getProfiles","createSelector","getActiveProfilesInCurrentChannelWithoutSorting","getUserStatuses","getTeammateNameDisplaySetting","getMembersInCurrentChannel","searchProfiles","search","searchActiveProfilesInCurrentChannel","getMyCurrentChannelMembership","channelAdmins","views","channelMembersRhsSearch","trim","getCurrentRelativeTeamUrl","prevRhsState","getPreviousRhsState","hasInfoPrevState","RHSStates","CHANNEL_INFO","CHANNEL_FILES","PIN","Boolean","getIsEditingMembers","SearchResultsHeader","showExpand","previousRhsState","sidebarTooltipContent","isExpanded","KeyboardShortcutSequence","KEYBOARD_SHORTCUTS","navExpandSidebar","hideDescription","isInsideTooltip","expandOrCollapseSidebarButtonAriaLabel","toggleRhsExpanded","CHANNEL_MEMBERS","getIsRhsExpanded","getCurrentChannelId","InfoToast","onExited","closeToast","undoTodo","_content$undo","undo","call","toastContainerClassname","timer","mountOnEnter","unmountOnExit","appear","modalMessages","titleQuestion","RestorePostModal","post","postHeader","onHide","modalHeaderText","GenericModal","compassDesign","enforceFocus","handleCancel","cancelButtonClassName","handleConfirm","handleRestore","PostMessageView","overflowType","showPostEditedIndicator","FileAttachmentListContainer","isEditHistory","disableDownload","disableActions","DATE_RANGES","RelativeRanges","itemMessages","helpText","currentVersionText","ariaLabelMessage","EditedPostItem","_post$props","isCurrent","postCurrentVersion","theme","connectionId","getConnectionId","openRestorePostModal","restorePostModalData","RESTORE_POST_MODAL","restorePostVersion","original_id","showInfoTooltip","infoToastModalData","INFO_TOAST","CheckIcon","handleUndo","StoragePrefixes","EDIT_DRAFT","removeDraft","channel_id","root_id","result","getPostEditHistory","previousPostVersion","currentVersionIndicator","profileSrc","imageURLForUser","user_id","overwriteName","ensureString","override_username","Avatar","url","UserProfileComponent","disablePopover","PostMessageContainer","isRHS","isFileDeleted","delete_at","messageContainer","restoreButton","postContainerClass","timeStampValue","edit_at","create_at","CompassThemeProvider","togglePost","prevState","PostAriaLabelDiv","Timestamp","ranges","selectedPostId","getSelectedPostId","getTheme","getPost","editPost","renderView","Object","assign","renderThumbHorizontal","renderThumbVertical","PostEditHistory","channelDisplayName","originalPost","postEditHistory","setPostEditHistory","hasError","setHasError","isLoading","setIsLoading","scrollbars","retrieveErrorHeading","retrieveErrorSubheading","_scrollbars$current","fetchPostEditHistory","scrollToTop","errorContainer","AlertIcon","LoadingScreen","display","placeContent","flex","postEditItems","postEdited","Scrollbars","autoHide","autoHideTimeout","autoHideDuration","_getCurrentChannel","getChannel","ResizableRhs","role","rightWidthHolderRef","ariaLabel","ariaLabeledby","containerRef","rhsSize","getRhsSize","isRhsExpanded","previousRhsExpanded","setPreviousRhsExpanded","defaultWidth","RHS_MIN_MAX_WIDTH","default","shouldRhsOverlap","shouldRhsOverlapChannelView","handleResizeEnd","_","cssVarProp","rightWidthHolderRefElement","removeProperty","containerRefElement","classList","add","ResizableDivider","globalCssVar","CssVarKeyForResizable","dir","ResizeDirection","RIGHT","disabled","onResize","handleResize","cssVarValue","setProperty","onResizeEnd","onDividerDoubleClick","handleDividerDoubleClick","RhsCardHeader","constructor","arguments","_defineProperty","this","SEARCH","showSearchResults","MENTION","showMentions","FLAG","showFlaggedPosts","render","back","expandSidebarTooltip","shrinkSidebarTooltip","handleBack","intl","collapseIconLabel","expandIconLabel","injectIntl","RhsCard","super","isScrolling","setState","scrollStopAction","fireAfter","SCROLL_DELAY","isMobileView","emitCloseRightHandSide","DelayedAction","handleScrollStop","shouldComponentUpdate","nextProps","nextState","_nextProps$selected","_nextProps$selected$p","_this$props$selected","_this$props$selected$","deepEqual","selected","card","pluginPostCardTypes","postType","hasOwn","PluginComponent","component","_selected$props","UserProfile","hideStatus","overrideUsername","enablePostUsernameOverride","avatar","PostProfilePicture","compactDisplay","onScroll","handleScroll","Link","to","handleClick","getSelectedPostCard","getConfig","EnablePostUsernameOverride","plugins","postCardTypes","translate","CRTThreadsPaneTutorialTip","getCurrentUserId","dimensions","useFollowElementDimensions","onDismiss","preferences","category","CRT_THREAD_PANE_STEP","CrtThreadPaneSteps","FINISHED","savePreferences","handleNext","nextBtn","RhsHeaderPost","setRhsExpanded","relativeTeamUrl","getHistory","rootPostId","currentTeamId","isFollowingThread","setThreadFollow","closeSidebarTooltip","backToResultsTooltip","rhsHeaderTooltipContent","channelName","handleJumpClick","isCollapsedThreadsEnabled","FollowButton","isFollowing","handleFollowChange","showThreadsTutorialTip","getThreadOrSynthetic","makeGetThreadOrSynthetic","collapsedThreads","root","tipStep","getInt","thread","is_following","reply_count","currentUserMentionKeys","getCurrentUserMentionKeys","rootMessageMentionKeys","allAtMentions","matchUserMentionTriggersWithMessageMentions","THREADS_PANE_POPOVER","onboardingTourTipsEnabled","getCurrentTeamId","RhsThread","ThreadViewer","useRelativeTimestamp","isThreadView","getSelectedPost","getSelectedChannel","SearchSuggestionList","SuggestionList","_this$itemsContainerR","_this$itemsContainerR2","itemsContainerRef","parentNode","popoverRef","suggestionReadOut","currentLabel","generateLabel","item","first_name","last_name","nickname","announceLabel","renderChannelDivider","items","haveDMDivider","term","isSelection","selection","Component","components","renderDividers","currentItem","itemRefs","set","matchedPretext","onCompleteWord","onMouseMove","onItemHover","Popover","SuggestionDate","preventClose","handleEscape","date","label","searchForm","overflow","isFocused","keepFocused","suggestionProviders","searchRef","_searchRef$current","focus","_searchRef$current2","blur","endsWith","_searchRef$current3","isSideBarRight","onSubmit","handleSubmit","autoComplete","searchType","onMouseDown","handleFocus","setKeepFocused","clearSearchType","SuggestionBox","node","getFocus","tabIndex","containerClass","onFocus","onBlur","handleBlur","onChange","handleChange","onKeyDown","_searchRef$current4","Keyboard","DOWN","updateHighlightedSearchHint","UP","ENTER","handleEnterKey","BACKSPACE","listComponent","dateComponent","providers","delayInputUpdate","clearable","onClear","handleClear","isSearchingTerm","defaultProps","SearchHint","config","isFileAttachmentEnabled","isFileAttachmentsEnabled","onSearchTypeSelected","chunks","highlighted","highlightedIndex","onElementBlur","onElementFocus","withTitle","onTouchEnd","options","option","optionIndex","searchTerm","onOptionSelected","onMouseOver","onOptionHover","handleOnOptionHover","additionalDisplay","FILE_TOOLTIP_RANGES","FileSearchResultItem","teamName","fileInfo","post_id","copyToClipboard","keepOpen","_this$props$pluginMen","pluginItems","pluginMenuItems","match","ItemAction","_item$action","action","FILE_PREVIEW_MODAL","FilePreviewModal","fileInfos","postId","startIndex","showPreview","FileThumbnail","Tag","fileSizeToString","defineMessage","MenuWrapper","onToggle","stopPropagationOnToggle","openLeft","jumpToConv","localizeMessage","renderPluginItems","getFileDownloadUrl","ownProps","FilesFilterMenu","IconContainer","selectedFilter","FilterVariantIcon","color","onFilter","MessagesOrFilesSelector","searchTeam","getSearchTeam","hasMoreThanOneTeam","getMyTeams","messagesTabRef","filesTabRef","handleTabKeyDown","currentTab","LEFT","nextTab","nextTabRef","DataSearchTypes","MESSAGES_SEARCH_TYPE","FILES_SEARCH_TYPE","dispatchEvent","CustomEvent","A11yCustomEventTypes","FOCUS","detail","target","keyboardOnly","messagesCounter","filesCounter","crossTeamSearchEnabled","SelectTeam","selectedTeamId","onTeamSelected","onTeamChange","PostSearchResultsItem","PostComponent","matches","isFlaggedPosts","isPinnedPosts","isMentionSearch","a11yIndex","Locations","StyledDiv","StyledA","InnerDiv","SearchLimitsBanner","_cloudLimits$files","_cloudLimits$messages","formatNumber","openPricingModal","useOpenPricingModal","usage","useGetUsage","cloudLimits","useGetLimits","isAdminUser","isAdmin","isCurrentLicenseCloud","currentFileStorageUsage","files","totalStorage","fileStorageLimit","total_storage","currentMessagesUsage","messagesLimit","ctaAction","renderBanner","bannerText","storage","asGBString","trackingLocation","renderTrackVertical","SearchResults","setSearchType","filesDropdownPluginMenuItems","getFilesDropdownPluginMenuItems","searchFilterType","setSearchFilterType","searchSelectedType","searchPage","isChannelFiles","getMorePostsForSearch","getMoreFilesForSearch","loadMorePosts","loadMoreFiles","results","fileResults","isCard","isSearchAtEnd","isSearchFilesAtEnd","isSearchingFlaggedPost","isSearchingPinnedPost","isSideBarExpanded","isOpened","updateSearchTerms","handleSearchHintSelection","noResults","Array","isArray","noFileResults","showLoadMore","isMessagesSearch","contentItems","loadingMorePostsComponent","titleDescriptor","sortedResults","noResultsProps","NoResultsVariant","ChannelSearch","Mentions","FlaggedPosts","subtitleValues","buttonText","PinnedPosts","postA","postB","ChannelFiles","ChannelFilesFiltered","titleValues","Files","formattedTitle","handleOptionSelection","LoadingWrapper","searchHintOptions","NoResultsIndicator","padding","index","currentTeamName","MessageOrFileSelector","teamId","updateSearchTeam","isSearchGettingMore","_scrollbars$current2","_scrollbars$current3","_scrollbars$current4","getScrollHeight","getScrollTop","getClientHeight","regionTitle","arePropsEqual","nextResults","nextFileResults","posts","_getCurrentTeam$name","_getCurrentTeam","_currentSearch$params","viewArchivedChannels","ExperimentalViewArchivedChannels","newResults","getSearchResults","newFilesResults","getSearchFilesResults","file","currentSearch","getCurrentSearchForSearchTeam","getSearchMatches","getSearchResultsTerms","getSearchResultsType","getIsSearchingTerm","getIsSearchingFlaggedPost","getIsSearchingPinnedPost","getIsSearchGettingMore","isEnd","isFilesEnd","params","determineVisibleSearchHintOptions","newVisibleSearchHintOptions","searchFilesHintOptions","pretextArray","split","pretext","penultimatePretext","shouldShowHintOptions","some","RegExp","test","_unused","Search","_ref3","autocompleteChannelsForSearch","autocompleteUsersInTeam","filterFilesSearchByExt","openRHSSearch","updateRhsState","updateSearchTermsForShortcut","updateSearchType","hideMobileSearchBarInRHS","searchVisible","currentChannel","enableFindShortcut","hideSearchBar","isSideBarRightOpen","currentChannelName","getCurrentChannelNameForSearchShortcut","focused","setFocused","dropdownFocused","setDropdownFocused","keepInputFocused","setKeepInputFocused","indexChangedViaKeyPress","setIndexChangedViaKeyPress","highlightedSearchHintIndex","setHighlightedSearchHintIndex","visibleSearchHintOptions","setVisibleSearchHintOptions","SearchDateProvider","SearchChannelProvider","SearchUserProvider","isDesktop","isDesktopApp","isServerVersionGreaterThanOrEqualTo","getDesktopVersion","handleKeyDown","F","shiftKey","isMacApp","ctrlKey","getMorePostsForSearchCallback","team","getMoreFilesForSearchCallback","handleClose","handleDropdownBlur","handleDropdownFocus","handleAddSearchTerm","pop","handleUpdateSearchTerms","join","handleOnSearchTypeSelected","indexDelta","changedViaKeyPress","Math","abs","newIndex","handleSearch","error","handleSearchOnSuccess","setHoverHintIndex","_highlightedSearchHintIndex","renderSearchBar","renderHintPopover","termsUsed","word","_ref4","helpClass","shrink","handleShrink","newTerms","filterType","SearchIcon","rhsState","getRhsState","getIsRhsOpen","getIsCrossTeamSearchEnabled","getSearchTerms","getSearchType","PLUGIN","EDIT_HISTORY","autocompleteChannels","autocompleteUsersInCurrentTeam","RhsPlugin","showPluggable","pluggableId","Pluggable","pluggableName","rhsPlugins","RightHandSidebarComponent","getPluggableId","pluginComponent","find","element","pluginTitle","RHSPlugin","SidebarRight","isOpen","previous","isRecentMentions","isSavedPosts","isChannelInfo","isChannelMembers","isPostEditHistory","selectedPostCardId","channelInfoShortcutMac","isMac","channelInfoShortcut","altKey","cmdOrCtrlPressed","PERIOD","openAtPrevious","I","showChannelInfo","_document$getElementB","_this$sidebarRight$cu","_document$getElementB2","_document$querySelect","getElementById","contains","sidebarRight","querySelector","_this$focusSearchBar","focusSearchBar","sidebarRightWidthHolder","handleRHSFocus","prevProps","_this$props$rhsChanne","_prevProps$rhsChannel","wasOpen","contentChanged","rhsChannel","previousActiveElement","activeElement","rhsContainer","searchContainer","firstFocusable","getFirstFocusableChild","focusElement","a11yController","originElement","restoreOriginFocus","componentDidMount","handleClickOutside","componentWillUnmount","componentDidUpdate","_prevProps$rhsChannel2","_prevProps$rhsChannel3","postRightVisible","trackEvent","productId","setPrevious","postCardVisible","isPluginView","selectedChannelNeeded","currentChannelNeeded","FileUploadOverlay","overlayType","DropOverlayIdRHS","ChannelMembersRhs","isRHSLoading","isSidebarRightExpanded","containerClassName","centered","getSearchBarFocus","withRouter","_team$id","selectCurrentProductId","pathname","getSelectedPostCardId","isRecentMention"],"sourceRoot":""}