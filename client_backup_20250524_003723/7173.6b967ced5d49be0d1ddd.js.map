{"version":3,"file":"7173.6b967ced5d49be0d1ddd.js","mappings":"miBAiBA,MAAMA,EAAY,CAACC,GAAI,EAAGC,EAAG,IAEhBC,EAAaA,KACtB,MAAM,cAACC,IAAiBC,EAAAA,EAAAA,WACxB,OAAQC,IAAAA,cAACC,EAAAA,EAAW,CAACC,QAASC,EAAAA,EAAmBC,aAEzCN,EAAc,CACVO,GAAI,2BACJC,eAAgB,OAGd,EAGLC,EAAeA,KACxB,MAAM,cAACT,IAAiBC,EAAAA,EAAAA,WACxB,OAAQC,IAAAA,cAACC,EAAAA,EAAW,CAACC,QAASC,EAAAA,EAAmBC,aAEzCN,EAAc,CACVO,GAAI,6BACJC,eAAgB,SAGd,EAqDlB,EAlD2BE,KACvB,MAAM,cAACV,IAAiBC,EAAAA,EAAAA,WAClBU,GAAeC,EAAAA,EAAAA,cAAaC,IAC9BC,EAAAA,EAAAA,IAAgBD,KAEdE,EACFb,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,8BACHC,eAAgB,iBAIlBS,EACFf,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAA,SACKF,EAAc,CACXO,GAAI,uCACJC,eAAgB,8JAGxBN,IAAAA,cAAA,SAEKF,EAAc,CACXO,GAAI,uCACJC,eAAgB,wDAEpB,CACIU,MAAOhB,IAAAA,cAACH,EAAU,MAClBoB,QAASjB,IAAAA,cAACO,EAAY,UAOhCW,EAAcT,EAAe,CAAC,+BAAgC,kCAAoC,CAAC,0BACnGU,GAAkBC,EAAAA,EAAAA,IAAoBF,EAAa,IAEzD,OACIlB,IAAAA,cAACqB,EAAAA,EAAU,CACPR,MAAOA,EACPE,OAAQA,EACRI,gBAAiBA,EACjBG,UAAU,cACVC,sBAAsB,cACtBC,sBAAuB9B,GACzB,EC3CV,EAnC6B+B,KACzB,MAAM,cAAC3B,IAAiBC,EAAAA,EAAAA,WAClBc,EACFb,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,gCACHC,eAAgB,mBAIlBS,EACFf,IAAAA,cAAA,SACKF,EACG,CACIO,GAAI,sCACJC,eAAgB,0EAEpB,CACIoB,EAAIC,GAAkB3B,IAAAA,cAAA,SAAI2B,MAKpCR,GAAkBC,EAAAA,EAAAA,IAAoB,CAAC,8BAA+B,IAE5E,OACIpB,IAAAA,cAACqB,EAAAA,EAAU,CACPR,MAAOA,EACPE,OAAQA,EACRI,gBAAiBA,EACjBG,UAAU,eACVC,sBAAsB,UACxB,E,iIChCV,MAAMK,EAAgBC,IAAA,IAAC,MAACC,EAAK,OAAEC,GAAiBF,EAAA,OAC5C7B,IAAAA,cAAA,OACI8B,OAAOA,aAAK,EAALA,EAAOE,aAAc,KAC5BD,QAAQA,aAAM,EAANA,EAAQC,aAAc,KAC9BC,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAENnC,IAAAA,cAAA,KAAGoC,SAAS,yBACRpC,IAAAA,cAAA,QACIqC,EAAE,+uBACFH,KAAK,0BAETlC,IAAAA,cAAA,QACIqC,EAAE,kXACFH,KAAK,YAETlC,IAAAA,cAAA,QACIqC,EAAE,4kBACFH,KAAK,6BAETlC,IAAAA,cAAA,QACIqC,EAAE,2kBACFH,KAAK,6BAETlC,IAAAA,cAAA,QACIqC,EAAE,skBACFH,KAAK,6BAETlC,IAAAA,cAAA,QACIqC,EAAE,+hBACFH,KAAK,YAETlC,IAAAA,cAAA,QACIsC,QAAQ,MACRD,EAAE,gZACFH,KAAK,6BAETlC,IAAAA,cAAA,QACIqC,EAAE,2eACFH,KAAK,QACLK,YAAY,QAEhBvC,IAAAA,cAAA,QACIqC,EAAE,m1BACFH,KAAK,YAETlC,IAAAA,cAAA,QACIqC,EAAE,+aACFH,KAAK,0BAETlC,IAAAA,cAAA,QACIqC,EAAE,oFACFH,KAAK,aAGblC,IAAAA,cAAA,YACIA,IAAAA,cAAA,YAAUK,GAAG,mBACTL,IAAAA,cAAA,QACI8B,MAAM,KACNC,OAAO,KACPG,KAAK,+BAIf,EAERN,EAAAY,UAAA,CAvEEV,MAAKW,IAAAA,OACLV,OAAMU,IAAAA,QAwEV,U,sMCjEA,MAAMC,G,OAAQC,GAAAA,KAAWC,WAAA,CAAAC,YAAA,SAAXF,CAAW,qKAWAG,GACVA,EAAMC,WAAaC,GAAAA,EAAaC,OAAS,oCAAsC,oCAI/E,SAASC,GAAarB,GAA+B,IAA9B,SAACkB,EAAQ,UAAEI,GAAiBtB,EAC9D,OAAIkB,IAAaC,GAAAA,EAAaC,QAAUF,IAAaC,GAAAA,EAAaI,UACvD,KAIPpD,IAAAA,cAAC0C,GAAK,CACFS,UAAWA,EACXJ,SAAUA,GAETA,IAAaC,GAAAA,EAAaC,OACvBjD,IAAAA,cAACqD,EAAAA,iBAAgB,CAACC,KAAM,KAExBtD,IAAAA,cAACuD,EAAAA,uBAAsB,CAACD,KAAM,KAI9C,CAACJ,GAAAV,UAAA,CApCGW,UAASV,IAAAA,Q,4ECMb,SAASe,GAAc3B,GAMb,IANc,SACpB4B,EAAQ,MACR5C,EAAK,KACL6C,EACAC,YAAaC,EAAU,QACvBC,GACIhC,EACJ,OACI7B,IAAAA,cAAA,WACIA,IAAAA,cAAA,OAAKmD,UAAU,yBAAuB,GAAAW,OAC9BF,EAAU,MAAAE,OAAKjD,IAEvBb,IAAAA,cAAA,OAAKmD,UAAU,0BACVY,EAAAA,GAAAA,IAAcL,GAAQG,GAAWJ,GAAY,KAI9D,CAACD,GAAAhB,UAAA,CAxBGiB,SAAQhB,IAAAA,OACRoB,QAAOpB,IAAAA,OACP5B,MAAK4B,IAAAA,OACLiB,KAAIjB,IAAAA,OACJkB,YAAWlB,IAAAA,QAsBf,Y,wCCNA,SAASuB,GAAInC,GAOC,IAPA,GACVxB,EACA4D,kBAAmBC,EACnBC,aAAcC,EACdC,UAAWC,EAAQ,UACnBC,EAAS,WACTC,GACQ3C,EACR,MAAM4C,GAASC,EAAAA,EAAAA,UAAQ,KACnB,GAAKR,EAGL,OAAIE,EACO,QAAPN,OAAeQ,EAAQ,YAAAR,OAAWM,IAE/BO,EAAAA,GAAAA,IAAoBtE,EAAG,GAC/B,CAACA,EAAI+D,EAAaE,EAAUJ,IAEzBU,GAAWC,EAAAA,EAAAA,IAAYN,GAE7B,OAAQK,GACR,KAAKE,EAAAA,GAAUC,IACX,OAAIP,EAEIxE,IAAAA,cAAA,OACIgF,IAAI,eACJ7B,UAAU,oCACV8B,KAAKC,EAAAA,GAAAA,IAAW7E,KAKxBL,IAAAA,cAAA,OACImD,UAAWgC,IACP,OACA,WACAC,EAAAA,EAAAA,IAAwBR,GACxB,2BAIhB,KAAKE,EAAAA,GAAUO,MACX,OACIrF,IAAAA,cAAA,OACIgF,IAAI,eACJ7B,UAAU,oCACV8B,IAAKR,IAGjB,QACI,OACIzE,IAAAA,cAAA,KACImD,UAAWgC,IACP,OACA,WACAC,EAAAA,EAAAA,IAAwBR,GACxB,2BAKpB,CAEA,SAASU,GAAIC,GAAqC,IAApC,SAACC,EAAQ,MAAE3E,EAAK,KAAEyC,GAAgBiC,EAC5C,OACIvF,IAAAA,cAAA,OACImD,UAAU,YACVtC,MAAOA,GAEN2E,EACDxF,IAAAA,cAAA,OAAKmD,UAAU,mBACVtC,GAEI,MAARyC,GACGtD,IAAAA,cAAA,OAAKmD,UAAU,oBACVsC,EAAAA,EAAAA,IAAiBnC,IAKtC,CAEA,SAASoC,GAAQC,GAA4B,IAA3B,KAACC,EAAI,WAAEpB,GAAkBmB,EACvC,OAAKC,EAKD5F,IAAAA,cAACsF,GAAI,CACDzE,MAAO+E,EAAKC,KACZvC,KAAMsC,EAAKtC,MAEXtD,IAAAA,cAACgE,GAAI8B,OAAAC,OAAA,CACDvB,WAAYA,GACRoB,KAVL,IAcf,CArCC5B,GAAAxB,UAAA,CAtEGgC,WAAU/B,IAAAA,KAAAuD,YAyFbV,GAAA9C,UAAA,CArFGgD,SAAQ/C,IAAAA,QACR5B,MAAK4B,IAAAA,OAAAuD,WACL1C,KAAIb,IAAAA,QAqGPiD,GAAAlD,UAAA,CA/GGgC,WAAU/B,IAAAA,KAAAuD,YAiHd,UAAeC,EAAAA,EAAAA,MAAKP,ICtGpB,IAAeQ,EAAAA,EAAAA,UAVf,SAAyBvF,EAAoBwF,GAIzC,MAAO,CACHP,MAJSQ,EAAAA,GAAAA,IAAQzF,EAAOwF,EAAS9F,IAKjCmE,WAAkC,UAJvB6B,EAAAA,GAAAA,IAAU1F,GAIF2F,WAE3B,GAEA,CAAwCZ,ICDxC,GAZA,SAAmB7D,GAAgB,IAAA0E,EAAA,IAAf,KAACC,GAAY3E,EAC7B,OAAiB,QAAjB0E,EAAIC,EAAKC,gBAAQ,IAAAF,GAAbA,EAAeG,OACR1G,IAAAA,cAAC0F,GAAQ,CAACrF,GAAImG,EAAKC,SAAS,MAGnCE,EAAAA,GAAAA,GAAyBH,EAAK1D,MAAM8D,cAAgBJ,EAAK1D,MAAM8D,YAAYF,OACpE1G,IAAAA,cAACwD,GAAmBgD,EAAK1D,MAAM8D,YAAY,IAG/C,IACX,E,2ECcA,SAASC,GAAUhF,GAMT,IANU,SAChBiF,EAAQ,YACRC,GAAc,EAAK,gBACnBC,EAAe,WACfC,EAAU,SACVzB,GACI3D,EACJ,MAAM,cAAC/B,IAAiBC,EAAAA,EAAAA,WAClBmH,GAAWC,EAAAA,EAAAA,gBAEbC,QAAQ,KACJC,GACH,cACDC,EAAa,cACbC,EAAa,cACbC,IACAC,EAAAA,GAAAA,KAEEC,GAAUhH,EAAAA,EAAAA,cAAaC,IAAuBgH,EAAAA,EAAAA,IAAchH,EAAOmG,KAEnEc,GAAmBC,EAAAA,EAAAA,cAAY,KACjC,MAAMC,EAAeb,EAAac,KAAKC,MAAQhB,EAE/CE,GAASe,EAAAA,EAAAA,IAA2BnB,EAAUgB,IAE1CZ,EADAD,GACSiB,EAAAA,EAAAA,IAAiBX,EAAeD,EAAeR,EAAUiB,KAAKC,QAE9DG,EAAAA,EAAAA,IAA6BZ,EAAeD,EAAeR,GACxE,GACD,CACCS,EACAD,EACAR,EACAG,EACAiB,EAAAA,GACAlB,IAGJ,OACIhH,IAAAA,cAACoI,GAAAA,EAAW,CACRC,yBAAyB,GAExB7C,EACDxF,IAAAA,cAACsI,GAAAA,EAAI,CACDC,UAAWzI,EAAc,CACrBO,GAAI,4BACJC,eAAgB,YAEpBkI,UAAU,GAEVxI,IAAAA,cAACsI,GAAAA,EAAKG,WAAU3C,OAAAC,OAAA,GACRgB,EAAc,CACdrD,KAAM5D,EAAc,CAChBO,GAAI,gCACJC,eAAgB,oBAEpBoI,UAAW5I,EAAc,CACrBO,GAAI,qCACJC,eAAgB,yCAEpB,CACAoD,KAAM5D,EAAc,CAChBO,GAAI,8BACJC,eAAgB,kBAEpBoI,UAAW5I,EAAc,CACrBO,GAAI,mCACJC,eAAgB,wCAEvB,CACDqI,SAASd,EAAAA,EAAAA,cAAY,KACjBX,GAAS0B,EAAAA,EAAAA,IAAgBrB,EAAeD,EAAeR,GAAWC,GAAa,GAChF,CAACQ,EAAeD,EAAeR,EAAUC,EAAa6B,EAAAA,QAE7D5I,IAAAA,cAACsI,GAAAA,EAAKG,WAAU,CACZ/E,KAAM5D,EAAc,CAChBO,GAAI,qCACJC,eAAgB,oBAEpBqI,SAASd,EAAAA,EAAAA,cAAY,KACjBL,EAAcV,EAAS,GACxB,CAACA,MAER9G,IAAAA,cAACsI,GAAAA,EAAKG,WAAU,CACZ/E,KAAmB5D,EAAbmH,EAA2B,CAC7B5G,GAAI,gCACJC,eAAgB,gBACD,CACfD,GAAI,kCACJC,eAAgB,mBAEpBqI,QAASf,IAGb5H,IAAAA,cAACsI,GAAAA,EAAKG,WAAU,CACZ/E,KAAgB5D,EAAV4H,EAAwB,CAC1BrH,GAAI,8BACJC,eAAgB,UACD,CACfD,GAAI,4BACJC,eAAgB,SAEpBqI,SAASd,EAAAA,EAAAA,cAAY,KACjBX,EAASQ,GAAUmB,EAAAA,GAAAA,IAAW/B,IAAYgC,EAAAA,GAAAA,IAAShC,GAAU,GAC9D,CAACA,EAAUY,MAElB1H,IAAAA,cAACsI,GAAAA,EAAKG,WAAU,CACZ/E,KAAM5D,EAAc,CAChBO,GAAI,4BACJC,eAAgB,cAEpBqI,SAASd,EAAAA,EAAAA,cAAY,MACjBkB,EAAAA,EAAAA,IAAgB,GAADjF,QAAIkF,EAAAA,GAAAA,MAAY,KAAAlF,OAAIuD,EAAI,QAAAvD,OAAOgD,GAAW,GAC1D,CAACO,EAAMP,OAK9B,CAEA,SAASmC,GAASC,EAAkBC,GAChC,OACID,EAAUpC,WAAaqC,EAAUrC,UACjCoC,EAAUnC,cAAgBoC,EAAUpC,aACpCmC,EAAUlC,kBAAoBmC,EAAUnC,iBACxCkC,EAAUjC,aAAekC,EAAUlC,UAE3C,CAEA,UAAehB,EAAAA,EAAAA,MAAKY,GAAYoC,ICtG1BG,GAAyB,CAC3BC,YAAY,EACZC,kBAAkB,EAClBC,YAAY,GAGhB,SAASC,GAAU3H,GAY2B,IAAA4H,EAAAC,EAAA,IAZ1B,QAChBC,EAAO,uBACPC,EAAsB,YACtB/G,EAAW,WACXgH,EAAU,KACVrD,EAAI,cACJsD,EAAa,MACbC,EAAK,OACLC,EAAM,SACNlD,EAAQ,oBACRmD,EAAmB,sBACnBC,GACerI,EACf,MAAMqF,GAAWC,EAAAA,EAAAA,gBACX,OAACgD,EAAM,cAAE3C,EAAa,cAAEF,IAAiBG,EAAAA,GAAAA,MACzC,cAAC3H,IAAiBC,EAAAA,EAAAA,WAClBU,GAAeC,EAAAA,EAAAA,aAAYE,EAAAA,IAC3B2G,GAAgB7G,EAAAA,EAAAA,aAAY0J,GAAAA,IAE5BC,GADU3J,EAAAA,EAAAA,cAAaC,IAAuB2J,EAAAA,EAAAA,IAAO3J,EAAO4J,EAAAA,GAAYC,kBAAmBjD,OACzDkD,EAAAA,GAAiBC,aACnDC,EAAa7K,EAAc,CAACO,GAAI,oBAAqBC,eAAgB,sBACrEsK,GAAaC,EAAAA,GAAAA,IAAuB,QAAXpB,EAACjD,EAAK1D,aAAK,IAAA2G,OAAA,EAAVA,EAAYqB,oBAAsBjI,EAC5DkI,GAAwBrG,EAAAA,EAAAA,UAAQ,KAAMsG,EAAAA,GAAAA,MAA6B,IACnEC,GAAevK,EAAAA,EAAAA,cAAaC,GAAuBoK,EAAsBpK,EAAO6F,EAAMmD,KACtFuB,GAAMC,EAAAA,EAAAA,QAAuB,OAEnCC,EAAAA,EAAAA,YAAU,KACFzB,SAAAA,EAAS0B,aACTnE,GAASoE,EAAAA,GAAAA,IAAwB,CAAC3B,EAAQ0B,cAC9C,GACD,CAAC1B,aAAO,EAAPA,EAAS0B,eAEbD,EAAAA,EAAAA,YAAU,MACDzB,GAAD,MAAYK,GAAAA,EAAQxD,KAAK+E,YACzBrE,GAASsE,EAAAA,GAAAA,GAAaxB,EAAOxD,KAAK+E,YACtC,GACD,CAAC5B,EAASK,aAAM,EAANA,EAAQxD,KAAK+E,cAE1BH,EAAAA,EAAAA,YAAU,KACU,IAAAK,EAAZ5B,IACW,QAAX4B,EAAAP,EAAIQ,eAAO,IAAAD,GAAXA,EAAaE,QACjB,GACD,CAAC9B,EAAY/C,IAEhB,MAAM8E,GAAiBlH,EAAAA,EAAAA,UAAQ,KAC3B,MAAMmH,IAAO7B,aAAM,EAANA,EAAQ8B,eAAgB,IAAIC,SAAQxG,IAAU,IAAT,GAAClF,GAAGkF,EAClD,OAAIlF,IAAOmG,EAAKwF,QACL,GAEJ3L,CAAE,IACV4L,UACH,MAAO,CAACzF,EAAKwF,WAAYH,EAAI,GAC9B,CAAC7B,aAAM,EAANA,EAAQ8B,eAEZ,IAAI9E,EAAkBR,EAAK0F,SAAW1F,EAAK2F,UAE3C,MAAMC,GAAgBvE,EAAAA,EAAAA,cAAawE,IAE/B,KAAI,QAASA,IACK,UAAVA,EAAEC,KAA6B,MAAVD,EAAEC,IAI/B,GAAID,EAAEE,OAAQ,CACV,MAAMtF,IAAa+C,GAASwC,QAAQxC,EAAOyC,gBACrC3E,EAAeb,EAAac,KAAKC,MAAQhB,EAE/CE,GAASe,EAAAA,EAAAA,IAA2BnB,EAAUgB,IAE1CZ,EADAD,GACSiB,EAAAA,EAAAA,IAAiBX,EAAeD,EAAeR,EAAUiB,KAAKC,QAE9DG,EAAAA,EAAAA,IAA6BZ,EAAeD,EAAeR,GAE5E,MACIqD,EAAOrD,EACX,GACD,CACCS,EACAD,EACAR,EACAkD,EACA9B,EAAAA,GACAlB,IAGE0F,GAAahI,EAAAA,EAAAA,UAAQ,KAAM,CAC7BiI,qBAAsBA,OACtBC,cAAeA,UACf,IAEEC,GAAuBhF,EAAAA,EAAAA,cAAawE,IACtCA,EAAES,kBACFtF,EAAcV,EAAS,GACxB,CAACA,IAEEiG,GAA2BlF,EAAAA,EAAAA,cAAawE,IAEtC,QAASA,GACK,UAAVA,EAAEC,KAA6B,MAAVD,EAAEC,KAI/BU,EAAAA,GAA+BX,EAAGzC,EAAuB,GAC1D,CAACA,IAEJ,IAAKI,IAAWxD,EACZ,OAAO,KAGX,MACIiG,eAAgBQ,EAChBC,gBAAiBC,EACjBC,cAAeC,EACfC,YAAaC,EACbC,aAAczG,GACdiD,EAIJ,GAAIF,EAAcpD,OAAS,EAAG,CAC1B,MAAM+G,EAAI3D,EAAc,GACxB9C,EAAkByG,EAAEvB,SAAWuB,EAAEtB,SACrC,CAEA,OACInM,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAA,OACI+J,MAAOA,EACP5G,UAAWuK,IAAW,aAAc,CAChC,cAAeT,EACf,cAAepD,IAEnB8D,SAAU9D,GAAc,EAAI,EAC5B+D,KAAK,OACL,aAAY9N,EACR,CAACO,GAAI,iCAAkCC,eAAgB,sBACvD,CAACuN,OAAQjD,IAEb,4CAAA9G,OAA2CgD,GAC3CzG,GAAI4J,EAAsB,+BAAiC,GAC3DtB,QAASyD,EACT0B,UAAW1B,EACXlB,IAAKA,GAELlL,IAAAA,cAAA,cACKwM,QAAQW,GAAeF,IACpBjN,IAAAA,cAAA,OAAKmD,UAAU,aACVgK,EACGnN,IAAAA,cAAA,OAAKmD,UAAWuK,IAAW,eAAgB,CAACK,KAAMZ,EAAc,MAC3Da,KAAKC,IAAId,EAAa,IACtBA,EAAc,IAAM,KAGzBnN,IAAAA,cAAA,OAAKmD,UAAU,iBAI3BnD,IAAAA,cAAA,OAAKmD,UAAU,sBAAsByH,GACrC5K,IAAAA,cAAA,OAAKmD,UAAU,oBACVwG,GAAWiB,KAAejB,aAAO,EAAPA,EAASuE,eAChClO,IAAAA,cAACmO,GAAAA,EAAG,CACAxF,QAASkE,EACTnJ,KAAMiG,aAAO,EAAPA,EAASuE,eAGtBhE,GACGF,EAAOoE,WACHpO,IAAAA,cAACqO,GAAa,CACVlL,UAAWyH,KAAejB,aAAO,EAAPA,EAASuE,cAAe,OAAS,GAC3DnL,SAAUC,GAAAA,EAAaC,UAKvCjD,IAAAA,cAACsO,GAAAA,GAASxI,OAAAC,OAAA,GACFwI,GAAAA,EAAc,CAClBpL,UAAU,aACVxB,MAAO0L,MAGfrN,IAAAA,cAAA,OAAKmD,UAAU,2BACXnD,IAAAA,cAAC6G,GAAU,CACPC,SAAUA,EACVC,YAAaA,SAAAA,EACbE,WAAYuF,QAAQS,GACpBjG,gBAAiBA,GAEjBhH,IAAAA,cAACwO,EAAAA,EAAW,CACR3N,MACIb,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,4BACHC,eAAe,aAIvBN,IAAAA,cAACyO,GAAAA,EAAM,CACHC,WAAW,EACXvL,UAAU,gBACV,aAAYrD,EAAc,CACtBO,GAAI,4BACJC,eAAgB,aAGpBN,IAAAA,cAAC2O,EAAAA,iBAAgB,CAACrL,KAAM,SAQxCtD,IAAAA,cAAA,OACImD,UAAU,UACVyL,IAAI,OACJjG,QAASoE,EACTe,UAAWf,GAEVvG,EAAKqI,QACF7O,IAAAA,cAAC8O,GAAAA,EAAQ,CACLD,QAASrI,EAAK7F,QAAUoO,GAAAA,GAAMC,aAAerE,EAAanE,EAAKqI,QAC/DI,QAAS7F,GACT8F,gBAAgB1I,aAAI,EAAJA,EAAM2I,YAAY3I,SAAc,QAAVkD,EAAJlD,EAAM2I,gBAAQ,IAAAzF,OAAV,EAAJA,EAAgB0F,QAClDC,YAAapE,EACbyB,WAAYA,IAGhB1M,IAAAA,cAACsP,GAAU,CAAC9I,KAAMA,KAG1BxG,IAAAA,cAAA,OAAKmD,UAAU,YACVyI,SAAAA,EAAgBlF,OACb1G,IAAAA,cAACuP,GAAAA,EAAO,CACJC,QAAS5D,EACTtI,KAAK,OAET,KACHkJ,QAAQe,IACLvN,IAAAA,cAAAA,IAAAA,SAAA,KACKiN,EACGjN,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,0BACHC,eAAe,+DACfmP,OAAQ,CAACxC,gBAGbjN,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,uBACHC,eAAe,oEACfmP,OAAQ,CAAClC,oBAM5BlD,GAAuBJ,GAAuBxJ,GAAiBT,IAAAA,cAACQ,EAAkB,MACnFR,IAAAA,cAAA,QACImD,UAAU,UACV9C,GAAE,yBAAAyD,OAA2BgD,IAE7B9G,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,iCACHC,eAAe,gBAEnBN,IAAAA,cAACsO,GAAAA,GAASxI,OAAAC,OAAA,GACFwI,GAAAA,EAAc,CAClBpL,UAAU,aACVxB,MAAO0L,OAM/B,CAEA,UAAepH,EAAAA,EAAAA,MAAKuD,IC9SpB,IAAekG,EAAAA,GAAAA,UACXxJ,EAAAA,EAAAA,UA3BJ,WACI,MAAMyJ,GAAoBC,EAAAA,EAAAA,MACpBC,GAAaC,EAAAA,GAAAA,MACbC,GAAiBC,EAAAA,GAAAA,MAEvB,MAAO,CAACrP,EAAoBwF,KACxB,MAAM,SAACW,GAAYX,EAEbK,GAAOyJ,EAAAA,EAAAA,IAAQtP,EAAOmG,GAE5B,OAAKN,EAIE,CACHA,OACAmD,QAASkG,EAAWlP,EAAO6F,EAAK+E,YAChC3B,wBAAwBsG,EAAAA,GAAAA,IAA0BvP,GAClDkC,YAAakN,EAAepP,EAAO6F,EAAKwF,SAAS,GACjDlC,cAAe6F,EAAkBhP,EAAO6F,EAAKnG,IAC7C2J,QAAQmG,EAAAA,EAAAA,IAAUxP,EAAOmG,GACzBoD,uBAAuBA,EAAAA,EAAAA,IAAsBvJ,IAVtC,CAAC,CAWX,CAET,IAIIsF,EAAAA,KAFJ,CAGEuD,I,89BClBF,SAAS4G,GAAGvO,GAA8B,IAA7B,MAACwO,EAAK,MAAEtG,EAAK,KAAEuG,GAAYzO,EACpC,MAAM0O,EAASD,EAAKzE,IAAIwE,GAClBxG,EAAayG,EAAKE,mBAAqBD,EAE7C,OAAIA,IAAWE,EAAAA,GAAUC,kCAEjB1Q,IAAAA,cAAC2Q,EAAAA,EAAa,CACV9B,QAAS7O,IAAAA,cAAAA,IAAAA,SAAA,MACT+J,MAAOA,IAKfwG,IAAWE,EAAAA,GAAUG,2BAEjB5Q,IAAAA,cAAC6Q,EAAAA,EAAkB,CACf9G,MAAK+G,GAAAA,GAAA,GAAM/G,GAAK,IAAEgH,QAAS,sBAAuBC,WAAY,gDAC9DC,YAAajR,IAAAA,cAAC4B,EAAa,MAC3Bf,MACIb,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,qCACHC,eAAe,+BAGvB4Q,SACIlR,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,wCACHC,eAAe,iFACfmP,OAAQ,CACJ0B,eACInR,IAAAA,cAACoR,GAAAA,EAAc,CACXjO,UAAU,sCACVjD,QAASC,EAAAA,EAAmBC,iBAMhDiR,eAAe,0BACfC,kBAAkB,6BAClBC,OAAQC,GAAAA,EAAgBC,aAMhCzR,IAAAA,cAACwJ,GAAU,CACPK,WAAYA,EACZyC,IAAKiE,EACLxG,MAAOA,EACPjD,SAAUyJ,EACVtG,oBAA+B,IAAVoG,GAGjC,CAACD,GAAA5N,UAAA,CA9DG8N,KAAI7N,IAAAA,MAAA,IAAAuD,WAIJqK,MAAK5N,IAAAA,OAAAuD,WACL+D,MAAKtH,IAAAA,IAAAuD,YA2DT,UAAeC,EAAAA,EAAAA,MAAKmK,GAAKnH,EAAAA,IC5DnBc,GAAQ,CACV2H,WAAY,QAGhB,SAASC,GAAqB9P,GAOpB,IAPqB,IAC3BgK,EAAG,iBACH2E,EAAgB,cAChBoB,EAAa,MACbC,EAAK,UACLC,EAAS,qBACTC,GACIlQ,EACJ,MAAMmQ,EAAoBhS,IAAAA,SACpBiS,EAAgBjS,IAAAA,OAAqB,GACrCkS,EAAelS,IAAAA,OAAqB,IAE1CoL,EAAAA,EAAAA,YAAU,KACN,GAAIS,EAAInF,OAAS,GAAK8J,EAAkB,CACpC,MAAMH,EAAQxE,EAAIsG,QAAQ3B,GAC0C,IAAA4B,GAAhEH,EAAcvG,SAAW2E,GAASA,EAAQ6B,EAAaxG,WAE9B,QAAzB0G,EAAAJ,EAAkBtG,eAAO,IAAA0G,GAAzBA,EAA2BC,SAASC,aAAajC,GAEzD,IAOD,CAACG,IAEJ,MAAMF,GAAO5L,EAAAA,EAAAA,UACT,KAAM,CAEEmH,IAAKkG,GAAwBlG,EAAInF,SAAWmL,EAAQ,IAAIhG,EAAK4E,EAAAA,GAAUG,4BAA+BkB,GAAajG,EAAInF,SAAWmL,GAAS,IAAIhG,EAAK4E,EAAAA,GAAUC,oCAAuC7E,EACrM2E,sBAGR,CAAC3E,EAAK2E,EAAkBsB,EAAWC,EAAsBF,IAGvDU,GAAU1K,EAAAA,EAAAA,cAAY,CAACwI,EAAOC,IAASA,EAAKzE,IAAIwE,IAAQ,IAExDmC,GAAe3K,EAAAA,EAAAA,cAAawI,GACvBxE,EAAInF,SAAWmL,GAASxB,EAAQxE,EAAInF,QAC5C,CAACmF,EAAKgG,IAET,OACI7R,IAAAA,cAACyS,EAAAA,GAAS,MACLlN,IAAA,IAAC,OAACxD,EAAM,MAAED,GAAMyD,EAAA,OACbvF,IAAAA,cAAC0S,EAAAA,EAAc,CACXxH,IAAK8G,EACLW,UAAWd,EACXD,cAAeA,EACfY,aAAcA,EACdI,iBAAkBC,EAAAA,EAAiBC,oBAElCnN,IAA4B,IAA1BoN,gBAAAA,EAAe,IAAE7H,GAAIvF,EACpB,OACI3F,IAAAA,cAACgT,EAAAA,GAAa,CACVD,gBAAiBE,IAKX,IALY,mBACdC,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAiB,iBACjBC,GACHJ,EACGF,EAAgB,CACZG,qBACAC,oBACAC,oBACAC,qBAEJpB,EAAcvG,QAAU0H,EACxBlB,EAAaxG,QAAU2H,CAAgB,EAE3CnI,IAAKA,EACLnJ,OAAQA,EACR4Q,UAAWrC,EAAKzE,IAAInF,OACpB4M,SAAUhD,EACViC,QAASA,EACTgB,SAAU,IACVxJ,MAAOA,GACPjI,MAAOA,EACPqB,UAAU,2BAETiN,GACW,GAIX,GAIjC,CAEA,SAASnH,GAASC,EAAkBC,GAChC,OACID,EAAUsH,mBAAqBrH,EAAUqH,kBACzCtH,EAAU2C,IAAI2H,SAAWrK,EAAU0C,IAAI2H,QACvCtK,EAAU4I,YAAc3I,EAAU2I,WAClC5I,EAAU6I,uBAAyB5I,EAAU4I,oBAErD,CATCJ,GAAAnP,UAAA,CAtGGoP,cAAanP,IAAAA,KAAAuD,WAEb6L,MAAKpP,IAAAA,OAAAuD,WACL8L,UAASrP,IAAAA,KACTsP,qBAAoBtP,IAAAA,MA6GxB,UAAewD,EAAAA,EAAAA,MAAK0L,GAAuB1I,ICpH3C,SAASwK,GAAyB5R,GAGC,IAHA,UAC/B6R,EAAS,SACTC,GAC6B9R,EAC7B,MAAM,cAAC/B,IAAiBC,EAAAA,EAAAA,WAExB,OACIC,IAAAA,cAAC4T,EAAAA,GAAY,CACTzQ,UAAU,2BACV9C,GAAG,iCACHwT,eAAe,EACfC,gBAAiBhU,EAAc,CAC3BO,GAAI,uCACJC,eAAgB,mCAEpByT,kBAAmBjU,EAAc,CAC7BO,GAAI,yCACJC,eAAgB,qBAEpB0T,iBAAkBlU,EAAc,CAC5BO,GAAI,wCACJC,eAAgB,WAEpB2T,SAAUN,EACVO,aAAcP,EACdQ,cAAeT,GAEf1T,IAAAA,cAAA,OAAKmD,UAAU,wCACXnD,IAAAA,cAAA,YACKF,EAAc,CACXO,GAAI,6CACJC,eAAgB,6FAMxC,CAACmT,GAAAjR,UAAA,CAzCGkR,UAASjR,IAAAA,KAAAuD,WACT2N,SAAQlR,IAAAA,KAAAuD,YA0CZ,YCbO,IAAKoO,GAAY,SAAZA,GAAY,OAAZA,EAAY,QAAZA,EAAY,gBAAZA,CAAY,MAKjB,MAWDC,GAAaxS,IAOa,IAAAyS,EAAA,IAPZ,cAChBC,EAAgBH,GAAaI,KAAI,WACjCC,EAAU,UACVC,EAAS,iBACTlE,EAAgB,UAChBmE,EAAS,IACT9I,GACuBhK,EACvB,MAAMpB,GAAeC,EAAAA,EAAAA,aAAYE,EAAAA,IAC3BgU,EAASR,GAAaQ,SAAWL,EACjCjE,EAAOsE,EAASD,EAAY9I,EAC5BX,EAAMlL,IAAAA,OAA6B,OACnC,cAACsH,EAAa,cAAEC,EAAa,MAAEsN,EAAK,OAAE1K,IAAU1C,EAAAA,GAAAA,KAChDqN,GAAUpU,EAAAA,EAAAA,cAAaC,IAAuB2J,EAAAA,EAAAA,IAAO3J,EAAO4J,EAAAA,GAAYC,kBAAmBjD,KAC3F8C,EAAsByK,IAAYrK,EAAAA,GAAiBC,aACnDqK,EAAwBD,IAAYrK,EAAAA,GAAiBuK,gBACrD,cAAClV,IAAiBC,EAAAA,EAAAA,WAClBmH,GAAWC,EAAAA,EAAAA,gBAEX,MAAC0K,EAAQ,EAAGoD,qBAAsBC,GAAwD,QAA5CZ,GAAG5T,EAAAA,EAAAA,aAAYyU,EAAAA,WAA6B,IAAAb,EAAAA,EAAI,CAAC,GAE9FxC,EAAWsD,GAAcpV,IAAAA,UAAwB,IACjDqV,EAAWC,GAAgBtV,IAAAA,UAAwB,GAEpDuV,GAAgB1N,EAAAA,EAAAA,cAAawE,IAAqB,IAAAmJ,EAEpD,MAAMC,EAASpJ,EAAEoJ,OACXC,EAAUD,SAAe,QAATD,EAANC,EAAQC,eAAO,IAAAF,OAAT,EAANA,EAAiBG,cACjC,GAAgB,UAAZD,GAAmC,aAAZA,GAAsC,WAAZA,EACjD,OAGJ,GADwBrJ,EAAEE,QAAUF,EAAEuJ,SAAWvJ,EAAEwJ,UAAYxJ,EAAEyJ,UACxCC,EAAAA,EAAsB1J,EAAGoE,EAAAA,GAAUuF,SAASC,QAAUF,EAAAA,EAAsB1J,EAAGoE,EAAAA,GAAUuF,SAASE,IACvH,OAIJ,MAAMC,EAAmF,IAAjEC,SAASC,uBAAuBC,EAAAA,GAAeC,OAAO7P,OACxE8P,EAA4F,IAAjEJ,SAASC,uBAAuBC,EAAAA,GAAeG,OAAO/P,OACvF,IAAKyP,IAAoBK,EACrB,OAGJ,IAAIE,EAAmB,EACvB,GAAIlG,EAAkB,CAClB,MAAMmG,EAAsBrG,EAAK6B,QAAQ3B,GACzC,GAAIuF,EAAAA,EAAsB1J,EAAGoE,EAAAA,GAAUuF,SAASC,QACxCU,EAAsBrG,EAAK5J,OAAS,IACpCgQ,EAAmBC,EAAsB,GAGzCA,IAAwBrG,EAAK5J,OAAS,GACtC,OAIR,GAAIqP,EAAAA,EAAsB1J,EAAGoE,EAAAA,GAAUuF,SAASE,IAAK,CACjD,KAAIS,EAAsB,GAGtB,OAFAD,EAAmBC,EAAsB,CAIjD,CACJ,CACAxM,EAAOmG,EAAKoG,IACZrK,EAAEuK,gBAAgB,GACnB,CAACpG,EAAkBF,KAEtBlF,EAAAA,EAAAA,YAAU,KACNgL,SAASS,iBAAiB,UAAWtB,GAC9B,KACHa,SAASU,oBAAoB,UAAWvB,EAAc,IAE3D,CAACA,IAEJ,MAAMwB,GAAkBlP,EAAAA,EAAAA,cAAamP,IAC7BA,IAAW5C,GAAaQ,SACxBqC,EAAAA,EAAAA,IAAW,MAAO,4BAGtBvC,EAAUsC,EAAO,GAClB,CAACtC,IAEEwC,GAAsBrP,EAAAA,EAAAA,cAAYsP,UACpC/B,GAAW,GACX,IAAIgC,EAAS9G,EAAK+G,EAAa,GAW/B,OATID,IAAW5G,IACX4G,EAAS9G,EAAK+G,EAAa,UAGzBnQ,GAASoQ,EAAAA,EAAAA,IAAyB,CAAC1C,SAAQwC,YAEjDhC,GAAW,GACXE,GAAa,GAEN,CAAChF,MAAM,EAAK,GACpB,CAAChJ,EAAegJ,EAAMsE,EAAQpE,IAE3B+G,GAAsB1P,EAAAA,EAAAA,cAAY,MACpCoP,EAAAA,EAAAA,IAAW,MAAO,yBAClB/P,GAASsQ,EAAAA,EAAAA,IAAyBjQ,EAAeD,IAC7CiN,IAAkBH,GAAaQ,QAC/BC,GACJ,GACD,CAACvN,EAAeC,EAAegN,IAE5BkD,GAA+B5P,EAAAA,EAAAA,cAAY,KAC7C,MAAM6P,EAAgCA,KAClCxQ,GAASyQ,EAAAA,EAAAA,GAAWC,EAAAA,GAAiBC,0BAA0B,EAQ7DC,EAA4C,CAC9CpE,UANkBS,KAClBoD,IACAG,GAA+B,EAK/B/D,SAAU+D,GAGdxQ,GAAS6Q,EAAAA,EAAAA,GAAU,CACfC,QAASJ,EAAAA,GAAiBC,yBAC1BI,WAAYxE,GACZyE,YAAaJ,IACd,GACJ,CAACP,KAEE,aAACY,EAAY,SAAEC,GA8HzB,SAAgB7S,GAeV,IAfmC,UACrC8S,EAAS,aACTC,EAAY,KACZC,GASHhT,EAIG,MAAMgQ,GAAgB1N,EAAAA,EAAAA,cAAawE,IAC/B,IAAImM,EAAQ,EAOZ,GANIzC,EAAAA,EAAsB1J,EAAGoE,EAAAA,GAAUuF,SAASyC,OAC5CD,EAAQ,EACDzC,EAAAA,EAAsB1J,EAAGoE,EAAAA,GAAUuF,SAAS0C,QACnDF,GAAS,GAGC,IAAVA,EACA,OAGJ,IAAInI,EAAQkI,EAAKI,WAAWC,GAAQA,EAAI/S,OAASwS,IACjDhI,GAASmI,EACTnI,GAAQwI,EAAAA,EAAAA,IAAIxI,EAAOkI,EAAK7R,QAExB4R,EAAaC,EAAKlI,GAAOxK,OACzBiT,EAAAA,EAAAA,IAAU1C,SAAS2C,eAAeR,EAAKlI,GAAOhQ,IAAI,GACnD,CAACgY,EAAWC,EAAcC,IAE7B,MAAO,CACHJ,aAAc,CACVvK,KAAM,UACN,mBAAoB,cAExBwK,SAAUG,EAAKS,KAAKJ,IAAG,CACnBvY,GAAIuY,EAAIvY,GACRuN,KAAM,MACNjF,QAASA,IAAM2P,EAAaM,EAAI/S,MAChCiI,UAAWyH,EACX5H,SAAUiL,EAAI/S,OAASwS,EAAY,GAAK,EACxC,gBAAiBO,EAAIK,QACrB,gBAAiBZ,IAAcO,EAAI/S,SAG/C,CAjLqCqT,CAAsB,CACnDb,UAAW9D,EACX+D,aAAcvB,EACdwB,KAAM,CACF,CACIlY,GAAI,2BACJwF,KAAMuO,GAAaI,KACnByE,QAAS,gBAEb,CACI5Y,GAAI,6BACJwF,KAAMuO,GAAaQ,OACnBqE,QAAS,mBAKrB,OACIjZ,IAAAA,cAAA,OACI2N,SAAU,EACVzC,IAAKA,EACL/H,UAAW,aACX9C,GAAI,0BAEJL,IAAAA,cAACmZ,EAAAA,EAAM,CACH9Y,GAAI,iCACJ+Y,QACIpZ,IAAAA,cAAA,MAAA8F,OAAAC,OAAA,CACI5C,UAAU,mBACV,aAAYrD,EAAc,CACtBO,GAAI,iCACJC,eAAgB,4BAEhB6X,GAEJnY,IAAAA,cAAA,OAAKmD,UAAW,sBACZnD,IAAAA,cAACyO,GAAAA,EAAM3I,OAAAC,OAAA,CACH5C,UAAW,0BACXkW,SAAU9E,IAAkBH,GAAaI,MACrC4D,EAAS,IAEbpY,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,wBACHC,eAAe,uBAI3BN,IAAAA,cAAA,OACIK,GAAI,6BACJ8C,UAAW,sBAEXnD,IAAAA,cAACyO,GAAAA,EAAM3I,OAAAC,OAAA,CACH5C,UAAW,0BACXkW,SAAU9E,IAAkBH,GAAaQ,OACzC0E,OAAQ7E,GACJ2D,EAAS,IAEbpY,IAAAA,cAACc,EAAAA,iBAAgB,CACbT,GAAG,4BACHC,eAAe,aAGtByU,GAAyB/U,IAAAA,cAACyB,EAAoB,QAI3D8X,MACIvZ,IAAAA,cAAA,OAAKmD,UAAU,gBACXnD,IAAAA,cAACwO,EAAAA,EAAW,CACR3N,MAAOf,EAAc,CACjBO,GAAI,gCACJC,eAAgB,8BAGpBN,IAAAA,cAACyO,GAAAA,EAAM,CACHpO,GAAI,iCACJ,aAAYP,EAAc,CACtBO,GAAI,gCACJC,eAAgB,6BAEpB6C,UAAW,+BACXwF,QAAS8O,EACT/I,WAAW,GAEX1O,IAAAA,cAAA,QAAMmD,UAAU,QACZnD,IAAAA,cAACwZ,EAAAA,kBAAiB,CAAClW,KAAM,WAOjDtD,IAAAA,cAAA,OACIK,GAAG,eACHuN,KAAK,WACLzK,UAAU,UACV,cAAa,gBAEbnD,IAAAA,cAAC2R,GAAqB,CAClBrF,IAAG,gBAAAxI,OAAkByQ,GACrB3C,cAAesF,EACfrL,IAAKyE,EACLE,iBAAkBA,EAClBqB,MAAO+C,EAASM,EAAcrD,EAC9BC,UAAWA,EACXC,qBAAsBsD,IAAcT,IAEvCvK,IAAwB5J,GAAgBT,IAAAA,cAACQ,EAAkB,MAC3DoU,IAAWH,GAAcgF,IAAQ9E,GAC9B3U,IAAAA,cAAC6Q,EAAAA,EAAkB,CACf6I,UAAU,EACV7Y,MAAOf,EAAc,CACjBO,GAAI,2CACJC,eAAgB,sBAEpB4Q,SAAUpR,EAAc,CACpBO,GAAI,oDACJC,eAAgB,2BAGxB,MAEN,EAyDd,IAAe2F,EAAAA,EAAAA,MAAKoO,I,gBClVpB,MAAMxE,IAAaC,EAAAA,GAAAA,MACbH,IAAoBC,EAAAA,EAAAA,MAOpB+J,GAAa9X,IAGN,IAHO,OAChBmI,EAAM,SACNxE,GACI3D,EACJ,MAAM,cAAC/B,IAAiBC,EAAAA,EAAAA,WAClBmH,GAAWC,EAAAA,EAAAA,gBACX,cACFG,EAAa,cACbC,EAAa,cACbC,EAAa,OACb2C,IACA1C,EAAAA,GAAAA,MAGApH,GAAIyG,EACJ0G,aAAczG,EACdP,MACI+E,WAAYqO,IAEhB5P,EAEEL,GAAUjJ,EAAAA,EAAAA,cAAaC,GAAuBkP,GAAWlP,EAAOiZ,KAChEpT,GAAO9F,EAAAA,EAAAA,cAAaC,IAAuBsP,EAAAA,EAAAA,IAAQtP,EAAOqJ,EAAO3J,MACjEyJ,GAAgBpJ,EAAAA,EAAAA,cAAaC,GAAuBgP,GAAkBhP,EAAO6F,EAAKnG,MAClF+L,GAAgBvE,EAAAA,EAAAA,cAAY,IAAMsC,KAAU,IAClD,IAAInD,EAAkBR,EAAK0F,SAAW1F,EAAK2F,UAI3C,GAAIrC,EAAcpD,OAAS,EAAG,CAC1B,MAAM+G,EAAI3D,EAAc,GACxB9C,EAAkByG,EAAEvB,SAAWuB,EAAEtB,SACrC,CACA,MAAMU,GAAuBhF,EAAAA,EAAAA,cAAY,KACrCL,EAAcV,EAAS,GACxB,CAACU,EAAeV,IAEb+S,GAAgBhS,EAAAA,EAAAA,cAAY,KAC9BX,GAAS0B,EAAAA,EAAAA,IAAgBrB,EAAeD,EAAeR,GAAWC,GAAa,GAChF,CAACG,EAAUK,EAAeD,EAAeR,EAAUC,IAEtD,OACI/G,IAAAA,cAAA,OACIK,GAAI,wBACJ8C,UAAU,cAEVnD,IAAAA,cAACmZ,EAAAA,EAAM,CACHhW,UAAU,sBACViW,QACIpZ,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAACyO,GAAAA,EAAM,CACHtL,UAAU,oCACVwF,QAASyD,GAETpM,IAAAA,cAAA,KAAGmD,UAAU,8BAEjBnD,IAAAA,cAAA,UACIA,IAAAA,cAAA,QAAMmD,UAAU,aACXrD,EAAc,CACXO,GAAI,2BACJC,eAAgB,YAGxBN,IAAAA,cAACyO,GAAAA,EAAM,CACHtL,UAAU,YACV2W,mBAAmB,EACnBnR,QAASkE,GAERlD,aAAO,EAAPA,EAASuE,gBAK1BqL,MACIvZ,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAC+Z,GAAAA,EAAY,CACThT,YAAaA,EACbiT,SAAyB,MAAfjT,EACV4B,QAASkR,IAEb7Z,IAAAA,cAAC6G,GAAU,CACPC,SAAUA,EACVC,YAAaA,EACbE,WAAYuF,QAAQxC,EAAOyC,gBAAkBzC,EAAOkD,iBACpDlG,gBAAiBA,GAEjBhH,IAAAA,cAACwO,EAAAA,EAAW,CACR3N,MAAOf,EAAc,CACjBO,GAAI,8BACJC,eAAgB,kBAGpBN,IAAAA,cAACyO,GAAAA,EAAM,CAACtL,UAAU,gCACdnD,IAAAA,cAAC2O,EAAAA,iBAAgB,CAACrL,KAAM,WAO/CkC,EACC,EAId,IAAeS,EAAAA,EAAAA,MAAK0T,I,eC7FpB,MAAMM,GAAgBA,KAClB,MAAM,cAACna,IAAiBC,EAAAA,EAAAA,WAClBmH,GAAWC,EAAAA,EAAAA,gBAEX,IAAC+S,EAAK9S,QAAQ,iBAAC+S,KAAqBC,EAAAA,EAAAA,kBACnCpD,EAAQtC,IAAa2F,EAAAA,EAAAA,GAAejG,GAAaI,KFN1B,yBEOxB,cAAClN,EAAa,cAAEC,EAAa,MAAEsN,IAASpN,EAAAA,GAAAA,KAExC6S,GAAS5Z,EAAAA,EAAAA,aAAYyU,EAAAA,IACrBoF,GAAiB7Z,EAAAA,EAAAA,cAAaC,IAAuBwP,EAAAA,EAAAA,IAAUxP,EAAOwZ,KACtE3J,GAAmB9P,EAAAA,EAAAA,aAAY8Z,EAAAA,IAC/BC,GAAe/Z,EAAAA,EAAAA,cAAaC,IAAuBsP,EAAAA,EAAAA,IAAQtP,EAAOwZ,KAClEO,GAAYha,EAAAA,EAAAA,cAAaC,IAAuBga,EAAAA,EAAAA,IAA4Bha,IAAQia,EAAAA,cACpFC,GAAkBna,EAAAA,EAAAA,cAAaC,IAAuBma,EAAAA,EAAAA,IAAkCna,IAAQia,EAAAA,cAChGG,GAAYT,aAAM,EAANA,EAAQrF,uBAAwB,GAElD7J,EAAAA,EAAAA,YAAU,KACNlE,EAAS8T,EAAAA,IACT9T,GAAS+T,EAAAA,EAAAA,IAAcC,EAAAA,EAAYC,KAAMC,EAAAA,EAAQC,UACjDnU,EAASoU,EAAAA,KACTC,EAAAA,EAAAA,MAEA,MAAMC,EAAkBC,EAAAA,EAAkBC,sBAAsBnU,EAAeD,GAQ/E,OANIkU,IAAoBG,EAAAA,GAAoBC,UACxCH,EAAAA,EAAkBI,yBAAyBtU,EAAeD,EAAekU,GACzEC,EAAAA,EAAkBK,sBAAsBvU,EAAeD,EAAeqU,EAAAA,GAAoBC,UAIvF,KACH1U,EAAS6U,EAAAA,GAAc,CAC1B,GACF,KAEH3Q,EAAAA,EAAAA,YAAU,KACNlE,GAAS8U,EAAAA,EAAAA,IAAgBzU,EAAeD,GAAe,GACxD,CAACA,EAAeC,KAEnB6D,EAAAA,EAAAA,YAAU,KACDoF,GAAoBA,IAAqB2J,GAC1CjT,GAAS+U,EAAAA,EAAAA,IAAoB3U,EAAeiT,aAAc,EAAdA,EAAgBla,IAChE,GACD,CAACiH,EAAekJ,EAAkB2J,IAErC,MAAM+B,EAAczC,IAAQiB,IAAcjB,IAAQoB,IAE3C/I,EAAWsD,IAAc+G,EAAAA,EAAAA,UAASD,GAEnCE,EAAoB3C,IAAQiB,GAC5B2B,EAA0B5C,IAAQoB,IAExCzP,EAAAA,EAAAA,YAAU,KACN,MAAMkR,EAAW,GAGbF,GACAE,EAASC,KAAKrV,GAASoQ,EAAAA,EAAAA,IAAyB,CAAC1C,QAAQ,MAGzDoC,IAAW5C,GAAaQ,QAAUyH,GAClCC,EAASC,KAAKrV,GAASoQ,EAAAA,EAAAA,IAAyB,CAAC1C,QAAQ,MAG7D4H,QAAQC,IAAIH,GAAUI,MAAK,KACvBtH,GAAW,EAAM,GACnB,GACH,CAAC4B,EAAQ0D,EAAWG,KAEvBzP,EAAAA,EAAAA,YAAU,KACD0G,KACD6K,EAAAA,EAAAA,IAAiB,CACb9W,KAAM+W,EAAAA,GAAQC,kBACdC,UAAWC,EAAAA,GAAKC,yBAChBC,SAAS,IAEbC,YAAYC,WAAWJ,EAAAA,GAAKC,0BAChC,GACD,CAAClL,KAEJ1G,EAAAA,EAAAA,YAAU,KACDmP,GAAmBE,GAAiB3I,GACrC+C,GACJ,GACD,CAACvN,EAAeiT,EAAgBE,EAAc3I,EAAWwI,EAAQtD,KAGpE5L,EAAAA,EAAAA,YAAU,IACC,KACHlE,GAAS+U,EAAAA,EAAAA,IAAoB3U,EAAe,IAAI,GAErD,IAEH,MAAM8V,GAAqBvV,EAAAA,EAAAA,cAAY,KACnC6M,EAAUN,GAAaQ,OAAO,GAC/B,IAEH,OACI5U,IAAAA,cAAA,OACIK,GAAG,cACH8C,UAAWuK,IAAW,6BAA8B,CAAC,kBAAmBlB,QAAQ+N,MAE/EzI,GAAaoK,EACVlc,IAAAA,cAAA,OAAKmD,UAAU,sBACV2O,EACG9R,IAAAA,cAAC2Q,EAAAA,EAAa,MAEd3Q,IAAAA,cAAC6Q,EAAAA,EAAkB,CACf6I,UAAU,EACVzI,YAAaoM,EAAAA,EACbxc,MAAOf,EAAc,CACjBO,GAAI,gCACJC,eAAgB,4BAEpB4Q,SAAUpR,EAAc,CACpBO,GAAI,mCACJC,eAAgB,yHAMhCN,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAACqU,GAAU,CACPE,cAAeyC,EACftC,UAAWA,EACXD,WAAYjI,QAAQuO,GACpBvK,iBAAkB2J,EAClBtO,IAAK6O,EACL/F,UAAWkG,IAEdN,GAAkBE,EACfza,IAAAA,cAAC2Z,GAAU,CACP3P,OAAQuQ,GAERva,IAAAA,cAACsd,GAAAA,EAAY,CACTC,WAAYhD,EAAela,GAC3Bmd,sBAAsB,EACtBC,cAAc,KAItBzd,IAAAA,cAAC6Q,EAAAA,EAAkB,CACf6I,UAAU,EACVzI,YAAaoM,EAAAA,EACbxc,MAAOf,EAAc,CACjBO,GAAI,2CACJC,eAAgB,8FACjB,CAACya,cACJ7J,SAAUpR,EAAyB,CAC/BO,GAAI,6CACJC,eAAgB,8LACjB,CACCya,YACA2C,KAAOC,GACH3d,IAAAA,cAAC4d,EAAAA,KAAI,CACDtR,IAAI,SACJuR,GAAE,GAAA/Z,OAAKoW,EAAG,KAAApW,OAAI+W,EAAgB,IAC9BlS,QAASyU,GAERO,QAQ3B,EAId,IAAe1X,EAAAA,EAAAA,MAAKgU,G,6GC3Mb,SAASxS,IACZ,MAAMqW,GAAcC,EAAAA,EAAAA,aACd3W,GAAS1C,EAAAA,EAAAA,UAAQ,IAAMoZ,GAAa,CAACA,EAAY3D,iBAAkB2D,EAAYzW,OAC/E2W,GAAUC,EAAAA,EAAAA,cAEV3W,GAAgB5G,EAAAA,EAAAA,aAAYwd,EAAAA,GAAkBtD,EAAAA,cAC9CrT,GAAgB7G,EAAAA,EAAAA,aAAY0J,EAAAA,GAAkBwQ,EAAAA,cAE9CzQ,GAAStC,EAAAA,EAAAA,cAAaf,GACjBkX,EAAQzB,KAAK,IAADzY,OAAKsD,EAAOC,KAAI,YAAAvD,OAAWgD,EAAW,IAAMA,EAAW,MAC3E,CAACM,EAAOC,OAELwN,GAAQhN,EAAAA,EAAAA,cAAY,IAAMmW,EAAQG,QAAQ,IAADra,OAAKsD,EAAOC,KAAI,cAAa,CAACD,EAAOC,OAE9EG,GAAgBK,EAAAA,EAAAA,cAAY,SAACf,GAAsE,IAAzCsX,EAAsBC,UAAA3X,OAAA,QAAA4X,IAAAD,UAAA,GAAAA,UAAA,GAAGjX,EAAOC,KAC5F,OAAO2W,EAAQzB,KAAK,IAADzY,OAAKsa,EAAQ,QAAAta,OAAOgD,QAAAA,EAAYM,EAAO+S,kBAC9D,GAAG,CAAC/S,EAAO+S,iBAAkB/S,EAAOC,OAEpC,MAAO,CACHD,SACA4W,UACA1W,gBACAC,gBACAsN,QACA1K,SACA3C,gBAER,C,+ECnCA,MASA,EAToB1E,GAEZ9C,IAAAA,cAACue,EAAAA,GAAezY,OAAAC,OAAA,GACRjD,EAAK,CACT0b,aAAcC,EAAAA,GAAiBjU,oB,yJCMrCkU,EAAgD,CAACC,EAAAA,SAAU,KAAM,KAAM,KAAM,KAAM,KAAM,MAyB/F,EAvBe9c,IAM4B,IAN3B,MACZ+c,EAAQ,EAAC,QACTxF,EAAO,SACPlI,EAAQ,MACRqI,GAEkC1X,EAD/Bgd,E,qWAAKC,CAAAjd,EAAAkd,GAER,MAAMC,EAAIN,EAASE,GACnB,OACI5e,IAAAA,cAAA,SAAA8F,OAAAC,OAAA,GACQ8Y,EAAK,CACT1b,UAAWuK,IAAW,SAAUmR,EAAM1b,aAEtCnD,IAAAA,cAAA,OAAKmD,UAAU,QACXnD,IAAAA,cAACgf,EAAC,KAAE5F,GACHlI,EAAWlR,IAAAA,cAAA,SAAIkR,GAAgB,MAEpClR,IAAAA,cAAA,OAAKmD,UAAU,WACdoW,EACI,C","sources":["webpack://mattermost-webapp/./src/components/tours/crt_tour/crt_list_tutorial_tip.tsx","webpack://mattermost-webapp/./src/components/tours/crt_tour/crt_unread_tutorial_tip.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/search_hint_svg.tsx","webpack://mattermost-webapp/./src/components/post_priority/post_priority_badge.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_item/attachments/attachment_card/index.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_item/attachments/file_card/file_card.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_item/attachments/file_card/index.ts","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_item/attachments/index.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_menu/thread_menu.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_item/thread_item.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_item/index.ts","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_list/virtualized_thread_list_row.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_list/virtualized_thread_list.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/mark_all_threads_as_read_modal/mark_all_threads_as_read_modal.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_list/thread_list.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/thread_pane/thread_pane.tsx","webpack://mattermost-webapp/./src/components/threading/global_threads/global_threads.tsx","webpack://mattermost-webapp/./src/components/threading/hooks.ts","webpack://mattermost-webapp/./src/components/tours/crt_tour/crt_tour_tip.tsx","webpack://mattermost-webapp/./src/components/widgets/header/header.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {useMeasurePunchouts} from '@mattermost/components';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {ShortcutKey, ShortcutKeyVariant} from 'components/shortcut_key';\n\nimport type {GlobalState} from 'types/store';\n\nimport CRTTourTip from './crt_tour_tip';\n\nconst translate = {x: -6, y: 62};\n\nexport const UpShortcut = () => {\n    const {formatMessage} = useIntl();\n    return (<ShortcutKey variant={ShortcutKeyVariant.TutorialTip}>\n        {\n            formatMessage({\n                id: 'tutorial_threads.list.Up',\n                defaultMessage: 'UP',\n            })\n        }\n    </ShortcutKey>);\n};\n\nexport const DownShortcut = () => {\n    const {formatMessage} = useIntl();\n    return (<ShortcutKey variant={ShortcutKeyVariant.TutorialTip}>\n        {\n            formatMessage({\n                id: 'tutorial_threads.list.Down',\n                defaultMessage: 'Down',\n            })\n        }\n    </ShortcutKey>);\n};\n\nconst CRTListTutorialTip = () => {\n    const {formatMessage} = useIntl();\n    const isMobileView = useSelector((state: GlobalState) =>\n        getIsMobileView(state),\n    );\n    const title = (\n        <FormattedMessage\n            id='tutorial_threads.list.title'\n            defaultMessage={'Threads List'}\n        />\n    );\n\n    const screen = (\n        <>\n            <p>\n                {formatMessage({\n                    id: 'tutorial_threads.list.description-p1',\n                    defaultMessage: 'Here you’ll see a preview of all threads you’re following or participating in. Clicking on a thread in this list will open the full thread on the right.',\n                })}\n            </p>\n            <p>\n\n                {formatMessage({\n                    id: 'tutorial_threads.list.description-p2',\n                    defaultMessage: 'Use {upKey} / {downKey} to navigate the thread list.',\n                },\n                {\n                    upKey: <UpShortcut/>,\n                    downKey: <DownShortcut/>,\n                })\n                }\n            </p>\n        </>\n    );\n\n    const punchOutIds = isMobileView ? ['tutorial-threads-mobile-list', 'tutorial-threads-mobile-header'] : ['threads-list-container'];\n    const overlayPunchOut = useMeasurePunchouts(punchOutIds, []);\n\n    return (\n        <CRTTourTip\n            title={title}\n            screen={screen}\n            overlayPunchOut={overlayPunchOut}\n            placement='right-start'\n            pulsatingDotPlacement='right-start'\n            pulsatingDotTranslate={translate}\n        />\n    );\n};\n\nexport default CRTListTutorialTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {useMeasurePunchouts} from '@mattermost/components';\n\nimport CRTTourTip from './crt_tour_tip';\n\nconst CRTUnreadTutorialTip = () => {\n    const {formatMessage} = useIntl();\n    const title = (\n        <FormattedMessage\n            id='tutorial_threads.unread.title'\n            defaultMessage={'Unread threads'}\n        />\n    );\n\n    const screen = (\n        <p>\n            {formatMessage<ReactNode>(\n                {\n                    id: 'tutorial_threads.unread.description',\n                    defaultMessage: 'You can switch to <b>Unreads</b> to show only threads that are unread.',\n                },\n                {\n                    b: (value: string) => <b>{value}</b>,\n                })\n            }\n        </p>\n    );\n    const overlayPunchOut = useMeasurePunchouts(['threads-list-unread-button'], []);\n\n    return (\n        <CRTTourTip\n            title={title}\n            screen={screen}\n            overlayPunchOut={overlayPunchOut}\n            placement='bottom-start'\n            pulsatingDotPlacement='bottom'\n        />\n    );\n};\n\nexport default CRTUnreadTutorialTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n}\n\nconst SearchHintSVG = ({width, height}: SvgProps) => (\n    <svg\n        width={width?.toString() || '72'}\n        height={height?.toString() || '48'}\n        viewBox='0 0 72 48'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g clipPath='url(#clip0_410_25534)'>\n            <path\n                d='M35.1353 12.5745H4.8754C4.32086 12.5726 3.77137 12.6798 3.25832 12.8898C2.74526 13.0998 2.27869 13.4087 1.88524 13.7986C1.49178 14.1886 1.17916 14.6521 0.965209 15.1627C0.751261 15.6732 0.640179 16.2208 0.638306 16.7742V35.9654C0.640179 36.5188 0.751261 37.0664 0.965209 37.577C1.17916 38.0875 1.49178 38.551 1.88524 38.941C2.27869 39.331 2.74526 39.6398 3.25832 39.8498C3.77137 40.0599 4.32086 40.167 4.8754 40.1651H9.34115V47.3489L16.0398 40.1651H35.1246C35.6791 40.167 36.2286 40.0599 36.7417 39.8498C37.2547 39.6398 37.7213 39.331 38.1147 38.941C38.5082 38.551 38.8208 38.0875 39.0348 37.577C39.2487 37.0664 39.3598 36.5188 39.3617 35.9654V16.7742C39.3579 15.6585 38.9108 14.5897 38.1185 13.8024C37.3262 13.0151 36.2534 12.5735 35.1353 12.5745Z'\n                fill='var(--away-indicator)'\n            />\n            <path\n                d='M16.0398 40.1651H35.1246C35.6791 40.167 36.2286 40.0598 36.7417 39.8498C37.2547 39.6397 37.7213 39.3309 38.1148 38.9409C38.5082 38.5509 38.8208 38.0874 39.0348 37.5769C39.2487 37.0663 39.3598 36.5187 39.3617 35.9653V24.3145C39.3617 24.3145 38.0291 35.0883 37.7897 36.0367C37.5504 36.985 37.0752 38.4039 34.8245 38.6392C32.5738 38.8745 16.0398 40.1651 16.0398 40.1651Z'\n                fill='#CC8F00'\n            />\n            <path\n                d='M9.66973 23.6263C10.2089 23.6263 10.7359 23.7859 11.1842 24.0848C11.6324 24.3837 11.9818 24.8085 12.1881 25.3056C12.3944 25.8026 12.4484 26.3496 12.3432 26.8772C12.2381 27.4049 11.9785 27.8896 11.5972 28.27C11.216 28.6504 10.7303 28.9095 10.2015 29.0145C9.67275 29.1194 9.12467 29.0656 8.62657 28.8597C8.12848 28.6538 7.70276 28.3051 7.40323 27.8578C7.10371 27.4105 6.94383 26.8845 6.94383 26.3465C6.94336 25.9892 7.01355 25.6353 7.15038 25.305C7.2872 24.9748 7.48797 24.6747 7.74118 24.422C7.9944 24.1693 8.29509 23.969 8.62602 23.8324C8.95695 23.6959 9.31163 23.6259 9.66973 23.6263Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M20.0056 23.6263C20.5447 23.6263 21.0717 23.7859 21.52 24.0848C21.9683 24.3837 22.3177 24.8085 22.524 25.3056C22.7303 25.8026 22.7843 26.3496 22.6791 26.8772C22.5739 27.4049 22.3143 27.8896 21.9331 28.27C21.5518 28.6504 21.0661 28.9095 20.5374 29.0145C20.0086 29.1194 19.4605 29.0656 18.9624 28.8597C18.4643 28.6538 18.0386 28.3051 17.7391 27.8578C17.4396 27.4105 17.2797 26.8845 17.2797 26.3465C17.2792 25.9892 17.3494 25.6353 17.4862 25.305C17.6231 24.9748 17.8238 24.6747 18.077 24.422C18.3303 24.1693 18.6309 23.969 18.9619 23.8324C19.2928 23.6959 19.6475 23.6259 20.0056 23.6263Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M30.33 23.6263C30.8693 23.6256 31.3967 23.7846 31.8454 24.083C32.2942 24.3815 32.6441 24.8061 32.851 25.3031C33.0579 25.8001 33.1123 26.3471 33.0076 26.875C32.9028 27.4029 32.6435 27.888 32.2624 28.2688C31.8813 28.6495 31.3956 28.909 30.8667 29.0142C30.3379 29.1195 29.7896 29.0658 29.2913 28.86C28.793 28.6542 28.3671 28.3056 28.0674 27.8582C27.7677 27.4108 27.6077 26.8847 27.6077 26.3465C27.6073 25.9895 27.6773 25.6358 27.8139 25.3058C27.9505 24.9758 28.151 24.6759 28.4038 24.4233C28.6566 24.1706 28.9569 23.9702 29.2874 23.8335C29.618 23.6967 29.9722 23.6263 30.33 23.6263Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M3.7787 20.6104C4.08616 19.5244 4.60589 18.5098 5.30794 17.625C6.00999 16.7403 6.88049 16.0028 7.86932 15.4552C7.92789 15.4257 7.97498 15.3776 8.00322 15.3184C8.03145 15.2593 8.03923 15.1925 8.02534 15.1285C8.01145 15.0645 7.97668 15.0069 7.92646 14.9647C7.87625 14.9225 7.81343 14.8982 7.74785 14.8955C5.84009 14.7814 1.98883 15.1878 3.19637 20.5819C3.20911 20.6477 3.24362 20.7074 3.29437 20.7513C3.34513 20.7953 3.4092 20.821 3.47632 20.8242C3.54343 20.8275 3.60972 20.8082 3.66454 20.7695C3.71937 20.7307 3.75956 20.6747 3.7787 20.6104Z'\n                fill='#FFD470'\n            />\n            <path\n                opacity='0.4'\n                d='M32.3334 7.28991C34.7785 4.81371 37.8644 3.53829 41.5849 3.46985C45.237 3.53829 48.3042 4.80749 50.7866 7.28991C53.2628 9.77233 54.5383 12.8396 54.6067 16.4917C54.5383 20.2122 53.269 23.2919 50.7866 25.7432C48.3042 28.1883 45.237 29.4824 41.5849 29.6068C37.8644 29.4761 34.7847 28.1883 32.3334 25.7432C29.8883 23.2919 28.6004 20.206 28.4698 16.4854C28.6004 12.8334 29.8883 9.76611 32.3334 7.28991Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M53.5706 14.1678C52.464 10.5721 50.3691 7.88057 47.2828 6.09868C44.1964 4.31679 40.8181 3.84832 37.1508 4.68784C35.1455 5.20001 33.3983 6.08537 31.8951 7.34293C33.576 5.5084 35.7082 4.23809 38.2863 3.52882C41.9535 2.68929 45.3485 3.16738 48.4626 4.9653C51.5767 6.76321 53.6882 9.46433 54.7948 13.06C55.4751 15.6505 55.4412 18.1323 54.6873 20.502C53.939 22.875 52.5957 24.8683 50.6551 26.4733C52.1121 24.8855 53.1147 23.0208 53.6603 20.8706C54.2005 18.7172 54.1703 16.4876 53.5706 14.1678Z'\n                fill='black'\n                fillOpacity='0.4'\n            />\n            <path\n                d='M57.6194 15.4776C57.3584 11.6178 55.7919 8.22807 52.9264 5.30846C49.663 2.19708 45.8961 0.638306 41.6257 0.638306C37.3554 0.638306 33.5947 2.19708 30.3313 5.30846C27.2047 8.55591 25.6383 12.2982 25.6383 16.5477C25.6383 20.7973 27.2047 24.5458 30.3313 27.787C33.3274 30.6448 36.7524 32.185 40.6001 32.4077C44.4478 32.6366 47.9971 31.5788 51.2605 29.2468L53.7034 31.6778L56.83 28.5664L54.3871 26.1355C56.7989 22.8942 57.8743 19.3375 57.6194 15.4776ZM50.8689 25.6963C48.3887 28.1272 45.3242 29.4139 41.6755 29.5376C37.9583 29.4077 34.8814 28.1272 32.4323 25.6963C29.9895 23.2653 28.7028 20.1973 28.5722 16.4983C28.7028 12.8673 29.9895 9.81778 32.4323 7.34971C34.8752 4.88783 37.9583 3.61978 41.6755 3.55174C45.3242 3.61978 48.3887 4.88165 50.8689 7.34971C53.3428 9.81778 54.6171 12.8673 54.6855 16.4983C54.6171 20.1973 53.3491 23.2653 50.8689 25.6963Z'\n                fill='#BABEC9'\n            />\n            <path\n                d='M67.6182 46.4679C66.8121 46.6983 66.2153 46.6174 65.8276 46.225L53.1453 32.3065C52.7577 31.9142 52.5977 31.4098 52.6592 30.787C52.7207 30.1643 53.1084 29.4668 53.8222 28.6821C54.5975 27.9659 55.2867 27.5549 55.9021 27.4553C56.5174 27.3556 57.0159 27.5362 57.4035 27.9971L71.2488 40.832C71.6364 41.2243 71.698 41.8097 71.4395 42.5944C71.1811 43.3791 70.695 44.1637 69.9873 44.9484C69.2181 45.7331 68.4243 46.2375 67.6182 46.4679Z'\n                fill='var(--away-indicator)'\n            />\n            <path\n                d='M68.5465 38.3191L63.3621 43.5465L57.1116 36.6856L61.6961 32.0027L68.5465 38.3191Z'\n                fill='#7A5600'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0_410_25534'>\n                <rect\n                    width='72'\n                    height='48'\n                    fill='var(--center-channel-bg)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n\n);\n\nexport default SearchHintSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {AlertOutlineIcon, AlertCircleOutlineIcon} from '@mattermost/compass-icons/components';\nimport {PostPriority} from '@mattermost/types/posts';\n\ntype Props = {\n    priority?: PostPriority;\n    className?: string;\n}\n\nconst Badge = styled.span`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 20px;\n    width: 20px;\n    margin-left: 8px;\n    min-width: 20px;\n    border-radius: 10px;\n    color: #fff;\n\n    background-color: ${(props: {priority: PostPriority}) => {\n        return props.priority === PostPriority.URGENT ? 'rgb(var(--semantic-color-danger))' : 'rgb(var(--semantic-color-info))';\n    }}\n`;\n\nexport default function PriorityLabel({priority, className}: Props) {\n    if (priority !== PostPriority.URGENT && priority !== PostPriority.IMPORTANT) {\n        return null;\n    }\n\n    return (\n        <Badge\n            className={className}\n            priority={priority}\n        >\n            {priority === PostPriority.URGENT ? (\n                <AlertOutlineIcon size={14}/>\n            ) : (\n                <AlertCircleOutlineIcon size={14}/>\n            )}\n        </Badge>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {stripMarkdown} from 'utils/markdown';\n\nimport './attachment_card.scss';\n\ntype Props = {\n    fallback?: string;\n    pretext?: string;\n    title?: string;\n    text?: string;\n    author_name?: string;\n}\n\nfunction AttachmentCard({\n    fallback,\n    title,\n    text,\n    author_name: authorName,\n    pretext,\n}: Props) {\n    return (\n        <div>\n            <div className='attachment__truncated'>\n                {`${authorName}: ${title}`}\n            </div>\n            <div className='attachment__truncated'>\n                {stripMarkdown(text || pretext || fallback || '')}\n            </div>\n        </div>\n    );\n}\n\nexport default AttachmentCard;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport cn from 'classnames';\nimport React, {useMemo, memo} from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {FileTypes} from 'utils/constants';\nimport {fileSizeToString, getCompassIconClassName, getFileType} from 'utils/utils';\n\nimport './file_card.scss';\n\ntype Props = {\n    file?: FileInfo;\n    enableSVGs: boolean;\n}\n\ntype FileProps = FileInfo & {\n    enableSVGs: boolean;\n}\n\ntype CardProps = {\n    children?: React.ReactElement<typeof Image>;\n    title: string;\n    size?: number;\n}\n\nfunction File({\n    id,\n    has_preview_image: hasPreviewImage,\n    mini_preview: miniPreview,\n    mime_type: mimeType,\n    extension,\n    enableSVGs,\n}: FileProps) {\n    const imgSrc = useMemo(() => {\n        if (!hasPreviewImage) {\n            return undefined;\n        }\n        if (miniPreview) {\n            return `data:${mimeType};base64,${miniPreview}`;\n        }\n        return getFileThumbnailUrl(id);\n    }, [id, miniPreview, mimeType, hasPreviewImage]);\n\n    const fileType = getFileType(extension);\n\n    switch (fileType) {\n    case FileTypes.SVG:\n        if (enableSVGs) {\n            return (\n                <img\n                    alt='file preview'\n                    className='file_card__image post-image small'\n                    src={getFileUrl(id)}\n                />\n            );\n        }\n        return (\n            <div\n                className={cn(\n                    'icon',\n                    'icon-20',\n                    getCompassIconClassName(fileType),\n                    'file_card__attachment',\n                )}\n            />\n        );\n    case FileTypes.IMAGE:\n        return (\n            <img\n                alt='file preview'\n                className='file_card__image post-image small'\n                src={imgSrc}\n            />\n        );\n    default:\n        return (\n            <i\n                className={cn(\n                    'icon',\n                    'icon-20',\n                    getCompassIconClassName(fileType),\n                    'file_card__attachment',\n                )}\n            />\n        );\n    }\n}\n\nfunction Card({children, title, size}: CardProps) {\n    return (\n        <div\n            className='file_card'\n            title={title}\n        >\n            {children}\n            <div className='file_card__name'>\n                {title}\n            </div>\n            {size != null && (\n                <div className='file_card__size'>\n                    {fileSizeToString(size)}\n                </div>\n            )}\n        </div>\n    );\n}\n\nfunction FileCard({file, enableSVGs}: Props) {\n    if (!file) {\n        return null;\n    }\n\n    return (\n        <Card\n            title={file.name}\n            size={file.size}\n        >\n            <File\n                enableSVGs={enableSVGs}\n                {...file}\n            />\n        </Card>\n    );\n}\n\nexport default memo(FileCard);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getFile} from 'mattermost-redux/selectors/entities/files';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport FileCard from './file_card';\n\ntype OwnProps = {\n    id: FileInfo['id'];\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const file = getFile(state, ownProps.id);\n    const config = getConfig(state);\n\n    return {\n        file,\n        enableSVGs: config.EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FileCard);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {isMessageAttachmentArray} from '@mattermost/types/message_attachments';\nimport type {Post} from '@mattermost/types/posts';\n\nimport AttachmentCard from './attachment_card';\nimport FileCard from './file_card';\n\ntype Props = {\n    post: Post;\n}\n\nfunction Attachment({post}: Props) {\n    if (post.file_ids?.length) {\n        return <FileCard id={post.file_ids[0]}/>;\n    }\n\n    if (isMessageAttachmentArray(post.props.attachments) && post.props.attachments.length) {\n        return <AttachmentCard {...post.props.attachments[0]}/>;\n    }\n\n    return null;\n}\n\nexport default Attachment;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport type {ReactNode} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport {setThreadFollow, updateThreadRead, markLastPostInThreadAsUnread} from 'mattermost-redux/actions/threads';\nimport {isPostFlagged} from 'mattermost-redux/selectors/entities/posts';\n\nimport {\n    flagPost as savePost,\n    unflagPost as unsavePost,\n} from 'actions/post_actions';\nimport {manuallyMarkThreadAsUnread} from 'actions/views/threads';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport {getSiteURL} from 'utils/url';\nimport {copyToClipboard} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport {useThreadRouting} from '../../hooks';\n\nimport './thread_menu.scss';\n\ntype Props = {\n    threadId: UserThread['id'];\n    isFollowing?: boolean;\n    hasUnreads: boolean;\n    children: ReactNode;\n    unreadTimestamp: number;\n};\n\nfunction ThreadMenu({\n    threadId,\n    isFollowing = false,\n    unreadTimestamp,\n    hasUnreads,\n    children,\n}: Props) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const {\n        params: {\n            team,\n        },\n        currentTeamId,\n        currentUserId,\n        goToInChannel,\n    } = useThreadRouting();\n\n    const isSaved = useSelector((state: GlobalState) => isPostFlagged(state, threadId));\n\n    const handleReadUnread = useCallback(() => {\n        const lastViewedAt = hasUnreads ? Date.now() : unreadTimestamp;\n\n        dispatch(manuallyMarkThreadAsUnread(threadId, lastViewedAt));\n        if (hasUnreads) {\n            dispatch(updateThreadRead(currentUserId, currentTeamId, threadId, Date.now()));\n        } else {\n            dispatch(markLastPostInThreadAsUnread(currentUserId, currentTeamId, threadId));\n        }\n    }, [\n        currentUserId,\n        currentTeamId,\n        threadId,\n        hasUnreads,\n        updateThreadRead,\n        unreadTimestamp,\n    ]);\n\n    return (\n        <MenuWrapper\n            stopPropagationOnToggle={true}\n        >\n            {children}\n            <Menu\n                ariaLabel={formatMessage({\n                    id: 'threading.threadItem.menu',\n                    defaultMessage: 'Actions',\n                })}\n                openLeft={true}\n            >\n                <Menu.ItemAction\n                    {...isFollowing ? {\n                        text: formatMessage({\n                            id: 'threading.threadMenu.unfollow',\n                            defaultMessage: 'Unfollow thread',\n                        }),\n                        extraText: formatMessage({\n                            id: 'threading.threadMenu.unfollowExtra',\n                            defaultMessage: 'You won’t be notified about replies',\n                        }),\n                    } : {\n                        text: formatMessage({\n                            id: 'threading.threadMenu.follow',\n                            defaultMessage: 'Follow thread',\n                        }),\n                        extraText: formatMessage({\n                            id: 'threading.threadMenu.followExtra',\n                            defaultMessage: 'You will be notified about replies',\n                        }),\n                    }}\n                    onClick={useCallback(() => {\n                        dispatch(setThreadFollow(currentUserId, currentTeamId, threadId, !isFollowing));\n                    }, [currentUserId, currentTeamId, threadId, isFollowing, setThreadFollow])}\n                />\n                <Menu.ItemAction\n                    text={formatMessage({\n                        id: 'threading.threadMenu.openInChannel',\n                        defaultMessage: 'Open in channel',\n                    })}\n                    onClick={useCallback(() => {\n                        goToInChannel(threadId);\n                    }, [threadId])}\n                />\n                <Menu.ItemAction\n                    text={hasUnreads ? formatMessage({\n                        id: 'threading.threadMenu.markRead',\n                        defaultMessage: 'Mark as read',\n                    }) : formatMessage({\n                        id: 'threading.threadMenu.markUnread',\n                        defaultMessage: 'Mark as unread',\n                    })}\n                    onClick={handleReadUnread}\n                />\n\n                <Menu.ItemAction\n                    text={isSaved ? formatMessage({\n                        id: 'threading.threadMenu.unsave',\n                        defaultMessage: 'Unsave',\n                    }) : formatMessage({\n                        id: 'threading.threadMenu.save',\n                        defaultMessage: 'Save',\n                    })}\n                    onClick={useCallback(() => {\n                        dispatch(isSaved ? unsavePost(threadId) : savePost(threadId));\n                    }, [threadId, isSaved])}\n                />\n                <Menu.ItemAction\n                    text={formatMessage({\n                        id: 'threading.threadMenu.copy',\n                        defaultMessage: 'Copy link',\n                    })}\n                    onClick={useCallback(() => {\n                        copyToClipboard(`${getSiteURL()}/${team}/pl/${threadId}`);\n                    }, [team, threadId])}\n                />\n            </Menu>\n        </MenuWrapper>\n    );\n}\n\nfunction areEqual(prevProps: Props, nextProps: Props) {\n    return (\n        prevProps.threadId === nextProps.threadId &&\n        prevProps.isFollowing === nextProps.isFollowing &&\n        prevProps.unreadTimestamp === nextProps.unreadTimestamp &&\n        prevProps.hasUnreads === nextProps.hasUnreads\n    );\n}\n\nexport default memo(ThreadMenu, areEqual);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useEffect, useMemo, useRef} from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {DotsVerticalIcon} from '@mattermost/compass-icons/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Post} from '@mattermost/types/posts';\nimport {PostPriority} from '@mattermost/types/posts';\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport {getChannel as fetchChannel} from 'mattermost-redux/actions/channels';\nimport {markLastPostInThreadAsUnread, updateThreadRead} from 'mattermost-redux/actions/threads';\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {Posts} from 'mattermost-redux/constants';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {ensureString} from 'mattermost-redux/utils/post_utils';\n\nimport {manuallyMarkThreadAsUnread} from 'actions/views/threads';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport Markdown from 'components/markdown';\nimport {makeGetMentionKeysForPost} from 'components/post_markdown';\nimport PriorityBadge from 'components/post_priority/post_priority_badge';\nimport Button from 'components/threading/common/button';\nimport Timestamp from 'components/timestamp';\nimport CRTListTutorialTip from 'components/tours/crt_tour/crt_list_tutorial_tip';\nimport Tag from 'components/widgets/tag/tag';\nimport Avatars from 'components/widgets/users/avatars';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {CrtTutorialSteps, Preferences} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport Attachment from './attachments';\n\nimport {THREADING_TIME} from '../../common/options';\nimport {useThreadRouting} from '../../hooks';\nimport ThreadMenu from '../thread_menu';\n\nimport './thread_item.scss';\n\nexport type OwnProps = {\n    isSelected: boolean;\n    threadId: UserThread['id'];\n    style?: any;\n    isFirstThreadInList: boolean;\n};\n\ntype Props = {\n    channel: Channel;\n    currentRelativeTeamUrl: string;\n    displayName: string;\n    post: Post;\n    postsInThread: Post[];\n    thread: UserThread;\n    isPostPriorityEnabled: boolean;\n};\n\nconst markdownPreviewOptions = {\n    singleline: true,\n    mentionHighlight: false,\n    atMentions: true,\n};\n\nfunction ThreadItem({\n    channel,\n    currentRelativeTeamUrl,\n    displayName,\n    isSelected,\n    post,\n    postsInThread,\n    style,\n    thread,\n    threadId,\n    isFirstThreadInList,\n    isPostPriorityEnabled,\n}: Props & OwnProps): React.ReactElement|null {\n    const dispatch = useDispatch();\n    const {select, goToInChannel, currentTeamId} = useThreadRouting();\n    const {formatMessage} = useIntl();\n    const isMobileView = useSelector(getIsMobileView);\n    const currentUserId = useSelector(getCurrentUserId);\n    const tipStep = useSelector((state: GlobalState) => getInt(state, Preferences.CRT_TUTORIAL_STEP, currentUserId));\n    const showListTutorialTip = tipStep === CrtTutorialSteps.LIST_POPOVER;\n    const msgDeleted = formatMessage({id: 'post_body.deleted', defaultMessage: '(message deleted)'});\n    const postAuthor = ensureString(post.props?.override_username) || displayName;\n    const getMentionKeysForPost = useMemo(() => makeGetMentionKeysForPost(), []);\n    const mentionsKeys = useSelector((state: GlobalState) => getMentionKeysForPost(state, post, channel));\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (channel?.teammate_id) {\n            dispatch(getMissingProfilesByIds([channel.teammate_id]));\n        }\n    }, [channel?.teammate_id]);\n\n    useEffect(() => {\n        if (!channel && thread?.post.channel_id) {\n            dispatch(fetchChannel(thread.post.channel_id));\n        }\n    }, [channel, thread?.post.channel_id]);\n\n    useEffect(() => {\n        if (isSelected) {\n            ref.current?.focus();\n        }\n    }, [isSelected, threadId]);\n\n    const participantIds = useMemo(() => {\n        const ids = (thread?.participants || []).flatMap(({id}) => {\n            if (id === post.user_id) {\n                return [];\n            }\n            return id;\n        }).reverse();\n        return [post.user_id, ...ids];\n    }, [thread?.participants]);\n\n    let unreadTimestamp = post.edit_at || post.create_at;\n\n    const selectHandler = useCallback((e: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => {\n        // If the event is a keyboard event, check if the key is 'Enter' or ' '.\n        if ('key' in e) {\n            if (e.key !== 'Enter' && e.key !== ' ') {\n                return;\n            }\n        }\n        if (e.altKey) {\n            const hasUnreads = thread ? Boolean(thread.unread_replies) : false;\n            const lastViewedAt = hasUnreads ? Date.now() : unreadTimestamp;\n\n            dispatch(manuallyMarkThreadAsUnread(threadId, lastViewedAt));\n            if (hasUnreads) {\n                dispatch(updateThreadRead(currentUserId, currentTeamId, threadId, Date.now()));\n            } else {\n                dispatch(markLastPostInThreadAsUnread(currentUserId, currentTeamId, threadId));\n            }\n        } else {\n            select(threadId);\n        }\n    }, [\n        currentUserId,\n        currentTeamId,\n        threadId,\n        thread,\n        updateThreadRead,\n        unreadTimestamp,\n    ]);\n\n    const imageProps = useMemo(() => ({\n        onImageHeightChanged: () => {},\n        onImageLoaded: () => {},\n    }), []);\n\n    const goToInChannelHandler = useCallback((e: MouseEvent) => {\n        e.stopPropagation();\n        goToInChannel(threadId);\n    }, [threadId]);\n\n    const handleFormattedTextClick = useCallback((e) => {\n        // If the event is a keyboard event, check if the key is 'Enter' or ' '.\n        if ('key' in e) {\n            if (e.key !== 'Enter' && e.key !== ' ') {\n                return;\n            }\n        }\n        Utils.handleFormattedTextClick(e, currentRelativeTeamUrl);\n    }, [currentRelativeTeamUrl]);\n\n    if (!thread || !post) {\n        return null;\n    }\n\n    const {\n        unread_replies: newReplies,\n        unread_mentions: newMentions,\n        last_reply_at: lastReplyAt,\n        reply_count: totalReplies,\n        is_following: isFollowing,\n    } = thread;\n\n    // if we have the whole thread, get the posts in it, sorted from newest to oldest.\n    // First post is latest reply. Use that timestamp\n    if (postsInThread.length > 1) {\n        const p = postsInThread[0];\n        unreadTimestamp = p.edit_at || p.create_at;\n    }\n\n    return (\n        <>\n            <div\n                style={style}\n                className={classNames('ThreadItem', {\n                    'has-unreads': newReplies,\n                    'is-selected': isSelected,\n                })}\n                tabIndex={isSelected ? -1 : 0}\n                role='link'\n                aria-label={formatMessage(\n                    {id: 'threading.threadItem.ariaLabel', defaultMessage: 'Thread by {author}'},\n                    {author: postAuthor},\n                )}\n                aria-describedby={`ThreadItem__timestamp_${threadId}`}\n                id={isFirstThreadInList ? 'tutorial-threads-mobile-list' : ''}\n                onClick={selectHandler}\n                onKeyDown={selectHandler}\n                ref={ref}\n            >\n                <header>\n                    {Boolean(newMentions || newReplies) && (\n                        <div className='indicator'>\n                            {newMentions ? (\n                                <div className={classNames('dot-mentions', {over: newMentions > 99})}>\n                                    {Math.min(newMentions, 99)}\n                                    {newMentions > 99 && '+'}\n                                </div>\n                            ) : (\n                                <div className='dot-unreads'/>\n                            )}\n                        </div>\n                    )}\n                    <div className='ThreadItem__author'>{postAuthor}</div>\n                    <div className='ThreadItem__tags'>\n                        {channel && postAuthor !== channel?.display_name && (\n                            <Tag\n                                onClick={goToInChannelHandler}\n                                text={channel?.display_name}\n                            />\n                        )}\n                        {isPostPriorityEnabled && (\n                            thread.is_urgent && (\n                                <PriorityBadge\n                                    className={postAuthor === channel?.display_name ? 'ml-2' : ''}\n                                    priority={PostPriority.URGENT}\n                                />\n                            )\n                        )}\n                    </div>\n                    <Timestamp\n                        {...THREADING_TIME}\n                        className='alt-hidden'\n                        value={lastReplyAt}\n                    />\n                </header>\n                <div className='menu-anchor alt-visible'>\n                    <ThreadMenu\n                        threadId={threadId}\n                        isFollowing={isFollowing ?? false}\n                        hasUnreads={Boolean(newReplies)}\n                        unreadTimestamp={unreadTimestamp}\n                    >\n                        <WithTooltip\n                            title={(\n                                <FormattedMessage\n                                    id='threading.threadItem.menu'\n                                    defaultMessage='Actions'\n                                />\n                            )}\n                        >\n                            <Button\n                                marginTop={true}\n                                className='Button___icon'\n                                aria-label={formatMessage({\n                                    id: 'threading.threadItem.menu',\n                                    defaultMessage: 'Actions',\n                                })}\n                            >\n                                <DotsVerticalIcon size={18}/>\n                            </Button>\n                        </WithTooltip>\n                    </ThreadMenu>\n                </div>\n\n                {/* The strange interaction here where we need a click/keydown handler messes with the ESLint rules, so we just disable it */}\n                {/*eslint-disable-next-line jsx-a11y/no-static-element-interactions*/}\n                <div\n                    className='preview'\n                    dir='auto'\n                    onClick={handleFormattedTextClick}\n                    onKeyDown={handleFormattedTextClick}\n                >\n                    {post.message ? (\n                        <Markdown\n                            message={post.state === Posts.POST_DELETED ? msgDeleted : post.message}\n                            options={markdownPreviewOptions}\n                            imagesMetadata={post?.metadata && post?.metadata?.images}\n                            mentionKeys={mentionsKeys}\n                            imageProps={imageProps}\n                        />\n                    ) : (\n                        <Attachment post={post}/>\n                    )}\n                </div>\n                <div className='activity'>\n                    {participantIds?.length ? (\n                        <Avatars\n                            userIds={participantIds}\n                            size='xs'\n                        />\n                    ) : null}\n                    {Boolean(totalReplies) && (\n                        <>\n                            {newReplies ? (\n                                <FormattedMessage\n                                    id='threading.numNewReplies'\n                                    defaultMessage='{newReplies, plural, =1 {# new reply} other {# new replies}}'\n                                    values={{newReplies}}\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='threading.numReplies'\n                                    defaultMessage='{totalReplies, plural, =0 {Reply} =1 {# reply} other {# replies}}'\n                                    values={{totalReplies}}\n                                />\n                            )}\n                        </>\n                    )}\n                </div>\n                {showListTutorialTip && isFirstThreadInList && isMobileView && (<CRTListTutorialTip/>)}\n                <span\n                    className='sr-only'\n                    id={`ThreadItem__timestamp_${threadId}`}\n                >\n                    <FormattedMessage\n                        id='threading.threadItem.timestamp'\n                        defaultMessage='Last reply '\n                    />\n                    <Timestamp\n                        {...THREADING_TIME}\n                        className='alt-hidden'\n                        value={lastReplyAt}\n                    />\n                </span>\n            </div>\n        </>\n    );\n}\n\nexport default memo(ThreadItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {memo} from 'react';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\n\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost, isPostPriorityEnabled, makeGetPostsForThread} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getThread} from 'mattermost-redux/selectors/entities/threads';\nimport {makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport ThreadItem from './thread_item';\nimport type {OwnProps} from './thread_item';\n\nfunction makeMapStateToProps() {\n    const getPostsForThread = makeGetPostsForThread();\n    const getChannel = makeGetChannel();\n    const getDisplayName = makeGetDisplayName();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const {threadId} = ownProps;\n\n        const post = getPost(state, threadId);\n\n        if (!post) {\n            return {};\n        }\n\n        return {\n            post,\n            channel: getChannel(state, post.channel_id),\n            currentRelativeTeamUrl: getCurrentRelativeTeamUrl(state),\n            displayName: getDisplayName(state, post.user_id, true),\n            postsInThread: getPostsForThread(state, post.id),\n            thread: getThread(state, threadId),\n            isPostPriorityEnabled: isPostPriorityEnabled(state),\n        };\n    };\n}\n\nexport default compose(\n    connect(makeMapStateToProps),\n    memo,\n)(ThreadItem) as React.FunctionComponent<OwnProps>;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {areEqual} from 'react-window';\n\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport SearchHintSVG from 'components/common/svg_images_components/search_hint_svg';\nimport LoadingScreen from 'components/loading_screen';\nimport NoResultsIndicator from 'components/no_results_indicator';\nimport {NoResultsLayout} from 'components/no_results_indicator/types';\nimport {SearchShortcut} from 'components/search_shortcut/search_shortcut';\nimport {ShortcutKeyVariant} from 'components/shortcut_key';\n\nimport {Constants} from 'utils/constants';\n\nimport ThreadItem from '../thread_item';\n\ntype Props = {\n    data: {\n        ids: Array<UserThread['id']>;\n        selectedThreadId?: UserThread['id'];\n    };\n    index: number;\n    style: any;\n};\n\nfunction Row({index, style, data}: Props) {\n    const itemId = data.ids[index];\n    const isSelected = data.selectedThreadId === itemId;\n\n    if (itemId === Constants.THREADS_LOADING_INDICATOR_ITEM_ID) {\n        return (\n            <LoadingScreen\n                message={<></>}\n                style={style}\n            />\n        );\n    }\n\n    if (itemId === Constants.THREADS_NO_RESULTS_ITEM_ID) {\n        return (\n            <NoResultsIndicator\n                style={{...style, padding: '16px 16px 16px 24px', background: 'rgba(var(--center-channel-color-rgb), 0.04)'}}\n                iconGraphic={<SearchHintSVG/>}\n                title={\n                    <FormattedMessage\n                        id='globalThreads.searchGuidance.title'\n                        defaultMessage='That’s the end of the list'\n                    />\n                }\n                subtitle={\n                    <FormattedMessage\n                        id='globalThreads.searchGuidance.subtitle'\n                        defaultMessage='If you’re looking for older conversations, try searching with {searchShortcut}'\n                        values={{\n                            searchShortcut: (\n                                <SearchShortcut\n                                    className='thread-no-results-subtitle-shortcut'\n                                    variant={ShortcutKeyVariant.TutorialTip}\n                                />\n                            ),\n                        }}\n                    />\n                }\n                titleClassName='thread-no-results-title'\n                subtitleClassName='thread-no-results-subtitle'\n                layout={NoResultsLayout.Horizontal}\n            />\n        );\n    }\n\n    return (\n        <ThreadItem\n            isSelected={isSelected}\n            key={itemId}\n            style={style}\n            threadId={itemId}\n            isFirstThreadInList={index === 0}\n        />\n    );\n}\n\nexport default memo(Row, areEqual);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, useEffect, useMemo} from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {FixedSizeList} from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport ThreadsConstants from 'mattermost-redux/constants/threads';\n\nimport {Constants} from 'utils/constants';\n\nimport Row from './virtualized_thread_list_row';\n\ntype Props = {\n    ids: Array<UserThread['id']>;\n    loadMoreItems: (startIndex: number, stopIndex: number) => Promise<any>;\n    selectedThreadId?: UserThread['id'];\n    total: number;\n    isLoading?: boolean;\n    addNoMoreResultsItem?: boolean;\n};\n\nconst style = {\n    willChange: 'auto',\n};\n\nfunction VirtualizedThreadList({\n    ids,\n    selectedThreadId,\n    loadMoreItems,\n    total,\n    isLoading,\n    addNoMoreResultsItem,\n}: Props) {\n    const infiniteLoaderRef = React.useRef<any>();\n    const startIndexRef = React.useRef<number>(0);\n    const stopIndexRef = React.useRef<number>(0);\n\n    useEffect(() => {\n        if (ids.length > 0 && selectedThreadId) {\n            const index = ids.indexOf(selectedThreadId);\n            if (startIndexRef.current >= index || index > stopIndexRef.current) {\n                // eslint-disable-next-line no-underscore-dangle\n                infiniteLoaderRef.current?._listRef.scrollToItem(index);\n            }\n        }\n\n        // ids should not be on the dependency list as\n        // it will auto scroll to selected item upon\n        // infinite loading\n        // when the selectedThreadId changes it will get\n        // the new ids so no issue there\n    }, [selectedThreadId]);\n\n    const data = useMemo(\n        () => (\n            {\n                ids: addNoMoreResultsItem && ids.length === total ? [...ids, Constants.THREADS_NO_RESULTS_ITEM_ID] : (isLoading && ids.length !== total && [...ids, Constants.THREADS_LOADING_INDICATOR_ITEM_ID]) || ids,\n                selectedThreadId,\n            }\n        ),\n        [ids, selectedThreadId, isLoading, addNoMoreResultsItem, total],\n    );\n\n    const itemKey = useCallback((index, data) => data.ids[index], []);\n\n    const isItemLoaded = useCallback((index) => {\n        return ids.length === total || index < ids.length;\n    }, [ids, total]);\n\n    return (\n        <AutoSizer>\n            {({height, width}) => (\n                <InfiniteLoader\n                    ref={infiniteLoaderRef}\n                    itemCount={total}\n                    loadMoreItems={loadMoreItems}\n                    isItemLoaded={isItemLoaded}\n                    minimumBatchSize={ThreadsConstants.THREADS_PAGE_SIZE}\n                >\n                    {({onItemsRendered, ref}) => {\n                        return (\n                            <FixedSizeList\n                                onItemsRendered={({\n                                    overscanStartIndex,\n                                    overscanStopIndex,\n                                    visibleStartIndex,\n                                    visibleStopIndex,\n                                }) => {\n                                    onItemsRendered({\n                                        overscanStartIndex,\n                                        overscanStopIndex,\n                                        visibleStartIndex,\n                                        visibleStopIndex,\n                                    });\n                                    startIndexRef.current = visibleStartIndex;\n                                    stopIndexRef.current = visibleStopIndex;\n                                }}\n                                ref={ref}\n                                height={height}\n                                itemCount={data.ids.length}\n                                itemData={data}\n                                itemKey={itemKey}\n                                itemSize={133}\n                                style={style}\n                                width={width}\n                                className='virtualized-thread-list'\n                            >\n                                {Row}\n                            </FixedSizeList>\n                        );\n                    }\n                    }\n                </InfiniteLoader>\n            )}\n        </AutoSizer>\n    );\n}\n\nfunction areEqual(prevProps: Props, nextProps: Props) {\n    return (\n        prevProps.selectedThreadId === nextProps.selectedThreadId &&\n        prevProps.ids.join() === nextProps.ids.join() &&\n        prevProps.isLoading === nextProps.isLoading &&\n        prevProps.addNoMoreResultsItem === nextProps.addNoMoreResultsItem\n    );\n}\n\nexport default memo(VirtualizedThreadList, areEqual);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\nimport './mark_all_threads_as_read_modal.scss';\n\nexport type MarkAllThreadsAsReadModalProps = {\n    onConfirm: () => void;\n    onCancel: () => void;\n}\n\nfunction MarkAllThreadsAsReadModal({\n    onConfirm,\n    onCancel,\n}: MarkAllThreadsAsReadModalProps) {\n    const {formatMessage} = useIntl();\n\n    return (\n        <GenericModal\n            className='mark-all-threads-as-read'\n            id='mark-all-threads-as-read-modal'\n            compassDesign={true}\n            modalHeaderText={formatMessage({\n                id: 'mark_all_threads_as_read_modal.title',\n                defaultMessage: 'Mark all your threads as read?',\n            })}\n            confirmButtonText={formatMessage({\n                id: 'mark_all_threads_as_read_modal.confirm',\n                defaultMessage: 'Mark all as read',\n            })}\n            cancelButtonText={formatMessage({\n                id: 'mark_all_threads_as_read_modal.cancel',\n                defaultMessage: 'Cancel',\n            })}\n            onExited={onCancel}\n            handleCancel={onCancel}\n            handleConfirm={onConfirm}\n        >\n            <div className='mark_all_threads_as_read_modal__body'>\n                <span>\n                    {formatMessage({\n                        id: 'mark_all_threads_as_read_modal.description',\n                        defaultMessage: 'This will clear the unread state and mention badges on all your threads. Are you sure?',\n                    })}\n                </span>\n            </div>\n        </GenericModal>\n    );\n}\n\nexport default MarkAllThreadsAsReadModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport isEmpty from 'lodash/isEmpty';\nimport React, {memo, useCallback, useEffect} from 'react';\nimport type {PropsWithChildren} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {PlaylistCheckIcon} from '@mattermost/compass-icons/components';\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport {getThreadsForCurrentTeam, markAllThreadsInTeamRead} from 'mattermost-redux/actions/threads';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {getThreadCountsInCurrentTeam} from 'mattermost-redux/selectors/entities/threads';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {closeModal, openModal} from 'actions/views/modals';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport NoResultsIndicator from 'components/no_results_indicator';\nimport CRTListTutorialTip from 'components/tours/crt_tour/crt_list_tutorial_tip';\nimport CRTUnreadTutorialTip from 'components/tours/crt_tour/crt_unread_tutorial_tip';\nimport Header from 'components/widgets/header';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {A11yClassNames, Constants, CrtTutorialSteps, ModalIdentifiers, Preferences} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport {a11yFocus, mod} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport VirtualizedThreadList from './virtualized_thread_list';\n\nimport Button from '../../common/button';\nimport {useThreadRouting} from '../../hooks';\nimport MarkAllThreadsAsReadModal from '../mark_all_threads_as_read_modal';\nimport type {MarkAllThreadsAsReadModalProps} from '../mark_all_threads_as_read_modal';\n\nimport './thread_list.scss';\n\nexport enum ThreadFilter {\n    none = '',\n    unread = 'unread'\n}\n\nexport const FILTER_STORAGE_KEY = 'globalThreads_filter';\n\ntype Props = {\n    currentFilter: ThreadFilter;\n    someUnread: boolean;\n    setFilter: (filter: ThreadFilter) => void;\n    selectedThreadId?: UserThread['id'];\n    ids: Array<UserThread['id']>;\n    unreadIds: Array<UserThread['id']>;\n};\n\nconst ThreadList = ({\n    currentFilter = ThreadFilter.none,\n    someUnread,\n    setFilter,\n    selectedThreadId,\n    unreadIds,\n    ids,\n}: PropsWithChildren<Props>) => {\n    const isMobileView = useSelector(getIsMobileView);\n    const unread = ThreadFilter.unread === currentFilter;\n    const data = unread ? unreadIds : ids;\n    const ref = React.useRef<HTMLDivElement>(null);\n    const {currentTeamId, currentUserId, clear, select} = useThreadRouting();\n    const tipStep = useSelector((state: GlobalState) => getInt(state, Preferences.CRT_TUTORIAL_STEP, currentUserId));\n    const showListTutorialTip = tipStep === CrtTutorialSteps.LIST_POPOVER;\n    const showUnreadTutorialTip = tipStep === CrtTutorialSteps.UNREAD_POPOVER;\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    const {total = 0, total_unread_threads: totalUnread} = useSelector(getThreadCountsInCurrentTeam) ?? {};\n\n    const [isLoading, setLoading] = React.useState<boolean>(false);\n    const [hasLoaded, setHasLoaded] = React.useState<boolean>(false);\n\n    const handleKeyDown = useCallback((e: KeyboardEvent) => {\n        // Ensure that arrow keys navigation is not triggered if the textbox is focused\n        const target = e.target as HTMLElement;\n        const tagName = target?.tagName?.toLowerCase();\n        if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {\n            return;\n        }\n        const comboKeyPressed = e.altKey || e.metaKey || e.shiftKey || e.ctrlKey;\n        if (comboKeyPressed || (!Keyboard.isKeyPressed(e, Constants.KeyCodes.DOWN) && !Keyboard.isKeyPressed(e, Constants.KeyCodes.UP))) {\n            return;\n        }\n\n        // Don't switch threads if a modal or popup is open, since the focus is inside the modal/popup.\n        const noModalsAreOpen = document.getElementsByClassName(A11yClassNames.MODAL).length === 0;\n        const noPopupsDropdownsAreOpen = document.getElementsByClassName(A11yClassNames.POPUP).length === 0;\n        if (!noModalsAreOpen || !noPopupsDropdownsAreOpen) {\n            return;\n        }\n\n        let threadIdToSelect = 0;\n        if (selectedThreadId) {\n            const selectedThreadIndex = data.indexOf(selectedThreadId);\n            if (Keyboard.isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                if (selectedThreadIndex < data.length - 1) {\n                    threadIdToSelect = selectedThreadIndex + 1;\n                }\n\n                if (selectedThreadIndex === data.length - 1) {\n                    return;\n                }\n            }\n\n            if (Keyboard.isKeyPressed(e, Constants.KeyCodes.UP)) {\n                if (selectedThreadIndex > 0) {\n                    threadIdToSelect = selectedThreadIndex - 1;\n                } else {\n                    return;\n                }\n            }\n        }\n        select(data[threadIdToSelect]);\n        e.preventDefault();\n    }, [selectedThreadId, data]);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [handleKeyDown]);\n\n    const handleSetFilter = useCallback((filter: ThreadFilter) => {\n        if (filter === ThreadFilter.unread) {\n            trackEvent('crt', 'filter_threads_by_unread');\n        }\n\n        setFilter(filter);\n    }, [setFilter]);\n\n    const handleLoadMoreItems = useCallback(async (startIndex) => {\n        setLoading(true);\n        let before = data[startIndex - 1];\n\n        if (before === selectedThreadId) {\n            before = data[startIndex - 2];\n        }\n\n        await dispatch(getThreadsForCurrentTeam({unread, before}));\n\n        setLoading(false);\n        setHasLoaded(true);\n\n        return {data: true};\n    }, [currentTeamId, data, unread, selectedThreadId]);\n\n    const handleAllMarkedRead = useCallback(() => {\n        trackEvent('crt', 'mark_all_threads_read');\n        dispatch(markAllThreadsInTeamRead(currentUserId, currentTeamId));\n        if (currentFilter === ThreadFilter.unread) {\n            clear();\n        }\n    }, [currentTeamId, currentUserId, currentFilter]);\n\n    const handleOpenMarkAllAsReadModal = useCallback(() => {\n        const handleCloseMarkAllAsReadModal = () => {\n            dispatch(closeModal(ModalIdentifiers.MARK_ALL_THREADS_AS_READ));\n        };\n\n        const handleConfirm = () => {\n            handleAllMarkedRead();\n            handleCloseMarkAllAsReadModal();\n        };\n\n        const modalProp: MarkAllThreadsAsReadModalProps = {\n            onConfirm: handleConfirm,\n            onCancel: handleCloseMarkAllAsReadModal,\n        };\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.MARK_ALL_THREADS_AS_READ,\n            dialogType: MarkAllThreadsAsReadModal,\n            dialogProps: modalProp,\n        }));\n    }, [handleAllMarkedRead]);\n\n    const {tabListProps, tabProps} = useTabs<ThreadFilter>({\n        activeTab: currentFilter,\n        setActiveTab: handleSetFilter,\n        tabs: [\n            {\n                id: 'threads-list-filter-none',\n                name: ThreadFilter.none,\n                panelId: 'threads-list',\n            },\n            {\n                id: 'threads-list-filter-unread',\n                name: ThreadFilter.unread,\n                panelId: 'threads-list',\n            },\n        ],\n    });\n\n    return (\n        <div\n            tabIndex={0}\n            ref={ref}\n            className={'ThreadList'}\n            id={'threads-list-container'}\n        >\n            <Header\n                id={'tutorial-threads-mobile-header'}\n                heading={(\n                    <div\n                        className='tab-buttons-list'\n                        aria-label={formatMessage({\n                            id: 'threading.threadList.tabsLabel',\n                            defaultMessage: 'Filter visible threads',\n                        })}\n                        {...tabListProps}\n                    >\n                        <div className={'tab-button-wrapper'}>\n                            <Button\n                                className={'Button___large Margined'}\n                                isActive={currentFilter === ThreadFilter.none}\n                                {...tabProps[0]}\n                            >\n                                <FormattedMessage\n                                    id='globalThreads.heading'\n                                    defaultMessage='Followed threads'\n                                />\n                            </Button>\n                        </div>\n                        <div\n                            id={'threads-list-unread-button'}\n                            className={'tab-button-wrapper'}\n                        >\n                            <Button\n                                className={'Button___large Margined'}\n                                isActive={currentFilter === ThreadFilter.unread}\n                                hasDot={someUnread}\n                                {...tabProps[1]}\n                            >\n                                <FormattedMessage\n                                    id='threading.filters.unreads'\n                                    defaultMessage='Unreads'\n                                />\n                            </Button>\n                            {showUnreadTutorialTip && <CRTUnreadTutorialTip/>}\n                        </div>\n                    </div>\n                )}\n                right={(\n                    <div className='right-anchor'>\n                        <WithTooltip\n                            title={formatMessage({\n                                id: 'threading.threadList.markRead',\n                                defaultMessage: 'Mark all threads as read',\n                            })}\n                        >\n                            <Button\n                                id={'threads-list__mark-all-as-read'}\n                                aria-label={formatMessage({\n                                    id: 'threading.threadList.markRead',\n                                    defaultMessage: 'Mark all threads as read',\n                                })}\n                                className={'Button___large Button___icon'}\n                                onClick={handleOpenMarkAllAsReadModal}\n                                marginTop={true}\n                            >\n                                <span className='icon'>\n                                    <PlaylistCheckIcon size={18}/>\n                                </span>\n                            </Button>\n                        </WithTooltip>\n                    </div>\n                )}\n            />\n            <div\n                id='threads-list'\n                role='tabpanel'\n                className='threads'\n                data-testid={'threads_list'}\n            >\n                <VirtualizedThreadList\n                    key={`threads_list_${currentFilter}`}\n                    loadMoreItems={handleLoadMoreItems}\n                    ids={data}\n                    selectedThreadId={selectedThreadId}\n                    total={unread ? totalUnread : total}\n                    isLoading={isLoading}\n                    addNoMoreResultsItem={hasLoaded && !unread}\n                />\n                {showListTutorialTip && !isMobileView && <CRTListTutorialTip/>}\n                {unread && !someUnread && isEmpty(unreadIds) ? (\n                    <NoResultsIndicator\n                        expanded={true}\n                        title={formatMessage({\n                            id: 'globalThreads.threadList.noUnreadThreads',\n                            defaultMessage: 'No unread threads',\n                        })}\n                        subtitle={formatMessage({\n                            id: 'globalThreads.threadList.noUnreadThreads.subtitle',\n                            defaultMessage: 'You\\'re all caught up',\n                        })}\n                    />\n                ) : null}\n            </div>\n        </div>\n    );\n};\n\nfunction useTabs<TabName extends string>({\n    activeTab,\n    setActiveTab,\n    tabs,\n}: {\n    activeTab: TabName;\n    setActiveTab: (tab: TabName) => void;\n    tabs: Array<{\n        id: string;\n        name: TabName;\n        panelId: string;\n    }>;\n}): {\n        tabListProps: React.HTMLAttributes<HTMLElement>;\n        tabProps: Array<React.HTMLAttributes<HTMLElement>>;\n    } {\n    const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n        let delta = 0;\n        if (Keyboard.isKeyPressed(e, Constants.KeyCodes.RIGHT)) {\n            delta = 1;\n        } else if (Keyboard.isKeyPressed(e, Constants.KeyCodes.LEFT)) {\n            delta = -1;\n        }\n\n        if (delta === 0) {\n            return;\n        }\n\n        let index = tabs.findIndex((tab) => tab.name === activeTab);\n        index += delta;\n        index = mod(index, tabs.length);\n\n        setActiveTab(tabs[index].name);\n        a11yFocus(document.getElementById(tabs[index].id));\n    }, [activeTab, setActiveTab, tabs]);\n\n    return {\n        tabListProps: {\n            role: 'tablist',\n            'aria-orientation': 'horizontal',\n        },\n        tabProps: tabs.map((tab) => ({\n            id: tab.id,\n            role: 'tab',\n            onClick: () => setActiveTab(tab.name),\n            onKeyDown: handleKeyDown,\n            tabIndex: tab.name === activeTab ? 0 : -1,\n            'aria-controls': tab.panelId,\n            'aria-selected': activeTab === tab.name,\n        })),\n    };\n}\n\nexport default memo(ThreadList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport type {ReactNode} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {DotsVerticalIcon} from '@mattermost/compass-icons/components';\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport {setThreadFollow} from 'mattermost-redux/actions/threads';\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost, makeGetPostsForThread} from 'mattermost-redux/selectors/entities/posts';\n\nimport Header from 'components/widgets/header';\nimport WithTooltip from 'components/with_tooltip';\n\nimport type {GlobalState} from 'types/store';\n\nimport Button from '../../common/button';\nimport FollowButton from '../../common/follow_button';\nimport {useThreadRouting} from '../../hooks';\nimport ThreadMenu from '../thread_menu';\n\nimport './thread_pane.scss';\n\nconst getChannel = makeGetChannel();\nconst getPostsForThread = makeGetPostsForThread();\n\ntype Props = {\n    thread: UserThread;\n    children?: ReactNode;\n};\n\nconst ThreadPane = ({\n    thread,\n    children,\n}: Props) => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const {\n        currentTeamId,\n        currentUserId,\n        goToInChannel,\n        select,\n    } = useThreadRouting();\n\n    const {\n        id: threadId,\n        is_following: isFollowing,\n        post: {\n            channel_id: channelId,\n        },\n    } = thread;\n\n    const channel = useSelector((state: GlobalState) => getChannel(state, channelId));\n    const post = useSelector((state: GlobalState) => getPost(state, thread.id));\n    const postsInThread = useSelector((state: GlobalState) => getPostsForThread(state, post.id));\n    const selectHandler = useCallback(() => select(), []);\n    let unreadTimestamp = post.edit_at || post.create_at;\n\n    // if we have the whole thread, get the posts in it, sorted from newest to oldest.\n    // First post is latest reply. Use that timestamp\n    if (postsInThread.length > 1) {\n        const p = postsInThread[0];\n        unreadTimestamp = p.edit_at || p.create_at;\n    }\n    const goToInChannelHandler = useCallback(() => {\n        goToInChannel(threadId);\n    }, [goToInChannel, threadId]);\n\n    const followHandler = useCallback(() => {\n        dispatch(setThreadFollow(currentUserId, currentTeamId, threadId, !isFollowing));\n    }, [dispatch, currentUserId, currentTeamId, threadId, isFollowing]);\n\n    return (\n        <div\n            id={'thread-pane-container'}\n            className='ThreadPane'\n        >\n            <Header\n                className='ThreadPane___header'\n                heading={(\n                    <>\n                        <Button\n                            className='Button___icon Button___large back'\n                            onClick={selectHandler}\n                        >\n                            <i className='icon icon-arrow-back-ios'/>\n                        </Button>\n                        <h3>\n                            <span className='separated'>\n                                {formatMessage({\n                                    id: 'threading.header.heading',\n                                    defaultMessage: 'Thread',\n                                })}\n                            </span>\n                            <Button\n                                className='separated'\n                                allowTextOverflow={true}\n                                onClick={goToInChannelHandler}\n                            >\n                                {channel?.display_name}\n                            </Button>\n                        </h3>\n                    </>\n                )}\n                right={(\n                    <>\n                        <FollowButton\n                            isFollowing={isFollowing}\n                            disabled={isFollowing == null}\n                            onClick={followHandler}\n                        />\n                        <ThreadMenu\n                            threadId={threadId}\n                            isFollowing={isFollowing}\n                            hasUnreads={Boolean(thread.unread_replies || thread.unread_mentions)}\n                            unreadTimestamp={unreadTimestamp}\n                        >\n                            <WithTooltip\n                                title={formatMessage({\n                                    id: 'threading.threadHeader.menu',\n                                    defaultMessage: 'More Actions',\n                                })}\n                            >\n                                <Button className='Button___icon Button___large'>\n                                    <DotsVerticalIcon size={18}/>\n                                </Button>\n                            </WithTooltip>\n                        </ThreadMenu>\n                    </>\n                )}\n            />\n            {children}\n        </div>\n    );\n};\n\nexport default memo(ThreadPane);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport isEmpty from 'lodash/isEmpty';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport type {ReactNode} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch, shallowEqual} from 'react-redux';\nimport {Link, useRouteMatch} from 'react-router-dom';\n\nimport {getThreadCounts, getThreadsForCurrentTeam} from 'mattermost-redux/actions/threads';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {\n    getThreadOrderInCurrentTeam,\n    getUnreadThreadOrderInCurrentTeam,\n    getThreadCountsInCurrentTeam,\n    getThread,\n} from 'mattermost-redux/selectors/entities/threads';\n\nimport {clearLastUnreadChannel} from 'actions/global_actions';\nimport {loadProfilesForSidebar} from 'actions/user_actions';\nimport {selectLhsItem} from 'actions/views/lhs';\nimport {suppressRHS, unsuppressRHS} from 'actions/views/rhs';\nimport {setSelectedThreadId} from 'actions/views/threads';\nimport {getSelectedThreadIdInCurrentTeam} from 'selectors/views/threads';\nimport {useGlobalState} from 'stores/hooks';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport ChatIllustration from 'components/common/svg_images_components/chat_illustration';\nimport LoadingScreen from 'components/loading_screen';\nimport NoResultsIndicator from 'components/no_results_indicator';\n\nimport {PreviousViewedTypes} from 'utils/constants';\nimport {Mark, Measure, measureAndReport} from 'utils/performance_telemetry';\n\nimport type {GlobalState} from 'types/store/index';\nimport {LhsItemType, LhsPage} from 'types/store/lhs';\n\nimport ThreadList, {ThreadFilter, FILTER_STORAGE_KEY} from './thread_list';\nimport ThreadPane from './thread_pane';\n\nimport {useThreadRouting} from '../hooks';\nimport ThreadViewer from '../thread_viewer';\n\nimport './global_threads.scss';\n\nconst GlobalThreads = () => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    const {url, params: {threadIdentifier}} = useRouteMatch<{threadIdentifier?: string}>();\n    const [filter, setFilter] = useGlobalState(ThreadFilter.none, FILTER_STORAGE_KEY);\n    const {currentTeamId, currentUserId, clear} = useThreadRouting();\n\n    const counts = useSelector(getThreadCountsInCurrentTeam);\n    const selectedThread = useSelector((state: GlobalState) => getThread(state, threadIdentifier));\n    const selectedThreadId = useSelector(getSelectedThreadIdInCurrentTeam);\n    const selectedPost = useSelector((state: GlobalState) => getPost(state, threadIdentifier!));\n    const threadIds = useSelector((state: GlobalState) => getThreadOrderInCurrentTeam(state), shallowEqual);\n    const unreadThreadIds = useSelector((state: GlobalState) => getUnreadThreadOrderInCurrentTeam(state), shallowEqual);\n    const numUnread = counts?.total_unread_threads || 0;\n\n    useEffect(() => {\n        dispatch(suppressRHS);\n        dispatch(selectLhsItem(LhsItemType.Page, LhsPage.Threads));\n        dispatch(clearLastUnreadChannel);\n        loadProfilesForSidebar();\n\n        const penultimateType = LocalStorageStore.getPreviousViewedType(currentUserId, currentTeamId);\n\n        if (penultimateType !== PreviousViewedTypes.THREADS) {\n            LocalStorageStore.setPenultimateViewedType(currentUserId, currentTeamId, penultimateType);\n            LocalStorageStore.setPreviousViewedType(currentUserId, currentTeamId, PreviousViewedTypes.THREADS);\n        }\n\n        // unsuppresses RHS on navigating away (unmount)\n        return () => {\n            dispatch(unsuppressRHS);\n        };\n    }, []);\n\n    useEffect(() => {\n        dispatch(getThreadCounts(currentUserId, currentTeamId));\n    }, [currentTeamId, currentUserId]);\n\n    useEffect(() => {\n        if (!selectedThreadId || selectedThreadId !== threadIdentifier) {\n            dispatch(setSelectedThreadId(currentTeamId, selectedThread?.id));\n        }\n    }, [currentTeamId, selectedThreadId, threadIdentifier]);\n\n    const isEmptyList = isEmpty(threadIds) && isEmpty(unreadThreadIds);\n\n    const [isLoading, setLoading] = useState(isEmptyList);\n\n    const shouldLoadThreads = isEmpty(threadIds);\n    const shouldLoadUnreadThreads = isEmpty(unreadThreadIds);\n\n    useEffect(() => {\n        const promises = [];\n\n        // this is needed to jump start threads fetching\n        if (shouldLoadThreads) {\n            promises.push(dispatch(getThreadsForCurrentTeam({unread: false})));\n        }\n\n        if (filter === ThreadFilter.unread && shouldLoadUnreadThreads) {\n            promises.push(dispatch(getThreadsForCurrentTeam({unread: true})));\n        }\n\n        Promise.all(promises).then(() => {\n            setLoading(false);\n        });\n    }, [filter, threadIds, unreadThreadIds]);\n\n    useEffect(() => {\n        if (!isLoading) {\n            measureAndReport({\n                name: Measure.GlobalThreadsLoad,\n                startMark: Mark.GlobalThreadsLinkClicked,\n                canFail: true,\n            });\n            performance.clearMarks(Mark.GlobalThreadsLinkClicked);\n        }\n    }, [isLoading]);\n\n    useEffect(() => {\n        if (!selectedThread && !selectedPost && !isLoading) {\n            clear();\n        }\n    }, [currentTeamId, selectedThread, selectedPost, isLoading, counts, filter]);\n\n    // cleanup on unmount\n    useEffect(() => {\n        return () => {\n            dispatch(setSelectedThreadId(currentTeamId, ''));\n        };\n    }, []);\n\n    const handleSelectUnread = useCallback(() => {\n        setFilter(ThreadFilter.unread);\n    }, []);\n\n    return (\n        <div\n            id='app-content'\n            className={classNames('GlobalThreads app__content', {'thread-selected': Boolean(selectedThread)})}\n        >\n            {isLoading || isEmptyList ? (\n                <div className='no-results__holder'>\n                    {isLoading ? (\n                        <LoadingScreen/>\n                    ) : (\n                        <NoResultsIndicator\n                            expanded={true}\n                            iconGraphic={ChatIllustration}\n                            title={formatMessage({\n                                id: 'globalThreads.noThreads.title',\n                                defaultMessage: 'No followed threads yet',\n                            })}\n                            subtitle={formatMessage({\n                                id: 'globalThreads.noThreads.subtitle',\n                                defaultMessage: 'Any threads you are mentioned in or have participated in will show here along with any threads you have followed.',\n                            })}\n                        />\n                    )}\n                </div>\n            ) : (\n                <>\n                    <ThreadList\n                        currentFilter={filter}\n                        setFilter={setFilter}\n                        someUnread={Boolean(numUnread)}\n                        selectedThreadId={threadIdentifier}\n                        ids={threadIds}\n                        unreadIds={unreadThreadIds}\n                    />\n                    {selectedThread && selectedPost ? (\n                        <ThreadPane\n                            thread={selectedThread}\n                        >\n                            <ThreadViewer\n                                rootPostId={selectedThread.id}\n                                useRelativeTimestamp={true}\n                                isThreadView={true}\n                            />\n                        </ThreadPane>\n                    ) : (\n                        <NoResultsIndicator\n                            expanded={true}\n                            iconGraphic={ChatIllustration}\n                            title={formatMessage({\n                                id: 'globalThreads.threadPane.unselectedTitle',\n                                defaultMessage: '{numUnread, plural, =0 {Looks like you’re all caught up} other {Catch up on your threads}}',\n                            }, {numUnread})}\n                            subtitle={formatMessage<ReactNode>({\n                                id: 'globalThreads.threadPane.unreadMessageLink',\n                                defaultMessage: 'You have {numUnread, plural, =0 {no unread threads} =1 {<link>{numUnread} thread</link>} other {<link>{numUnread} threads</link>}} {numUnread, plural, =0 {} other {with unread messages}}',\n                            }, {\n                                numUnread,\n                                link: (chunks) => (\n                                    <Link\n                                        key='single'\n                                        to={`${url}/${unreadThreadIds[0]}`}\n                                        onClick={handleSelectUnread}\n                                    >\n                                        {chunks}\n                                    </Link>\n                                ),\n                            })}\n                        />\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default memo(GlobalThreads);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useMemo, useCallback} from 'react';\nimport {useSelector, shallowEqual} from 'react-redux';\nimport {useParams, useHistory} from 'react-router-dom';\n\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserThread} from '@mattermost/types/threads';\n\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\n/**\n * GlobalThreads-specific hook for nav/routing, selection, and common data needed for actions.\n */\nexport function useThreadRouting() {\n    const matchParams = useParams<{team: string; threadIdentifier?: UserThread['id']}>();\n    const params = useMemo(() => matchParams, [matchParams.threadIdentifier, matchParams.team]);\n    const history = useHistory();\n\n    const currentTeamId = useSelector(getCurrentTeamId, shallowEqual);\n    const currentUserId = useSelector(getCurrentUserId, shallowEqual);\n\n    const select = useCallback((threadId?: UserThread['id']) => {\n        return history.push(`/${params.team}/threads${threadId ? '/' + threadId : ''}`);\n    }, [params.team]);\n\n    const clear = useCallback(() => history.replace(`/${params.team}/threads`), [params.team]);\n\n    const goToInChannel = useCallback((threadId?: UserThread['id'], teamName: Team['name'] = params.team) => {\n        return history.push(`/${teamName}/pl/${threadId ?? params.threadIdentifier}`);\n    }, [params.threadIdentifier, params.team]);\n\n    return {\n        params,\n        history,\n        currentTeamId,\n        currentUserId,\n        clear,\n        select,\n        goToInChannel,\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {ChannelsTourTip, TutorialTourName} from 'components/tours';\nimport type {ChannelsTourTipProps} from 'components/tours';\n\nconst CRTTourTip = (props: Omit<ChannelsTourTipProps, 'tourCategory'>) => {\n    return (\n        <ChannelsTourTip\n            {...props}\n            tourCategory={TutorialTourName.CRT_TUTORIAL_STEP}\n        />\n    );\n};\n\nexport default CRTTourTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {Fragment} from 'react';\nimport type {ReactNode, HTMLAttributes} from 'react';\n\nimport './header.scss';\n\ntype Props = {\n    heading: ReactNode;\n    level?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    subtitle?: ReactNode;\n    right?: ReactNode;\n};\n\ntype HeadingTag = keyof Pick<JSX.IntrinsicElements, 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>;\n\nconst Headings: Array<typeof Fragment | HeadingTag> = [Fragment, 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nconst Header = ({\n    level = 0,\n    heading,\n    subtitle,\n    right,\n    ...attrs\n}: Props & HTMLAttributes<HTMLElement>) => {\n    const H = Headings[level];\n    return (\n        <header\n            {...attrs}\n            className={classNames('Header', attrs.className)}\n        >\n            <div className='left'>\n                <H>{heading}</H>\n                {subtitle ? <p>{subtitle}</p> : null}\n            </div>\n            <div className='spacer'/>\n            {right}\n        </header>\n    );\n};\n\nexport default Header;\n"],"names":["translate","x","y","UpShortcut","formatMessage","useIntl","React","ShortcutKey","variant","ShortcutKeyVariant","TutorialTip","id","defaultMessage","DownShortcut","CRTListTutorialTip","isMobileView","useSelector","state","getIsMobileView","title","FormattedMessage","screen","upKey","downKey","punchOutIds","overlayPunchOut","useMeasurePunchouts","CRTTourTip","placement","pulsatingDotPlacement","pulsatingDotTranslate","CRTUnreadTutorialTip","b","value","SearchHintSVG","_ref","width","height","toString","viewBox","fill","xmlns","clipPath","d","opacity","fillOpacity","propTypes","_pt","Badge","styled","withConfig","displayName","props","priority","PostPriority","URGENT","PriorityLabel","className","IMPORTANT","AlertOutlineIcon","size","AlertCircleOutlineIcon","AttachmentCard","fallback","text","author_name","authorName","pretext","concat","stripMarkdown","File","has_preview_image","hasPreviewImage","mini_preview","miniPreview","mime_type","mimeType","extension","enableSVGs","imgSrc","useMemo","getFileThumbnailUrl","fileType","getFileType","FileTypes","SVG","alt","src","getFileUrl","cn","getCompassIconClassName","IMAGE","Card","_ref2","children","fileSizeToString","FileCard","_ref3","file","name","Object","assign","isRequired","memo","connect","ownProps","getFile","getConfig","EnableSVGs","_post$file_ids","post","file_ids","length","isMessageAttachmentArray","attachments","ThreadMenu","threadId","isFollowing","unreadTimestamp","hasUnreads","dispatch","useDispatch","params","team","currentTeamId","currentUserId","goToInChannel","useThreadRouting","isSaved","isPostFlagged","handleReadUnread","useCallback","lastViewedAt","Date","now","manuallyMarkThreadAsUnread","updateThreadRead","markLastPostInThreadAsUnread","MenuWrapper","stopPropagationOnToggle","Menu","ariaLabel","openLeft","ItemAction","extraText","onClick","setThreadFollow","unsavePost","savePost","copyToClipboard","getSiteURL","areEqual","prevProps","nextProps","markdownPreviewOptions","singleline","mentionHighlight","atMentions","ThreadItem","_post$props","_post$metadata","channel","currentRelativeTeamUrl","isSelected","postsInThread","style","thread","isFirstThreadInList","isPostPriorityEnabled","select","getCurrentUserId","showListTutorialTip","getInt","Preferences","CRT_TUTORIAL_STEP","CrtTutorialSteps","LIST_POPOVER","msgDeleted","postAuthor","ensureString","override_username","getMentionKeysForPost","makeGetMentionKeysForPost","mentionsKeys","ref","useRef","useEffect","teammate_id","getMissingProfilesByIds","channel_id","fetchChannel","_ref$current","current","focus","participantIds","ids","participants","flatMap","user_id","reverse","edit_at","create_at","selectHandler","e","key","altKey","Boolean","unread_replies","imageProps","onImageHeightChanged","onImageLoaded","goToInChannelHandler","stopPropagation","handleFormattedTextClick","Utils","newReplies","unread_mentions","newMentions","last_reply_at","lastReplyAt","reply_count","totalReplies","is_following","p","classNames","tabIndex","role","author","onKeyDown","over","Math","min","display_name","Tag","is_urgent","PriorityBadge","Timestamp","THREADING_TIME","WithTooltip","Button","marginTop","DotsVerticalIcon","dir","message","Markdown","Posts","POST_DELETED","options","imagesMetadata","metadata","images","mentionKeys","Attachment","Avatars","userIds","values","compose","getPostsForThread","makeGetPostsForThread","getChannel","makeGetChannel","getDisplayName","makeGetDisplayName","getPost","getCurrentRelativeTeamUrl","getThread","Row","index","data","itemId","selectedThreadId","Constants","THREADS_LOADING_INDICATOR_ITEM_ID","LoadingScreen","THREADS_NO_RESULTS_ITEM_ID","NoResultsIndicator","_objectSpread","padding","background","iconGraphic","subtitle","searchShortcut","SearchShortcut","titleClassName","subtitleClassName","layout","NoResultsLayout","Horizontal","willChange","VirtualizedThreadList","loadMoreItems","total","isLoading","addNoMoreResultsItem","infiniteLoaderRef","startIndexRef","stopIndexRef","indexOf","_infiniteLoaderRef$cu","_listRef","scrollToItem","itemKey","isItemLoaded","AutoSizer","InfiniteLoader","itemCount","minimumBatchSize","ThreadsConstants","THREADS_PAGE_SIZE","onItemsRendered","FixedSizeList","_ref4","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","itemData","itemSize","join","MarkAllThreadsAsReadModal","onConfirm","onCancel","GenericModal","compassDesign","modalHeaderText","confirmButtonText","cancelButtonText","onExited","handleCancel","handleConfirm","ThreadFilter","ThreadList","_useSelector","currentFilter","none","someUnread","setFilter","unreadIds","unread","clear","tipStep","showUnreadTutorialTip","UNREAD_POPOVER","total_unread_threads","totalUnread","getThreadCountsInCurrentTeam","setLoading","hasLoaded","setHasLoaded","handleKeyDown","_target$tagName","target","tagName","toLowerCase","metaKey","shiftKey","ctrlKey","Keyboard","KeyCodes","DOWN","UP","noModalsAreOpen","document","getElementsByClassName","A11yClassNames","MODAL","noPopupsDropdownsAreOpen","POPUP","threadIdToSelect","selectedThreadIndex","preventDefault","addEventListener","removeEventListener","handleSetFilter","filter","trackEvent","handleLoadMoreItems","async","before","startIndex","getThreadsForCurrentTeam","handleAllMarkedRead","markAllThreadsInTeamRead","handleOpenMarkAllAsReadModal","handleCloseMarkAllAsReadModal","closeModal","ModalIdentifiers","MARK_ALL_THREADS_AS_READ","modalProp","openModal","modalId","dialogType","dialogProps","tabListProps","tabProps","activeTab","setActiveTab","tabs","delta","RIGHT","LEFT","findIndex","tab","mod","a11yFocus","getElementById","map","panelId","useTabs","Header","heading","isActive","hasDot","right","PlaylistCheckIcon","isEmpty","expanded","ThreadPane","channelId","followHandler","allowTextOverflow","FollowButton","disabled","GlobalThreads","url","threadIdentifier","useRouteMatch","useGlobalState","counts","selectedThread","getSelectedThreadIdInCurrentTeam","selectedPost","threadIds","getThreadOrderInCurrentTeam","shallowEqual","unreadThreadIds","getUnreadThreadOrderInCurrentTeam","numUnread","suppressRHS","selectLhsItem","LhsItemType","Page","LhsPage","Threads","clearLastUnreadChannel","loadProfilesForSidebar","penultimateType","LocalStorageStore","getPreviousViewedType","PreviousViewedTypes","THREADS","setPenultimateViewedType","setPreviousViewedType","unsuppressRHS","getThreadCounts","setSelectedThreadId","isEmptyList","useState","shouldLoadThreads","shouldLoadUnreadThreads","promises","push","Promise","all","then","measureAndReport","Measure","GlobalThreadsLoad","startMark","Mark","GlobalThreadsLinkClicked","canFail","performance","clearMarks","handleSelectUnread","ChatIllustration","ThreadViewer","rootPostId","useRelativeTimestamp","isThreadView","link","chunks","Link","to","matchParams","useParams","history","useHistory","getCurrentTeamId","replace","teamName","arguments","undefined","ChannelsTourTip","tourCategory","TutorialTourName","Headings","Fragment","level","attrs","_objectWithoutProperties","_excluded","H"],"sourceRoot":""}