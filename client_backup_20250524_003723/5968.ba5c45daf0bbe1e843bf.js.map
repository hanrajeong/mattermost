{"version":3,"file":"5968.ba5c45daf0bbe1e843bf.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/common/back_button.tsx","webpack://mattermost-webapp/./src/components/password_reset_send_link/password_reset_send_link.tsx","webpack://mattermost-webapp/./src/components/password_reset_send_link/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div className={classNames('signup-header', className)}>\n            <Link\n                data-testid='back_button'\n                onClick={onClick}\n                to={url}\n            >\n                <span\n                    id='back_button_icon'\n                    className='fa fa-1x fa-angle-left'\n                    title={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n                />\n                <FormattedMessage\n                    id='web.header.back'\n                    defaultMessage='Back'\n                />\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessage, FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport BackButton from 'components/common/back_button';\nimport Input from 'components/widgets/inputs/input/input';\n\nexport interface Props {\n    intl: IntlShape;\n    siteName?: string;\n    actions: {\n        sendPasswordResetEmail: (email: string) => Promise<ActionResult>;\n    };\n}\n\ninterface State {\n    error: React.ReactNode;\n    updateText: React.ReactNode;\n}\n\nexport class PasswordResetSendLink extends React.PureComponent<Props, State> {\n    state = {\n        error: null,\n        updateText: null,\n    };\n    resetForm = React.createRef<HTMLFormElement>();\n    emailInput = React.createRef<HTMLInputElement>();\n\n    componentDidMount() {\n        const {intl, siteName} = this.props;\n        document.title = intl.formatMessage(\n            {\n                id: 'password_form.pageTitle',\n                defaultMessage: 'Password Reset | {siteName}',\n            },\n            {siteName: siteName || 'Mattermost'},\n        );\n    }\n\n    handleSendLink = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const email = this.emailInput.current!.value.trim().toLowerCase();\n        if (!email || !isEmail(email)) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_send.error'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        // End of error checking clear error\n        this.setState({error: null});\n\n        const {data, error} = await this.props.actions.sendPasswordResetEmail(email);\n        if (data) {\n            this.setState({\n                error: null,\n                updateText: (\n                    <div\n                        id='passwordResetEmailSent'\n                        className='reset-form alert alert-success'\n                    >\n                        <FormattedMessage\n                            id='password_send.link'\n                            defaultMessage='If the account exists, a password reset email will be sent to:'\n                        />\n                        <div>\n                            <b>{email}</b>\n                        </div>\n                        <br/>\n                        <FormattedMessage\n                            id='password_send.checkInbox'\n                            defaultMessage='Please check your inbox.'\n                        />\n                    </div>\n                ),\n            });\n            if (this.resetForm.current) {\n                this.resetForm.current.hidden = true;\n            }\n        } else if (error) {\n            this.setState({\n                error: error.message,\n                updateText: null,\n            });\n        }\n    };\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>{this.state.error}</label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <FormattedMessage\n                            id='password_send.title'\n                            tagName='h1'\n                            defaultMessage='Password Reset'\n                        />\n                        {this.state.updateText}\n                        <form\n                            onSubmit={this.handleSendLink}\n                            ref={this.resetForm}\n                        >\n                            <p>\n                                <FormattedMessage\n                                    id='password_send.description'\n                                    defaultMessage='To reset your password, enter the email address you used to sign up'\n                                />\n                            </p>\n                            <div className={formClass}>\n                                <Input\n                                    id='passwordResetEmailInput'\n                                    type='email'\n                                    name='email'\n                                    label={defineMessage({\n                                        id: 'password_send.email',\n                                        defaultMessage: 'Email',\n                                    })}\n                                    placeholder={defineMessage({\n                                        id: 'password_send.email.placeholder',\n                                        defaultMessage: 'Enter the email address you used to sign up',\n                                    })}\n                                    ref={this.emailInput}\n                                    spellCheck='false'\n                                    autoFocus={true}\n                                />\n                            </div>\n                            {error}\n                            <button\n                                id='passwordResetButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='password_send.reset'\n                                    defaultMessage='Reset my password'\n                                />\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(PasswordResetSendLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {sendPasswordResetEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport PasswordResetSendLink from './password_reset_send_link';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {siteName: getConfig(state).SiteName};\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        sendPasswordResetEmail,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetSendLink);\n"],"names":["BackButton","_ref","url","className","onClick","formatMessage","useIntl","React","classNames","Link","to","id","title","defaultMessage","FormattedMessage","propTypes","_pt","defaultProps","PasswordResetSendLink","constructor","arguments","_defineProperty","error","updateText","async","e","preventDefault","email","this","emailInput","current","value","trim","toLowerCase","isEmail","setState","data","props","actions","sendPasswordResetEmail","resetForm","hidden","message","componentDidMount","intl","siteName","document","render","state","formClass","tagName","onSubmit","handleSendLink","ref","Input","type","name","label","defineMessage","placeholder","spellCheck","autoFocus","isRequired","injectIntl","connect","getConfig","SiteName","dispatch","bindActionCreators"],"sourceRoot":""}